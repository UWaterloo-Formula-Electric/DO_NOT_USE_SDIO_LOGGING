
SD_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c26c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000638  0800c3fc  0800c3fc  0001c3fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ca34  0800ca34  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  0800ca34  0800ca34  0001ca34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ca3c  0800ca3c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ca3c  0800ca3c  0001ca3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ca40  0800ca40  0001ca40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800ca44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020060  2**0
                  CONTENTS
 10 .bss          0001aedc  20000060  20000060  00020060  2**2
                  ALLOC
 11 ._user_heap_stack 00001e04  2001af3c  2001af3c  00020060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001b31f  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004407  00000000  00000000  0003b3f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000015a0  00000000  00000000  0003f800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000109a  00000000  00000000  00040da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002601a  00000000  00000000  00041e3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001c918  00000000  00000000  00067e54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d79f6  00000000  00000000  0008476c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005d84  00000000  00000000  0015c164  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  00161ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c3e4 	.word	0x0800c3e4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	0800c3e4 	.word	0x0800c3e4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <Send_Uart>:
DWORD fre_clust;
uint32_t total, free_space;


void Send_Uart (char *string)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
 8000584:	6878      	ldr	r0, [r7, #4]
 8000586:	f7ff fe23 	bl	80001d0 <strlen>
 800058a:	4603      	mov	r3, r0
 800058c:	b29a      	uxth	r2, r3
 800058e:	f04f 33ff 	mov.w	r3, #4294967295
 8000592:	6879      	ldr	r1, [r7, #4]
 8000594:	4803      	ldr	r0, [pc, #12]	; (80005a4 <Send_Uart+0x28>)
 8000596:	f004 fc47 	bl	8004e28 <HAL_UART_Transmit>
}
 800059a:	bf00      	nop
 800059c:	3708      	adds	r7, #8
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	20002510 	.word	0x20002510

080005a8 <Mount_SD>:



void Mount_SD (const TCHAR* path)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b09c      	sub	sp, #112	; 0x70
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 80005b0:	2201      	movs	r2, #1
 80005b2:	6879      	ldr	r1, [r7, #4]
 80005b4:	4810      	ldr	r0, [pc, #64]	; (80005f8 <Mount_SD+0x50>)
 80005b6:	f007 fe0f 	bl	80081d8 <f_mount>
 80005ba:	4603      	mov	r3, r0
 80005bc:	461a      	mov	r2, r3
 80005be:	4b0f      	ldr	r3, [pc, #60]	; (80005fc <Mount_SD+0x54>)
 80005c0:	701a      	strb	r2, [r3, #0]

	if (fresult != FR_OK) {
 80005c2:	4b0e      	ldr	r3, [pc, #56]	; (80005fc <Mount_SD+0x54>)
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d00e      	beq.n	80005e8 <Mount_SD+0x40>
//		Send_Uart ("ERROR!!! in mounting SD CARD...\n\n");
		char buf[100];
		sprintf (buf, "Mounting Error: %d\n\n", (int) fresult);
 80005ca:	4b0c      	ldr	r3, [pc, #48]	; (80005fc <Mount_SD+0x54>)
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	461a      	mov	r2, r3
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	490a      	ldr	r1, [pc, #40]	; (8000600 <Mount_SD+0x58>)
 80005d6:	4618      	mov	r0, r3
 80005d8:	f00b fab6 	bl	800bb48 <siprintf>
		Send_Uart (buf);
 80005dc:	f107 030c 	add.w	r3, r7, #12
 80005e0:	4618      	mov	r0, r3
 80005e2:	f7ff ffcb 	bl	800057c <Send_Uart>

	} else {
		Send_Uart("SD CARD mounted successfully...\n");
	}
}
 80005e6:	e002      	b.n	80005ee <Mount_SD+0x46>
		Send_Uart("SD CARD mounted successfully...\n");
 80005e8:	4806      	ldr	r0, [pc, #24]	; (8000604 <Mount_SD+0x5c>)
 80005ea:	f7ff ffc7 	bl	800057c <Send_Uart>
}
 80005ee:	bf00      	nop
 80005f0:	3770      	adds	r7, #112	; 0x70
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	2000007c 	.word	0x2000007c
 80005fc:	200020fc 	.word	0x200020fc
 8000600:	0800c3fc 	.word	0x0800c3fc
 8000604:	0800c414 	.word	0x0800c414

08000608 <Create_File>:
	}
}

// modified: changed return value if file exists
FRESULT Create_File (char *name)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b09c      	sub	sp, #112	; 0x70
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &fno);
 8000610:	492a      	ldr	r1, [pc, #168]	; (80006bc <Create_File+0xb4>)
 8000612:	6878      	ldr	r0, [r7, #4]
 8000614:	f008 fa95 	bl	8008b42 <f_stat>
 8000618:	4603      	mov	r3, r0
 800061a:	461a      	mov	r2, r3
 800061c:	4b28      	ldr	r3, [pc, #160]	; (80006c0 <Create_File+0xb8>)
 800061e:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 8000620:	4b27      	ldr	r3, [pc, #156]	; (80006c0 <Create_File+0xb8>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d101      	bne.n	800062c <Create_File+0x24>
	{
		return FR_INVALID_NAME; //modified from 0 to indicate an error instead
 8000628:	2306      	movs	r3, #6
 800062a:	e043      	b.n	80006b4 <Create_File+0xac>
	}
	else
	{
//		fresult = f_open(&fil, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS|FA_WRITE);
 800062c:	220a      	movs	r2, #10
 800062e:	6879      	ldr	r1, [r7, #4]
 8000630:	4824      	ldr	r0, [pc, #144]	; (80006c4 <Create_File+0xbc>)
 8000632:	f007 fe35 	bl	80082a0 <f_open>
 8000636:	4603      	mov	r3, r0
 8000638:	461a      	mov	r2, r3
 800063a:	4b21      	ldr	r3, [pc, #132]	; (80006c0 <Create_File+0xb8>)
 800063c:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 800063e:	4b20      	ldr	r3, [pc, #128]	; (80006c0 <Create_File+0xb8>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d002      	beq.n	800064c <Create_File+0x44>
		{
			return fresult;
 8000646:	4b1e      	ldr	r3, [pc, #120]	; (80006c0 <Create_File+0xb8>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	e033      	b.n	80006b4 <Create_File+0xac>
		}
		else
		{
			char buf[100];
			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	687a      	ldr	r2, [r7, #4]
 8000652:	491d      	ldr	r1, [pc, #116]	; (80006c8 <Create_File+0xc0>)
 8000654:	4618      	mov	r0, r3
 8000656:	f00b fa77 	bl	800bb48 <siprintf>
			Send_Uart(buf);
 800065a:	f107 030c 	add.w	r3, r7, #12
 800065e:	4618      	mov	r0, r3
 8000660:	f7ff ff8c 	bl	800057c <Send_Uart>

		}

		fresult = f_sync(&fil);
 8000664:	4817      	ldr	r0, [pc, #92]	; (80006c4 <Create_File+0xbc>)
 8000666:	f008 f9b3 	bl	80089d0 <f_sync>
 800066a:	4603      	mov	r3, r0
 800066c:	461a      	mov	r2, r3
 800066e:	4b14      	ldr	r3, [pc, #80]	; (80006c0 <Create_File+0xb8>)
 8000670:	701a      	strb	r2, [r3, #0]
//		fresult = f_close(&fil);
		if (fresult != FR_OK)
 8000672:	4b13      	ldr	r3, [pc, #76]	; (80006c0 <Create_File+0xb8>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d00e      	beq.n	8000698 <Create_File+0x90>
		{
			char buf[100];
			sprintf (buf, "ERROR No. %d in closing file *%s*\n\n", fresult, name);
 800067a:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <Create_File+0xb8>)
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	461a      	mov	r2, r3
 8000680:	f107 000c 	add.w	r0, r7, #12
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	4911      	ldr	r1, [pc, #68]	; (80006cc <Create_File+0xc4>)
 8000688:	f00b fa5e 	bl	800bb48 <siprintf>
			Send_Uart(buf);
 800068c:	f107 030c 	add.w	r3, r7, #12
 8000690:	4618      	mov	r0, r3
 8000692:	f7ff ff73 	bl	800057c <Send_Uart>
 8000696:	e00b      	b.n	80006b0 <Create_File+0xa8>
		}
		else
		{
			char buf[100];
			sprintf (buf, "File *%s* CLOSED successfully\n", name);
 8000698:	f107 030c 	add.w	r3, r7, #12
 800069c:	687a      	ldr	r2, [r7, #4]
 800069e:	490c      	ldr	r1, [pc, #48]	; (80006d0 <Create_File+0xc8>)
 80006a0:	4618      	mov	r0, r3
 80006a2:	f00b fa51 	bl	800bb48 <siprintf>
			Send_Uart(buf);
 80006a6:	f107 030c 	add.w	r3, r7, #12
 80006aa:	4618      	mov	r0, r3
 80006ac:	f7ff ff66 	bl	800057c <Send_Uart>
		}
	}
    return fresult;
 80006b0:	4b03      	ldr	r3, [pc, #12]	; (80006c0 <Create_File+0xb8>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	3770      	adds	r7, #112	; 0x70
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	200020e4 	.word	0x200020e4
 80006c0:	200020fc 	.word	0x200020fc
 80006c4:	200010b4 	.word	0x200010b4
 80006c8:	0800c628 	.word	0x0800c628
 80006cc:	0800c668 	.word	0x0800c668
 80006d0:	0800c608 	.word	0x0800c608

080006d4 <Update_File>:


// this function was updated: removed logging to avoid console spam
FRESULT Update_File (char *name, char *data)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
 80006dc:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 80006de:	491c      	ldr	r1, [pc, #112]	; (8000750 <Update_File+0x7c>)
 80006e0:	6878      	ldr	r0, [r7, #4]
 80006e2:	f008 fa2e 	bl	8008b42 <f_stat>
 80006e6:	4603      	mov	r3, r0
 80006e8:	461a      	mov	r2, r3
 80006ea:	4b1a      	ldr	r3, [pc, #104]	; (8000754 <Update_File+0x80>)
 80006ec:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80006ee:	4b19      	ldr	r3, [pc, #100]	; (8000754 <Update_File+0x80>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d002      	beq.n	80006fc <Update_File+0x28>
	{
//		char buf[100];
//		sprintf (buf, "ERROR!!! *%s* does not exists\n\n", name);
//		Send_Uart (buf);
//		free(buf);
	    return fresult;
 80006f6:	4b17      	ldr	r3, [pc, #92]	; (8000754 <Update_File+0x80>)
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	e025      	b.n	8000748 <Update_File+0x74>
	}

	else
	{
		 /* Create a file with read write access and open it */
	    fresult = f_open(&fil, name, FA_OPEN_APPEND | FA_WRITE);
 80006fc:	2232      	movs	r2, #50	; 0x32
 80006fe:	6879      	ldr	r1, [r7, #4]
 8000700:	4815      	ldr	r0, [pc, #84]	; (8000758 <Update_File+0x84>)
 8000702:	f007 fdcd 	bl	80082a0 <f_open>
 8000706:	4603      	mov	r3, r0
 8000708:	461a      	mov	r2, r3
 800070a:	4b12      	ldr	r3, [pc, #72]	; (8000754 <Update_File+0x80>)
 800070c:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 800070e:	4b11      	ldr	r3, [pc, #68]	; (8000754 <Update_File+0x80>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d002      	beq.n	800071c <Update_File+0x48>
	    {
//	    	char buf[100];
//	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
//	    	Send_Uart(buf);
//	        free(buf);
	        return fresult;
 8000716:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <Update_File+0x80>)
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	e015      	b.n	8000748 <Update_File+0x74>
	    }

	    /* Writing text */
	    fresult = f_write(&fil, data, strlen (data), &bw);
 800071c:	6838      	ldr	r0, [r7, #0]
 800071e:	f7ff fd57 	bl	80001d0 <strlen>
 8000722:	4602      	mov	r2, r0
 8000724:	4b0d      	ldr	r3, [pc, #52]	; (800075c <Update_File+0x88>)
 8000726:	6839      	ldr	r1, [r7, #0]
 8000728:	480b      	ldr	r0, [pc, #44]	; (8000758 <Update_File+0x84>)
 800072a:	f007 ff8d 	bl	8008648 <f_write>
 800072e:	4603      	mov	r3, r0
 8000730:	461a      	mov	r2, r3
 8000732:	4b08      	ldr	r3, [pc, #32]	; (8000754 <Update_File+0x80>)
 8000734:	701a      	strb	r2, [r3, #0]
//	    	Send_Uart(buf);
//	    	free(buf);
	    }

	    /* Close file */
	    fresult = f_close(&fil);
 8000736:	4808      	ldr	r0, [pc, #32]	; (8000758 <Update_File+0x84>)
 8000738:	f008 f9d4 	bl	8008ae4 <f_close>
 800073c:	4603      	mov	r3, r0
 800073e:	461a      	mov	r2, r3
 8000740:	4b04      	ldr	r3, [pc, #16]	; (8000754 <Update_File+0x80>)
 8000742:	701a      	strb	r2, [r3, #0]
//	    	sprintf (buf, "File *%s* CLOSED successfully\n", name);
//	    	Send_Uart(buf);
//	    	free(buf);
	     }
	}
    return fresult;
 8000744:	4b03      	ldr	r3, [pc, #12]	; (8000754 <Update_File+0x80>)
 8000746:	781b      	ldrb	r3, [r3, #0]
}
 8000748:	4618      	mov	r0, r3
 800074a:	3708      	adds	r7, #8
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	200020e4 	.word	0x200020e4
 8000754:	200020fc 	.word	0x200020fc
 8000758:	200010b4 	.word	0x200010b4
 800075c:	20002100 	.word	0x20002100

08000760 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000760:	b480      	push	{r7}
 8000762:	b085      	sub	sp, #20
 8000764:	af00      	add	r7, sp, #0
 8000766:	60f8      	str	r0, [r7, #12]
 8000768:	60b9      	str	r1, [r7, #8]
 800076a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	4a07      	ldr	r2, [pc, #28]	; (800078c <vApplicationGetIdleTaskMemory+0x2c>)
 8000770:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000772:	68bb      	ldr	r3, [r7, #8]
 8000774:	4a06      	ldr	r2, [pc, #24]	; (8000790 <vApplicationGetIdleTaskMemory+0x30>)
 8000776:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	2280      	movs	r2, #128	; 0x80
 800077c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800077e:	bf00      	nop
 8000780:	3714      	adds	r7, #20
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	20002104 	.word	0x20002104
 8000790:	200021a4 	.word	0x200021a4

08000794 <configCANFilters>:
} CanMsg;
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void configCANFilters(CAN_HandleTypeDef* canHandle){	//Without filtered any CAN msgs
 8000794:	b580      	push	{r7, lr}
 8000796:	b08c      	sub	sp, #48	; 0x30
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]

    CAN_FilterTypeDef sFilterConfig;

    // Configure the filter to accept all messages
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800079c:	2300      	movs	r3, #0
 800079e:	623b      	str	r3, [r7, #32]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80007a0:	2301      	movs	r3, #1
 80007a2:	627b      	str	r3, [r7, #36]	; 0x24
    sFilterConfig.FilterIdHigh = 0x0000;
 80007a4:	2300      	movs	r3, #0
 80007a6:	60bb      	str	r3, [r7, #8]
    sFilterConfig.FilterIdLow = 0x0000;
 80007a8:	2300      	movs	r3, #0
 80007aa:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterMaskIdHigh = 0x0000;
 80007ac:	2300      	movs	r3, #0
 80007ae:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterMaskIdLow = 0x0000;
 80007b0:	2300      	movs	r3, #0
 80007b2:	617b      	str	r3, [r7, #20]
    sFilterConfig.FilterFIFOAssignment = 0;
 80007b4:	2300      	movs	r3, #0
 80007b6:	61bb      	str	r3, [r7, #24]
    sFilterConfig.FilterActivation = ENABLE;
 80007b8:	2301      	movs	r3, #1
 80007ba:	62bb      	str	r3, [r7, #40]	; 0x28
    sFilterConfig.FilterBank = 0;  // Use filter bank 0
 80007bc:	2300      	movs	r3, #0
 80007be:	61fb      	str	r3, [r7, #28]

    // From the reference manual, it seems that setting SlaveStartFilterBank to 0 means all filters are used for the enabled CAN peripheral
    // TODO: Verify this is the correct config
    sFilterConfig.SlaveStartFilterBank = 0;
 80007c0:	2300      	movs	r3, #0
 80007c2:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (HAL_CAN_ConfigFilter(canHandle, &sFilterConfig) != HAL_OK)
 80007c4:	f107 0308 	add.w	r3, r7, #8
 80007c8:	4619      	mov	r1, r3
 80007ca:	6878      	ldr	r0, [r7, #4]
 80007cc:	f001 f846 	bl	800185c <HAL_CAN_ConfigFilter>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <configCANFilters+0x46>
    {
        Error_Handler();
 80007d6:	f000 fc01 	bl	8000fdc <Error_Handler>
    }
}
 80007da:	bf00      	nop
 80007dc:	3730      	adds	r7, #48	; 0x30
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
	...

080007e4 <HAL_CAN_RxFifo0MsgPendingCallback>:

QueueHandle_t CanMsgQueue;
CanMsg fifoTmp;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80007e4:	b5b0      	push	{r4, r5, r7, lr}
 80007e6:	b096      	sub	sp, #88	; 0x58
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef   RxHeader;
    uint8_t               RxData[8];

    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 80007ec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80007f0:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80007f4:	2100      	movs	r1, #0
 80007f6:	6878      	ldr	r0, [r7, #4]
 80007f8:	f001 f954 	bl	8001aa4 <HAL_CAN_GetRxMessage>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d12c      	bne.n	800085c <HAL_CAN_RxFifo0MsgPendingCallback+0x78>
    {
    	fifo0++;
 8000802:	4b22      	ldr	r3, [pc, #136]	; (800088c <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	3301      	adds	r3, #1
 8000808:	4a20      	ldr	r2, [pc, #128]	; (800088c <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 800080a:	6013      	str	r3, [r2, #0]
    	fifo1++;
 800080c:	4b20      	ldr	r3, [pc, #128]	; (8000890 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	3301      	adds	r3, #1
 8000812:	4a1f      	ldr	r2, [pc, #124]	; (8000890 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 8000814:	6013      	str	r3, [r2, #0]
		fifoTmp.id = RxHeader.ExtId;
 8000816:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000818:	4a1e      	ldr	r2, [pc, #120]	; (8000894 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 800081a:	6013      	str	r3, [r2, #0]
		memcpy(fifoTmp.data, RxData, 8*sizeof(uint8_t));
 800081c:	4b1d      	ldr	r3, [pc, #116]	; (8000894 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 800081e:	3304      	adds	r3, #4
 8000820:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000824:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000828:	e883 0003 	stmia.w	r3, {r0, r1}
		if (xQueueSendToBackFromISR(CanMsgQueue, &fifoTmp, NULL) != pdTRUE)
 800082c:	4b1a      	ldr	r3, [pc, #104]	; (8000898 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 800082e:	6818      	ldr	r0, [r3, #0]
 8000830:	2300      	movs	r3, #0
 8000832:	2200      	movs	r2, #0
 8000834:	4917      	ldr	r1, [pc, #92]	; (8000894 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8000836:	f008 ff97 	bl	8009768 <xQueueGenericSendFromISR>
 800083a:	4603      	mov	r3, r0
 800083c:	2b01      	cmp	r3, #1
 800083e:	d020      	beq.n	8000882 <HAL_CAN_RxFifo0MsgPendingCallback+0x9e>
		{
			if (failed == 0)
 8000840:	4b16      	ldr	r3, [pc, #88]	; (800089c <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d11c      	bne.n	8000882 <HAL_CAN_RxFifo0MsgPendingCallback+0x9e>
			{
				failed = xTaskGetTickCountFromISR();
 8000848:	f009 ff66 	bl	800a718 <xTaskGetTickCountFromISR>
 800084c:	4603      	mov	r3, r0
 800084e:	4a13      	ldr	r2, [pc, #76]	; (800089c <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 8000850:	6013      	str	r3, [r2, #0]
				failedNum =fifo0;
 8000852:	4b0e      	ldr	r3, [pc, #56]	; (800088c <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a12      	ldr	r2, [pc, #72]	; (80008a0 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 8000858:	6013      	str	r3, [r2, #0]
    // if (RxHeader.IDE == CAN_ID_EXT){  // Only parse data if it is an extended CAN frame
    //         // if (parseCANData(RxHeader.ExtId, RxData) != HAL_OK) {
    //         //     /*ERROR_PRINT_ISR("Failed to parse CAN message id 0x%lX", RxHeader.ExtId);*/
    //         // }
    // }
}
 800085a:	e012      	b.n	8000882 <HAL_CAN_RxFifo0MsgPendingCallback+0x9e>
        uint8_t msg[] = "Failed to receive CAN message from FIFO0\n";
 800085c:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 800085e:	f107 0408 	add.w	r4, r7, #8
 8000862:	461d      	mov	r5, r3
 8000864:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000866:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000868:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800086a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800086c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000870:	c403      	stmia	r4!, {r0, r1}
 8000872:	8022      	strh	r2, [r4, #0]
        HAL_UART_Transmit(&huart1, msg, sizeof(msg), 100);
 8000874:	f107 0108 	add.w	r1, r7, #8
 8000878:	2364      	movs	r3, #100	; 0x64
 800087a:	222a      	movs	r2, #42	; 0x2a
 800087c:	480a      	ldr	r0, [pc, #40]	; (80008a8 <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 800087e:	f004 fad3 	bl	8004e28 <HAL_UART_Transmit>
}
 8000882:	bf00      	nop
 8000884:	3758      	adds	r7, #88	; 0x58
 8000886:	46bd      	mov	sp, r7
 8000888:	bdb0      	pop	{r4, r5, r7, pc}
 800088a:	bf00      	nop
 800088c:	20002558 	.word	0x20002558
 8000890:	2000255c 	.word	0x2000255c
 8000894:	2000256c 	.word	0x2000256c
 8000898:	20002568 	.word	0x20002568
 800089c:	20002560 	.word	0x20002560
 80008a0:	20002564 	.word	0x20002564
 80008a4:	0800c77c 	.word	0x0800c77c
 80008a8:	20002510 	.word	0x20002510

080008ac <HAL_CAN_RxFifo1MsgPendingCallback>:

//Currently not used (we use FIFO0)
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80008ac:	b5b0      	push	{r4, r5, r7, lr}
 80008ae:	b096      	sub	sp, #88	; 0x58
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
	fifo1++;
 80008b4:	4b13      	ldr	r3, [pc, #76]	; (8000904 <HAL_CAN_RxFifo1MsgPendingCallback+0x58>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	3301      	adds	r3, #1
 80008ba:	4a12      	ldr	r2, [pc, #72]	; (8000904 <HAL_CAN_RxFifo1MsgPendingCallback+0x58>)
 80008bc:	6013      	str	r3, [r2, #0]
    CAN_RxHeaderTypeDef   RxHeader;
    uint8_t               RxData[8];

    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData) != HAL_OK)
 80008be:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80008c2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80008c6:	2101      	movs	r1, #1
 80008c8:	6878      	ldr	r0, [r7, #4]
 80008ca:	f001 f8eb 	bl	8001aa4 <HAL_CAN_GetRxMessage>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d012      	beq.n	80008fa <HAL_CAN_RxFifo1MsgPendingCallback+0x4e>
    {
        uint8_t msg[] = "Failed to receive CAN message from FIFO1\n";
 80008d4:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <HAL_CAN_RxFifo1MsgPendingCallback+0x5c>)
 80008d6:	f107 0408 	add.w	r4, r7, #8
 80008da:	461d      	mov	r5, r3
 80008dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008e8:	c403      	stmia	r4!, {r0, r1}
 80008ea:	8022      	strh	r2, [r4, #0]
        HAL_UART_Transmit(&huart1, msg, sizeof(msg), 100);
 80008ec:	f107 0108 	add.w	r1, r7, #8
 80008f0:	2364      	movs	r3, #100	; 0x64
 80008f2:	222a      	movs	r2, #42	; 0x2a
 80008f4:	4805      	ldr	r0, [pc, #20]	; (800090c <HAL_CAN_RxFifo1MsgPendingCallback+0x60>)
 80008f6:	f004 fa97 	bl	8004e28 <HAL_UART_Transmit>
    // if (RxHeader.IDE == CAN_ID_EXT){  // Only parse data if it is an extended CAN frame
    //         if (parseCANData(RxHeader.ExtId, RxData) != HAL_OK) {
    //             /*ERROR_PRINT_ISR("Failed to parse CAN message id 0x%lX", RxHeader.ExtId);*/
    //         }
    // }
}
 80008fa:	bf00      	nop
 80008fc:	3758      	adds	r7, #88	; 0x58
 80008fe:	46bd      	mov	sp, r7
 8000900:	bdb0      	pop	{r4, r5, r7, pc}
 8000902:	bf00      	nop
 8000904:	2000255c 	.word	0x2000255c
 8000908:	0800c7a8 	.word	0x0800c7a8
 800090c:	20002510 	.word	0x20002510

08000910 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000910:	b5b0      	push	{r4, r5, r7, lr}
 8000912:	b088      	sub	sp, #32
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000916:	f000 fe0f 	bl	8001538 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800091a:	f000 f82f 	bl	800097c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800091e:	f000 f94f 	bl	8000bc0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000922:	f000 f925 	bl	8000b70 <MX_DMA_Init>
  MX_CAN1_Init();
 8000926:	f000 f893 	bl	8000a50 <MX_CAN1_Init>
  MX_SDIO_SD_Init();
 800092a:	f000 f8c7 	bl	8000abc <MX_SDIO_SD_Init>
  MX_USART1_UART_Init();
 800092e:	f000 f8f5 	bl	8000b1c <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8000932:	f005 fb61 	bl	8005ff8 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

//   CanMsgQueue = xQueueCreate(2500, sizeof(CanMsg)); // Good to 60%
  CanMsgQueue = xQueueCreate(7000, sizeof(CanMsg)); // Good to 72%
 8000936:	2200      	movs	r2, #0
 8000938:	210c      	movs	r1, #12
 800093a:	f641 3058 	movw	r0, #7000	; 0x1b58
 800093e:	f008 fdbb 	bl	80094b8 <xQueueGenericCreate>
 8000942:	4603      	mov	r3, r0
 8000944:	4a0a      	ldr	r2, [pc, #40]	; (8000970 <main+0x60>)
 8000946:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityRealtime, 0, 1024);
 8000948:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <main+0x64>)
 800094a:	1d3c      	adds	r4, r7, #4
 800094c:	461d      	mov	r5, r3
 800094e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000950:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000952:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000956:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800095a:	1d3b      	adds	r3, r7, #4
 800095c:	2100      	movs	r1, #0
 800095e:	4618      	mov	r0, r3
 8000960:	f008 fa24 	bl	8008dac <osThreadCreate>
 8000964:	4603      	mov	r3, r0
 8000966:	4a04      	ldr	r2, [pc, #16]	; (8000978 <main+0x68>)
 8000968:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800096a:	f008 f9fc 	bl	8008d66 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 800096e:	e7fe      	b.n	800096e <main+0x5e>
 8000970:	20002568 	.word	0x20002568
 8000974:	0800c7e0 	.word	0x0800c7e0
 8000978:	20002554 	.word	0x20002554

0800097c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b094      	sub	sp, #80	; 0x50
 8000980:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000982:	f107 0320 	add.w	r3, r7, #32
 8000986:	2230      	movs	r2, #48	; 0x30
 8000988:	2100      	movs	r1, #0
 800098a:	4618      	mov	r0, r3
 800098c:	f00b f8fc 	bl	800bb88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000990:	f107 030c 	add.w	r3, r7, #12
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	60da      	str	r2, [r3, #12]
 800099e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a0:	2300      	movs	r3, #0
 80009a2:	60bb      	str	r3, [r7, #8]
 80009a4:	4b28      	ldr	r3, [pc, #160]	; (8000a48 <SystemClock_Config+0xcc>)
 80009a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a8:	4a27      	ldr	r2, [pc, #156]	; (8000a48 <SystemClock_Config+0xcc>)
 80009aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ae:	6413      	str	r3, [r2, #64]	; 0x40
 80009b0:	4b25      	ldr	r3, [pc, #148]	; (8000a48 <SystemClock_Config+0xcc>)
 80009b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009b8:	60bb      	str	r3, [r7, #8]
 80009ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009bc:	2300      	movs	r3, #0
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	4b22      	ldr	r3, [pc, #136]	; (8000a4c <SystemClock_Config+0xd0>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a21      	ldr	r2, [pc, #132]	; (8000a4c <SystemClock_Config+0xd0>)
 80009c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ca:	6013      	str	r3, [r2, #0]
 80009cc:	4b1f      	ldr	r3, [pc, #124]	; (8000a4c <SystemClock_Config+0xd0>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009d4:	607b      	str	r3, [r7, #4]
 80009d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009d8:	2301      	movs	r3, #1
 80009da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009e2:	2302      	movs	r3, #2
 80009e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009ec:	2304      	movs	r3, #4
 80009ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 80009f0:	2350      	movs	r3, #80	; 0x50
 80009f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009f4:	2302      	movs	r3, #2
 80009f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009f8:	2304      	movs	r3, #4
 80009fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009fc:	f107 0320 	add.w	r3, r7, #32
 8000a00:	4618      	mov	r0, r3
 8000a02:	f002 f9f9 	bl	8002df8 <HAL_RCC_OscConfig>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a0c:	f000 fae6 	bl	8000fdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a10:	230f      	movs	r3, #15
 8000a12:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a14:	2302      	movs	r3, #2
 8000a16:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a1c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a20:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a26:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a28:	f107 030c 	add.w	r3, r7, #12
 8000a2c:	2102      	movs	r1, #2
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f002 fc5a 	bl	80032e8 <HAL_RCC_ClockConfig>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a3a:	f000 facf 	bl	8000fdc <Error_Handler>
  }
}
 8000a3e:	bf00      	nop
 8000a40:	3750      	adds	r7, #80	; 0x50
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40023800 	.word	0x40023800
 8000a4c:	40007000 	.word	0x40007000

08000a50 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000a54:	4b17      	ldr	r3, [pc, #92]	; (8000ab4 <MX_CAN1_Init+0x64>)
 8000a56:	4a18      	ldr	r2, [pc, #96]	; (8000ab8 <MX_CAN1_Init+0x68>)
 8000a58:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 8000a5a:	4b16      	ldr	r3, [pc, #88]	; (8000ab4 <MX_CAN1_Init+0x64>)
 8000a5c:	2204      	movs	r2, #4
 8000a5e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000a60:	4b14      	ldr	r3, [pc, #80]	; (8000ab4 <MX_CAN1_Init+0x64>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a66:	4b13      	ldr	r3, [pc, #76]	; (8000ab4 <MX_CAN1_Init+0x64>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 8000a6c:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <MX_CAN1_Init+0x64>)
 8000a6e:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000a72:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000a74:	4b0f      	ldr	r3, [pc, #60]	; (8000ab4 <MX_CAN1_Init+0x64>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000a7a:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <MX_CAN1_Init+0x64>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000a80:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <MX_CAN1_Init+0x64>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000a86:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <MX_CAN1_Init+0x64>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000a8c:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <MX_CAN1_Init+0x64>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000a92:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <MX_CAN1_Init+0x64>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000a98:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <MX_CAN1_Init+0x64>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000a9e:	4805      	ldr	r0, [pc, #20]	; (8000ab4 <MX_CAN1_Init+0x64>)
 8000aa0:	f000 fde0 	bl	8001664 <HAL_CAN_Init>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000aaa:	f000 fa97 	bl	8000fdc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	200023a4 	.word	0x200023a4
 8000ab8:	40006400 	.word	0x40006400

08000abc <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000ac0:	4b14      	ldr	r3, [pc, #80]	; (8000b14 <MX_SDIO_SD_Init+0x58>)
 8000ac2:	4a15      	ldr	r2, [pc, #84]	; (8000b18 <MX_SDIO_SD_Init+0x5c>)
 8000ac4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000ac6:	4b13      	ldr	r3, [pc, #76]	; (8000b14 <MX_SDIO_SD_Init+0x58>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000acc:	4b11      	ldr	r3, [pc, #68]	; (8000b14 <MX_SDIO_SD_Init+0x58>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000ad2:	4b10      	ldr	r3, [pc, #64]	; (8000b14 <MX_SDIO_SD_Init+0x58>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000ad8:	4b0e      	ldr	r3, [pc, #56]	; (8000b14 <MX_SDIO_SD_Init+0x58>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000ade:	4b0d      	ldr	r3, [pc, #52]	; (8000b14 <MX_SDIO_SD_Init+0x58>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000ae4:	4b0b      	ldr	r3, [pc, #44]	; (8000b14 <MX_SDIO_SD_Init+0x58>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */
  if (HAL_SD_Init(&hsd) != HAL_OK)
 8000aea:	480a      	ldr	r0, [pc, #40]	; (8000b14 <MX_SDIO_SD_Init+0x58>)
 8000aec:	f002 fe1c 	bl	8003728 <HAL_SD_Init>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_SDIO_SD_Init+0x3e>
  {
    Error_Handler();
 8000af6:	f000 fa71 	bl	8000fdc <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8000afa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000afe:	4805      	ldr	r0, [pc, #20]	; (8000b14 <MX_SDIO_SD_Init+0x58>)
 8000b00:	f003 fbea 	bl	80042d8 <HAL_SD_ConfigWideBusOperation>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_SDIO_SD_Init+0x52>
  {
    Error_Handler();
 8000b0a:	f000 fa67 	bl	8000fdc <Error_Handler>
  }
  /* USER CODE END SDIO_Init 2 */

}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	200023cc 	.word	0x200023cc
 8000b18:	40012c00 	.word	0x40012c00

08000b1c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b20:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <MX_USART1_UART_Init+0x4c>)
 8000b22:	4a12      	ldr	r2, [pc, #72]	; (8000b6c <MX_USART1_UART_Init+0x50>)
 8000b24:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 8000b26:	4b10      	ldr	r3, [pc, #64]	; (8000b68 <MX_USART1_UART_Init+0x4c>)
 8000b28:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8000b2c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b2e:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <MX_USART1_UART_Init+0x4c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b34:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <MX_USART1_UART_Init+0x4c>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b3a:	4b0b      	ldr	r3, [pc, #44]	; (8000b68 <MX_USART1_UART_Init+0x4c>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b40:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <MX_USART1_UART_Init+0x4c>)
 8000b42:	220c      	movs	r2, #12
 8000b44:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b46:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <MX_USART1_UART_Init+0x4c>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b4c:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <MX_USART1_UART_Init+0x4c>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b52:	4805      	ldr	r0, [pc, #20]	; (8000b68 <MX_USART1_UART_Init+0x4c>)
 8000b54:	f004 f91b 	bl	8004d8e <HAL_UART_Init>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b5e:	f000 fa3d 	bl	8000fdc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	20002510 	.word	0x20002510
 8000b6c:	40011000 	.word	0x40011000

08000b70 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	607b      	str	r3, [r7, #4]
 8000b7a:	4b10      	ldr	r3, [pc, #64]	; (8000bbc <MX_DMA_Init+0x4c>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	4a0f      	ldr	r2, [pc, #60]	; (8000bbc <MX_DMA_Init+0x4c>)
 8000b80:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b84:	6313      	str	r3, [r2, #48]	; 0x30
 8000b86:	4b0d      	ldr	r3, [pc, #52]	; (8000bbc <MX_DMA_Init+0x4c>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b8e:	607b      	str	r3, [r7, #4]
 8000b90:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8000b92:	2200      	movs	r2, #0
 8000b94:	2105      	movs	r1, #5
 8000b96:	203b      	movs	r0, #59	; 0x3b
 8000b98:	f001 fbbd 	bl	8002316 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000b9c:	203b      	movs	r0, #59	; 0x3b
 8000b9e:	f001 fbd6 	bl	800234e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2105      	movs	r1, #5
 8000ba6:	2045      	movs	r0, #69	; 0x45
 8000ba8:	f001 fbb5 	bl	8002316 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000bac:	2045      	movs	r0, #69	; 0x45
 8000bae:	f001 fbce 	bl	800234e <HAL_NVIC_EnableIRQ>

}
 8000bb2:	bf00      	nop
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40023800 	.word	0x40023800

08000bc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b085      	sub	sp, #20
 8000bc4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	60fb      	str	r3, [r7, #12]
 8000bca:	4b1e      	ldr	r3, [pc, #120]	; (8000c44 <MX_GPIO_Init+0x84>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	4a1d      	ldr	r2, [pc, #116]	; (8000c44 <MX_GPIO_Init+0x84>)
 8000bd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd6:	4b1b      	ldr	r3, [pc, #108]	; (8000c44 <MX_GPIO_Init+0x84>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	60bb      	str	r3, [r7, #8]
 8000be6:	4b17      	ldr	r3, [pc, #92]	; (8000c44 <MX_GPIO_Init+0x84>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	4a16      	ldr	r2, [pc, #88]	; (8000c44 <MX_GPIO_Init+0x84>)
 8000bec:	f043 0304 	orr.w	r3, r3, #4
 8000bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf2:	4b14      	ldr	r3, [pc, #80]	; (8000c44 <MX_GPIO_Init+0x84>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	f003 0304 	and.w	r3, r3, #4
 8000bfa:	60bb      	str	r3, [r7, #8]
 8000bfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	607b      	str	r3, [r7, #4]
 8000c02:	4b10      	ldr	r3, [pc, #64]	; (8000c44 <MX_GPIO_Init+0x84>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	4a0f      	ldr	r2, [pc, #60]	; (8000c44 <MX_GPIO_Init+0x84>)
 8000c08:	f043 0301 	orr.w	r3, r3, #1
 8000c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0e:	4b0d      	ldr	r3, [pc, #52]	; (8000c44 <MX_GPIO_Init+0x84>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	f003 0301 	and.w	r3, r3, #1
 8000c16:	607b      	str	r3, [r7, #4]
 8000c18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	603b      	str	r3, [r7, #0]
 8000c1e:	4b09      	ldr	r3, [pc, #36]	; (8000c44 <MX_GPIO_Init+0x84>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	4a08      	ldr	r2, [pc, #32]	; (8000c44 <MX_GPIO_Init+0x84>)
 8000c24:	f043 0308 	orr.w	r3, r3, #8
 8000c28:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2a:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <MX_GPIO_Init+0x84>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	f003 0308 	and.w	r3, r3, #8
 8000c32:	603b      	str	r3, [r7, #0]
 8000c34:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c36:	bf00      	nop
 8000c38:	3714      	adds	r7, #20
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	40023800 	.word	0x40023800

08000c48 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000c48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000c4c:	b0d5      	sub	sp, #340	; 0x154
 8000c4e:	af08      	add	r7, sp, #32
 8000c50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000c54:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8000c58:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */
  // file names might be all caps even if not set to be so, see:
  // https://superuser.com/questions/1297658/folder-names-become-uppercase-when-syncing-to-fat32-drive
  if( CanMsgQueue == NULL )
 8000c5a:	4ba6      	ldr	r3, [pc, #664]	; (8000ef4 <StartDefaultTask+0x2ac>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d112      	bne.n	8000c88 <StartDefaultTask+0x40>
  {
	  while(1)
	  {
		  uint8_t msg[] = "canmsgqueue failed\r\n";
 8000c62:	4ba5      	ldr	r3, [pc, #660]	; (8000ef8 <StartDefaultTask+0x2b0>)
 8000c64:	f107 0478 	add.w	r4, r7, #120	; 0x78
 8000c68:	461d      	mov	r5, r3
 8000c6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c6e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000c72:	6020      	str	r0, [r4, #0]
 8000c74:	3404      	adds	r4, #4
 8000c76:	7021      	strb	r1, [r4, #0]
		  HAL_UART_Transmit(&huart1, msg, sizeof(msg), 100);
 8000c78:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8000c7c:	2364      	movs	r3, #100	; 0x64
 8000c7e:	2215      	movs	r2, #21
 8000c80:	489e      	ldr	r0, [pc, #632]	; (8000efc <StartDefaultTask+0x2b4>)
 8000c82:	f004 f8d1 	bl	8004e28 <HAL_UART_Transmit>
	  {
 8000c86:	e7ec      	b.n	8000c62 <StartDefaultTask+0x1a>
	  }
  }
  else
  {
	  uint8_t msg1[] = "queue good\r\n";
 8000c88:	4b9d      	ldr	r3, [pc, #628]	; (8000f00 <StartDefaultTask+0x2b8>)
 8000c8a:	f107 0668 	add.w	r6, r7, #104	; 0x68
 8000c8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c90:	c607      	stmia	r6!, {r0, r1, r2}
 8000c92:	7033      	strb	r3, [r6, #0]
	  HAL_UART_Transmit(&huart1, msg1, sizeof(msg1), 100);
 8000c94:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8000c98:	2364      	movs	r3, #100	; 0x64
 8000c9a:	220d      	movs	r2, #13
 8000c9c:	4897      	ldr	r0, [pc, #604]	; (8000efc <StartDefaultTask+0x2b4>)
 8000c9e:	f004 f8c3 	bl	8004e28 <HAL_UART_Transmit>
  }

  uint8_t reminder[] = "Is SD card in?\n";
 8000ca2:	4b98      	ldr	r3, [pc, #608]	; (8000f04 <StartDefaultTask+0x2bc>)
 8000ca4:	f507 7688 	add.w	r6, r7, #272	; 0x110
 8000ca8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000caa:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  HAL_UART_Transmit(&huart1, reminder, sizeof(reminder), 100);
 8000cae:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8000cb2:	2364      	movs	r3, #100	; 0x64
 8000cb4:	2210      	movs	r2, #16
 8000cb6:	4891      	ldr	r0, [pc, #580]	; (8000efc <StartDefaultTask+0x2b4>)
 8000cb8:	f004 f8b6 	bl	8004e28 <HAL_UART_Transmit>

  Mount_SD("/");
 8000cbc:	4892      	ldr	r0, [pc, #584]	; (8000f08 <StartDefaultTask+0x2c0>)
 8000cbe:	f7ff fc73 	bl	80005a8 <Mount_SD>

  // this loop avoids filename collisions
  FRESULT res = FR_INVALID_NAME;
 8000cc2:	2306      	movs	r3, #6
 8000cc4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  uint8_t fileidx = 0;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  char filename[16];
  CanMsg rxMsg;
  const uint16_t buffSize = 3000; // 72% busload for 3.5 mins (520k messages, 2 repro), 68% busload for 4 mins, 87% busload for 2 mins (360k messages, 2 repro)
 8000cce:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000cd2:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
  uint8_t buffer[buffSize];
 8000cd6:	f8b7 312a 	ldrh.w	r3, [r7, #298]	; 0x12a
 8000cda:	3b01      	subs	r3, #1
 8000cdc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8000ce0:	f8b7 312a 	ldrh.w	r3, [r7, #298]	; 0x12a
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	4698      	mov	r8, r3
 8000ce8:	4691      	mov	r9, r2
 8000cea:	f04f 0200 	mov.w	r2, #0
 8000cee:	f04f 0300 	mov.w	r3, #0
 8000cf2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000cf6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000cfa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000cfe:	f8b7 312a 	ldrh.w	r3, [r7, #298]	; 0x12a
 8000d02:	2200      	movs	r2, #0
 8000d04:	461c      	mov	r4, r3
 8000d06:	4615      	mov	r5, r2
 8000d08:	f04f 0200 	mov.w	r2, #0
 8000d0c:	f04f 0300 	mov.w	r3, #0
 8000d10:	00eb      	lsls	r3, r5, #3
 8000d12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000d16:	00e2      	lsls	r2, r4, #3
 8000d18:	f8b7 312a 	ldrh.w	r3, [r7, #298]	; 0x12a
 8000d1c:	3307      	adds	r3, #7
 8000d1e:	08db      	lsrs	r3, r3, #3
 8000d20:	00db      	lsls	r3, r3, #3
 8000d22:	ebad 0d03 	sub.w	sp, sp, r3
 8000d26:	ab08      	add	r3, sp, #32
 8000d28:	3300      	adds	r3, #0
 8000d2a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  memset(buffer, 0, buffSize*sizeof(uint8_t));
 8000d2e:	f8b7 312a 	ldrh.w	r3, [r7, #298]	; 0x12a
 8000d32:	461a      	mov	r2, r3
 8000d34:	2100      	movs	r1, #0
 8000d36:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8000d3a:	f00a ff25 	bl	800bb88 <memset>

  while (res == FR_INVALID_NAME) {
 8000d3e:	e014      	b.n	8000d6a <StartDefaultTask+0x122>
	  sprintf(filename, "LOGS%d.TXT", (int) fileidx);
 8000d40:	f897 212e 	ldrb.w	r2, [r7, #302]	; 0x12e
 8000d44:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000d48:	4970      	ldr	r1, [pc, #448]	; (8000f0c <StartDefaultTask+0x2c4>)
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f00a fefc 	bl	800bb48 <siprintf>
	  res = Create_File(filename);
 8000d50:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff fc57 	bl	8000608 <Create_File>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
	  fileidx++;
 8000d60:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8000d64:	3301      	adds	r3, #1
 8000d66:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  while (res == FR_INVALID_NAME) {
 8000d6a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8000d6e:	2b06      	cmp	r3, #6
 8000d70:	d0e6      	beq.n	8000d40 <StartDefaultTask+0xf8>
  }

  HAL_UART_Transmit(&huart1, filename, sizeof(filename), 100);
 8000d72:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8000d76:	2364      	movs	r3, #100	; 0x64
 8000d78:	2210      	movs	r2, #16
 8000d7a:	4860      	ldr	r0, [pc, #384]	; (8000efc <StartDefaultTask+0x2b4>)
 8000d7c:	f004 f854 	bl	8004e28 <HAL_UART_Transmit>

  uint8_t debug[100];
  configCANFilters(&hcan1);
 8000d80:	4863      	ldr	r0, [pc, #396]	; (8000f10 <StartDefaultTask+0x2c8>)
 8000d82:	f7ff fd07 	bl	8000794 <configCANFilters>
  if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 8000d86:	4862      	ldr	r0, [pc, #392]	; (8000f10 <StartDefaultTask+0x2c8>)
 8000d88:	f000 fe48 	bl	8001a1c <HAL_CAN_Start>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d012      	beq.n	8000db8 <StartDefaultTask+0x170>
	 uint8_t msg[] = "Failed to start CAN!\n";
 8000d92:	4b60      	ldr	r3, [pc, #384]	; (8000f14 <StartDefaultTask+0x2cc>)
 8000d94:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8000d98:	461d      	mov	r5, r3
 8000d9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d9e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000da2:	6020      	str	r0, [r4, #0]
 8000da4:	3404      	adds	r4, #4
 8000da6:	8021      	strh	r1, [r4, #0]
	 HAL_UART_Transmit(&huart1, msg, sizeof(msg), 100);
 8000da8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000dac:	2364      	movs	r3, #100	; 0x64
 8000dae:	2216      	movs	r2, #22
 8000db0:	4852      	ldr	r0, [pc, #328]	; (8000efc <StartDefaultTask+0x2b4>)
 8000db2:	f004 f839 	bl	8004e28 <HAL_UART_Transmit>
	 while (1);
 8000db6:	e7fe      	b.n	8000db6 <StartDefaultTask+0x16e>
   }

   if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000db8:	2102      	movs	r1, #2
 8000dba:	4855      	ldr	r0, [pc, #340]	; (8000f10 <StartDefaultTask+0x2c8>)
 8000dbc:	f000 ff84 	bl	8001cc8 <HAL_CAN_ActivateNotification>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d016      	beq.n	8000df4 <StartDefaultTask+0x1ac>
   {
	 uint8_t msg[] = "Error starting to listen for CAN msgs from FIFO0\n";
 8000dc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000dca:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000dce:	4a52      	ldr	r2, [pc, #328]	; (8000f18 <StartDefaultTask+0x2d0>)
 8000dd0:	461c      	mov	r4, r3
 8000dd2:	4615      	mov	r5, r2
 8000dd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ddc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000de0:	682b      	ldr	r3, [r5, #0]
 8000de2:	8023      	strh	r3, [r4, #0]
	 HAL_UART_Transmit(&huart1, msg, sizeof(msg), 100);
 8000de4:	f107 011c 	add.w	r1, r7, #28
 8000de8:	2364      	movs	r3, #100	; 0x64
 8000dea:	2232      	movs	r2, #50	; 0x32
 8000dec:	4843      	ldr	r0, [pc, #268]	; (8000efc <StartDefaultTask+0x2b4>)
 8000dee:	f004 f81b 	bl	8004e28 <HAL_UART_Transmit>
	 while (1);
 8000df2:	e7fe      	b.n	8000df2 <StartDefaultTask+0x1aa>
   }

   if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK)
 8000df4:	2110      	movs	r1, #16
 8000df6:	4846      	ldr	r0, [pc, #280]	; (8000f10 <StartDefaultTask+0x2c8>)
 8000df8:	f000 ff66 	bl	8001cc8 <HAL_CAN_ActivateNotification>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d016      	beq.n	8000e30 <StartDefaultTask+0x1e8>
   {
	 uint8_t msg[] = "Error starting to listen for CAN msgs from FIFO0\n";
 8000e02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000e06:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000e0a:	4a43      	ldr	r2, [pc, #268]	; (8000f18 <StartDefaultTask+0x2d0>)
 8000e0c:	461c      	mov	r4, r3
 8000e0e:	4615      	mov	r5, r2
 8000e10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e1c:	682b      	ldr	r3, [r5, #0]
 8000e1e:	8023      	strh	r3, [r4, #0]
	 HAL_UART_Transmit(&huart1, msg, sizeof(msg), 100);
 8000e20:	f107 011c 	add.w	r1, r7, #28
 8000e24:	2364      	movs	r3, #100	; 0x64
 8000e26:	2232      	movs	r2, #50	; 0x32
 8000e28:	4834      	ldr	r0, [pc, #208]	; (8000efc <StartDefaultTask+0x2b4>)
 8000e2a:	f003 fffd 	bl	8004e28 <HAL_UART_Transmit>
	 while (1);
 8000e2e:	e7fe      	b.n	8000e2e <StartDefaultTask+0x1e6>
   }

  /* Infinite loop */
  for(;;)
  {
	  for (uint16_t loop = 0; loop < buffSize/34; loop++)
 8000e30:	2300      	movs	r3, #0
 8000e32:	f8a7 312c 	strh.w	r3, [r7, #300]	; 0x12c
 8000e36:	e07c      	b.n	8000f32 <StartDefaultTask+0x2ea>
	  {
		  if (xQueueReceive(CanMsgQueue, &rxMsg, 100) == pdTRUE)
 8000e38:	4b2e      	ldr	r3, [pc, #184]	; (8000ef4 <StartDefaultTask+0x2ac>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f107 01f4 	add.w	r1, r7, #244	; 0xf4
 8000e40:	2264      	movs	r2, #100	; 0x64
 8000e42:	4618      	mov	r0, r3
 8000e44:	f008 fdb8 	bl	80099b8 <xQueueReceive>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d13c      	bne.n	8000ec8 <StartDefaultTask+0x280>
		  {
			  sprintf(&buffer[loop*27], "%08lXx%08lX%02X%02X%02X%02X%02X%02X%02X%02X\n", xTaskGetTickCount(), rxMsg.id, rxMsg.data[0], rxMsg.data[1], rxMsg.data[2], rxMsg.data[3], rxMsg.data[4], rxMsg.data[5], rxMsg.data[6], rxMsg.data[7]);
 8000e4e:	f8b7 212c 	ldrh.w	r2, [r7, #300]	; 0x12c
 8000e52:	4613      	mov	r3, r2
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	4413      	add	r3, r2
 8000e58:	00da      	lsls	r2, r3, #3
 8000e5a:	4413      	add	r3, r2
 8000e5c:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8000e60:	18d4      	adds	r4, r2, r3
 8000e62:	f009 fc49 	bl	800a6f8 <xTaskGetTickCount>
 8000e66:	4602      	mov	r2, r0
 8000e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000e6c:	613b      	str	r3, [r7, #16]
 8000e6e:	f897 10f8 	ldrb.w	r1, [r7, #248]	; 0xf8
 8000e72:	f897 00f9 	ldrb.w	r0, [r7, #249]	; 0xf9
 8000e76:	f897 50fa 	ldrb.w	r5, [r7, #250]	; 0xfa
 8000e7a:	f897 60fb 	ldrb.w	r6, [r7, #251]	; 0xfb
 8000e7e:	f897 c0fc 	ldrb.w	ip, [r7, #252]	; 0xfc
 8000e82:	f8c7 c00c 	str.w	ip, [r7, #12]
 8000e86:	f897 c0fd 	ldrb.w	ip, [r7, #253]	; 0xfd
 8000e8a:	f8c7 c008 	str.w	ip, [r7, #8]
 8000e8e:	f897 c0fe 	ldrb.w	ip, [r7, #254]	; 0xfe
 8000e92:	f8c7 c004 	str.w	ip, [r7, #4]
 8000e96:	f897 c0ff 	ldrb.w	ip, [r7, #255]	; 0xff
 8000e9a:	4663      	mov	r3, ip
 8000e9c:	9307      	str	r3, [sp, #28]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	9306      	str	r3, [sp, #24]
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	9305      	str	r3, [sp, #20]
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	9304      	str	r3, [sp, #16]
 8000eaa:	9603      	str	r6, [sp, #12]
 8000eac:	9502      	str	r5, [sp, #8]
 8000eae:	9001      	str	r0, [sp, #4]
 8000eb0:	9100      	str	r1, [sp, #0]
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	4919      	ldr	r1, [pc, #100]	; (8000f1c <StartDefaultTask+0x2d4>)
 8000eb6:	4620      	mov	r0, r4
 8000eb8:	f00a fe46 	bl	800bb48 <siprintf>
			  fifo1--;
 8000ebc:	4b18      	ldr	r3, [pc, #96]	; (8000f20 <StartDefaultTask+0x2d8>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	3b01      	subs	r3, #1
 8000ec2:	4a17      	ldr	r2, [pc, #92]	; (8000f20 <StartDefaultTask+0x2d8>)
 8000ec4:	6013      	str	r3, [r2, #0]
 8000ec6:	e02f      	b.n	8000f28 <StartDefaultTask+0x2e0>
		  }
		  else
		  {
			  sprintf(debug, "Q Empty %u\n", loop);
 8000ec8:	f8b7 212c 	ldrh.w	r2, [r7, #300]	; 0x12c
 8000ecc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000ed0:	4914      	ldr	r1, [pc, #80]	; (8000f24 <StartDefaultTask+0x2dc>)
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f00a fe38 	bl	800bb48 <siprintf>
			  HAL_UART_Transmit(&huart1, debug, strlen(debug), 100);
 8000ed8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff f977 	bl	80001d0 <strlen>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	b29a      	uxth	r2, r3
 8000ee6:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8000eea:	2364      	movs	r3, #100	; 0x64
 8000eec:	4803      	ldr	r0, [pc, #12]	; (8000efc <StartDefaultTask+0x2b4>)
 8000eee:	f003 ff9b 	bl	8004e28 <HAL_UART_Transmit>
			  break;
 8000ef2:	e02a      	b.n	8000f4a <StartDefaultTask+0x302>
 8000ef4:	20002568 	.word	0x20002568
 8000ef8:	0800c86c 	.word	0x0800c86c
 8000efc:	20002510 	.word	0x20002510
 8000f00:	0800c884 	.word	0x0800c884
 8000f04:	0800c894 	.word	0x0800c894
 8000f08:	0800c7fc 	.word	0x0800c7fc
 8000f0c:	0800c800 	.word	0x0800c800
 8000f10:	200023a4 	.word	0x200023a4
 8000f14:	0800c8a4 	.word	0x0800c8a4
 8000f18:	0800c8bc 	.word	0x0800c8bc
 8000f1c:	0800c80c 	.word	0x0800c80c
 8000f20:	2000255c 	.word	0x2000255c
 8000f24:	0800c83c 	.word	0x0800c83c
	  for (uint16_t loop = 0; loop < buffSize/34; loop++)
 8000f28:	f8b7 312c 	ldrh.w	r3, [r7, #300]	; 0x12c
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	f8a7 312c 	strh.w	r3, [r7, #300]	; 0x12c
 8000f32:	f8b7 312a 	ldrh.w	r3, [r7, #298]	; 0x12a
 8000f36:	4a21      	ldr	r2, [pc, #132]	; (8000fbc <StartDefaultTask+0x374>)
 8000f38:	fba2 2303 	umull	r2, r3, r2, r3
 8000f3c:	095b      	lsrs	r3, r3, #5
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	f8b7 212c 	ldrh.w	r2, [r7, #300]	; 0x12c
 8000f44:	429a      	cmp	r2, r3
 8000f46:	f4ff af77 	bcc.w	8000e38 <StartDefaultTask+0x1f0>
		  }
	  }
	  Update_File(filename, buffer);
 8000f4a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000f4e:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff fbbe 	bl	80006d4 <Update_File>
	  if (failed != 0)
 8000f58:	4b19      	ldr	r3, [pc, #100]	; (8000fc0 <StartDefaultTask+0x378>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d015      	beq.n	8000f8c <StartDefaultTask+0x344>
	  {
		  sprintf(debug, "failed: %lu %lu\r\n", failed, failedNum);
 8000f60:	4b17      	ldr	r3, [pc, #92]	; (8000fc0 <StartDefaultTask+0x378>)
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	4b17      	ldr	r3, [pc, #92]	; (8000fc4 <StartDefaultTask+0x37c>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f107 0090 	add.w	r0, r7, #144	; 0x90
 8000f6c:	4916      	ldr	r1, [pc, #88]	; (8000fc8 <StartDefaultTask+0x380>)
 8000f6e:	f00a fdeb 	bl	800bb48 <siprintf>
		  HAL_UART_Transmit(&huart1, debug, strlen(debug), 100);
 8000f72:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000f76:	4618      	mov	r0, r3
 8000f78:	f7ff f92a 	bl	80001d0 <strlen>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	b29a      	uxth	r2, r3
 8000f80:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8000f84:	2364      	movs	r3, #100	; 0x64
 8000f86:	4811      	ldr	r0, [pc, #68]	; (8000fcc <StartDefaultTask+0x384>)
 8000f88:	f003 ff4e 	bl	8004e28 <HAL_UART_Transmit>
	  }
	  sprintf(debug, "can: %lu %lu\r\n", fifo0, fifo1);
 8000f8c:	4b10      	ldr	r3, [pc, #64]	; (8000fd0 <StartDefaultTask+0x388>)
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	4b10      	ldr	r3, [pc, #64]	; (8000fd4 <StartDefaultTask+0x38c>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f107 0090 	add.w	r0, r7, #144	; 0x90
 8000f98:	490f      	ldr	r1, [pc, #60]	; (8000fd8 <StartDefaultTask+0x390>)
 8000f9a:	f00a fdd5 	bl	800bb48 <siprintf>
	  HAL_UART_Transmit(&huart1, debug, strlen(debug), 100);
 8000f9e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f7ff f914 	bl	80001d0 <strlen>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	b29a      	uxth	r2, r3
 8000fac:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8000fb0:	2364      	movs	r3, #100	; 0x64
 8000fb2:	4806      	ldr	r0, [pc, #24]	; (8000fcc <StartDefaultTask+0x384>)
 8000fb4:	f003 ff38 	bl	8004e28 <HAL_UART_Transmit>
	  for (uint16_t loop = 0; loop < buffSize/34; loop++)
 8000fb8:	e73a      	b.n	8000e30 <StartDefaultTask+0x1e8>
 8000fba:	bf00      	nop
 8000fbc:	f0f0f0f1 	.word	0xf0f0f0f1
 8000fc0:	20002560 	.word	0x20002560
 8000fc4:	20002564 	.word	0x20002564
 8000fc8:	0800c848 	.word	0x0800c848
 8000fcc:	20002510 	.word	0x20002510
 8000fd0:	20002558 	.word	0x20002558
 8000fd4:	2000255c 	.word	0x2000255c
 8000fd8:	0800c85c 	.word	0x0800c85c

08000fdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fe0:	b672      	cpsid	i
}
 8000fe2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fe4:	e7fe      	b.n	8000fe4 <Error_Handler+0x8>
	...

08000fe8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	607b      	str	r3, [r7, #4]
 8000ff2:	4b12      	ldr	r3, [pc, #72]	; (800103c <HAL_MspInit+0x54>)
 8000ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff6:	4a11      	ldr	r2, [pc, #68]	; (800103c <HAL_MspInit+0x54>)
 8000ff8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ffc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ffe:	4b0f      	ldr	r3, [pc, #60]	; (800103c <HAL_MspInit+0x54>)
 8001000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001002:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001006:	607b      	str	r3, [r7, #4]
 8001008:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	603b      	str	r3, [r7, #0]
 800100e:	4b0b      	ldr	r3, [pc, #44]	; (800103c <HAL_MspInit+0x54>)
 8001010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001012:	4a0a      	ldr	r2, [pc, #40]	; (800103c <HAL_MspInit+0x54>)
 8001014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001018:	6413      	str	r3, [r2, #64]	; 0x40
 800101a:	4b08      	ldr	r3, [pc, #32]	; (800103c <HAL_MspInit+0x54>)
 800101c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001022:	603b      	str	r3, [r7, #0]
 8001024:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001026:	2200      	movs	r2, #0
 8001028:	210f      	movs	r1, #15
 800102a:	f06f 0001 	mvn.w	r0, #1
 800102e:	f001 f972 	bl	8002316 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001032:	bf00      	nop
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40023800 	.word	0x40023800

08001040 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08a      	sub	sp, #40	; 0x28
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001048:	f107 0314 	add.w	r3, r7, #20
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a29      	ldr	r2, [pc, #164]	; (8001104 <HAL_CAN_MspInit+0xc4>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d14b      	bne.n	80010fa <HAL_CAN_MspInit+0xba>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	613b      	str	r3, [r7, #16]
 8001066:	4b28      	ldr	r3, [pc, #160]	; (8001108 <HAL_CAN_MspInit+0xc8>)
 8001068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106a:	4a27      	ldr	r2, [pc, #156]	; (8001108 <HAL_CAN_MspInit+0xc8>)
 800106c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001070:	6413      	str	r3, [r2, #64]	; 0x40
 8001072:	4b25      	ldr	r3, [pc, #148]	; (8001108 <HAL_CAN_MspInit+0xc8>)
 8001074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800107a:	613b      	str	r3, [r7, #16]
 800107c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	60fb      	str	r3, [r7, #12]
 8001082:	4b21      	ldr	r3, [pc, #132]	; (8001108 <HAL_CAN_MspInit+0xc8>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	4a20      	ldr	r2, [pc, #128]	; (8001108 <HAL_CAN_MspInit+0xc8>)
 8001088:	f043 0308 	orr.w	r3, r3, #8
 800108c:	6313      	str	r3, [r2, #48]	; 0x30
 800108e:	4b1e      	ldr	r3, [pc, #120]	; (8001108 <HAL_CAN_MspInit+0xc8>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	f003 0308 	and.w	r3, r3, #8
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800109a:	2303      	movs	r3, #3
 800109c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109e:	2302      	movs	r3, #2
 80010a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a6:	2303      	movs	r3, #3
 80010a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80010aa:	2309      	movs	r3, #9
 80010ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010ae:	f107 0314 	add.w	r3, r7, #20
 80010b2:	4619      	mov	r1, r3
 80010b4:	4815      	ldr	r0, [pc, #84]	; (800110c <HAL_CAN_MspInit+0xcc>)
 80010b6:	f001 fd03 	bl	8002ac0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 80010ba:	2200      	movs	r2, #0
 80010bc:	2105      	movs	r1, #5
 80010be:	2013      	movs	r0, #19
 80010c0:	f001 f929 	bl	8002316 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80010c4:	2013      	movs	r0, #19
 80010c6:	f001 f942 	bl	800234e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80010ca:	2200      	movs	r2, #0
 80010cc:	2105      	movs	r1, #5
 80010ce:	2014      	movs	r0, #20
 80010d0:	f001 f921 	bl	8002316 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80010d4:	2014      	movs	r0, #20
 80010d6:	f001 f93a 	bl	800234e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 80010da:	2200      	movs	r2, #0
 80010dc:	2105      	movs	r1, #5
 80010de:	2015      	movs	r0, #21
 80010e0:	f001 f919 	bl	8002316 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80010e4:	2015      	movs	r0, #21
 80010e6:	f001 f932 	bl	800234e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 5, 0);
 80010ea:	2200      	movs	r2, #0
 80010ec:	2105      	movs	r1, #5
 80010ee:	2016      	movs	r0, #22
 80010f0:	f001 f911 	bl	8002316 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 80010f4:	2016      	movs	r0, #22
 80010f6:	f001 f92a 	bl	800234e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80010fa:	bf00      	nop
 80010fc:	3728      	adds	r7, #40	; 0x28
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40006400 	.word	0x40006400
 8001108:	40023800 	.word	0x40023800
 800110c:	40020c00 	.word	0x40020c00

08001110 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b08a      	sub	sp, #40	; 0x28
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001118:	f107 0314 	add.w	r3, r7, #20
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
 8001126:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a68      	ldr	r2, [pc, #416]	; (80012d0 <HAL_SD_MspInit+0x1c0>)
 800112e:	4293      	cmp	r3, r2
 8001130:	f040 80c9 	bne.w	80012c6 <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001134:	2300      	movs	r3, #0
 8001136:	613b      	str	r3, [r7, #16]
 8001138:	4b66      	ldr	r3, [pc, #408]	; (80012d4 <HAL_SD_MspInit+0x1c4>)
 800113a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113c:	4a65      	ldr	r2, [pc, #404]	; (80012d4 <HAL_SD_MspInit+0x1c4>)
 800113e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001142:	6453      	str	r3, [r2, #68]	; 0x44
 8001144:	4b63      	ldr	r3, [pc, #396]	; (80012d4 <HAL_SD_MspInit+0x1c4>)
 8001146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001148:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800114c:	613b      	str	r3, [r7, #16]
 800114e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001150:	2300      	movs	r3, #0
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	4b5f      	ldr	r3, [pc, #380]	; (80012d4 <HAL_SD_MspInit+0x1c4>)
 8001156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001158:	4a5e      	ldr	r2, [pc, #376]	; (80012d4 <HAL_SD_MspInit+0x1c4>)
 800115a:	f043 0304 	orr.w	r3, r3, #4
 800115e:	6313      	str	r3, [r2, #48]	; 0x30
 8001160:	4b5c      	ldr	r3, [pc, #368]	; (80012d4 <HAL_SD_MspInit+0x1c4>)
 8001162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001164:	f003 0304 	and.w	r3, r3, #4
 8001168:	60fb      	str	r3, [r7, #12]
 800116a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800116c:	2300      	movs	r3, #0
 800116e:	60bb      	str	r3, [r7, #8]
 8001170:	4b58      	ldr	r3, [pc, #352]	; (80012d4 <HAL_SD_MspInit+0x1c4>)
 8001172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001174:	4a57      	ldr	r2, [pc, #348]	; (80012d4 <HAL_SD_MspInit+0x1c4>)
 8001176:	f043 0308 	orr.w	r3, r3, #8
 800117a:	6313      	str	r3, [r2, #48]	; 0x30
 800117c:	4b55      	ldr	r3, [pc, #340]	; (80012d4 <HAL_SD_MspInit+0x1c4>)
 800117e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001180:	f003 0308 	and.w	r3, r3, #8
 8001184:	60bb      	str	r3, [r7, #8]
 8001186:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8001188:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 800118c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118e:	2302      	movs	r3, #2
 8001190:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001196:	2303      	movs	r3, #3
 8001198:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800119a:	230c      	movs	r3, #12
 800119c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800119e:	f107 0314 	add.w	r3, r7, #20
 80011a2:	4619      	mov	r1, r3
 80011a4:	484c      	ldr	r0, [pc, #304]	; (80012d8 <HAL_SD_MspInit+0x1c8>)
 80011a6:	f001 fc8b 	bl	8002ac0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80011aa:	2304      	movs	r3, #4
 80011ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ae:	2302      	movs	r3, #2
 80011b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b6:	2303      	movs	r3, #3
 80011b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80011ba:	230c      	movs	r3, #12
 80011bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011be:	f107 0314 	add.w	r3, r7, #20
 80011c2:	4619      	mov	r1, r3
 80011c4:	4845      	ldr	r0, [pc, #276]	; (80012dc <HAL_SD_MspInit+0x1cc>)
 80011c6:	f001 fc7b 	bl	8002ac0 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 80011ca:	4b45      	ldr	r3, [pc, #276]	; (80012e0 <HAL_SD_MspInit+0x1d0>)
 80011cc:	4a45      	ldr	r2, [pc, #276]	; (80012e4 <HAL_SD_MspInit+0x1d4>)
 80011ce:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80011d0:	4b43      	ldr	r3, [pc, #268]	; (80012e0 <HAL_SD_MspInit+0x1d0>)
 80011d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011d6:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011d8:	4b41      	ldr	r3, [pc, #260]	; (80012e0 <HAL_SD_MspInit+0x1d0>)
 80011da:	2200      	movs	r2, #0
 80011dc:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011de:	4b40      	ldr	r3, [pc, #256]	; (80012e0 <HAL_SD_MspInit+0x1d0>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011e4:	4b3e      	ldr	r3, [pc, #248]	; (80012e0 <HAL_SD_MspInit+0x1d0>)
 80011e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011ea:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80011ec:	4b3c      	ldr	r3, [pc, #240]	; (80012e0 <HAL_SD_MspInit+0x1d0>)
 80011ee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011f2:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80011f4:	4b3a      	ldr	r3, [pc, #232]	; (80012e0 <HAL_SD_MspInit+0x1d0>)
 80011f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011fa:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 80011fc:	4b38      	ldr	r3, [pc, #224]	; (80012e0 <HAL_SD_MspInit+0x1d0>)
 80011fe:	2220      	movs	r2, #32
 8001200:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001202:	4b37      	ldr	r3, [pc, #220]	; (80012e0 <HAL_SD_MspInit+0x1d0>)
 8001204:	2200      	movs	r2, #0
 8001206:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001208:	4b35      	ldr	r3, [pc, #212]	; (80012e0 <HAL_SD_MspInit+0x1d0>)
 800120a:	2204      	movs	r2, #4
 800120c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800120e:	4b34      	ldr	r3, [pc, #208]	; (80012e0 <HAL_SD_MspInit+0x1d0>)
 8001210:	2203      	movs	r2, #3
 8001212:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001214:	4b32      	ldr	r3, [pc, #200]	; (80012e0 <HAL_SD_MspInit+0x1d0>)
 8001216:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800121a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800121c:	4b30      	ldr	r3, [pc, #192]	; (80012e0 <HAL_SD_MspInit+0x1d0>)
 800121e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001222:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8001224:	482e      	ldr	r0, [pc, #184]	; (80012e0 <HAL_SD_MspInit+0x1d0>)
 8001226:	f001 f8ad 	bl	8002384 <HAL_DMA_Init>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 8001230:	f7ff fed4 	bl	8000fdc <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4a2a      	ldr	r2, [pc, #168]	; (80012e0 <HAL_SD_MspInit+0x1d0>)
 8001238:	641a      	str	r2, [r3, #64]	; 0x40
 800123a:	4a29      	ldr	r2, [pc, #164]	; (80012e0 <HAL_SD_MspInit+0x1d0>)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8001240:	4b29      	ldr	r3, [pc, #164]	; (80012e8 <HAL_SD_MspInit+0x1d8>)
 8001242:	4a2a      	ldr	r2, [pc, #168]	; (80012ec <HAL_SD_MspInit+0x1dc>)
 8001244:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8001246:	4b28      	ldr	r3, [pc, #160]	; (80012e8 <HAL_SD_MspInit+0x1d8>)
 8001248:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800124c:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800124e:	4b26      	ldr	r3, [pc, #152]	; (80012e8 <HAL_SD_MspInit+0x1d8>)
 8001250:	2240      	movs	r2, #64	; 0x40
 8001252:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001254:	4b24      	ldr	r3, [pc, #144]	; (80012e8 <HAL_SD_MspInit+0x1d8>)
 8001256:	2200      	movs	r2, #0
 8001258:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 800125a:	4b23      	ldr	r3, [pc, #140]	; (80012e8 <HAL_SD_MspInit+0x1d8>)
 800125c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001260:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001262:	4b21      	ldr	r3, [pc, #132]	; (80012e8 <HAL_SD_MspInit+0x1d8>)
 8001264:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001268:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800126a:	4b1f      	ldr	r3, [pc, #124]	; (80012e8 <HAL_SD_MspInit+0x1d8>)
 800126c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001270:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8001272:	4b1d      	ldr	r3, [pc, #116]	; (80012e8 <HAL_SD_MspInit+0x1d8>)
 8001274:	2220      	movs	r2, #32
 8001276:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001278:	4b1b      	ldr	r3, [pc, #108]	; (80012e8 <HAL_SD_MspInit+0x1d8>)
 800127a:	2200      	movs	r2, #0
 800127c:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800127e:	4b1a      	ldr	r3, [pc, #104]	; (80012e8 <HAL_SD_MspInit+0x1d8>)
 8001280:	2204      	movs	r2, #4
 8001282:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001284:	4b18      	ldr	r3, [pc, #96]	; (80012e8 <HAL_SD_MspInit+0x1d8>)
 8001286:	2203      	movs	r2, #3
 8001288:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 800128a:	4b17      	ldr	r3, [pc, #92]	; (80012e8 <HAL_SD_MspInit+0x1d8>)
 800128c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001290:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001292:	4b15      	ldr	r3, [pc, #84]	; (80012e8 <HAL_SD_MspInit+0x1d8>)
 8001294:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001298:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800129a:	4813      	ldr	r0, [pc, #76]	; (80012e8 <HAL_SD_MspInit+0x1d8>)
 800129c:	f001 f872 	bl	8002384 <HAL_DMA_Init>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 80012a6:	f7ff fe99 	bl	8000fdc <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a0e      	ldr	r2, [pc, #56]	; (80012e8 <HAL_SD_MspInit+0x1d8>)
 80012ae:	63da      	str	r2, [r3, #60]	; 0x3c
 80012b0:	4a0d      	ldr	r2, [pc, #52]	; (80012e8 <HAL_SD_MspInit+0x1d8>)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 80012b6:	2200      	movs	r2, #0
 80012b8:	2105      	movs	r1, #5
 80012ba:	2031      	movs	r0, #49	; 0x31
 80012bc:	f001 f82b 	bl	8002316 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80012c0:	2031      	movs	r0, #49	; 0x31
 80012c2:	f001 f844 	bl	800234e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80012c6:	bf00      	nop
 80012c8:	3728      	adds	r7, #40	; 0x28
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40012c00 	.word	0x40012c00
 80012d4:	40023800 	.word	0x40023800
 80012d8:	40020800 	.word	0x40020800
 80012dc:	40020c00 	.word	0x40020c00
 80012e0:	20002450 	.word	0x20002450
 80012e4:	40026458 	.word	0x40026458
 80012e8:	200024b0 	.word	0x200024b0
 80012ec:	400264a0 	.word	0x400264a0

080012f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b08a      	sub	sp, #40	; 0x28
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f8:	f107 0314 	add.w	r3, r7, #20
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	60da      	str	r2, [r3, #12]
 8001306:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a19      	ldr	r2, [pc, #100]	; (8001374 <HAL_UART_MspInit+0x84>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d12c      	bne.n	800136c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	613b      	str	r3, [r7, #16]
 8001316:	4b18      	ldr	r3, [pc, #96]	; (8001378 <HAL_UART_MspInit+0x88>)
 8001318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131a:	4a17      	ldr	r2, [pc, #92]	; (8001378 <HAL_UART_MspInit+0x88>)
 800131c:	f043 0310 	orr.w	r3, r3, #16
 8001320:	6453      	str	r3, [r2, #68]	; 0x44
 8001322:	4b15      	ldr	r3, [pc, #84]	; (8001378 <HAL_UART_MspInit+0x88>)
 8001324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001326:	f003 0310 	and.w	r3, r3, #16
 800132a:	613b      	str	r3, [r7, #16]
 800132c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	4b11      	ldr	r3, [pc, #68]	; (8001378 <HAL_UART_MspInit+0x88>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	4a10      	ldr	r2, [pc, #64]	; (8001378 <HAL_UART_MspInit+0x88>)
 8001338:	f043 0301 	orr.w	r3, r3, #1
 800133c:	6313      	str	r3, [r2, #48]	; 0x30
 800133e:	4b0e      	ldr	r3, [pc, #56]	; (8001378 <HAL_UART_MspInit+0x88>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	f003 0301 	and.w	r3, r3, #1
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800134a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800134e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001350:	2302      	movs	r3, #2
 8001352:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001358:	2303      	movs	r3, #3
 800135a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800135c:	2307      	movs	r3, #7
 800135e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001360:	f107 0314 	add.w	r3, r7, #20
 8001364:	4619      	mov	r1, r3
 8001366:	4805      	ldr	r0, [pc, #20]	; (800137c <HAL_UART_MspInit+0x8c>)
 8001368:	f001 fbaa 	bl	8002ac0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800136c:	bf00      	nop
 800136e:	3728      	adds	r7, #40	; 0x28
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	40011000 	.word	0x40011000
 8001378:	40023800 	.word	0x40023800
 800137c:	40020000 	.word	0x40020000

08001380 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001384:	e7fe      	b.n	8001384 <NMI_Handler+0x4>

08001386 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001386:	b480      	push	{r7}
 8001388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800138a:	e7fe      	b.n	800138a <HardFault_Handler+0x4>

0800138c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001390:	e7fe      	b.n	8001390 <MemManage_Handler+0x4>

08001392 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001392:	b480      	push	{r7}
 8001394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001396:	e7fe      	b.n	8001396 <BusFault_Handler+0x4>

08001398 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800139c:	e7fe      	b.n	800139c <UsageFault_Handler+0x4>

0800139e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800139e:	b480      	push	{r7}
 80013a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013a2:	bf00      	nop
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013b0:	f000 f914 	bl	80015dc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80013b4:	f009 fcc0 	bl	800ad38 <xTaskGetSchedulerState>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d001      	beq.n	80013c2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80013be:	f00a f89b 	bl	800b4f8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013c2:	bf00      	nop
 80013c4:	bd80      	pop	{r7, pc}
	...

080013c8 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80013cc:	4802      	ldr	r0, [pc, #8]	; (80013d8 <CAN1_TX_IRQHandler+0x10>)
 80013ce:	f000 fca1 	bl	8001d14 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	200023a4 	.word	0x200023a4

080013dc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80013e0:	4802      	ldr	r0, [pc, #8]	; (80013ec <CAN1_RX0_IRQHandler+0x10>)
 80013e2:	f000 fc97 	bl	8001d14 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	200023a4 	.word	0x200023a4

080013f0 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80013f4:	4802      	ldr	r0, [pc, #8]	; (8001400 <CAN1_RX1_IRQHandler+0x10>)
 80013f6:	f000 fc8d 	bl	8001d14 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	200023a4 	.word	0x200023a4

08001404 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001408:	4802      	ldr	r0, [pc, #8]	; (8001414 <CAN1_SCE_IRQHandler+0x10>)
 800140a:	f000 fc83 	bl	8001d14 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	200023a4 	.word	0x200023a4

08001418 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 800141c:	4802      	ldr	r0, [pc, #8]	; (8001428 <SDIO_IRQHandler+0x10>)
 800141e:	f002 fbfb 	bl	8003c18 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	200023cc 	.word	0x200023cc

0800142c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8001430:	4802      	ldr	r0, [pc, #8]	; (800143c <DMA2_Stream3_IRQHandler+0x10>)
 8001432:	f001 f8cf 	bl	80025d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	20002450 	.word	0x20002450

08001440 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8001444:	4802      	ldr	r0, [pc, #8]	; (8001450 <DMA2_Stream6_IRQHandler+0x10>)
 8001446:	f001 f8c5 	bl	80025d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	200024b0 	.word	0x200024b0

08001454 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b086      	sub	sp, #24
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800145c:	4a14      	ldr	r2, [pc, #80]	; (80014b0 <_sbrk+0x5c>)
 800145e:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <_sbrk+0x60>)
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001468:	4b13      	ldr	r3, [pc, #76]	; (80014b8 <_sbrk+0x64>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d102      	bne.n	8001476 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001470:	4b11      	ldr	r3, [pc, #68]	; (80014b8 <_sbrk+0x64>)
 8001472:	4a12      	ldr	r2, [pc, #72]	; (80014bc <_sbrk+0x68>)
 8001474:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001476:	4b10      	ldr	r3, [pc, #64]	; (80014b8 <_sbrk+0x64>)
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4413      	add	r3, r2
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	429a      	cmp	r2, r3
 8001482:	d207      	bcs.n	8001494 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001484:	f00a fbee 	bl	800bc64 <__errno>
 8001488:	4603      	mov	r3, r0
 800148a:	220c      	movs	r2, #12
 800148c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800148e:	f04f 33ff 	mov.w	r3, #4294967295
 8001492:	e009      	b.n	80014a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001494:	4b08      	ldr	r3, [pc, #32]	; (80014b8 <_sbrk+0x64>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800149a:	4b07      	ldr	r3, [pc, #28]	; (80014b8 <_sbrk+0x64>)
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4413      	add	r3, r2
 80014a2:	4a05      	ldr	r2, [pc, #20]	; (80014b8 <_sbrk+0x64>)
 80014a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014a6:	68fb      	ldr	r3, [r7, #12]
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3718      	adds	r7, #24
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20020000 	.word	0x20020000
 80014b4:	00000f00 	.word	0x00000f00
 80014b8:	20002578 	.word	0x20002578
 80014bc:	2001af40 	.word	0x2001af40

080014c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014c4:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <SystemInit+0x20>)
 80014c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014ca:	4a05      	ldr	r2, [pc, #20]	; (80014e0 <SystemInit+0x20>)
 80014cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014d4:	bf00      	nop
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	e000ed00 	.word	0xe000ed00

080014e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80014e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800151c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014e8:	480d      	ldr	r0, [pc, #52]	; (8001520 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014ea:	490e      	ldr	r1, [pc, #56]	; (8001524 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014ec:	4a0e      	ldr	r2, [pc, #56]	; (8001528 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014f0:	e002      	b.n	80014f8 <LoopCopyDataInit>

080014f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014f6:	3304      	adds	r3, #4

080014f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014fc:	d3f9      	bcc.n	80014f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014fe:	4a0b      	ldr	r2, [pc, #44]	; (800152c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001500:	4c0b      	ldr	r4, [pc, #44]	; (8001530 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001502:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001504:	e001      	b.n	800150a <LoopFillZerobss>

08001506 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001506:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001508:	3204      	adds	r2, #4

0800150a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800150a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800150c:	d3fb      	bcc.n	8001506 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800150e:	f7ff ffd7 	bl	80014c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001512:	f00a fbad 	bl	800bc70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001516:	f7ff f9fb 	bl	8000910 <main>
  bx  lr    
 800151a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800151c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001520:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001524:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001528:	0800ca44 	.word	0x0800ca44
  ldr r2, =_sbss
 800152c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001530:	2001af3c 	.word	0x2001af3c

08001534 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001534:	e7fe      	b.n	8001534 <ADC_IRQHandler>
	...

08001538 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800153c:	4b0e      	ldr	r3, [pc, #56]	; (8001578 <HAL_Init+0x40>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a0d      	ldr	r2, [pc, #52]	; (8001578 <HAL_Init+0x40>)
 8001542:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001546:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001548:	4b0b      	ldr	r3, [pc, #44]	; (8001578 <HAL_Init+0x40>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a0a      	ldr	r2, [pc, #40]	; (8001578 <HAL_Init+0x40>)
 800154e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001552:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001554:	4b08      	ldr	r3, [pc, #32]	; (8001578 <HAL_Init+0x40>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a07      	ldr	r2, [pc, #28]	; (8001578 <HAL_Init+0x40>)
 800155a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800155e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001560:	2003      	movs	r0, #3
 8001562:	f000 fecd 	bl	8002300 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001566:	200f      	movs	r0, #15
 8001568:	f000 f808 	bl	800157c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800156c:	f7ff fd3c 	bl	8000fe8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001570:	2300      	movs	r3, #0
}
 8001572:	4618      	mov	r0, r3
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	40023c00 	.word	0x40023c00

0800157c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001584:	4b12      	ldr	r3, [pc, #72]	; (80015d0 <HAL_InitTick+0x54>)
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	4b12      	ldr	r3, [pc, #72]	; (80015d4 <HAL_InitTick+0x58>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	4619      	mov	r1, r3
 800158e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001592:	fbb3 f3f1 	udiv	r3, r3, r1
 8001596:	fbb2 f3f3 	udiv	r3, r2, r3
 800159a:	4618      	mov	r0, r3
 800159c:	f000 fee5 	bl	800236a <HAL_SYSTICK_Config>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e00e      	b.n	80015c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2b0f      	cmp	r3, #15
 80015ae:	d80a      	bhi.n	80015c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015b0:	2200      	movs	r2, #0
 80015b2:	6879      	ldr	r1, [r7, #4]
 80015b4:	f04f 30ff 	mov.w	r0, #4294967295
 80015b8:	f000 fead 	bl	8002316 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015bc:	4a06      	ldr	r2, [pc, #24]	; (80015d8 <HAL_InitTick+0x5c>)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015c2:	2300      	movs	r3, #0
 80015c4:	e000      	b.n	80015c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	20000000 	.word	0x20000000
 80015d4:	20000008 	.word	0x20000008
 80015d8:	20000004 	.word	0x20000004

080015dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015e0:	4b06      	ldr	r3, [pc, #24]	; (80015fc <HAL_IncTick+0x20>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	461a      	mov	r2, r3
 80015e6:	4b06      	ldr	r3, [pc, #24]	; (8001600 <HAL_IncTick+0x24>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4413      	add	r3, r2
 80015ec:	4a04      	ldr	r2, [pc, #16]	; (8001600 <HAL_IncTick+0x24>)
 80015ee:	6013      	str	r3, [r2, #0]
}
 80015f0:	bf00      	nop
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	20000008 	.word	0x20000008
 8001600:	2000257c 	.word	0x2000257c

08001604 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  return uwTick;
 8001608:	4b03      	ldr	r3, [pc, #12]	; (8001618 <HAL_GetTick+0x14>)
 800160a:	681b      	ldr	r3, [r3, #0]
}
 800160c:	4618      	mov	r0, r3
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	2000257c 	.word	0x2000257c

0800161c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001624:	f7ff ffee 	bl	8001604 <HAL_GetTick>
 8001628:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001634:	d005      	beq.n	8001642 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001636:	4b0a      	ldr	r3, [pc, #40]	; (8001660 <HAL_Delay+0x44>)
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	461a      	mov	r2, r3
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	4413      	add	r3, r2
 8001640:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001642:	bf00      	nop
 8001644:	f7ff ffde 	bl	8001604 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	429a      	cmp	r2, r3
 8001652:	d8f7      	bhi.n	8001644 <HAL_Delay+0x28>
  {
  }
}
 8001654:	bf00      	nop
 8001656:	bf00      	nop
 8001658:	3710      	adds	r7, #16
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	20000008 	.word	0x20000008

08001664 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d101      	bne.n	8001676 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e0ed      	b.n	8001852 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	f893 3020 	ldrb.w	r3, [r3, #32]
 800167c:	b2db      	uxtb	r3, r3
 800167e:	2b00      	cmp	r3, #0
 8001680:	d102      	bne.n	8001688 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f7ff fcdc 	bl	8001040 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f042 0201 	orr.w	r2, r2, #1
 8001696:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001698:	f7ff ffb4 	bl	8001604 <HAL_GetTick>
 800169c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800169e:	e012      	b.n	80016c6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016a0:	f7ff ffb0 	bl	8001604 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b0a      	cmp	r3, #10
 80016ac:	d90b      	bls.n	80016c6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2205      	movs	r2, #5
 80016be:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e0c5      	b.n	8001852 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f003 0301 	and.w	r3, r3, #1
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d0e5      	beq.n	80016a0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f022 0202 	bic.w	r2, r2, #2
 80016e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016e4:	f7ff ff8e 	bl	8001604 <HAL_GetTick>
 80016e8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80016ea:	e012      	b.n	8001712 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016ec:	f7ff ff8a 	bl	8001604 <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b0a      	cmp	r3, #10
 80016f8:	d90b      	bls.n	8001712 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016fe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2205      	movs	r2, #5
 800170a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e09f      	b.n	8001852 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f003 0302 	and.w	r3, r3, #2
 800171c:	2b00      	cmp	r3, #0
 800171e:	d1e5      	bne.n	80016ec <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	7e1b      	ldrb	r3, [r3, #24]
 8001724:	2b01      	cmp	r3, #1
 8001726:	d108      	bne.n	800173a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	e007      	b.n	800174a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001748:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	7e5b      	ldrb	r3, [r3, #25]
 800174e:	2b01      	cmp	r3, #1
 8001750:	d108      	bne.n	8001764 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001760:	601a      	str	r2, [r3, #0]
 8001762:	e007      	b.n	8001774 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001772:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	7e9b      	ldrb	r3, [r3, #26]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d108      	bne.n	800178e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f042 0220 	orr.w	r2, r2, #32
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	e007      	b.n	800179e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f022 0220 	bic.w	r2, r2, #32
 800179c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	7edb      	ldrb	r3, [r3, #27]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d108      	bne.n	80017b8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f022 0210 	bic.w	r2, r2, #16
 80017b4:	601a      	str	r2, [r3, #0]
 80017b6:	e007      	b.n	80017c8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f042 0210 	orr.w	r2, r2, #16
 80017c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	7f1b      	ldrb	r3, [r3, #28]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d108      	bne.n	80017e2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f042 0208 	orr.w	r2, r2, #8
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	e007      	b.n	80017f2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f022 0208 	bic.w	r2, r2, #8
 80017f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	7f5b      	ldrb	r3, [r3, #29]
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d108      	bne.n	800180c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f042 0204 	orr.w	r2, r2, #4
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	e007      	b.n	800181c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f022 0204 	bic.w	r2, r2, #4
 800181a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689a      	ldr	r2, [r3, #8]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	431a      	orrs	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	691b      	ldr	r3, [r3, #16]
 800182a:	431a      	orrs	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	695b      	ldr	r3, [r3, #20]
 8001830:	ea42 0103 	orr.w	r1, r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	1e5a      	subs	r2, r3, #1
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	430a      	orrs	r2, r1
 8001840:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2200      	movs	r2, #0
 8001846:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2201      	movs	r2, #1
 800184c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001850:	2300      	movs	r3, #0
}
 8001852:	4618      	mov	r0, r3
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
	...

0800185c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800185c:	b480      	push	{r7}
 800185e:	b087      	sub	sp, #28
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001872:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001874:	7cfb      	ldrb	r3, [r7, #19]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d003      	beq.n	8001882 <HAL_CAN_ConfigFilter+0x26>
 800187a:	7cfb      	ldrb	r3, [r7, #19]
 800187c:	2b02      	cmp	r3, #2
 800187e:	f040 80be 	bne.w	80019fe <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001882:	4b65      	ldr	r3, [pc, #404]	; (8001a18 <HAL_CAN_ConfigFilter+0x1bc>)
 8001884:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800188c:	f043 0201 	orr.w	r2, r3, #1
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800189c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b0:	021b      	lsls	r3, r3, #8
 80018b2:	431a      	orrs	r2, r3
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	695b      	ldr	r3, [r3, #20]
 80018be:	f003 031f 	and.w	r3, r3, #31
 80018c2:	2201      	movs	r2, #1
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	43db      	mvns	r3, r3
 80018d4:	401a      	ands	r2, r3
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	69db      	ldr	r3, [r3, #28]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d123      	bne.n	800192c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	43db      	mvns	r3, r3
 80018ee:	401a      	ands	r2, r3
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	68db      	ldr	r3, [r3, #12]
 80018fa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001902:	683a      	ldr	r2, [r7, #0]
 8001904:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001906:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	3248      	adds	r2, #72	; 0x48
 800190c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001920:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001922:	6979      	ldr	r1, [r7, #20]
 8001924:	3348      	adds	r3, #72	; 0x48
 8001926:	00db      	lsls	r3, r3, #3
 8001928:	440b      	add	r3, r1
 800192a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	69db      	ldr	r3, [r3, #28]
 8001930:	2b01      	cmp	r3, #1
 8001932:	d122      	bne.n	800197a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	431a      	orrs	r2, r3
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001950:	683a      	ldr	r2, [r7, #0]
 8001952:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001954:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	3248      	adds	r2, #72	; 0x48
 800195a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800196e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001970:	6979      	ldr	r1, [r7, #20]
 8001972:	3348      	adds	r3, #72	; 0x48
 8001974:	00db      	lsls	r3, r3, #3
 8001976:	440b      	add	r3, r1
 8001978:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	699b      	ldr	r3, [r3, #24]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d109      	bne.n	8001996 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	43db      	mvns	r3, r3
 800198c:	401a      	ands	r2, r3
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001994:	e007      	b.n	80019a6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	431a      	orrs	r2, r3
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	691b      	ldr	r3, [r3, #16]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d109      	bne.n	80019c2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	43db      	mvns	r3, r3
 80019b8:	401a      	ands	r2, r3
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80019c0:	e007      	b.n	80019d2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	431a      	orrs	r2, r3
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	6a1b      	ldr	r3, [r3, #32]
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d107      	bne.n	80019ea <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	431a      	orrs	r2, r3
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80019f0:	f023 0201 	bic.w	r2, r3, #1
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80019fa:	2300      	movs	r3, #0
 80019fc:	e006      	b.n	8001a0c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a02:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
  }
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	371c      	adds	r7, #28
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr
 8001a18:	40006400 	.word	0x40006400

08001a1c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d12e      	bne.n	8001a8e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2202      	movs	r2, #2
 8001a34:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f022 0201 	bic.w	r2, r2, #1
 8001a46:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001a48:	f7ff fddc 	bl	8001604 <HAL_GetTick>
 8001a4c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a4e:	e012      	b.n	8001a76 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a50:	f7ff fdd8 	bl	8001604 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b0a      	cmp	r3, #10
 8001a5c:	d90b      	bls.n	8001a76 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a62:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2205      	movs	r2, #5
 8001a6e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e012      	b.n	8001a9c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f003 0301 	and.w	r3, r3, #1
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d1e5      	bne.n	8001a50 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2200      	movs	r2, #0
 8001a88:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	e006      	b.n	8001a9c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a92:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
  }
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3710      	adds	r7, #16
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b087      	sub	sp, #28
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	60b9      	str	r1, [r7, #8]
 8001aae:	607a      	str	r2, [r7, #4]
 8001ab0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ab8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001aba:	7dfb      	ldrb	r3, [r7, #23]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d003      	beq.n	8001ac8 <HAL_CAN_GetRxMessage+0x24>
 8001ac0:	7dfb      	ldrb	r3, [r7, #23]
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	f040 80f3 	bne.w	8001cae <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d10e      	bne.n	8001aec <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	f003 0303 	and.w	r3, r3, #3
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d116      	bne.n	8001b0a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e0e7      	b.n	8001cbc <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	691b      	ldr	r3, [r3, #16]
 8001af2:	f003 0303 	and.w	r3, r3, #3
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d107      	bne.n	8001b0a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e0d8      	b.n	8001cbc <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	331b      	adds	r3, #27
 8001b12:	011b      	lsls	r3, r3, #4
 8001b14:	4413      	add	r3, r2
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0204 	and.w	r2, r3, #4
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d10c      	bne.n	8001b42 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	331b      	adds	r3, #27
 8001b30:	011b      	lsls	r3, r3, #4
 8001b32:	4413      	add	r3, r2
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	0d5b      	lsrs	r3, r3, #21
 8001b38:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	e00b      	b.n	8001b5a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	331b      	adds	r3, #27
 8001b4a:	011b      	lsls	r3, r3, #4
 8001b4c:	4413      	add	r3, r2
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	08db      	lsrs	r3, r3, #3
 8001b52:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	331b      	adds	r3, #27
 8001b62:	011b      	lsls	r3, r3, #4
 8001b64:	4413      	add	r3, r2
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0202 	and.w	r2, r3, #2
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	331b      	adds	r3, #27
 8001b78:	011b      	lsls	r3, r3, #4
 8001b7a:	4413      	add	r3, r2
 8001b7c:	3304      	adds	r3, #4
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 020f 	and.w	r2, r3, #15
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	331b      	adds	r3, #27
 8001b90:	011b      	lsls	r3, r3, #4
 8001b92:	4413      	add	r3, r2
 8001b94:	3304      	adds	r3, #4
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	0a1b      	lsrs	r3, r3, #8
 8001b9a:	b2da      	uxtb	r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	331b      	adds	r3, #27
 8001ba8:	011b      	lsls	r3, r3, #4
 8001baa:	4413      	add	r3, r2
 8001bac:	3304      	adds	r3, #4
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	0c1b      	lsrs	r3, r3, #16
 8001bb2:	b29a      	uxth	r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	011b      	lsls	r3, r3, #4
 8001bc0:	4413      	add	r3, r2
 8001bc2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	b2da      	uxtb	r2, r3
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	011b      	lsls	r3, r3, #4
 8001bd6:	4413      	add	r3, r2
 8001bd8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	0a1a      	lsrs	r2, r3, #8
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	3301      	adds	r3, #1
 8001be4:	b2d2      	uxtb	r2, r2
 8001be6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	011b      	lsls	r3, r3, #4
 8001bf0:	4413      	add	r3, r2
 8001bf2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	0c1a      	lsrs	r2, r3, #16
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	3302      	adds	r3, #2
 8001bfe:	b2d2      	uxtb	r2, r2
 8001c00:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	011b      	lsls	r3, r3, #4
 8001c0a:	4413      	add	r3, r2
 8001c0c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	0e1a      	lsrs	r2, r3, #24
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	3303      	adds	r3, #3
 8001c18:	b2d2      	uxtb	r2, r2
 8001c1a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	011b      	lsls	r3, r3, #4
 8001c24:	4413      	add	r3, r2
 8001c26:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	3304      	adds	r3, #4
 8001c30:	b2d2      	uxtb	r2, r2
 8001c32:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	011b      	lsls	r3, r3, #4
 8001c3c:	4413      	add	r3, r2
 8001c3e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	0a1a      	lsrs	r2, r3, #8
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	3305      	adds	r3, #5
 8001c4a:	b2d2      	uxtb	r2, r2
 8001c4c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	011b      	lsls	r3, r3, #4
 8001c56:	4413      	add	r3, r2
 8001c58:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	0c1a      	lsrs	r2, r3, #16
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	3306      	adds	r3, #6
 8001c64:	b2d2      	uxtb	r2, r2
 8001c66:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	011b      	lsls	r3, r3, #4
 8001c70:	4413      	add	r3, r2
 8001c72:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	0e1a      	lsrs	r2, r3, #24
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	3307      	adds	r3, #7
 8001c7e:	b2d2      	uxtb	r2, r2
 8001c80:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d108      	bne.n	8001c9a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	68da      	ldr	r2, [r3, #12]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f042 0220 	orr.w	r2, r2, #32
 8001c96:	60da      	str	r2, [r3, #12]
 8001c98:	e007      	b.n	8001caa <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	691a      	ldr	r2, [r3, #16]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f042 0220 	orr.w	r2, r2, #32
 8001ca8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001caa:	2300      	movs	r3, #0
 8001cac:	e006      	b.n	8001cbc <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
  }
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	371c      	adds	r7, #28
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b085      	sub	sp, #20
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cd8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001cda:	7bfb      	ldrb	r3, [r7, #15]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d002      	beq.n	8001ce6 <HAL_CAN_ActivateNotification+0x1e>
 8001ce0:	7bfb      	ldrb	r3, [r7, #15]
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d109      	bne.n	8001cfa <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	6959      	ldr	r1, [r3, #20]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	683a      	ldr	r2, [r7, #0]
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	e006      	b.n	8001d08 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfe:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
  }
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3714      	adds	r7, #20
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b08a      	sub	sp, #40	; 0x28
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	695b      	ldr	r3, [r3, #20]
 8001d26:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	691b      	ldr	r3, [r3, #16]
 8001d46:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	699b      	ldr	r3, [r3, #24]
 8001d4e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001d50:	6a3b      	ldr	r3, [r7, #32]
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d07c      	beq.n	8001e54 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	f003 0301 	and.w	r3, r3, #1
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d023      	beq.n	8001dac <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2201      	movs	r2, #1
 8001d6a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d003      	beq.n	8001d7e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f000 f983 	bl	8002082 <HAL_CAN_TxMailbox0CompleteCallback>
 8001d7c:	e016      	b.n	8001dac <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	f003 0304 	and.w	r3, r3, #4
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d004      	beq.n	8001d92 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d8e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d90:	e00c      	b.n	8001dac <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	f003 0308 	and.w	r3, r3, #8
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d004      	beq.n	8001da6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001da2:	627b      	str	r3, [r7, #36]	; 0x24
 8001da4:	e002      	b.n	8001dac <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f000 f989 	bl	80020be <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d024      	beq.n	8001e00 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001dbe:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d003      	beq.n	8001dd2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f000 f963 	bl	8002096 <HAL_CAN_TxMailbox1CompleteCallback>
 8001dd0:	e016      	b.n	8001e00 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d004      	beq.n	8001de6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dde:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001de2:	627b      	str	r3, [r7, #36]	; 0x24
 8001de4:	e00c      	b.n	8001e00 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d004      	beq.n	8001dfa <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001df6:	627b      	str	r3, [r7, #36]	; 0x24
 8001df8:	e002      	b.n	8001e00 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f000 f969 	bl	80020d2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d024      	beq.n	8001e54 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e12:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d003      	beq.n	8001e26 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f000 f943 	bl	80020aa <HAL_CAN_TxMailbox2CompleteCallback>
 8001e24:	e016      	b.n	8001e54 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d004      	beq.n	8001e3a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e36:	627b      	str	r3, [r7, #36]	; 0x24
 8001e38:	e00c      	b.n	8001e54 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d004      	beq.n	8001e4e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e4a:	627b      	str	r3, [r7, #36]	; 0x24
 8001e4c:	e002      	b.n	8001e54 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 f949 	bl	80020e6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001e54:	6a3b      	ldr	r3, [r7, #32]
 8001e56:	f003 0308 	and.w	r3, r3, #8
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d00c      	beq.n	8001e78 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	f003 0310 	and.w	r3, r3, #16
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d007      	beq.n	8001e78 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e6e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2210      	movs	r2, #16
 8001e76:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001e78:	6a3b      	ldr	r3, [r7, #32]
 8001e7a:	f003 0304 	and.w	r3, r3, #4
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d00b      	beq.n	8001e9a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	f003 0308 	and.w	r3, r3, #8
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d006      	beq.n	8001e9a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2208      	movs	r2, #8
 8001e92:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f000 f930 	bl	80020fa <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001e9a:	6a3b      	ldr	r3, [r7, #32]
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d009      	beq.n	8001eb8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	f003 0303 	and.w	r3, r3, #3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d002      	beq.n	8001eb8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f7fe fc96 	bl	80007e4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001eb8:	6a3b      	ldr	r3, [r7, #32]
 8001eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d00c      	beq.n	8001edc <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	f003 0310 	and.w	r3, r3, #16
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d007      	beq.n	8001edc <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ece:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ed2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2210      	movs	r2, #16
 8001eda:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001edc:	6a3b      	ldr	r3, [r7, #32]
 8001ede:	f003 0320 	and.w	r3, r3, #32
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d00b      	beq.n	8001efe <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	f003 0308 	and.w	r3, r3, #8
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d006      	beq.n	8001efe <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2208      	movs	r2, #8
 8001ef6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f000 f908 	bl	800210e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001efe:	6a3b      	ldr	r3, [r7, #32]
 8001f00:	f003 0310 	and.w	r3, r3, #16
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d009      	beq.n	8001f1c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	f003 0303 	and.w	r3, r3, #3
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d002      	beq.n	8001f1c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f7fe fcc8 	bl	80008ac <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001f1c:	6a3b      	ldr	r3, [r7, #32]
 8001f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d00b      	beq.n	8001f3e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	f003 0310 	and.w	r3, r3, #16
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d006      	beq.n	8001f3e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2210      	movs	r2, #16
 8001f36:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f000 f8f2 	bl	8002122 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001f3e:	6a3b      	ldr	r3, [r7, #32]
 8001f40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d00b      	beq.n	8001f60 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	f003 0308 	and.w	r3, r3, #8
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d006      	beq.n	8001f60 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2208      	movs	r2, #8
 8001f58:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 f8eb 	bl	8002136 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001f60:	6a3b      	ldr	r3, [r7, #32]
 8001f62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d07b      	beq.n	8002062 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	f003 0304 	and.w	r3, r3, #4
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d072      	beq.n	800205a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001f74:	6a3b      	ldr	r3, [r7, #32]
 8001f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d008      	beq.n	8001f90 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d003      	beq.n	8001f90 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8a:	f043 0301 	orr.w	r3, r3, #1
 8001f8e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001f90:	6a3b      	ldr	r3, [r7, #32]
 8001f92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d008      	beq.n	8001fac <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d003      	beq.n	8001fac <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa6:	f043 0302 	orr.w	r3, r3, #2
 8001faa:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001fac:	6a3b      	ldr	r3, [r7, #32]
 8001fae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d008      	beq.n	8001fc8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d003      	beq.n	8001fc8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc2:	f043 0304 	orr.w	r3, r3, #4
 8001fc6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001fc8:	6a3b      	ldr	r3, [r7, #32]
 8001fca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d043      	beq.n	800205a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d03e      	beq.n	800205a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001fe2:	2b60      	cmp	r3, #96	; 0x60
 8001fe4:	d02b      	beq.n	800203e <HAL_CAN_IRQHandler+0x32a>
 8001fe6:	2b60      	cmp	r3, #96	; 0x60
 8001fe8:	d82e      	bhi.n	8002048 <HAL_CAN_IRQHandler+0x334>
 8001fea:	2b50      	cmp	r3, #80	; 0x50
 8001fec:	d022      	beq.n	8002034 <HAL_CAN_IRQHandler+0x320>
 8001fee:	2b50      	cmp	r3, #80	; 0x50
 8001ff0:	d82a      	bhi.n	8002048 <HAL_CAN_IRQHandler+0x334>
 8001ff2:	2b40      	cmp	r3, #64	; 0x40
 8001ff4:	d019      	beq.n	800202a <HAL_CAN_IRQHandler+0x316>
 8001ff6:	2b40      	cmp	r3, #64	; 0x40
 8001ff8:	d826      	bhi.n	8002048 <HAL_CAN_IRQHandler+0x334>
 8001ffa:	2b30      	cmp	r3, #48	; 0x30
 8001ffc:	d010      	beq.n	8002020 <HAL_CAN_IRQHandler+0x30c>
 8001ffe:	2b30      	cmp	r3, #48	; 0x30
 8002000:	d822      	bhi.n	8002048 <HAL_CAN_IRQHandler+0x334>
 8002002:	2b10      	cmp	r3, #16
 8002004:	d002      	beq.n	800200c <HAL_CAN_IRQHandler+0x2f8>
 8002006:	2b20      	cmp	r3, #32
 8002008:	d005      	beq.n	8002016 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800200a:	e01d      	b.n	8002048 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800200c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200e:	f043 0308 	orr.w	r3, r3, #8
 8002012:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002014:	e019      	b.n	800204a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002018:	f043 0310 	orr.w	r3, r3, #16
 800201c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800201e:	e014      	b.n	800204a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002022:	f043 0320 	orr.w	r3, r3, #32
 8002026:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002028:	e00f      	b.n	800204a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800202a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002030:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002032:	e00a      	b.n	800204a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002036:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800203a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800203c:	e005      	b.n	800204a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800203e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002040:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002044:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002046:	e000      	b.n	800204a <HAL_CAN_IRQHandler+0x336>
            break;
 8002048:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	699a      	ldr	r2, [r3, #24]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002058:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2204      	movs	r2, #4
 8002060:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002064:	2b00      	cmp	r3, #0
 8002066:	d008      	beq.n	800207a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800206c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206e:	431a      	orrs	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f000 f868 	bl	800214a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800207a:	bf00      	nop
 800207c:	3728      	adds	r7, #40	; 0x28
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002082:	b480      	push	{r7}
 8002084:	b083      	sub	sp, #12
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800208a:	bf00      	nop
 800208c:	370c      	adds	r7, #12
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr

08002096 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002096:	b480      	push	{r7}
 8002098:	b083      	sub	sp, #12
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800209e:	bf00      	nop
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr

080020aa <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80020aa:	b480      	push	{r7}
 80020ac:	b083      	sub	sp, #12
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80020b2:	bf00      	nop
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr

080020be <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80020be:	b480      	push	{r7}
 80020c0:	b083      	sub	sp, #12
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80020c6:	bf00      	nop
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr

080020d2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80020d2:	b480      	push	{r7}
 80020d4:	b083      	sub	sp, #12
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80020da:	bf00      	nop
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr

080020e6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80020e6:	b480      	push	{r7}
 80020e8:	b083      	sub	sp, #12
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80020ee:	bf00      	nop
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr

080020fa <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80020fa:	b480      	push	{r7}
 80020fc:	b083      	sub	sp, #12
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002102:	bf00      	nop
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr

0800210e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800210e:	b480      	push	{r7}
 8002110:	b083      	sub	sp, #12
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002116:	bf00      	nop
 8002118:	370c      	adds	r7, #12
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr

08002122 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002122:	b480      	push	{r7}
 8002124:	b083      	sub	sp, #12
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800212a:	bf00      	nop
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr

08002136 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002136:	b480      	push	{r7}
 8002138:	b083      	sub	sp, #12
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800213e:	bf00      	nop
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr

0800214a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800214a:	b480      	push	{r7}
 800214c:	b083      	sub	sp, #12
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002152:	bf00      	nop
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
	...

08002160 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f003 0307 	and.w	r3, r3, #7
 800216e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002170:	4b0c      	ldr	r3, [pc, #48]	; (80021a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002176:	68ba      	ldr	r2, [r7, #8]
 8002178:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800217c:	4013      	ands	r3, r2
 800217e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002188:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800218c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002190:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002192:	4a04      	ldr	r2, [pc, #16]	; (80021a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	60d3      	str	r3, [r2, #12]
}
 8002198:	bf00      	nop
 800219a:	3714      	adds	r7, #20
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr
 80021a4:	e000ed00 	.word	0xe000ed00

080021a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021ac:	4b04      	ldr	r3, [pc, #16]	; (80021c0 <__NVIC_GetPriorityGrouping+0x18>)
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	0a1b      	lsrs	r3, r3, #8
 80021b2:	f003 0307 	and.w	r3, r3, #7
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr
 80021c0:	e000ed00 	.word	0xe000ed00

080021c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	4603      	mov	r3, r0
 80021cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	db0b      	blt.n	80021ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021d6:	79fb      	ldrb	r3, [r7, #7]
 80021d8:	f003 021f 	and.w	r2, r3, #31
 80021dc:	4907      	ldr	r1, [pc, #28]	; (80021fc <__NVIC_EnableIRQ+0x38>)
 80021de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e2:	095b      	lsrs	r3, r3, #5
 80021e4:	2001      	movs	r0, #1
 80021e6:	fa00 f202 	lsl.w	r2, r0, r2
 80021ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021ee:	bf00      	nop
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	e000e100 	.word	0xe000e100

08002200 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	4603      	mov	r3, r0
 8002208:	6039      	str	r1, [r7, #0]
 800220a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800220c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002210:	2b00      	cmp	r3, #0
 8002212:	db0a      	blt.n	800222a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	b2da      	uxtb	r2, r3
 8002218:	490c      	ldr	r1, [pc, #48]	; (800224c <__NVIC_SetPriority+0x4c>)
 800221a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800221e:	0112      	lsls	r2, r2, #4
 8002220:	b2d2      	uxtb	r2, r2
 8002222:	440b      	add	r3, r1
 8002224:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002228:	e00a      	b.n	8002240 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	b2da      	uxtb	r2, r3
 800222e:	4908      	ldr	r1, [pc, #32]	; (8002250 <__NVIC_SetPriority+0x50>)
 8002230:	79fb      	ldrb	r3, [r7, #7]
 8002232:	f003 030f 	and.w	r3, r3, #15
 8002236:	3b04      	subs	r3, #4
 8002238:	0112      	lsls	r2, r2, #4
 800223a:	b2d2      	uxtb	r2, r2
 800223c:	440b      	add	r3, r1
 800223e:	761a      	strb	r2, [r3, #24]
}
 8002240:	bf00      	nop
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr
 800224c:	e000e100 	.word	0xe000e100
 8002250:	e000ed00 	.word	0xe000ed00

08002254 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002254:	b480      	push	{r7}
 8002256:	b089      	sub	sp, #36	; 0x24
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f003 0307 	and.w	r3, r3, #7
 8002266:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	f1c3 0307 	rsb	r3, r3, #7
 800226e:	2b04      	cmp	r3, #4
 8002270:	bf28      	it	cs
 8002272:	2304      	movcs	r3, #4
 8002274:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	3304      	adds	r3, #4
 800227a:	2b06      	cmp	r3, #6
 800227c:	d902      	bls.n	8002284 <NVIC_EncodePriority+0x30>
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	3b03      	subs	r3, #3
 8002282:	e000      	b.n	8002286 <NVIC_EncodePriority+0x32>
 8002284:	2300      	movs	r3, #0
 8002286:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002288:	f04f 32ff 	mov.w	r2, #4294967295
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	fa02 f303 	lsl.w	r3, r2, r3
 8002292:	43da      	mvns	r2, r3
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	401a      	ands	r2, r3
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800229c:	f04f 31ff 	mov.w	r1, #4294967295
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	fa01 f303 	lsl.w	r3, r1, r3
 80022a6:	43d9      	mvns	r1, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022ac:	4313      	orrs	r3, r2
         );
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3724      	adds	r7, #36	; 0x24
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
	...

080022bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	3b01      	subs	r3, #1
 80022c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022cc:	d301      	bcc.n	80022d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022ce:	2301      	movs	r3, #1
 80022d0:	e00f      	b.n	80022f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022d2:	4a0a      	ldr	r2, [pc, #40]	; (80022fc <SysTick_Config+0x40>)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	3b01      	subs	r3, #1
 80022d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022da:	210f      	movs	r1, #15
 80022dc:	f04f 30ff 	mov.w	r0, #4294967295
 80022e0:	f7ff ff8e 	bl	8002200 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022e4:	4b05      	ldr	r3, [pc, #20]	; (80022fc <SysTick_Config+0x40>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022ea:	4b04      	ldr	r3, [pc, #16]	; (80022fc <SysTick_Config+0x40>)
 80022ec:	2207      	movs	r2, #7
 80022ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	e000e010 	.word	0xe000e010

08002300 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f7ff ff29 	bl	8002160 <__NVIC_SetPriorityGrouping>
}
 800230e:	bf00      	nop
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002316:	b580      	push	{r7, lr}
 8002318:	b086      	sub	sp, #24
 800231a:	af00      	add	r7, sp, #0
 800231c:	4603      	mov	r3, r0
 800231e:	60b9      	str	r1, [r7, #8]
 8002320:	607a      	str	r2, [r7, #4]
 8002322:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002324:	2300      	movs	r3, #0
 8002326:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002328:	f7ff ff3e 	bl	80021a8 <__NVIC_GetPriorityGrouping>
 800232c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	68b9      	ldr	r1, [r7, #8]
 8002332:	6978      	ldr	r0, [r7, #20]
 8002334:	f7ff ff8e 	bl	8002254 <NVIC_EncodePriority>
 8002338:	4602      	mov	r2, r0
 800233a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800233e:	4611      	mov	r1, r2
 8002340:	4618      	mov	r0, r3
 8002342:	f7ff ff5d 	bl	8002200 <__NVIC_SetPriority>
}
 8002346:	bf00      	nop
 8002348:	3718      	adds	r7, #24
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800234e:	b580      	push	{r7, lr}
 8002350:	b082      	sub	sp, #8
 8002352:	af00      	add	r7, sp, #0
 8002354:	4603      	mov	r3, r0
 8002356:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff ff31 	bl	80021c4 <__NVIC_EnableIRQ>
}
 8002362:	bf00      	nop
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	b082      	sub	sp, #8
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f7ff ffa2 	bl	80022bc <SysTick_Config>
 8002378:	4603      	mov	r3, r0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
	...

08002384 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800238c:	2300      	movs	r3, #0
 800238e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002390:	f7ff f938 	bl	8001604 <HAL_GetTick>
 8002394:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d101      	bne.n	80023a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e099      	b.n	80024d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2202      	movs	r2, #2
 80023a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f022 0201 	bic.w	r2, r2, #1
 80023be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023c0:	e00f      	b.n	80023e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023c2:	f7ff f91f 	bl	8001604 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	2b05      	cmp	r3, #5
 80023ce:	d908      	bls.n	80023e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2220      	movs	r2, #32
 80023d4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2203      	movs	r2, #3
 80023da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e078      	b.n	80024d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0301 	and.w	r3, r3, #1
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d1e8      	bne.n	80023c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80023f8:	697a      	ldr	r2, [r7, #20]
 80023fa:	4b38      	ldr	r3, [pc, #224]	; (80024dc <HAL_DMA_Init+0x158>)
 80023fc:	4013      	ands	r3, r2
 80023fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685a      	ldr	r2, [r3, #4]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800240e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	691b      	ldr	r3, [r3, #16]
 8002414:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800241a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	699b      	ldr	r3, [r3, #24]
 8002420:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002426:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a1b      	ldr	r3, [r3, #32]
 800242c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800242e:	697a      	ldr	r2, [r7, #20]
 8002430:	4313      	orrs	r3, r2
 8002432:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002438:	2b04      	cmp	r3, #4
 800243a:	d107      	bne.n	800244c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002444:	4313      	orrs	r3, r2
 8002446:	697a      	ldr	r2, [r7, #20]
 8002448:	4313      	orrs	r3, r2
 800244a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	697a      	ldr	r2, [r7, #20]
 8002452:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	695b      	ldr	r3, [r3, #20]
 800245a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	f023 0307 	bic.w	r3, r3, #7
 8002462:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002468:	697a      	ldr	r2, [r7, #20]
 800246a:	4313      	orrs	r3, r2
 800246c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002472:	2b04      	cmp	r3, #4
 8002474:	d117      	bne.n	80024a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800247a:	697a      	ldr	r2, [r7, #20]
 800247c:	4313      	orrs	r3, r2
 800247e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002484:	2b00      	cmp	r3, #0
 8002486:	d00e      	beq.n	80024a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f000 fa9d 	bl	80029c8 <DMA_CheckFifoParam>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d008      	beq.n	80024a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2240      	movs	r2, #64	; 0x40
 8002498:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2201      	movs	r2, #1
 800249e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80024a2:	2301      	movs	r3, #1
 80024a4:	e016      	b.n	80024d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	697a      	ldr	r2, [r7, #20]
 80024ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f000 fa54 	bl	800295c <DMA_CalcBaseAndBitshift>
 80024b4:	4603      	mov	r3, r0
 80024b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024bc:	223f      	movs	r2, #63	; 0x3f
 80024be:	409a      	lsls	r2, r3
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2201      	movs	r2, #1
 80024ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80024d2:	2300      	movs	r3, #0
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3718      	adds	r7, #24
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	f010803f 	.word	0xf010803f

080024e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b086      	sub	sp, #24
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	607a      	str	r2, [r7, #4]
 80024ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024ee:	2300      	movs	r3, #0
 80024f0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d101      	bne.n	8002506 <HAL_DMA_Start_IT+0x26>
 8002502:	2302      	movs	r3, #2
 8002504:	e040      	b.n	8002588 <HAL_DMA_Start_IT+0xa8>
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2201      	movs	r2, #1
 800250a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2b01      	cmp	r3, #1
 8002518:	d12f      	bne.n	800257a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2202      	movs	r2, #2
 800251e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2200      	movs	r2, #0
 8002526:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	68b9      	ldr	r1, [r7, #8]
 800252e:	68f8      	ldr	r0, [r7, #12]
 8002530:	f000 f9e6 	bl	8002900 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002538:	223f      	movs	r2, #63	; 0x3f
 800253a:	409a      	lsls	r2, r3
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f042 0216 	orr.w	r2, r2, #22
 800254e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002554:	2b00      	cmp	r3, #0
 8002556:	d007      	beq.n	8002568 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f042 0208 	orr.w	r2, r2, #8
 8002566:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f042 0201 	orr.w	r2, r2, #1
 8002576:	601a      	str	r2, [r3, #0]
 8002578:	e005      	b.n	8002586 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002582:	2302      	movs	r3, #2
 8002584:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002586:	7dfb      	ldrb	r3, [r7, #23]
}
 8002588:	4618      	mov	r0, r3
 800258a:	3718      	adds	r7, #24
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}

08002590 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d004      	beq.n	80025ae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2280      	movs	r2, #128	; 0x80
 80025a8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e00c      	b.n	80025c8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2205      	movs	r2, #5
 80025b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f022 0201 	bic.w	r2, r2, #1
 80025c4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80025dc:	2300      	movs	r3, #0
 80025de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80025e0:	4b8e      	ldr	r3, [pc, #568]	; (800281c <HAL_DMA_IRQHandler+0x248>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a8e      	ldr	r2, [pc, #568]	; (8002820 <HAL_DMA_IRQHandler+0x24c>)
 80025e6:	fba2 2303 	umull	r2, r3, r2, r3
 80025ea:	0a9b      	lsrs	r3, r3, #10
 80025ec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025fe:	2208      	movs	r2, #8
 8002600:	409a      	lsls	r2, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	4013      	ands	r3, r2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d01a      	beq.n	8002640 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0304 	and.w	r3, r3, #4
 8002614:	2b00      	cmp	r3, #0
 8002616:	d013      	beq.n	8002640 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f022 0204 	bic.w	r2, r2, #4
 8002626:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800262c:	2208      	movs	r2, #8
 800262e:	409a      	lsls	r2, r3
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002638:	f043 0201 	orr.w	r2, r3, #1
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002644:	2201      	movs	r2, #1
 8002646:	409a      	lsls	r2, r3
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	4013      	ands	r3, r2
 800264c:	2b00      	cmp	r3, #0
 800264e:	d012      	beq.n	8002676 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	695b      	ldr	r3, [r3, #20]
 8002656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800265a:	2b00      	cmp	r3, #0
 800265c:	d00b      	beq.n	8002676 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002662:	2201      	movs	r2, #1
 8002664:	409a      	lsls	r2, r3
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800266e:	f043 0202 	orr.w	r2, r3, #2
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800267a:	2204      	movs	r2, #4
 800267c:	409a      	lsls	r2, r3
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	4013      	ands	r3, r2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d012      	beq.n	80026ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d00b      	beq.n	80026ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002698:	2204      	movs	r2, #4
 800269a:	409a      	lsls	r2, r3
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a4:	f043 0204 	orr.w	r2, r3, #4
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026b0:	2210      	movs	r2, #16
 80026b2:	409a      	lsls	r2, r3
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	4013      	ands	r3, r2
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d043      	beq.n	8002744 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0308 	and.w	r3, r3, #8
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d03c      	beq.n	8002744 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ce:	2210      	movs	r2, #16
 80026d0:	409a      	lsls	r2, r3
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d018      	beq.n	8002716 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d108      	bne.n	8002704 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d024      	beq.n	8002744 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	4798      	blx	r3
 8002702:	e01f      	b.n	8002744 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002708:	2b00      	cmp	r3, #0
 800270a:	d01b      	beq.n	8002744 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	4798      	blx	r3
 8002714:	e016      	b.n	8002744 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002720:	2b00      	cmp	r3, #0
 8002722:	d107      	bne.n	8002734 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f022 0208 	bic.w	r2, r2, #8
 8002732:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002738:	2b00      	cmp	r3, #0
 800273a:	d003      	beq.n	8002744 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002748:	2220      	movs	r2, #32
 800274a:	409a      	lsls	r2, r3
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	4013      	ands	r3, r2
 8002750:	2b00      	cmp	r3, #0
 8002752:	f000 808f 	beq.w	8002874 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0310 	and.w	r3, r3, #16
 8002760:	2b00      	cmp	r3, #0
 8002762:	f000 8087 	beq.w	8002874 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800276a:	2220      	movs	r2, #32
 800276c:	409a      	lsls	r2, r3
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b05      	cmp	r3, #5
 800277c:	d136      	bne.n	80027ec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f022 0216 	bic.w	r2, r2, #22
 800278c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	695a      	ldr	r2, [r3, #20]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800279c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d103      	bne.n	80027ae <HAL_DMA_IRQHandler+0x1da>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d007      	beq.n	80027be <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f022 0208 	bic.w	r2, r2, #8
 80027bc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027c2:	223f      	movs	r2, #63	; 0x3f
 80027c4:	409a      	lsls	r2, r3
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2201      	movs	r2, #1
 80027ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d07e      	beq.n	80028e0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	4798      	blx	r3
        }
        return;
 80027ea:	e079      	b.n	80028e0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d01d      	beq.n	8002836 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d10d      	bne.n	8002824 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280c:	2b00      	cmp	r3, #0
 800280e:	d031      	beq.n	8002874 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	4798      	blx	r3
 8002818:	e02c      	b.n	8002874 <HAL_DMA_IRQHandler+0x2a0>
 800281a:	bf00      	nop
 800281c:	20000000 	.word	0x20000000
 8002820:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002828:	2b00      	cmp	r3, #0
 800282a:	d023      	beq.n	8002874 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	4798      	blx	r3
 8002834:	e01e      	b.n	8002874 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002840:	2b00      	cmp	r3, #0
 8002842:	d10f      	bne.n	8002864 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f022 0210 	bic.w	r2, r2, #16
 8002852:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002868:	2b00      	cmp	r3, #0
 800286a:	d003      	beq.n	8002874 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002878:	2b00      	cmp	r3, #0
 800287a:	d032      	beq.n	80028e2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002880:	f003 0301 	and.w	r3, r3, #1
 8002884:	2b00      	cmp	r3, #0
 8002886:	d022      	beq.n	80028ce <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2205      	movs	r2, #5
 800288c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f022 0201 	bic.w	r2, r2, #1
 800289e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	3301      	adds	r3, #1
 80028a4:	60bb      	str	r3, [r7, #8]
 80028a6:	697a      	ldr	r2, [r7, #20]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d307      	bcc.n	80028bc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0301 	and.w	r3, r3, #1
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1f2      	bne.n	80028a0 <HAL_DMA_IRQHandler+0x2cc>
 80028ba:	e000      	b.n	80028be <HAL_DMA_IRQHandler+0x2ea>
          break;
 80028bc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2201      	movs	r2, #1
 80028c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d005      	beq.n	80028e2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	4798      	blx	r3
 80028de:	e000      	b.n	80028e2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80028e0:	bf00      	nop
    }
  }
}
 80028e2:	3718      	adds	r7, #24
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
 800290c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800291c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	683a      	ldr	r2, [r7, #0]
 8002924:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	2b40      	cmp	r3, #64	; 0x40
 800292c:	d108      	bne.n	8002940 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	68ba      	ldr	r2, [r7, #8]
 800293c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800293e:	e007      	b.n	8002950 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	68ba      	ldr	r2, [r7, #8]
 8002946:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	60da      	str	r2, [r3, #12]
}
 8002950:	bf00      	nop
 8002952:	3714      	adds	r7, #20
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800295c:	b480      	push	{r7}
 800295e:	b085      	sub	sp, #20
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	b2db      	uxtb	r3, r3
 800296a:	3b10      	subs	r3, #16
 800296c:	4a14      	ldr	r2, [pc, #80]	; (80029c0 <DMA_CalcBaseAndBitshift+0x64>)
 800296e:	fba2 2303 	umull	r2, r3, r2, r3
 8002972:	091b      	lsrs	r3, r3, #4
 8002974:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002976:	4a13      	ldr	r2, [pc, #76]	; (80029c4 <DMA_CalcBaseAndBitshift+0x68>)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	4413      	add	r3, r2
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	461a      	mov	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2b03      	cmp	r3, #3
 8002988:	d909      	bls.n	800299e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002992:	f023 0303 	bic.w	r3, r3, #3
 8002996:	1d1a      	adds	r2, r3, #4
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	659a      	str	r2, [r3, #88]	; 0x58
 800299c:	e007      	b.n	80029ae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80029a6:	f023 0303 	bic.w	r3, r3, #3
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3714      	adds	r7, #20
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	aaaaaaab 	.word	0xaaaaaaab
 80029c4:	0800c964 	.word	0x0800c964

080029c8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b085      	sub	sp, #20
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029d0:	2300      	movs	r3, #0
 80029d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	699b      	ldr	r3, [r3, #24]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d11f      	bne.n	8002a22 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	2b03      	cmp	r3, #3
 80029e6:	d856      	bhi.n	8002a96 <DMA_CheckFifoParam+0xce>
 80029e8:	a201      	add	r2, pc, #4	; (adr r2, 80029f0 <DMA_CheckFifoParam+0x28>)
 80029ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ee:	bf00      	nop
 80029f0:	08002a01 	.word	0x08002a01
 80029f4:	08002a13 	.word	0x08002a13
 80029f8:	08002a01 	.word	0x08002a01
 80029fc:	08002a97 	.word	0x08002a97
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d046      	beq.n	8002a9a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a10:	e043      	b.n	8002a9a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a16:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a1a:	d140      	bne.n	8002a9e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a20:	e03d      	b.n	8002a9e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	699b      	ldr	r3, [r3, #24]
 8002a26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a2a:	d121      	bne.n	8002a70 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	2b03      	cmp	r3, #3
 8002a30:	d837      	bhi.n	8002aa2 <DMA_CheckFifoParam+0xda>
 8002a32:	a201      	add	r2, pc, #4	; (adr r2, 8002a38 <DMA_CheckFifoParam+0x70>)
 8002a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a38:	08002a49 	.word	0x08002a49
 8002a3c:	08002a4f 	.word	0x08002a4f
 8002a40:	08002a49 	.word	0x08002a49
 8002a44:	08002a61 	.word	0x08002a61
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a4c:	e030      	b.n	8002ab0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d025      	beq.n	8002aa6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a5e:	e022      	b.n	8002aa6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a64:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a68:	d11f      	bne.n	8002aaa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a6e:	e01c      	b.n	8002aaa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d903      	bls.n	8002a7e <DMA_CheckFifoParam+0xb6>
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	2b03      	cmp	r3, #3
 8002a7a:	d003      	beq.n	8002a84 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a7c:	e018      	b.n	8002ab0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	73fb      	strb	r3, [r7, #15]
      break;
 8002a82:	e015      	b.n	8002ab0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d00e      	beq.n	8002aae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	73fb      	strb	r3, [r7, #15]
      break;
 8002a94:	e00b      	b.n	8002aae <DMA_CheckFifoParam+0xe6>
      break;
 8002a96:	bf00      	nop
 8002a98:	e00a      	b.n	8002ab0 <DMA_CheckFifoParam+0xe8>
      break;
 8002a9a:	bf00      	nop
 8002a9c:	e008      	b.n	8002ab0 <DMA_CheckFifoParam+0xe8>
      break;
 8002a9e:	bf00      	nop
 8002aa0:	e006      	b.n	8002ab0 <DMA_CheckFifoParam+0xe8>
      break;
 8002aa2:	bf00      	nop
 8002aa4:	e004      	b.n	8002ab0 <DMA_CheckFifoParam+0xe8>
      break;
 8002aa6:	bf00      	nop
 8002aa8:	e002      	b.n	8002ab0 <DMA_CheckFifoParam+0xe8>
      break;   
 8002aaa:	bf00      	nop
 8002aac:	e000      	b.n	8002ab0 <DMA_CheckFifoParam+0xe8>
      break;
 8002aae:	bf00      	nop
    }
  } 
  
  return status; 
 8002ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3714      	adds	r7, #20
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop

08002ac0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b089      	sub	sp, #36	; 0x24
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002aca:	2300      	movs	r3, #0
 8002acc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	61fb      	str	r3, [r7, #28]
 8002ada:	e16b      	b.n	8002db4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002adc:	2201      	movs	r2, #1
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	697a      	ldr	r2, [r7, #20]
 8002aec:	4013      	ands	r3, r2
 8002aee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002af0:	693a      	ldr	r2, [r7, #16]
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	f040 815a 	bne.w	8002dae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f003 0303 	and.w	r3, r3, #3
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d005      	beq.n	8002b12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d130      	bne.n	8002b74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	2203      	movs	r2, #3
 8002b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b22:	43db      	mvns	r3, r3
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	4013      	ands	r3, r2
 8002b28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	68da      	ldr	r2, [r3, #12]
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	fa02 f303 	lsl.w	r3, r2, r3
 8002b36:	69ba      	ldr	r2, [r7, #24]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b48:	2201      	movs	r2, #1
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	43db      	mvns	r3, r3
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	4013      	ands	r3, r2
 8002b56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	091b      	lsrs	r3, r3, #4
 8002b5e:	f003 0201 	and.w	r2, r3, #1
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	fa02 f303 	lsl.w	r3, r2, r3
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f003 0303 	and.w	r3, r3, #3
 8002b7c:	2b03      	cmp	r3, #3
 8002b7e:	d017      	beq.n	8002bb0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	2203      	movs	r2, #3
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	43db      	mvns	r3, r3
 8002b92:	69ba      	ldr	r2, [r7, #24]
 8002b94:	4013      	ands	r3, r2
 8002b96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	689a      	ldr	r2, [r3, #8]
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	005b      	lsls	r3, r3, #1
 8002ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	69ba      	ldr	r2, [r7, #24]
 8002bae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f003 0303 	and.w	r3, r3, #3
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d123      	bne.n	8002c04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	08da      	lsrs	r2, r3, #3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	3208      	adds	r2, #8
 8002bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	f003 0307 	and.w	r3, r3, #7
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	220f      	movs	r2, #15
 8002bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd8:	43db      	mvns	r3, r3
 8002bda:	69ba      	ldr	r2, [r7, #24]
 8002bdc:	4013      	ands	r3, r2
 8002bde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	691a      	ldr	r2, [r3, #16]
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	f003 0307 	and.w	r3, r3, #7
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	08da      	lsrs	r2, r3, #3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	3208      	adds	r2, #8
 8002bfe:	69b9      	ldr	r1, [r7, #24]
 8002c00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	005b      	lsls	r3, r3, #1
 8002c0e:	2203      	movs	r2, #3
 8002c10:	fa02 f303 	lsl.w	r3, r2, r3
 8002c14:	43db      	mvns	r3, r3
 8002c16:	69ba      	ldr	r2, [r7, #24]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f003 0203 	and.w	r2, r3, #3
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	005b      	lsls	r3, r3, #1
 8002c28:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	f000 80b4 	beq.w	8002dae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c46:	2300      	movs	r3, #0
 8002c48:	60fb      	str	r3, [r7, #12]
 8002c4a:	4b60      	ldr	r3, [pc, #384]	; (8002dcc <HAL_GPIO_Init+0x30c>)
 8002c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c4e:	4a5f      	ldr	r2, [pc, #380]	; (8002dcc <HAL_GPIO_Init+0x30c>)
 8002c50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c54:	6453      	str	r3, [r2, #68]	; 0x44
 8002c56:	4b5d      	ldr	r3, [pc, #372]	; (8002dcc <HAL_GPIO_Init+0x30c>)
 8002c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c5e:	60fb      	str	r3, [r7, #12]
 8002c60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c62:	4a5b      	ldr	r2, [pc, #364]	; (8002dd0 <HAL_GPIO_Init+0x310>)
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	089b      	lsrs	r3, r3, #2
 8002c68:	3302      	adds	r3, #2
 8002c6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	f003 0303 	and.w	r3, r3, #3
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	220f      	movs	r2, #15
 8002c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7e:	43db      	mvns	r3, r3
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	4013      	ands	r3, r2
 8002c84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a52      	ldr	r2, [pc, #328]	; (8002dd4 <HAL_GPIO_Init+0x314>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d02b      	beq.n	8002ce6 <HAL_GPIO_Init+0x226>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a51      	ldr	r2, [pc, #324]	; (8002dd8 <HAL_GPIO_Init+0x318>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d025      	beq.n	8002ce2 <HAL_GPIO_Init+0x222>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a50      	ldr	r2, [pc, #320]	; (8002ddc <HAL_GPIO_Init+0x31c>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d01f      	beq.n	8002cde <HAL_GPIO_Init+0x21e>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a4f      	ldr	r2, [pc, #316]	; (8002de0 <HAL_GPIO_Init+0x320>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d019      	beq.n	8002cda <HAL_GPIO_Init+0x21a>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a4e      	ldr	r2, [pc, #312]	; (8002de4 <HAL_GPIO_Init+0x324>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d013      	beq.n	8002cd6 <HAL_GPIO_Init+0x216>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a4d      	ldr	r2, [pc, #308]	; (8002de8 <HAL_GPIO_Init+0x328>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d00d      	beq.n	8002cd2 <HAL_GPIO_Init+0x212>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a4c      	ldr	r2, [pc, #304]	; (8002dec <HAL_GPIO_Init+0x32c>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d007      	beq.n	8002cce <HAL_GPIO_Init+0x20e>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a4b      	ldr	r2, [pc, #300]	; (8002df0 <HAL_GPIO_Init+0x330>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d101      	bne.n	8002cca <HAL_GPIO_Init+0x20a>
 8002cc6:	2307      	movs	r3, #7
 8002cc8:	e00e      	b.n	8002ce8 <HAL_GPIO_Init+0x228>
 8002cca:	2308      	movs	r3, #8
 8002ccc:	e00c      	b.n	8002ce8 <HAL_GPIO_Init+0x228>
 8002cce:	2306      	movs	r3, #6
 8002cd0:	e00a      	b.n	8002ce8 <HAL_GPIO_Init+0x228>
 8002cd2:	2305      	movs	r3, #5
 8002cd4:	e008      	b.n	8002ce8 <HAL_GPIO_Init+0x228>
 8002cd6:	2304      	movs	r3, #4
 8002cd8:	e006      	b.n	8002ce8 <HAL_GPIO_Init+0x228>
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e004      	b.n	8002ce8 <HAL_GPIO_Init+0x228>
 8002cde:	2302      	movs	r3, #2
 8002ce0:	e002      	b.n	8002ce8 <HAL_GPIO_Init+0x228>
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e000      	b.n	8002ce8 <HAL_GPIO_Init+0x228>
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	69fa      	ldr	r2, [r7, #28]
 8002cea:	f002 0203 	and.w	r2, r2, #3
 8002cee:	0092      	lsls	r2, r2, #2
 8002cf0:	4093      	lsls	r3, r2
 8002cf2:	69ba      	ldr	r2, [r7, #24]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cf8:	4935      	ldr	r1, [pc, #212]	; (8002dd0 <HAL_GPIO_Init+0x310>)
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	089b      	lsrs	r3, r3, #2
 8002cfe:	3302      	adds	r3, #2
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d06:	4b3b      	ldr	r3, [pc, #236]	; (8002df4 <HAL_GPIO_Init+0x334>)
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	43db      	mvns	r3, r3
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	4013      	ands	r3, r2
 8002d14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d003      	beq.n	8002d2a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d2a:	4a32      	ldr	r2, [pc, #200]	; (8002df4 <HAL_GPIO_Init+0x334>)
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d30:	4b30      	ldr	r3, [pc, #192]	; (8002df4 <HAL_GPIO_Init+0x334>)
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	43db      	mvns	r3, r3
 8002d3a:	69ba      	ldr	r2, [r7, #24]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d003      	beq.n	8002d54 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d54:	4a27      	ldr	r2, [pc, #156]	; (8002df4 <HAL_GPIO_Init+0x334>)
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d5a:	4b26      	ldr	r3, [pc, #152]	; (8002df4 <HAL_GPIO_Init+0x334>)
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	43db      	mvns	r3, r3
 8002d64:	69ba      	ldr	r2, [r7, #24]
 8002d66:	4013      	ands	r3, r2
 8002d68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d003      	beq.n	8002d7e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d7e:	4a1d      	ldr	r2, [pc, #116]	; (8002df4 <HAL_GPIO_Init+0x334>)
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d84:	4b1b      	ldr	r3, [pc, #108]	; (8002df4 <HAL_GPIO_Init+0x334>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	43db      	mvns	r3, r3
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	4013      	ands	r3, r2
 8002d92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d003      	beq.n	8002da8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002da8:	4a12      	ldr	r2, [pc, #72]	; (8002df4 <HAL_GPIO_Init+0x334>)
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	3301      	adds	r3, #1
 8002db2:	61fb      	str	r3, [r7, #28]
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	2b0f      	cmp	r3, #15
 8002db8:	f67f ae90 	bls.w	8002adc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002dbc:	bf00      	nop
 8002dbe:	bf00      	nop
 8002dc0:	3724      	adds	r7, #36	; 0x24
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	40023800 	.word	0x40023800
 8002dd0:	40013800 	.word	0x40013800
 8002dd4:	40020000 	.word	0x40020000
 8002dd8:	40020400 	.word	0x40020400
 8002ddc:	40020800 	.word	0x40020800
 8002de0:	40020c00 	.word	0x40020c00
 8002de4:	40021000 	.word	0x40021000
 8002de8:	40021400 	.word	0x40021400
 8002dec:	40021800 	.word	0x40021800
 8002df0:	40021c00 	.word	0x40021c00
 8002df4:	40013c00 	.word	0x40013c00

08002df8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b086      	sub	sp, #24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e267      	b.n	80032da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0301 	and.w	r3, r3, #1
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d075      	beq.n	8002f02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e16:	4b88      	ldr	r3, [pc, #544]	; (8003038 <HAL_RCC_OscConfig+0x240>)
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f003 030c 	and.w	r3, r3, #12
 8002e1e:	2b04      	cmp	r3, #4
 8002e20:	d00c      	beq.n	8002e3c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e22:	4b85      	ldr	r3, [pc, #532]	; (8003038 <HAL_RCC_OscConfig+0x240>)
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e2a:	2b08      	cmp	r3, #8
 8002e2c:	d112      	bne.n	8002e54 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e2e:	4b82      	ldr	r3, [pc, #520]	; (8003038 <HAL_RCC_OscConfig+0x240>)
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e3a:	d10b      	bne.n	8002e54 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e3c:	4b7e      	ldr	r3, [pc, #504]	; (8003038 <HAL_RCC_OscConfig+0x240>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d05b      	beq.n	8002f00 <HAL_RCC_OscConfig+0x108>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d157      	bne.n	8002f00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e242      	b.n	80032da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e5c:	d106      	bne.n	8002e6c <HAL_RCC_OscConfig+0x74>
 8002e5e:	4b76      	ldr	r3, [pc, #472]	; (8003038 <HAL_RCC_OscConfig+0x240>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a75      	ldr	r2, [pc, #468]	; (8003038 <HAL_RCC_OscConfig+0x240>)
 8002e64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e68:	6013      	str	r3, [r2, #0]
 8002e6a:	e01d      	b.n	8002ea8 <HAL_RCC_OscConfig+0xb0>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e74:	d10c      	bne.n	8002e90 <HAL_RCC_OscConfig+0x98>
 8002e76:	4b70      	ldr	r3, [pc, #448]	; (8003038 <HAL_RCC_OscConfig+0x240>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a6f      	ldr	r2, [pc, #444]	; (8003038 <HAL_RCC_OscConfig+0x240>)
 8002e7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e80:	6013      	str	r3, [r2, #0]
 8002e82:	4b6d      	ldr	r3, [pc, #436]	; (8003038 <HAL_RCC_OscConfig+0x240>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a6c      	ldr	r2, [pc, #432]	; (8003038 <HAL_RCC_OscConfig+0x240>)
 8002e88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e8c:	6013      	str	r3, [r2, #0]
 8002e8e:	e00b      	b.n	8002ea8 <HAL_RCC_OscConfig+0xb0>
 8002e90:	4b69      	ldr	r3, [pc, #420]	; (8003038 <HAL_RCC_OscConfig+0x240>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a68      	ldr	r2, [pc, #416]	; (8003038 <HAL_RCC_OscConfig+0x240>)
 8002e96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e9a:	6013      	str	r3, [r2, #0]
 8002e9c:	4b66      	ldr	r3, [pc, #408]	; (8003038 <HAL_RCC_OscConfig+0x240>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a65      	ldr	r2, [pc, #404]	; (8003038 <HAL_RCC_OscConfig+0x240>)
 8002ea2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ea6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d013      	beq.n	8002ed8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb0:	f7fe fba8 	bl	8001604 <HAL_GetTick>
 8002eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eb6:	e008      	b.n	8002eca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002eb8:	f7fe fba4 	bl	8001604 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b64      	cmp	r3, #100	; 0x64
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e207      	b.n	80032da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eca:	4b5b      	ldr	r3, [pc, #364]	; (8003038 <HAL_RCC_OscConfig+0x240>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d0f0      	beq.n	8002eb8 <HAL_RCC_OscConfig+0xc0>
 8002ed6:	e014      	b.n	8002f02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed8:	f7fe fb94 	bl	8001604 <HAL_GetTick>
 8002edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ede:	e008      	b.n	8002ef2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ee0:	f7fe fb90 	bl	8001604 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b64      	cmp	r3, #100	; 0x64
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e1f3      	b.n	80032da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ef2:	4b51      	ldr	r3, [pc, #324]	; (8003038 <HAL_RCC_OscConfig+0x240>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d1f0      	bne.n	8002ee0 <HAL_RCC_OscConfig+0xe8>
 8002efe:	e000      	b.n	8002f02 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d063      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f0e:	4b4a      	ldr	r3, [pc, #296]	; (8003038 <HAL_RCC_OscConfig+0x240>)
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f003 030c 	and.w	r3, r3, #12
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d00b      	beq.n	8002f32 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f1a:	4b47      	ldr	r3, [pc, #284]	; (8003038 <HAL_RCC_OscConfig+0x240>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f22:	2b08      	cmp	r3, #8
 8002f24:	d11c      	bne.n	8002f60 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f26:	4b44      	ldr	r3, [pc, #272]	; (8003038 <HAL_RCC_OscConfig+0x240>)
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d116      	bne.n	8002f60 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f32:	4b41      	ldr	r3, [pc, #260]	; (8003038 <HAL_RCC_OscConfig+0x240>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d005      	beq.n	8002f4a <HAL_RCC_OscConfig+0x152>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d001      	beq.n	8002f4a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e1c7      	b.n	80032da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f4a:	4b3b      	ldr	r3, [pc, #236]	; (8003038 <HAL_RCC_OscConfig+0x240>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	00db      	lsls	r3, r3, #3
 8002f58:	4937      	ldr	r1, [pc, #220]	; (8003038 <HAL_RCC_OscConfig+0x240>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f5e:	e03a      	b.n	8002fd6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d020      	beq.n	8002faa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f68:	4b34      	ldr	r3, [pc, #208]	; (800303c <HAL_RCC_OscConfig+0x244>)
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f6e:	f7fe fb49 	bl	8001604 <HAL_GetTick>
 8002f72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f74:	e008      	b.n	8002f88 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f76:	f7fe fb45 	bl	8001604 <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d901      	bls.n	8002f88 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e1a8      	b.n	80032da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f88:	4b2b      	ldr	r3, [pc, #172]	; (8003038 <HAL_RCC_OscConfig+0x240>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0302 	and.w	r3, r3, #2
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d0f0      	beq.n	8002f76 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f94:	4b28      	ldr	r3, [pc, #160]	; (8003038 <HAL_RCC_OscConfig+0x240>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	691b      	ldr	r3, [r3, #16]
 8002fa0:	00db      	lsls	r3, r3, #3
 8002fa2:	4925      	ldr	r1, [pc, #148]	; (8003038 <HAL_RCC_OscConfig+0x240>)
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	600b      	str	r3, [r1, #0]
 8002fa8:	e015      	b.n	8002fd6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002faa:	4b24      	ldr	r3, [pc, #144]	; (800303c <HAL_RCC_OscConfig+0x244>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb0:	f7fe fb28 	bl	8001604 <HAL_GetTick>
 8002fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fb6:	e008      	b.n	8002fca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fb8:	f7fe fb24 	bl	8001604 <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e187      	b.n	80032da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fca:	4b1b      	ldr	r3, [pc, #108]	; (8003038 <HAL_RCC_OscConfig+0x240>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d1f0      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0308 	and.w	r3, r3, #8
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d036      	beq.n	8003050 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d016      	beq.n	8003018 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fea:	4b15      	ldr	r3, [pc, #84]	; (8003040 <HAL_RCC_OscConfig+0x248>)
 8002fec:	2201      	movs	r2, #1
 8002fee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ff0:	f7fe fb08 	bl	8001604 <HAL_GetTick>
 8002ff4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ff6:	e008      	b.n	800300a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ff8:	f7fe fb04 	bl	8001604 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	2b02      	cmp	r3, #2
 8003004:	d901      	bls.n	800300a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e167      	b.n	80032da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800300a:	4b0b      	ldr	r3, [pc, #44]	; (8003038 <HAL_RCC_OscConfig+0x240>)
 800300c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	2b00      	cmp	r3, #0
 8003014:	d0f0      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x200>
 8003016:	e01b      	b.n	8003050 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003018:	4b09      	ldr	r3, [pc, #36]	; (8003040 <HAL_RCC_OscConfig+0x248>)
 800301a:	2200      	movs	r2, #0
 800301c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800301e:	f7fe faf1 	bl	8001604 <HAL_GetTick>
 8003022:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003024:	e00e      	b.n	8003044 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003026:	f7fe faed 	bl	8001604 <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	2b02      	cmp	r3, #2
 8003032:	d907      	bls.n	8003044 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e150      	b.n	80032da <HAL_RCC_OscConfig+0x4e2>
 8003038:	40023800 	.word	0x40023800
 800303c:	42470000 	.word	0x42470000
 8003040:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003044:	4b88      	ldr	r3, [pc, #544]	; (8003268 <HAL_RCC_OscConfig+0x470>)
 8003046:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003048:	f003 0302 	and.w	r3, r3, #2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d1ea      	bne.n	8003026 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0304 	and.w	r3, r3, #4
 8003058:	2b00      	cmp	r3, #0
 800305a:	f000 8097 	beq.w	800318c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800305e:	2300      	movs	r3, #0
 8003060:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003062:	4b81      	ldr	r3, [pc, #516]	; (8003268 <HAL_RCC_OscConfig+0x470>)
 8003064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d10f      	bne.n	800308e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800306e:	2300      	movs	r3, #0
 8003070:	60bb      	str	r3, [r7, #8]
 8003072:	4b7d      	ldr	r3, [pc, #500]	; (8003268 <HAL_RCC_OscConfig+0x470>)
 8003074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003076:	4a7c      	ldr	r2, [pc, #496]	; (8003268 <HAL_RCC_OscConfig+0x470>)
 8003078:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800307c:	6413      	str	r3, [r2, #64]	; 0x40
 800307e:	4b7a      	ldr	r3, [pc, #488]	; (8003268 <HAL_RCC_OscConfig+0x470>)
 8003080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003086:	60bb      	str	r3, [r7, #8]
 8003088:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800308a:	2301      	movs	r3, #1
 800308c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800308e:	4b77      	ldr	r3, [pc, #476]	; (800326c <HAL_RCC_OscConfig+0x474>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003096:	2b00      	cmp	r3, #0
 8003098:	d118      	bne.n	80030cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800309a:	4b74      	ldr	r3, [pc, #464]	; (800326c <HAL_RCC_OscConfig+0x474>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a73      	ldr	r2, [pc, #460]	; (800326c <HAL_RCC_OscConfig+0x474>)
 80030a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030a6:	f7fe faad 	bl	8001604 <HAL_GetTick>
 80030aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ac:	e008      	b.n	80030c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030ae:	f7fe faa9 	bl	8001604 <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d901      	bls.n	80030c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e10c      	b.n	80032da <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030c0:	4b6a      	ldr	r3, [pc, #424]	; (800326c <HAL_RCC_OscConfig+0x474>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d0f0      	beq.n	80030ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d106      	bne.n	80030e2 <HAL_RCC_OscConfig+0x2ea>
 80030d4:	4b64      	ldr	r3, [pc, #400]	; (8003268 <HAL_RCC_OscConfig+0x470>)
 80030d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d8:	4a63      	ldr	r2, [pc, #396]	; (8003268 <HAL_RCC_OscConfig+0x470>)
 80030da:	f043 0301 	orr.w	r3, r3, #1
 80030de:	6713      	str	r3, [r2, #112]	; 0x70
 80030e0:	e01c      	b.n	800311c <HAL_RCC_OscConfig+0x324>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	2b05      	cmp	r3, #5
 80030e8:	d10c      	bne.n	8003104 <HAL_RCC_OscConfig+0x30c>
 80030ea:	4b5f      	ldr	r3, [pc, #380]	; (8003268 <HAL_RCC_OscConfig+0x470>)
 80030ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ee:	4a5e      	ldr	r2, [pc, #376]	; (8003268 <HAL_RCC_OscConfig+0x470>)
 80030f0:	f043 0304 	orr.w	r3, r3, #4
 80030f4:	6713      	str	r3, [r2, #112]	; 0x70
 80030f6:	4b5c      	ldr	r3, [pc, #368]	; (8003268 <HAL_RCC_OscConfig+0x470>)
 80030f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030fa:	4a5b      	ldr	r2, [pc, #364]	; (8003268 <HAL_RCC_OscConfig+0x470>)
 80030fc:	f043 0301 	orr.w	r3, r3, #1
 8003100:	6713      	str	r3, [r2, #112]	; 0x70
 8003102:	e00b      	b.n	800311c <HAL_RCC_OscConfig+0x324>
 8003104:	4b58      	ldr	r3, [pc, #352]	; (8003268 <HAL_RCC_OscConfig+0x470>)
 8003106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003108:	4a57      	ldr	r2, [pc, #348]	; (8003268 <HAL_RCC_OscConfig+0x470>)
 800310a:	f023 0301 	bic.w	r3, r3, #1
 800310e:	6713      	str	r3, [r2, #112]	; 0x70
 8003110:	4b55      	ldr	r3, [pc, #340]	; (8003268 <HAL_RCC_OscConfig+0x470>)
 8003112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003114:	4a54      	ldr	r2, [pc, #336]	; (8003268 <HAL_RCC_OscConfig+0x470>)
 8003116:	f023 0304 	bic.w	r3, r3, #4
 800311a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d015      	beq.n	8003150 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003124:	f7fe fa6e 	bl	8001604 <HAL_GetTick>
 8003128:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800312a:	e00a      	b.n	8003142 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800312c:	f7fe fa6a 	bl	8001604 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	f241 3288 	movw	r2, #5000	; 0x1388
 800313a:	4293      	cmp	r3, r2
 800313c:	d901      	bls.n	8003142 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e0cb      	b.n	80032da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003142:	4b49      	ldr	r3, [pc, #292]	; (8003268 <HAL_RCC_OscConfig+0x470>)
 8003144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d0ee      	beq.n	800312c <HAL_RCC_OscConfig+0x334>
 800314e:	e014      	b.n	800317a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003150:	f7fe fa58 	bl	8001604 <HAL_GetTick>
 8003154:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003156:	e00a      	b.n	800316e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003158:	f7fe fa54 	bl	8001604 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	f241 3288 	movw	r2, #5000	; 0x1388
 8003166:	4293      	cmp	r3, r2
 8003168:	d901      	bls.n	800316e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e0b5      	b.n	80032da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800316e:	4b3e      	ldr	r3, [pc, #248]	; (8003268 <HAL_RCC_OscConfig+0x470>)
 8003170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d1ee      	bne.n	8003158 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800317a:	7dfb      	ldrb	r3, [r7, #23]
 800317c:	2b01      	cmp	r3, #1
 800317e:	d105      	bne.n	800318c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003180:	4b39      	ldr	r3, [pc, #228]	; (8003268 <HAL_RCC_OscConfig+0x470>)
 8003182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003184:	4a38      	ldr	r2, [pc, #224]	; (8003268 <HAL_RCC_OscConfig+0x470>)
 8003186:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800318a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	2b00      	cmp	r3, #0
 8003192:	f000 80a1 	beq.w	80032d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003196:	4b34      	ldr	r3, [pc, #208]	; (8003268 <HAL_RCC_OscConfig+0x470>)
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f003 030c 	and.w	r3, r3, #12
 800319e:	2b08      	cmp	r3, #8
 80031a0:	d05c      	beq.n	800325c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	699b      	ldr	r3, [r3, #24]
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d141      	bne.n	800322e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031aa:	4b31      	ldr	r3, [pc, #196]	; (8003270 <HAL_RCC_OscConfig+0x478>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b0:	f7fe fa28 	bl	8001604 <HAL_GetTick>
 80031b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031b6:	e008      	b.n	80031ca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031b8:	f7fe fa24 	bl	8001604 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e087      	b.n	80032da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ca:	4b27      	ldr	r3, [pc, #156]	; (8003268 <HAL_RCC_OscConfig+0x470>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1f0      	bne.n	80031b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	69da      	ldr	r2, [r3, #28]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a1b      	ldr	r3, [r3, #32]
 80031de:	431a      	orrs	r2, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e4:	019b      	lsls	r3, r3, #6
 80031e6:	431a      	orrs	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ec:	085b      	lsrs	r3, r3, #1
 80031ee:	3b01      	subs	r3, #1
 80031f0:	041b      	lsls	r3, r3, #16
 80031f2:	431a      	orrs	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f8:	061b      	lsls	r3, r3, #24
 80031fa:	491b      	ldr	r1, [pc, #108]	; (8003268 <HAL_RCC_OscConfig+0x470>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003200:	4b1b      	ldr	r3, [pc, #108]	; (8003270 <HAL_RCC_OscConfig+0x478>)
 8003202:	2201      	movs	r2, #1
 8003204:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003206:	f7fe f9fd 	bl	8001604 <HAL_GetTick>
 800320a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800320c:	e008      	b.n	8003220 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800320e:	f7fe f9f9 	bl	8001604 <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	2b02      	cmp	r3, #2
 800321a:	d901      	bls.n	8003220 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	e05c      	b.n	80032da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003220:	4b11      	ldr	r3, [pc, #68]	; (8003268 <HAL_RCC_OscConfig+0x470>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d0f0      	beq.n	800320e <HAL_RCC_OscConfig+0x416>
 800322c:	e054      	b.n	80032d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800322e:	4b10      	ldr	r3, [pc, #64]	; (8003270 <HAL_RCC_OscConfig+0x478>)
 8003230:	2200      	movs	r2, #0
 8003232:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003234:	f7fe f9e6 	bl	8001604 <HAL_GetTick>
 8003238:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800323a:	e008      	b.n	800324e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800323c:	f7fe f9e2 	bl	8001604 <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	2b02      	cmp	r3, #2
 8003248:	d901      	bls.n	800324e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e045      	b.n	80032da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800324e:	4b06      	ldr	r3, [pc, #24]	; (8003268 <HAL_RCC_OscConfig+0x470>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d1f0      	bne.n	800323c <HAL_RCC_OscConfig+0x444>
 800325a:	e03d      	b.n	80032d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	699b      	ldr	r3, [r3, #24]
 8003260:	2b01      	cmp	r3, #1
 8003262:	d107      	bne.n	8003274 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e038      	b.n	80032da <HAL_RCC_OscConfig+0x4e2>
 8003268:	40023800 	.word	0x40023800
 800326c:	40007000 	.word	0x40007000
 8003270:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003274:	4b1b      	ldr	r3, [pc, #108]	; (80032e4 <HAL_RCC_OscConfig+0x4ec>)
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	699b      	ldr	r3, [r3, #24]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d028      	beq.n	80032d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800328c:	429a      	cmp	r2, r3
 800328e:	d121      	bne.n	80032d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800329a:	429a      	cmp	r2, r3
 800329c:	d11a      	bne.n	80032d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80032a4:	4013      	ands	r3, r2
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d111      	bne.n	80032d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ba:	085b      	lsrs	r3, r3, #1
 80032bc:	3b01      	subs	r3, #1
 80032be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d107      	bne.n	80032d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d001      	beq.n	80032d8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e000      	b.n	80032da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3718      	adds	r7, #24
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	40023800 	.word	0x40023800

080032e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d101      	bne.n	80032fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e0cc      	b.n	8003496 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032fc:	4b68      	ldr	r3, [pc, #416]	; (80034a0 <HAL_RCC_ClockConfig+0x1b8>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0307 	and.w	r3, r3, #7
 8003304:	683a      	ldr	r2, [r7, #0]
 8003306:	429a      	cmp	r2, r3
 8003308:	d90c      	bls.n	8003324 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800330a:	4b65      	ldr	r3, [pc, #404]	; (80034a0 <HAL_RCC_ClockConfig+0x1b8>)
 800330c:	683a      	ldr	r2, [r7, #0]
 800330e:	b2d2      	uxtb	r2, r2
 8003310:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003312:	4b63      	ldr	r3, [pc, #396]	; (80034a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0307 	and.w	r3, r3, #7
 800331a:	683a      	ldr	r2, [r7, #0]
 800331c:	429a      	cmp	r2, r3
 800331e:	d001      	beq.n	8003324 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e0b8      	b.n	8003496 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0302 	and.w	r3, r3, #2
 800332c:	2b00      	cmp	r3, #0
 800332e:	d020      	beq.n	8003372 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0304 	and.w	r3, r3, #4
 8003338:	2b00      	cmp	r3, #0
 800333a:	d005      	beq.n	8003348 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800333c:	4b59      	ldr	r3, [pc, #356]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	4a58      	ldr	r2, [pc, #352]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003342:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003346:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0308 	and.w	r3, r3, #8
 8003350:	2b00      	cmp	r3, #0
 8003352:	d005      	beq.n	8003360 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003354:	4b53      	ldr	r3, [pc, #332]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	4a52      	ldr	r2, [pc, #328]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 800335a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800335e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003360:	4b50      	ldr	r3, [pc, #320]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	494d      	ldr	r1, [pc, #308]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 800336e:	4313      	orrs	r3, r2
 8003370:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	2b00      	cmp	r3, #0
 800337c:	d044      	beq.n	8003408 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	2b01      	cmp	r3, #1
 8003384:	d107      	bne.n	8003396 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003386:	4b47      	ldr	r3, [pc, #284]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d119      	bne.n	80033c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e07f      	b.n	8003496 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	2b02      	cmp	r3, #2
 800339c:	d003      	beq.n	80033a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033a2:	2b03      	cmp	r3, #3
 80033a4:	d107      	bne.n	80033b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033a6:	4b3f      	ldr	r3, [pc, #252]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d109      	bne.n	80033c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e06f      	b.n	8003496 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033b6:	4b3b      	ldr	r3, [pc, #236]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0302 	and.w	r3, r3, #2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d101      	bne.n	80033c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e067      	b.n	8003496 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033c6:	4b37      	ldr	r3, [pc, #220]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f023 0203 	bic.w	r2, r3, #3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	4934      	ldr	r1, [pc, #208]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 80033d4:	4313      	orrs	r3, r2
 80033d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033d8:	f7fe f914 	bl	8001604 <HAL_GetTick>
 80033dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033de:	e00a      	b.n	80033f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033e0:	f7fe f910 	bl	8001604 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e04f      	b.n	8003496 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033f6:	4b2b      	ldr	r3, [pc, #172]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f003 020c 	and.w	r2, r3, #12
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	429a      	cmp	r2, r3
 8003406:	d1eb      	bne.n	80033e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003408:	4b25      	ldr	r3, [pc, #148]	; (80034a0 <HAL_RCC_ClockConfig+0x1b8>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0307 	and.w	r3, r3, #7
 8003410:	683a      	ldr	r2, [r7, #0]
 8003412:	429a      	cmp	r2, r3
 8003414:	d20c      	bcs.n	8003430 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003416:	4b22      	ldr	r3, [pc, #136]	; (80034a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003418:	683a      	ldr	r2, [r7, #0]
 800341a:	b2d2      	uxtb	r2, r2
 800341c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800341e:	4b20      	ldr	r3, [pc, #128]	; (80034a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0307 	and.w	r3, r3, #7
 8003426:	683a      	ldr	r2, [r7, #0]
 8003428:	429a      	cmp	r2, r3
 800342a:	d001      	beq.n	8003430 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e032      	b.n	8003496 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0304 	and.w	r3, r3, #4
 8003438:	2b00      	cmp	r3, #0
 800343a:	d008      	beq.n	800344e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800343c:	4b19      	ldr	r3, [pc, #100]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	4916      	ldr	r1, [pc, #88]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 800344a:	4313      	orrs	r3, r2
 800344c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0308 	and.w	r3, r3, #8
 8003456:	2b00      	cmp	r3, #0
 8003458:	d009      	beq.n	800346e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800345a:	4b12      	ldr	r3, [pc, #72]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	00db      	lsls	r3, r3, #3
 8003468:	490e      	ldr	r1, [pc, #56]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 800346a:	4313      	orrs	r3, r2
 800346c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800346e:	f000 f821 	bl	80034b4 <HAL_RCC_GetSysClockFreq>
 8003472:	4602      	mov	r2, r0
 8003474:	4b0b      	ldr	r3, [pc, #44]	; (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	091b      	lsrs	r3, r3, #4
 800347a:	f003 030f 	and.w	r3, r3, #15
 800347e:	490a      	ldr	r1, [pc, #40]	; (80034a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003480:	5ccb      	ldrb	r3, [r1, r3]
 8003482:	fa22 f303 	lsr.w	r3, r2, r3
 8003486:	4a09      	ldr	r2, [pc, #36]	; (80034ac <HAL_RCC_ClockConfig+0x1c4>)
 8003488:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800348a:	4b09      	ldr	r3, [pc, #36]	; (80034b0 <HAL_RCC_ClockConfig+0x1c8>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4618      	mov	r0, r3
 8003490:	f7fe f874 	bl	800157c <HAL_InitTick>

  return HAL_OK;
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3710      	adds	r7, #16
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	40023c00 	.word	0x40023c00
 80034a4:	40023800 	.word	0x40023800
 80034a8:	0800c94c 	.word	0x0800c94c
 80034ac:	20000000 	.word	0x20000000
 80034b0:	20000004 	.word	0x20000004

080034b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034b8:	b094      	sub	sp, #80	; 0x50
 80034ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80034bc:	2300      	movs	r3, #0
 80034be:	647b      	str	r3, [r7, #68]	; 0x44
 80034c0:	2300      	movs	r3, #0
 80034c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034c4:	2300      	movs	r3, #0
 80034c6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80034c8:	2300      	movs	r3, #0
 80034ca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034cc:	4b79      	ldr	r3, [pc, #484]	; (80036b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	f003 030c 	and.w	r3, r3, #12
 80034d4:	2b08      	cmp	r3, #8
 80034d6:	d00d      	beq.n	80034f4 <HAL_RCC_GetSysClockFreq+0x40>
 80034d8:	2b08      	cmp	r3, #8
 80034da:	f200 80e1 	bhi.w	80036a0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d002      	beq.n	80034e8 <HAL_RCC_GetSysClockFreq+0x34>
 80034e2:	2b04      	cmp	r3, #4
 80034e4:	d003      	beq.n	80034ee <HAL_RCC_GetSysClockFreq+0x3a>
 80034e6:	e0db      	b.n	80036a0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034e8:	4b73      	ldr	r3, [pc, #460]	; (80036b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80034ea:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80034ec:	e0db      	b.n	80036a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034ee:	4b73      	ldr	r3, [pc, #460]	; (80036bc <HAL_RCC_GetSysClockFreq+0x208>)
 80034f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80034f2:	e0d8      	b.n	80036a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034f4:	4b6f      	ldr	r3, [pc, #444]	; (80036b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034fc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034fe:	4b6d      	ldr	r3, [pc, #436]	; (80036b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d063      	beq.n	80035d2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800350a:	4b6a      	ldr	r3, [pc, #424]	; (80036b4 <HAL_RCC_GetSysClockFreq+0x200>)
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	099b      	lsrs	r3, r3, #6
 8003510:	2200      	movs	r2, #0
 8003512:	63bb      	str	r3, [r7, #56]	; 0x38
 8003514:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003518:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800351c:	633b      	str	r3, [r7, #48]	; 0x30
 800351e:	2300      	movs	r3, #0
 8003520:	637b      	str	r3, [r7, #52]	; 0x34
 8003522:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003526:	4622      	mov	r2, r4
 8003528:	462b      	mov	r3, r5
 800352a:	f04f 0000 	mov.w	r0, #0
 800352e:	f04f 0100 	mov.w	r1, #0
 8003532:	0159      	lsls	r1, r3, #5
 8003534:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003538:	0150      	lsls	r0, r2, #5
 800353a:	4602      	mov	r2, r0
 800353c:	460b      	mov	r3, r1
 800353e:	4621      	mov	r1, r4
 8003540:	1a51      	subs	r1, r2, r1
 8003542:	6139      	str	r1, [r7, #16]
 8003544:	4629      	mov	r1, r5
 8003546:	eb63 0301 	sbc.w	r3, r3, r1
 800354a:	617b      	str	r3, [r7, #20]
 800354c:	f04f 0200 	mov.w	r2, #0
 8003550:	f04f 0300 	mov.w	r3, #0
 8003554:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003558:	4659      	mov	r1, fp
 800355a:	018b      	lsls	r3, r1, #6
 800355c:	4651      	mov	r1, sl
 800355e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003562:	4651      	mov	r1, sl
 8003564:	018a      	lsls	r2, r1, #6
 8003566:	4651      	mov	r1, sl
 8003568:	ebb2 0801 	subs.w	r8, r2, r1
 800356c:	4659      	mov	r1, fp
 800356e:	eb63 0901 	sbc.w	r9, r3, r1
 8003572:	f04f 0200 	mov.w	r2, #0
 8003576:	f04f 0300 	mov.w	r3, #0
 800357a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800357e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003582:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003586:	4690      	mov	r8, r2
 8003588:	4699      	mov	r9, r3
 800358a:	4623      	mov	r3, r4
 800358c:	eb18 0303 	adds.w	r3, r8, r3
 8003590:	60bb      	str	r3, [r7, #8]
 8003592:	462b      	mov	r3, r5
 8003594:	eb49 0303 	adc.w	r3, r9, r3
 8003598:	60fb      	str	r3, [r7, #12]
 800359a:	f04f 0200 	mov.w	r2, #0
 800359e:	f04f 0300 	mov.w	r3, #0
 80035a2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80035a6:	4629      	mov	r1, r5
 80035a8:	024b      	lsls	r3, r1, #9
 80035aa:	4621      	mov	r1, r4
 80035ac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80035b0:	4621      	mov	r1, r4
 80035b2:	024a      	lsls	r2, r1, #9
 80035b4:	4610      	mov	r0, r2
 80035b6:	4619      	mov	r1, r3
 80035b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035ba:	2200      	movs	r2, #0
 80035bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80035be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80035c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80035c4:	f7fc fe5c 	bl	8000280 <__aeabi_uldivmod>
 80035c8:	4602      	mov	r2, r0
 80035ca:	460b      	mov	r3, r1
 80035cc:	4613      	mov	r3, r2
 80035ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035d0:	e058      	b.n	8003684 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035d2:	4b38      	ldr	r3, [pc, #224]	; (80036b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	099b      	lsrs	r3, r3, #6
 80035d8:	2200      	movs	r2, #0
 80035da:	4618      	mov	r0, r3
 80035dc:	4611      	mov	r1, r2
 80035de:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80035e2:	623b      	str	r3, [r7, #32]
 80035e4:	2300      	movs	r3, #0
 80035e6:	627b      	str	r3, [r7, #36]	; 0x24
 80035e8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80035ec:	4642      	mov	r2, r8
 80035ee:	464b      	mov	r3, r9
 80035f0:	f04f 0000 	mov.w	r0, #0
 80035f4:	f04f 0100 	mov.w	r1, #0
 80035f8:	0159      	lsls	r1, r3, #5
 80035fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035fe:	0150      	lsls	r0, r2, #5
 8003600:	4602      	mov	r2, r0
 8003602:	460b      	mov	r3, r1
 8003604:	4641      	mov	r1, r8
 8003606:	ebb2 0a01 	subs.w	sl, r2, r1
 800360a:	4649      	mov	r1, r9
 800360c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003610:	f04f 0200 	mov.w	r2, #0
 8003614:	f04f 0300 	mov.w	r3, #0
 8003618:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800361c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003620:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003624:	ebb2 040a 	subs.w	r4, r2, sl
 8003628:	eb63 050b 	sbc.w	r5, r3, fp
 800362c:	f04f 0200 	mov.w	r2, #0
 8003630:	f04f 0300 	mov.w	r3, #0
 8003634:	00eb      	lsls	r3, r5, #3
 8003636:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800363a:	00e2      	lsls	r2, r4, #3
 800363c:	4614      	mov	r4, r2
 800363e:	461d      	mov	r5, r3
 8003640:	4643      	mov	r3, r8
 8003642:	18e3      	adds	r3, r4, r3
 8003644:	603b      	str	r3, [r7, #0]
 8003646:	464b      	mov	r3, r9
 8003648:	eb45 0303 	adc.w	r3, r5, r3
 800364c:	607b      	str	r3, [r7, #4]
 800364e:	f04f 0200 	mov.w	r2, #0
 8003652:	f04f 0300 	mov.w	r3, #0
 8003656:	e9d7 4500 	ldrd	r4, r5, [r7]
 800365a:	4629      	mov	r1, r5
 800365c:	028b      	lsls	r3, r1, #10
 800365e:	4621      	mov	r1, r4
 8003660:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003664:	4621      	mov	r1, r4
 8003666:	028a      	lsls	r2, r1, #10
 8003668:	4610      	mov	r0, r2
 800366a:	4619      	mov	r1, r3
 800366c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800366e:	2200      	movs	r2, #0
 8003670:	61bb      	str	r3, [r7, #24]
 8003672:	61fa      	str	r2, [r7, #28]
 8003674:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003678:	f7fc fe02 	bl	8000280 <__aeabi_uldivmod>
 800367c:	4602      	mov	r2, r0
 800367e:	460b      	mov	r3, r1
 8003680:	4613      	mov	r3, r2
 8003682:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003684:	4b0b      	ldr	r3, [pc, #44]	; (80036b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	0c1b      	lsrs	r3, r3, #16
 800368a:	f003 0303 	and.w	r3, r3, #3
 800368e:	3301      	adds	r3, #1
 8003690:	005b      	lsls	r3, r3, #1
 8003692:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003694:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003696:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003698:	fbb2 f3f3 	udiv	r3, r2, r3
 800369c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800369e:	e002      	b.n	80036a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036a0:	4b05      	ldr	r3, [pc, #20]	; (80036b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80036a2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80036a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3750      	adds	r7, #80	; 0x50
 80036ac:	46bd      	mov	sp, r7
 80036ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036b2:	bf00      	nop
 80036b4:	40023800 	.word	0x40023800
 80036b8:	00f42400 	.word	0x00f42400
 80036bc:	007a1200 	.word	0x007a1200

080036c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036c0:	b480      	push	{r7}
 80036c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036c4:	4b03      	ldr	r3, [pc, #12]	; (80036d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80036c6:	681b      	ldr	r3, [r3, #0]
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	20000000 	.word	0x20000000

080036d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80036dc:	f7ff fff0 	bl	80036c0 <HAL_RCC_GetHCLKFreq>
 80036e0:	4602      	mov	r2, r0
 80036e2:	4b05      	ldr	r3, [pc, #20]	; (80036f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	0a9b      	lsrs	r3, r3, #10
 80036e8:	f003 0307 	and.w	r3, r3, #7
 80036ec:	4903      	ldr	r1, [pc, #12]	; (80036fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80036ee:	5ccb      	ldrb	r3, [r1, r3]
 80036f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	40023800 	.word	0x40023800
 80036fc:	0800c95c 	.word	0x0800c95c

08003700 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003704:	f7ff ffdc 	bl	80036c0 <HAL_RCC_GetHCLKFreq>
 8003708:	4602      	mov	r2, r0
 800370a:	4b05      	ldr	r3, [pc, #20]	; (8003720 <HAL_RCC_GetPCLK2Freq+0x20>)
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	0b5b      	lsrs	r3, r3, #13
 8003710:	f003 0307 	and.w	r3, r3, #7
 8003714:	4903      	ldr	r1, [pc, #12]	; (8003724 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003716:	5ccb      	ldrb	r3, [r1, r3]
 8003718:	fa22 f303 	lsr.w	r3, r2, r3
}
 800371c:	4618      	mov	r0, r3
 800371e:	bd80      	pop	{r7, pc}
 8003720:	40023800 	.word	0x40023800
 8003724:	0800c95c 	.word	0x0800c95c

08003728 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d101      	bne.n	800373a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e022      	b.n	8003780 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003740:	b2db      	uxtb	r3, r3
 8003742:	2b00      	cmp	r3, #0
 8003744:	d105      	bne.n	8003752 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f7fd fcdf 	bl	8001110 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2203      	movs	r2, #3
 8003756:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f000 f814 	bl	8003788 <HAL_SD_InitCard>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d001      	beq.n	800376a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e00a      	b.n	8003780 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2201      	movs	r2, #1
 800377a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800377e:	2300      	movs	r3, #0
}
 8003780:	4618      	mov	r0, r3
 8003782:	3708      	adds	r7, #8
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003788:	b5b0      	push	{r4, r5, r7, lr}
 800378a:	b08e      	sub	sp, #56	; 0x38
 800378c:	af04      	add	r7, sp, #16
 800378e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8003790:	2300      	movs	r3, #0
 8003792:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8003794:	2300      	movs	r3, #0
 8003796:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003798:	2300      	movs	r3, #0
 800379a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800379c:	2300      	movs	r3, #0
 800379e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80037a0:	2300      	movs	r3, #0
 80037a2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80037a4:	2376      	movs	r3, #118	; 0x76
 80037a6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681d      	ldr	r5, [r3, #0]
 80037ac:	466c      	mov	r4, sp
 80037ae:	f107 0314 	add.w	r3, r7, #20
 80037b2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80037b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80037ba:	f107 0308 	add.w	r3, r7, #8
 80037be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037c0:	4628      	mov	r0, r5
 80037c2:	f001 fea5 	bl	8005510 <SDIO_Init>
 80037c6:	4603      	mov	r3, r0
 80037c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80037cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d001      	beq.n	80037d8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e04f      	b.n	8003878 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80037d8:	4b29      	ldr	r3, [pc, #164]	; (8003880 <HAL_SD_InitCard+0xf8>)
 80037da:	2200      	movs	r2, #0
 80037dc:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4618      	mov	r0, r3
 80037e4:	f001 fedd 	bl	80055a2 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80037e8:	4b25      	ldr	r3, [pc, #148]	; (8003880 <HAL_SD_InitCard+0xf8>)
 80037ea:	2201      	movs	r2, #1
 80037ec:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80037ee:	2002      	movs	r0, #2
 80037f0:	f7fd ff14 	bl	800161c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f001 f805 	bl	8004804 <SD_PowerON>
 80037fa:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80037fc:	6a3b      	ldr	r3, [r7, #32]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00b      	beq.n	800381a <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2201      	movs	r2, #1
 8003806:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800380e:	6a3b      	ldr	r3, [r7, #32]
 8003810:	431a      	orrs	r2, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e02e      	b.n	8003878 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 ff24 	bl	8004668 <SD_InitCard>
 8003820:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003822:	6a3b      	ldr	r3, [r7, #32]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d00b      	beq.n	8003840 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003834:	6a3b      	ldr	r3, [r7, #32]
 8003836:	431a      	orrs	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e01b      	b.n	8003878 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003848:	4618      	mov	r0, r3
 800384a:	f001 ff3c 	bl	80056c6 <SDMMC_CmdBlockLength>
 800384e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003850:	6a3b      	ldr	r3, [r7, #32]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00f      	beq.n	8003876 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a0a      	ldr	r2, [pc, #40]	; (8003884 <HAL_SD_InitCard+0xfc>)
 800385c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003862:	6a3b      	ldr	r3, [r7, #32]
 8003864:	431a      	orrs	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e000      	b.n	8003878 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8003876:	2300      	movs	r3, #0
}
 8003878:	4618      	mov	r0, r3
 800387a:	3728      	adds	r7, #40	; 0x28
 800387c:	46bd      	mov	sp, r7
 800387e:	bdb0      	pop	{r4, r5, r7, pc}
 8003880:	422580a0 	.word	0x422580a0
 8003884:	004005ff 	.word	0x004005ff

08003888 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b08c      	sub	sp, #48	; 0x30
 800388c:	af00      	add	r7, sp, #0
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	607a      	str	r2, [r7, #4]
 8003894:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d107      	bne.n	80038b0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e0c0      	b.n	8003a32 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	f040 80b9 	bne.w	8003a30 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2200      	movs	r2, #0
 80038c2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80038c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	441a      	add	r2, r3
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d907      	bls.n	80038e2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e0a7      	b.n	8003a32 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2203      	movs	r2, #3
 80038e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2200      	movs	r2, #0
 80038f0:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038f8:	68fa      	ldr	r2, [r7, #12]
 80038fa:	6812      	ldr	r2, [r2, #0]
 80038fc:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8003900:	f043 0302 	orr.w	r3, r3, #2
 8003904:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390a:	4a4c      	ldr	r2, [pc, #304]	; (8003a3c <HAL_SD_ReadBlocks_DMA+0x1b4>)
 800390c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003912:	4a4b      	ldr	r2, [pc, #300]	; (8003a40 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8003914:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391a:	2200      	movs	r2, #0
 800391c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003922:	2200      	movs	r2, #0
 8003924:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003936:	689a      	ldr	r2, [r3, #8]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	430a      	orrs	r2, r1
 8003940:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	3380      	adds	r3, #128	; 0x80
 800394c:	4619      	mov	r1, r3
 800394e:	68ba      	ldr	r2, [r7, #8]
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	025b      	lsls	r3, r3, #9
 8003954:	089b      	lsrs	r3, r3, #2
 8003956:	f7fe fdc3 	bl	80024e0 <HAL_DMA_Start_IT>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d017      	beq.n	8003990 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800396e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a33      	ldr	r2, [pc, #204]	; (8003a44 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8003976:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800397c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e050      	b.n	8003a32 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8003990:	4b2d      	ldr	r3, [pc, #180]	; (8003a48 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8003992:	2201      	movs	r2, #1
 8003994:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800399a:	2b01      	cmp	r3, #1
 800399c:	d002      	beq.n	80039a4 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 800399e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a0:	025b      	lsls	r3, r3, #9
 80039a2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80039a4:	f04f 33ff 	mov.w	r3, #4294967295
 80039a8:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	025b      	lsls	r3, r3, #9
 80039ae:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80039b0:	2390      	movs	r3, #144	; 0x90
 80039b2:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80039b4:	2302      	movs	r3, #2
 80039b6:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80039b8:	2300      	movs	r3, #0
 80039ba:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80039bc:	2301      	movs	r3, #1
 80039be:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f107 0210 	add.w	r2, r7, #16
 80039c8:	4611      	mov	r1, r2
 80039ca:	4618      	mov	r0, r3
 80039cc:	f001 fe4f 	bl	800566e <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d90a      	bls.n	80039ec <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2282      	movs	r2, #130	; 0x82
 80039da:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80039e2:	4618      	mov	r0, r3
 80039e4:	f001 feb3 	bl	800574e <SDMMC_CmdReadMultiBlock>
 80039e8:	62f8      	str	r0, [r7, #44]	; 0x2c
 80039ea:	e009      	b.n	8003a00 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2281      	movs	r2, #129	; 0x81
 80039f0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80039f8:	4618      	mov	r0, r3
 80039fa:	f001 fe86 	bl	800570a <SDMMC_CmdReadSingleBlock>
 80039fe:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8003a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d012      	beq.n	8003a2c <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a0e      	ldr	r2, [pc, #56]	; (8003a44 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8003a0c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a14:	431a      	orrs	r2, r3
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2200      	movs	r2, #0
 8003a26:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e002      	b.n	8003a32 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	e000      	b.n	8003a32 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8003a30:	2302      	movs	r3, #2
  }
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3730      	adds	r7, #48	; 0x30
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	08004477 	.word	0x08004477
 8003a40:	080044e9 	.word	0x080044e9
 8003a44:	004005ff 	.word	0x004005ff
 8003a48:	4225858c 	.word	0x4225858c

08003a4c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b08c      	sub	sp, #48	; 0x30
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	60b9      	str	r1, [r7, #8]
 8003a56:	607a      	str	r2, [r7, #4]
 8003a58:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d107      	bne.n	8003a74 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a68:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e0c5      	b.n	8003c00 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	f040 80be 	bne.w	8003bfe <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003a88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	441a      	add	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d907      	bls.n	8003aa6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a9a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e0ac      	b.n	8003c00 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2203      	movs	r2, #3
 8003aaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	6812      	ldr	r2, [r2, #0]
 8003ac0:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8003ac4:	f043 0302 	orr.w	r3, r3, #2
 8003ac8:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ace:	4a4e      	ldr	r2, [pc, #312]	; (8003c08 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8003ad0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ad6:	4a4d      	ldr	r2, [pc, #308]	; (8003c0c <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8003ad8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ade:	2200      	movs	r2, #0
 8003ae0:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d002      	beq.n	8003af0 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8003aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aec:	025b      	lsls	r3, r3, #9
 8003aee:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d90a      	bls.n	8003b0c <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	22a0      	movs	r2, #160	; 0xa0
 8003afa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b02:	4618      	mov	r0, r3
 8003b04:	f001 fe67 	bl	80057d6 <SDMMC_CmdWriteMultiBlock>
 8003b08:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003b0a:	e009      	b.n	8003b20 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2290      	movs	r2, #144	; 0x90
 8003b10:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f001 fe3a 	bl	8005792 <SDMMC_CmdWriteSingleBlock>
 8003b1e:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d012      	beq.n	8003b4c <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a39      	ldr	r2, [pc, #228]	; (8003c10 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8003b2c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b34:	431a      	orrs	r2, r3
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2200      	movs	r2, #0
 8003b46:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e059      	b.n	8003c00 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8003b4c:	4b31      	ldr	r3, [pc, #196]	; (8003c14 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8003b4e:	2201      	movs	r2, #1
 8003b50:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b56:	2240      	movs	r2, #64	; 0x40
 8003b58:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b6a:	689a      	ldr	r2, [r3, #8]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	430a      	orrs	r2, r1
 8003b74:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003b7a:	68b9      	ldr	r1, [r7, #8]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	3380      	adds	r3, #128	; 0x80
 8003b82:	461a      	mov	r2, r3
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	025b      	lsls	r3, r3, #9
 8003b88:	089b      	lsrs	r3, r3, #2
 8003b8a:	f7fe fca9 	bl	80024e0 <HAL_DMA_Start_IT>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d01c      	beq.n	8003bce <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b9a:	68fa      	ldr	r2, [r7, #12]
 8003b9c:	6812      	ldr	r2, [r2, #0]
 8003b9e:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8003ba2:	f023 0302 	bic.w	r3, r3, #2
 8003ba6:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a18      	ldr	r2, [pc, #96]	; (8003c10 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8003bae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e018      	b.n	8003c00 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003bce:	f04f 33ff 	mov.w	r3, #4294967295
 8003bd2:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	025b      	lsls	r3, r3, #9
 8003bd8:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003bda:	2390      	movs	r3, #144	; 0x90
 8003bdc:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8003bde:	2300      	movs	r3, #0
 8003be0:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003be2:	2300      	movs	r3, #0
 8003be4:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8003be6:	2301      	movs	r3, #1
 8003be8:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f107 0210 	add.w	r2, r7, #16
 8003bf2:	4611      	mov	r1, r2
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f001 fd3a 	bl	800566e <SDIO_ConfigData>

      return HAL_OK;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	e000      	b.n	8003c00 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8003bfe:	2302      	movs	r3, #2
  }
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3730      	adds	r7, #48	; 0x30
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	0800444d 	.word	0x0800444d
 8003c0c:	080044e9 	.word	0x080044e9
 8003c10:	004005ff 	.word	0x004005ff
 8003c14:	4225858c 	.word	0x4225858c

08003c18 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c24:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d008      	beq.n	8003c46 <HAL_SD_IRQHandler+0x2e>
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f003 0308 	and.w	r3, r3, #8
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d003      	beq.n	8003c46 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 ffff 	bl	8004c42 <SD_Read_IT>
 8003c44:	e165      	b.n	8003f12 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	f000 808f 	beq.w	8003d74 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c5e:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	6812      	ldr	r2, [r2, #0]
 8003c6a:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8003c6e:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8003c72:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f022 0201 	bic.w	r2, r2, #1
 8003c82:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f003 0308 	and.w	r3, r3, #8
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d039      	beq.n	8003d02 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	f003 0302 	and.w	r3, r3, #2
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d104      	bne.n	8003ca2 <HAL_SD_IRQHandler+0x8a>
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f003 0320 	and.w	r3, r3, #32
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d011      	beq.n	8003cc6 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f001 fdb8 	bl	800581c <SDMMC_CmdStopTransfer>
 8003cac:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d008      	beq.n	8003cc6 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	431a      	orrs	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f000 f92f 	bl	8003f24 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f240 523a 	movw	r2, #1338	; 0x53a
 8003cce:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f003 0301 	and.w	r3, r3, #1
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d104      	bne.n	8003cf2 <HAL_SD_IRQHandler+0xda>
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f003 0302 	and.w	r3, r3, #2
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d003      	beq.n	8003cfa <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f002 fa10 	bl	8006118 <HAL_SD_RxCpltCallback>
 8003cf8:	e10b      	b.n	8003f12 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f002 fa02 	bl	8006104 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003d00:	e107      	b.n	8003f12 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	f000 8102 	beq.w	8003f12 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f003 0320 	and.w	r3, r3, #32
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d011      	beq.n	8003d3c <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f001 fd7d 	bl	800581c <SDMMC_CmdStopTransfer>
 8003d22:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d008      	beq.n	8003d3c <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	431a      	orrs	r2, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 f8f4 	bl	8003f24 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f003 0301 	and.w	r3, r3, #1
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	f040 80e5 	bne.w	8003f12 <HAL_SD_IRQHandler+0x2fa>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f003 0302 	and.w	r3, r3, #2
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	f040 80df 	bne.w	8003f12 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f022 0208 	bic.w	r2, r2, #8
 8003d62:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f002 f9c9 	bl	8006104 <HAL_SD_TxCpltCallback>
}
 8003d72:	e0ce      	b.n	8003f12 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d008      	beq.n	8003d94 <HAL_SD_IRQHandler+0x17c>
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f003 0308 	and.w	r3, r3, #8
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d003      	beq.n	8003d94 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f000 ffa9 	bl	8004ce4 <SD_Write_IT>
 8003d92:	e0be      	b.n	8003f12 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d9a:	f240 233a 	movw	r3, #570	; 0x23a
 8003d9e:	4013      	ands	r3, r2
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	f000 80b6 	beq.w	8003f12 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dac:	f003 0302 	and.w	r3, r3, #2
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d005      	beq.n	8003dc0 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db8:	f043 0202 	orr.w	r2, r3, #2
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dc6:	f003 0308 	and.w	r3, r3, #8
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d005      	beq.n	8003dda <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd2:	f043 0208 	orr.w	r2, r3, #8
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003de0:	f003 0320 	and.w	r3, r3, #32
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d005      	beq.n	8003df4 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dec:	f043 0220 	orr.w	r2, r3, #32
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dfa:	f003 0310 	and.w	r3, r3, #16
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d005      	beq.n	8003e0e <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e06:	f043 0210 	orr.w	r2, r3, #16
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d005      	beq.n	8003e28 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e20:	f043 0208 	orr.w	r2, r3, #8
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f240 723a 	movw	r2, #1850	; 0x73a
 8003e30:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	6812      	ldr	r2, [r2, #0]
 8003e3c:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8003e40:	f023 0302 	bic.w	r3, r3, #2
 8003e44:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f001 fce6 	bl	800581c <SDMMC_CmdStopTransfer>
 8003e50:	4602      	mov	r2, r0
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e56:	431a      	orrs	r2, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f003 0308 	and.w	r3, r3, #8
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d00a      	beq.n	8003e7c <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f000 f855 	bl	8003f24 <HAL_SD_ErrorCallback>
}
 8003e7a:	e04a      	b.n	8003f12 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d045      	beq.n	8003f12 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	f003 0310 	and.w	r3, r3, #16
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d104      	bne.n	8003e9a <HAL_SD_IRQHandler+0x282>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f003 0320 	and.w	r3, r3, #32
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d011      	beq.n	8003ebe <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e9e:	4a1f      	ldr	r2, [pc, #124]	; (8003f1c <HAL_SD_IRQHandler+0x304>)
 8003ea0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f7fe fb72 	bl	8002590 <HAL_DMA_Abort_IT>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d02f      	beq.n	8003f12 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f000 fb68 	bl	800458c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003ebc:	e029      	b.n	8003f12 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	f003 0301 	and.w	r3, r3, #1
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d104      	bne.n	8003ed2 <HAL_SD_IRQHandler+0x2ba>
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f003 0302 	and.w	r3, r3, #2
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d011      	beq.n	8003ef6 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed6:	4a12      	ldr	r2, [pc, #72]	; (8003f20 <HAL_SD_IRQHandler+0x308>)
 8003ed8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f7fe fb56 	bl	8002590 <HAL_DMA_Abort_IT>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d013      	beq.n	8003f12 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f000 fb83 	bl	80045fa <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003ef4:	e00d      	b.n	8003f12 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f002 f8f0 	bl	80060f0 <HAL_SD_AbortCallback>
}
 8003f10:	e7ff      	b.n	8003f12 <HAL_SD_IRQHandler+0x2fa>
 8003f12:	bf00      	nop
 8003f14:	3710      	adds	r7, #16
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	0800458d 	.word	0x0800458d
 8003f20:	080045fb 	.word	0x080045fb

08003f24 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8003f2c:	bf00      	nop
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f46:	0f9b      	lsrs	r3, r3, #30
 8003f48:	b2da      	uxtb	r2, r3
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f52:	0e9b      	lsrs	r3, r3, #26
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	f003 030f 	and.w	r3, r3, #15
 8003f5a:	b2da      	uxtb	r2, r3
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f64:	0e1b      	lsrs	r3, r3, #24
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	f003 0303 	and.w	r3, r3, #3
 8003f6c:	b2da      	uxtb	r2, r3
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f76:	0c1b      	lsrs	r3, r3, #16
 8003f78:	b2da      	uxtb	r2, r3
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f82:	0a1b      	lsrs	r3, r3, #8
 8003f84:	b2da      	uxtb	r2, r3
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f8e:	b2da      	uxtb	r2, r3
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f98:	0d1b      	lsrs	r3, r3, #20
 8003f9a:	b29a      	uxth	r2, r3
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fa4:	0c1b      	lsrs	r3, r3, #16
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	f003 030f 	and.w	r3, r3, #15
 8003fac:	b2da      	uxtb	r2, r3
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fb6:	0bdb      	lsrs	r3, r3, #15
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	f003 0301 	and.w	r3, r3, #1
 8003fbe:	b2da      	uxtb	r2, r3
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fc8:	0b9b      	lsrs	r3, r3, #14
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	f003 0301 	and.w	r3, r3, #1
 8003fd0:	b2da      	uxtb	r2, r3
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fda:	0b5b      	lsrs	r3, r3, #13
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	f003 0301 	and.w	r3, r3, #1
 8003fe2:	b2da      	uxtb	r2, r3
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fec:	0b1b      	lsrs	r3, r3, #12
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	f003 0301 	and.w	r3, r3, #1
 8003ff4:	b2da      	uxtb	r2, r3
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004004:	2b00      	cmp	r3, #0
 8004006:	d163      	bne.n	80040d0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800400c:	009a      	lsls	r2, r3, #2
 800400e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004012:	4013      	ands	r3, r2
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004018:	0f92      	lsrs	r2, r2, #30
 800401a:	431a      	orrs	r2, r3
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004024:	0edb      	lsrs	r3, r3, #27
 8004026:	b2db      	uxtb	r3, r3
 8004028:	f003 0307 	and.w	r3, r3, #7
 800402c:	b2da      	uxtb	r2, r3
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004036:	0e1b      	lsrs	r3, r3, #24
 8004038:	b2db      	uxtb	r3, r3
 800403a:	f003 0307 	and.w	r3, r3, #7
 800403e:	b2da      	uxtb	r2, r3
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004048:	0d5b      	lsrs	r3, r3, #21
 800404a:	b2db      	uxtb	r3, r3
 800404c:	f003 0307 	and.w	r3, r3, #7
 8004050:	b2da      	uxtb	r2, r3
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800405a:	0c9b      	lsrs	r3, r3, #18
 800405c:	b2db      	uxtb	r3, r3
 800405e:	f003 0307 	and.w	r3, r3, #7
 8004062:	b2da      	uxtb	r2, r3
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800406c:	0bdb      	lsrs	r3, r3, #15
 800406e:	b2db      	uxtb	r3, r3
 8004070:	f003 0307 	and.w	r3, r3, #7
 8004074:	b2da      	uxtb	r2, r3
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	1c5a      	adds	r2, r3, #1
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	7e1b      	ldrb	r3, [r3, #24]
 8004088:	b2db      	uxtb	r3, r3
 800408a:	f003 0307 	and.w	r3, r3, #7
 800408e:	3302      	adds	r3, #2
 8004090:	2201      	movs	r2, #1
 8004092:	fa02 f303 	lsl.w	r3, r2, r3
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800409a:	fb03 f202 	mul.w	r2, r3, r2
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	7a1b      	ldrb	r3, [r3, #8]
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	f003 030f 	and.w	r3, r3, #15
 80040ac:	2201      	movs	r2, #1
 80040ae:	409a      	lsls	r2, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80040bc:	0a52      	lsrs	r2, r2, #9
 80040be:	fb03 f202 	mul.w	r2, r3, r2
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040cc:	661a      	str	r2, [r3, #96]	; 0x60
 80040ce:	e031      	b.n	8004134 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d11d      	bne.n	8004114 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040dc:	041b      	lsls	r3, r3, #16
 80040de:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040e6:	0c1b      	lsrs	r3, r3, #16
 80040e8:	431a      	orrs	r2, r3
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	3301      	adds	r3, #1
 80040f4:	029a      	lsls	r2, r3, #10
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004108:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	661a      	str	r2, [r3, #96]	; 0x60
 8004112:	e00f      	b.n	8004134 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a58      	ldr	r2, [pc, #352]	; (800427c <HAL_SD_GetCardCSD+0x344>)
 800411a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004120:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e09d      	b.n	8004270 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004138:	0b9b      	lsrs	r3, r3, #14
 800413a:	b2db      	uxtb	r3, r3
 800413c:	f003 0301 	and.w	r3, r3, #1
 8004140:	b2da      	uxtb	r2, r3
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800414a:	09db      	lsrs	r3, r3, #7
 800414c:	b2db      	uxtb	r3, r3
 800414e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004152:	b2da      	uxtb	r2, r3
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800415c:	b2db      	uxtb	r3, r3
 800415e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004162:	b2da      	uxtb	r2, r3
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800416c:	0fdb      	lsrs	r3, r3, #31
 800416e:	b2da      	uxtb	r2, r3
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004178:	0f5b      	lsrs	r3, r3, #29
 800417a:	b2db      	uxtb	r3, r3
 800417c:	f003 0303 	and.w	r3, r3, #3
 8004180:	b2da      	uxtb	r2, r3
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800418a:	0e9b      	lsrs	r3, r3, #26
 800418c:	b2db      	uxtb	r3, r3
 800418e:	f003 0307 	and.w	r3, r3, #7
 8004192:	b2da      	uxtb	r2, r3
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800419c:	0d9b      	lsrs	r3, r3, #22
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	f003 030f 	and.w	r3, r3, #15
 80041a4:	b2da      	uxtb	r2, r3
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ae:	0d5b      	lsrs	r3, r3, #21
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	f003 0301 	and.w	r3, r3, #1
 80041b6:	b2da      	uxtb	r2, r3
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ca:	0c1b      	lsrs	r3, r3, #16
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	f003 0301 	and.w	r3, r3, #1
 80041d2:	b2da      	uxtb	r2, r3
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041de:	0bdb      	lsrs	r3, r3, #15
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	f003 0301 	and.w	r3, r3, #1
 80041e6:	b2da      	uxtb	r2, r3
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f2:	0b9b      	lsrs	r3, r3, #14
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	f003 0301 	and.w	r3, r3, #1
 80041fa:	b2da      	uxtb	r2, r3
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004206:	0b5b      	lsrs	r3, r3, #13
 8004208:	b2db      	uxtb	r3, r3
 800420a:	f003 0301 	and.w	r3, r3, #1
 800420e:	b2da      	uxtb	r2, r3
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800421a:	0b1b      	lsrs	r3, r3, #12
 800421c:	b2db      	uxtb	r3, r3
 800421e:	f003 0301 	and.w	r3, r3, #1
 8004222:	b2da      	uxtb	r2, r3
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800422e:	0a9b      	lsrs	r3, r3, #10
 8004230:	b2db      	uxtb	r3, r3
 8004232:	f003 0303 	and.w	r3, r3, #3
 8004236:	b2da      	uxtb	r2, r3
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004242:	0a1b      	lsrs	r3, r3, #8
 8004244:	b2db      	uxtb	r3, r3
 8004246:	f003 0303 	and.w	r3, r3, #3
 800424a:	b2da      	uxtb	r2, r3
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004256:	085b      	lsrs	r3, r3, #1
 8004258:	b2db      	uxtb	r3, r3
 800425a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800425e:	b2da      	uxtb	r2, r3
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	2201      	movs	r2, #1
 800426a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800426e:	2300      	movs	r3, #0
}
 8004270:	4618      	mov	r0, r3
 8004272:	370c      	adds	r7, #12
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr
 800427c:	004005ff 	.word	0x004005ff

08004280 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80042ca:	2300      	movs	r3, #0
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80042d8:	b5b0      	push	{r4, r5, r7, lr}
 80042da:	b08e      	sub	sp, #56	; 0x38
 80042dc:	af04      	add	r7, sp, #16
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80042e2:	2300      	movs	r3, #0
 80042e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2203      	movs	r2, #3
 80042ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f4:	2b03      	cmp	r3, #3
 80042f6:	d02e      	beq.n	8004356 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042fe:	d106      	bne.n	800430e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004304:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	639a      	str	r2, [r3, #56]	; 0x38
 800430c:	e029      	b.n	8004362 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004314:	d10a      	bne.n	800432c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 fb2a 	bl	8004970 <SD_WideBus_Enable>
 800431c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004322:	6a3b      	ldr	r3, [r7, #32]
 8004324:	431a      	orrs	r2, r3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	639a      	str	r2, [r3, #56]	; 0x38
 800432a:	e01a      	b.n	8004362 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d10a      	bne.n	8004348 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 fb67 	bl	8004a06 <SD_WideBus_Disable>
 8004338:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800433e:	6a3b      	ldr	r3, [r7, #32]
 8004340:	431a      	orrs	r2, r3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	639a      	str	r2, [r3, #56]	; 0x38
 8004346:	e00c      	b.n	8004362 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800434c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	639a      	str	r2, [r3, #56]	; 0x38
 8004354:	e005      	b.n	8004362 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004366:	2b00      	cmp	r3, #0
 8004368:	d00b      	beq.n	8004382 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a26      	ldr	r2, [pc, #152]	; (8004408 <HAL_SD_ConfigWideBusOperation+0x130>)
 8004370:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2201      	movs	r2, #1
 8004376:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004380:	e01f      	b.n	80043c2 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	695b      	ldr	r3, [r3, #20]
 800439c:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	699b      	ldr	r3, [r3, #24]
 80043a2:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681d      	ldr	r5, [r3, #0]
 80043a8:	466c      	mov	r4, sp
 80043aa:	f107 0314 	add.w	r3, r7, #20
 80043ae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80043b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80043b6:	f107 0308 	add.w	r3, r7, #8
 80043ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80043bc:	4628      	mov	r0, r5
 80043be:	f001 f8a7 	bl	8005510 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80043ca:	4618      	mov	r0, r3
 80043cc:	f001 f97b 	bl	80056c6 <SDMMC_CmdBlockLength>
 80043d0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80043d2:	6a3b      	ldr	r3, [r7, #32]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d00c      	beq.n	80043f2 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a0a      	ldr	r2, [pc, #40]	; (8004408 <HAL_SD_ConfigWideBusOperation+0x130>)
 80043de:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043e4:	6a3b      	ldr	r3, [r7, #32]
 80043e6:	431a      	orrs	r2, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2201      	movs	r2, #1
 80043f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80043fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3728      	adds	r7, #40	; 0x28
 8004402:	46bd      	mov	sp, r7
 8004404:	bdb0      	pop	{r4, r5, r7, pc}
 8004406:	bf00      	nop
 8004408:	004005ff 	.word	0x004005ff

0800440c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b086      	sub	sp, #24
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8004414:	2300      	movs	r3, #0
 8004416:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8004418:	f107 030c 	add.w	r3, r7, #12
 800441c:	4619      	mov	r1, r3
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f000 fa7e 	bl	8004920 <SD_SendStatus>
 8004424:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d005      	beq.n	8004438 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	431a      	orrs	r2, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	0a5b      	lsrs	r3, r3, #9
 800443c:	f003 030f 	and.w	r3, r3, #15
 8004440:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8004442:	693b      	ldr	r3, [r7, #16]
}
 8004444:	4618      	mov	r0, r3
 8004446:	3718      	adds	r7, #24
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}

0800444c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800444c:	b480      	push	{r7}
 800444e:	b085      	sub	sp, #20
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004458:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004468:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800446a:	bf00      	nop
 800446c:	3714      	adds	r7, #20
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr

08004476 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004476:	b580      	push	{r7, lr}
 8004478:	b084      	sub	sp, #16
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004482:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004488:	2b82      	cmp	r3, #130	; 0x82
 800448a:	d111      	bne.n	80044b0 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4618      	mov	r0, r3
 8004492:	f001 f9c3 	bl	800581c <SDMMC_CmdStopTransfer>
 8004496:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d008      	beq.n	80044b0 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	431a      	orrs	r2, r3
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80044aa:	68f8      	ldr	r0, [r7, #12]
 80044ac:	f7ff fd3a 	bl	8003f24 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f022 0208 	bic.w	r2, r2, #8
 80044be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f240 523a 	movw	r2, #1338	; 0x53a
 80044c8:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2201      	movs	r2, #1
 80044ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2200      	movs	r2, #0
 80044d6:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80044d8:	68f8      	ldr	r0, [r7, #12]
 80044da:	f001 fe1d 	bl	8006118 <HAL_SD_RxCpltCallback>
#endif
}
 80044de:	bf00      	nop
 80044e0:	3710      	adds	r7, #16
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
	...

080044e8 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b086      	sub	sp, #24
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f4:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f7fe f9f6 	bl	80028e8 <HAL_DMA_GetError>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d03e      	beq.n	8004580 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004508:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800450e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004510:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	2b01      	cmp	r3, #1
 8004516:	d002      	beq.n	800451e <SD_DMAError+0x36>
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2b01      	cmp	r3, #1
 800451c:	d12d      	bne.n	800457a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a19      	ldr	r2, [pc, #100]	; (8004588 <SD_DMAError+0xa0>)
 8004524:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8004534:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800453a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8004542:	6978      	ldr	r0, [r7, #20]
 8004544:	f7ff ff62 	bl	800440c <HAL_SD_GetCardState>
 8004548:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	2b06      	cmp	r3, #6
 800454e:	d002      	beq.n	8004556 <SD_DMAError+0x6e>
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	2b05      	cmp	r3, #5
 8004554:	d10a      	bne.n	800456c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4618      	mov	r0, r3
 800455c:	f001 f95e 	bl	800581c <SDMMC_CmdStopTransfer>
 8004560:	4602      	mov	r2, r0
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004566:	431a      	orrs	r2, r3
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	2200      	movs	r2, #0
 8004578:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800457a:	6978      	ldr	r0, [r7, #20]
 800457c:	f7ff fcd2 	bl	8003f24 <HAL_SD_ErrorCallback>
#endif
  }
}
 8004580:	bf00      	nop
 8004582:	3718      	adds	r7, #24
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}
 8004588:	004005ff 	.word	0x004005ff

0800458c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b084      	sub	sp, #16
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004598:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f240 523a 	movw	r2, #1338	; 0x53a
 80045a2:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80045a4:	68f8      	ldr	r0, [r7, #12]
 80045a6:	f7ff ff31 	bl	800440c <HAL_SD_GetCardState>
 80045aa:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2200      	movs	r2, #0
 80045b8:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	2b06      	cmp	r3, #6
 80045be:	d002      	beq.n	80045c6 <SD_DMATxAbort+0x3a>
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	2b05      	cmp	r3, #5
 80045c4:	d10a      	bne.n	80045dc <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4618      	mov	r0, r3
 80045cc:	f001 f926 	bl	800581c <SDMMC_CmdStopTransfer>
 80045d0:	4602      	mov	r2, r0
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d6:	431a      	orrs	r2, r3
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d103      	bne.n	80045ec <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80045e4:	68f8      	ldr	r0, [r7, #12]
 80045e6:	f001 fd83 	bl	80060f0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80045ea:	e002      	b.n	80045f2 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80045ec:	68f8      	ldr	r0, [r7, #12]
 80045ee:	f7ff fc99 	bl	8003f24 <HAL_SD_ErrorCallback>
}
 80045f2:	bf00      	nop
 80045f4:	3710      	adds	r7, #16
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}

080045fa <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80045fa:	b580      	push	{r7, lr}
 80045fc:	b084      	sub	sp, #16
 80045fe:	af00      	add	r7, sp, #0
 8004600:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004606:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f240 523a 	movw	r2, #1338	; 0x53a
 8004610:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	f7ff fefa 	bl	800440c <HAL_SD_GetCardState>
 8004618:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2201      	movs	r2, #1
 800461e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2200      	movs	r2, #0
 8004626:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	2b06      	cmp	r3, #6
 800462c:	d002      	beq.n	8004634 <SD_DMARxAbort+0x3a>
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	2b05      	cmp	r3, #5
 8004632:	d10a      	bne.n	800464a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4618      	mov	r0, r3
 800463a:	f001 f8ef 	bl	800581c <SDMMC_CmdStopTransfer>
 800463e:	4602      	mov	r2, r0
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004644:	431a      	orrs	r2, r3
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800464e:	2b00      	cmp	r3, #0
 8004650:	d103      	bne.n	800465a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004652:	68f8      	ldr	r0, [r7, #12]
 8004654:	f001 fd4c 	bl	80060f0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004658:	e002      	b.n	8004660 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800465a:	68f8      	ldr	r0, [r7, #12]
 800465c:	f7ff fc62 	bl	8003f24 <HAL_SD_ErrorCallback>
}
 8004660:	bf00      	nop
 8004662:	3710      	adds	r7, #16
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004668:	b5b0      	push	{r4, r5, r7, lr}
 800466a:	b094      	sub	sp, #80	; 0x50
 800466c:	af04      	add	r7, sp, #16
 800466e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004670:	2301      	movs	r3, #1
 8004672:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4618      	mov	r0, r3
 800467a:	f000 ffa0 	bl	80055be <SDIO_GetPowerState>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d102      	bne.n	800468a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004684:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004688:	e0b8      	b.n	80047fc <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800468e:	2b03      	cmp	r3, #3
 8004690:	d02f      	beq.n	80046f2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4618      	mov	r0, r3
 8004698:	f001 f9ca 	bl	8005a30 <SDMMC_CmdSendCID>
 800469c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800469e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d001      	beq.n	80046a8 <SD_InitCard+0x40>
    {
      return errorstate;
 80046a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046a6:	e0a9      	b.n	80047fc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2100      	movs	r1, #0
 80046ae:	4618      	mov	r0, r3
 80046b0:	f000 ffca 	bl	8005648 <SDIO_GetResponse>
 80046b4:	4602      	mov	r2, r0
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2104      	movs	r1, #4
 80046c0:	4618      	mov	r0, r3
 80046c2:	f000 ffc1 	bl	8005648 <SDIO_GetResponse>
 80046c6:	4602      	mov	r2, r0
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	2108      	movs	r1, #8
 80046d2:	4618      	mov	r0, r3
 80046d4:	f000 ffb8 	bl	8005648 <SDIO_GetResponse>
 80046d8:	4602      	mov	r2, r0
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	210c      	movs	r1, #12
 80046e4:	4618      	mov	r0, r3
 80046e6:	f000 ffaf 	bl	8005648 <SDIO_GetResponse>
 80046ea:	4602      	mov	r2, r0
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046f6:	2b03      	cmp	r3, #3
 80046f8:	d00d      	beq.n	8004716 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f107 020e 	add.w	r2, r7, #14
 8004702:	4611      	mov	r1, r2
 8004704:	4618      	mov	r0, r3
 8004706:	f001 f9d0 	bl	8005aaa <SDMMC_CmdSetRelAdd>
 800470a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800470c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800470e:	2b00      	cmp	r3, #0
 8004710:	d001      	beq.n	8004716 <SD_InitCard+0xae>
    {
      return errorstate;
 8004712:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004714:	e072      	b.n	80047fc <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800471a:	2b03      	cmp	r3, #3
 800471c:	d036      	beq.n	800478c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800471e:	89fb      	ldrh	r3, [r7, #14]
 8004720:	461a      	mov	r2, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800472e:	041b      	lsls	r3, r3, #16
 8004730:	4619      	mov	r1, r3
 8004732:	4610      	mov	r0, r2
 8004734:	f001 f99a 	bl	8005a6c <SDMMC_CmdSendCSD>
 8004738:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800473a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800473c:	2b00      	cmp	r3, #0
 800473e:	d001      	beq.n	8004744 <SD_InitCard+0xdc>
    {
      return errorstate;
 8004740:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004742:	e05b      	b.n	80047fc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2100      	movs	r1, #0
 800474a:	4618      	mov	r0, r3
 800474c:	f000 ff7c 	bl	8005648 <SDIO_GetResponse>
 8004750:	4602      	mov	r2, r0
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	2104      	movs	r1, #4
 800475c:	4618      	mov	r0, r3
 800475e:	f000 ff73 	bl	8005648 <SDIO_GetResponse>
 8004762:	4602      	mov	r2, r0
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2108      	movs	r1, #8
 800476e:	4618      	mov	r0, r3
 8004770:	f000 ff6a 	bl	8005648 <SDIO_GetResponse>
 8004774:	4602      	mov	r2, r0
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	210c      	movs	r1, #12
 8004780:	4618      	mov	r0, r3
 8004782:	f000 ff61 	bl	8005648 <SDIO_GetResponse>
 8004786:	4602      	mov	r2, r0
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2104      	movs	r1, #4
 8004792:	4618      	mov	r0, r3
 8004794:	f000 ff58 	bl	8005648 <SDIO_GetResponse>
 8004798:	4603      	mov	r3, r0
 800479a:	0d1a      	lsrs	r2, r3, #20
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80047a0:	f107 0310 	add.w	r3, r7, #16
 80047a4:	4619      	mov	r1, r3
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f7ff fbc6 	bl	8003f38 <HAL_SD_GetCardCSD>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d002      	beq.n	80047b8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80047b2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80047b6:	e021      	b.n	80047fc <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6819      	ldr	r1, [r3, #0]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047c0:	041b      	lsls	r3, r3, #16
 80047c2:	2200      	movs	r2, #0
 80047c4:	461c      	mov	r4, r3
 80047c6:	4615      	mov	r5, r2
 80047c8:	4622      	mov	r2, r4
 80047ca:	462b      	mov	r3, r5
 80047cc:	4608      	mov	r0, r1
 80047ce:	f001 f847 	bl	8005860 <SDMMC_CmdSelDesel>
 80047d2:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80047d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d001      	beq.n	80047de <SD_InitCard+0x176>
  {
    return errorstate;
 80047da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047dc:	e00e      	b.n	80047fc <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681d      	ldr	r5, [r3, #0]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	466c      	mov	r4, sp
 80047e6:	f103 0210 	add.w	r2, r3, #16
 80047ea:	ca07      	ldmia	r2, {r0, r1, r2}
 80047ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80047f0:	3304      	adds	r3, #4
 80047f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80047f4:	4628      	mov	r0, r5
 80047f6:	f000 fe8b 	bl	8005510 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80047fa:	2300      	movs	r3, #0
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3740      	adds	r7, #64	; 0x40
 8004800:	46bd      	mov	sp, r7
 8004802:	bdb0      	pop	{r4, r5, r7, pc}

08004804 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b086      	sub	sp, #24
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800480c:	2300      	movs	r3, #0
 800480e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004810:	2300      	movs	r3, #0
 8004812:	617b      	str	r3, [r7, #20]
 8004814:	2300      	movs	r3, #0
 8004816:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4618      	mov	r0, r3
 800481e:	f001 f842 	bl	80058a6 <SDMMC_CmdGoIdleState>
 8004822:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d001      	beq.n	800482e <SD_PowerON+0x2a>
  {
    return errorstate;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	e072      	b.n	8004914 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4618      	mov	r0, r3
 8004834:	f001 f855 	bl	80058e2 <SDMMC_CmdOperCond>
 8004838:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d00d      	beq.n	800485c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4618      	mov	r0, r3
 800484c:	f001 f82b 	bl	80058a6 <SDMMC_CmdGoIdleState>
 8004850:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d004      	beq.n	8004862 <SD_PowerON+0x5e>
    {
      return errorstate;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	e05b      	b.n	8004914 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004866:	2b01      	cmp	r3, #1
 8004868:	d137      	bne.n	80048da <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2100      	movs	r1, #0
 8004870:	4618      	mov	r0, r3
 8004872:	f001 f855 	bl	8005920 <SDMMC_CmdAppCommand>
 8004876:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d02d      	beq.n	80048da <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800487e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004882:	e047      	b.n	8004914 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2100      	movs	r1, #0
 800488a:	4618      	mov	r0, r3
 800488c:	f001 f848 	bl	8005920 <SDMMC_CmdAppCommand>
 8004890:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d001      	beq.n	800489c <SD_PowerON+0x98>
    {
      return errorstate;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	e03b      	b.n	8004914 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	491e      	ldr	r1, [pc, #120]	; (800491c <SD_PowerON+0x118>)
 80048a2:	4618      	mov	r0, r3
 80048a4:	f001 f85e 	bl	8005964 <SDMMC_CmdAppOperCommand>
 80048a8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d002      	beq.n	80048b6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80048b0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80048b4:	e02e      	b.n	8004914 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2100      	movs	r1, #0
 80048bc:	4618      	mov	r0, r3
 80048be:	f000 fec3 	bl	8005648 <SDIO_GetResponse>
 80048c2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	0fdb      	lsrs	r3, r3, #31
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d101      	bne.n	80048d0 <SD_PowerON+0xcc>
 80048cc:	2301      	movs	r3, #1
 80048ce:	e000      	b.n	80048d2 <SD_PowerON+0xce>
 80048d0:	2300      	movs	r3, #0
 80048d2:	613b      	str	r3, [r7, #16]

    count++;
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	3301      	adds	r3, #1
 80048d8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d802      	bhi.n	80048ea <SD_PowerON+0xe6>
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d0cc      	beq.n	8004884 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d902      	bls.n	80048fa <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80048f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80048f8:	e00c      	b.n	8004914 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d003      	beq.n	800490c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	645a      	str	r2, [r3, #68]	; 0x44
 800490a:	e002      	b.n	8004912 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004912:	2300      	movs	r3, #0
}
 8004914:	4618      	mov	r0, r3
 8004916:	3718      	adds	r7, #24
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}
 800491c:	c1100000 	.word	0xc1100000

08004920 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d102      	bne.n	8004936 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004930:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004934:	e018      	b.n	8004968 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800493e:	041b      	lsls	r3, r3, #16
 8004940:	4619      	mov	r1, r3
 8004942:	4610      	mov	r0, r2
 8004944:	f001 f8d2 	bl	8005aec <SDMMC_CmdSendStatus>
 8004948:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d001      	beq.n	8004954 <SD_SendStatus+0x34>
  {
    return errorstate;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	e009      	b.n	8004968 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2100      	movs	r1, #0
 800495a:	4618      	mov	r0, r3
 800495c:	f000 fe74 	bl	8005648 <SDIO_GetResponse>
 8004960:	4602      	mov	r2, r0
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004966:	2300      	movs	r3, #0
}
 8004968:	4618      	mov	r0, r3
 800496a:	3710      	adds	r7, #16
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}

08004970 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b086      	sub	sp, #24
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004978:	2300      	movs	r3, #0
 800497a:	60fb      	str	r3, [r7, #12]
 800497c:	2300      	movs	r3, #0
 800497e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	2100      	movs	r1, #0
 8004986:	4618      	mov	r0, r3
 8004988:	f000 fe5e 	bl	8005648 <SDIO_GetResponse>
 800498c:	4603      	mov	r3, r0
 800498e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004992:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004996:	d102      	bne.n	800499e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004998:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800499c:	e02f      	b.n	80049fe <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800499e:	f107 030c 	add.w	r3, r7, #12
 80049a2:	4619      	mov	r1, r3
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f000 f879 	bl	8004a9c <SD_FindSCR>
 80049aa:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d001      	beq.n	80049b6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	e023      	b.n	80049fe <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d01c      	beq.n	80049fa <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049c8:	041b      	lsls	r3, r3, #16
 80049ca:	4619      	mov	r1, r3
 80049cc:	4610      	mov	r0, r2
 80049ce:	f000 ffa7 	bl	8005920 <SDMMC_CmdAppCommand>
 80049d2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d001      	beq.n	80049de <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	e00f      	b.n	80049fe <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	2102      	movs	r1, #2
 80049e4:	4618      	mov	r0, r3
 80049e6:	f000 ffe0 	bl	80059aa <SDMMC_CmdBusWidth>
 80049ea:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d001      	beq.n	80049f6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	e003      	b.n	80049fe <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80049f6:	2300      	movs	r3, #0
 80049f8:	e001      	b.n	80049fe <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80049fa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3718      	adds	r7, #24
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}

08004a06 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8004a06:	b580      	push	{r7, lr}
 8004a08:	b086      	sub	sp, #24
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004a0e:	2300      	movs	r3, #0
 8004a10:	60fb      	str	r3, [r7, #12]
 8004a12:	2300      	movs	r3, #0
 8004a14:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2100      	movs	r1, #0
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f000 fe13 	bl	8005648 <SDIO_GetResponse>
 8004a22:	4603      	mov	r3, r0
 8004a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a28:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a2c:	d102      	bne.n	8004a34 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004a2e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004a32:	e02f      	b.n	8004a94 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004a34:	f107 030c 	add.w	r3, r7, #12
 8004a38:	4619      	mov	r1, r3
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 f82e 	bl	8004a9c <SD_FindSCR>
 8004a40:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d001      	beq.n	8004a4c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	e023      	b.n	8004a94 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d01c      	beq.n	8004a90 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a5e:	041b      	lsls	r3, r3, #16
 8004a60:	4619      	mov	r1, r3
 8004a62:	4610      	mov	r0, r2
 8004a64:	f000 ff5c 	bl	8005920 <SDMMC_CmdAppCommand>
 8004a68:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d001      	beq.n	8004a74 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	e00f      	b.n	8004a94 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2100      	movs	r1, #0
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f000 ff95 	bl	80059aa <SDMMC_CmdBusWidth>
 8004a80:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d001      	beq.n	8004a8c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	e003      	b.n	8004a94 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	e001      	b.n	8004a94 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004a90:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3718      	adds	r7, #24
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004a9c:	b590      	push	{r4, r7, lr}
 8004a9e:	b08f      	sub	sp, #60	; 0x3c
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004aa6:	f7fc fdad 	bl	8001604 <HAL_GetTick>
 8004aaa:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8004aac:	2300      	movs	r3, #0
 8004aae:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	60bb      	str	r3, [r7, #8]
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2108      	movs	r1, #8
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f000 fdff 	bl	80056c6 <SDMMC_CmdBlockLength>
 8004ac8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d001      	beq.n	8004ad4 <SD_FindSCR+0x38>
  {
    return errorstate;
 8004ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad2:	e0b2      	b.n	8004c3a <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004adc:	041b      	lsls	r3, r3, #16
 8004ade:	4619      	mov	r1, r3
 8004ae0:	4610      	mov	r0, r2
 8004ae2:	f000 ff1d 	bl	8005920 <SDMMC_CmdAppCommand>
 8004ae6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d001      	beq.n	8004af2 <SD_FindSCR+0x56>
  {
    return errorstate;
 8004aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af0:	e0a3      	b.n	8004c3a <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004af2:	f04f 33ff 	mov.w	r3, #4294967295
 8004af6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8004af8:	2308      	movs	r3, #8
 8004afa:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8004afc:	2330      	movs	r3, #48	; 0x30
 8004afe:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004b00:	2302      	movs	r3, #2
 8004b02:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004b04:	2300      	movs	r3, #0
 8004b06:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f107 0210 	add.w	r2, r7, #16
 8004b14:	4611      	mov	r1, r2
 8004b16:	4618      	mov	r0, r3
 8004b18:	f000 fda9 	bl	800566e <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4618      	mov	r0, r3
 8004b22:	f000 ff64 	bl	80059ee <SDMMC_CmdSendSCR>
 8004b26:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d02a      	beq.n	8004b84 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8004b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b30:	e083      	b.n	8004c3a <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d00f      	beq.n	8004b60 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6819      	ldr	r1, [r3, #0]
 8004b44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	f107 0208 	add.w	r2, r7, #8
 8004b4c:	18d4      	adds	r4, r2, r3
 8004b4e:	4608      	mov	r0, r1
 8004b50:	f000 fd09 	bl	8005566 <SDIO_ReadFIFO>
 8004b54:	4603      	mov	r3, r0
 8004b56:	6023      	str	r3, [r4, #0]
      index++;
 8004b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	637b      	str	r3, [r7, #52]	; 0x34
 8004b5e:	e006      	b.n	8004b6e <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d012      	beq.n	8004b94 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004b6e:	f7fc fd49 	bl	8001604 <HAL_GetTick>
 8004b72:	4602      	mov	r2, r0
 8004b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b7c:	d102      	bne.n	8004b84 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8004b7e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004b82:	e05a      	b.n	8004c3a <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b8a:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d0cf      	beq.n	8004b32 <SD_FindSCR+0x96>
 8004b92:	e000      	b.n	8004b96 <SD_FindSCR+0xfa>
      break;
 8004b94:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b9c:	f003 0308 	and.w	r3, r3, #8
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d005      	beq.n	8004bb0 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2208      	movs	r2, #8
 8004baa:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004bac:	2308      	movs	r3, #8
 8004bae:	e044      	b.n	8004c3a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bb6:	f003 0302 	and.w	r3, r3, #2
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d005      	beq.n	8004bca <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	2202      	movs	r2, #2
 8004bc4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004bc6:	2302      	movs	r3, #2
 8004bc8:	e037      	b.n	8004c3a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bd0:	f003 0320 	and.w	r3, r3, #32
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d005      	beq.n	8004be4 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2220      	movs	r2, #32
 8004bde:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8004be0:	2320      	movs	r3, #32
 8004be2:	e02a      	b.n	8004c3a <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f240 523a 	movw	r2, #1338	; 0x53a
 8004bec:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	061a      	lsls	r2, r3, #24
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	021b      	lsls	r3, r3, #8
 8004bf6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004bfa:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	0a1b      	lsrs	r3, r3, #8
 8004c00:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004c04:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	0e1b      	lsrs	r3, r3, #24
 8004c0a:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c0e:	601a      	str	r2, [r3, #0]
    scr++;
 8004c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c12:	3304      	adds	r3, #4
 8004c14:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	061a      	lsls	r2, r3, #24
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	021b      	lsls	r3, r3, #8
 8004c1e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004c22:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	0a1b      	lsrs	r3, r3, #8
 8004c28:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004c2c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	0e1b      	lsrs	r3, r3, #24
 8004c32:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c36:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8004c38:	2300      	movs	r3, #0
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	373c      	adds	r7, #60	; 0x3c
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd90      	pop	{r4, r7, pc}

08004c42 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8004c42:	b580      	push	{r7, lr}
 8004c44:	b086      	sub	sp, #24
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c4e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c54:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d03f      	beq.n	8004cdc <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	617b      	str	r3, [r7, #20]
 8004c60:	e033      	b.n	8004cca <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4618      	mov	r0, r3
 8004c68:	f000 fc7d 	bl	8005566 <SDIO_ReadFIFO>
 8004c6c:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	b2da      	uxtb	r2, r3
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	3301      	adds	r3, #1
 8004c7a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	3b01      	subs	r3, #1
 8004c80:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	0a1b      	lsrs	r3, r3, #8
 8004c86:	b2da      	uxtb	r2, r3
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	3301      	adds	r3, #1
 8004c90:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	3b01      	subs	r3, #1
 8004c96:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	0c1b      	lsrs	r3, r3, #16
 8004c9c:	b2da      	uxtb	r2, r3
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	3301      	adds	r3, #1
 8004ca6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	3b01      	subs	r3, #1
 8004cac:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	0e1b      	lsrs	r3, r3, #24
 8004cb2:	b2da      	uxtb	r2, r3
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	3301      	adds	r3, #1
 8004cbc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	3b01      	subs	r3, #1
 8004cc2:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	3301      	adds	r3, #1
 8004cc8:	617b      	str	r3, [r7, #20]
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	2b07      	cmp	r3, #7
 8004cce:	d9c8      	bls.n	8004c62 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	68fa      	ldr	r2, [r7, #12]
 8004cd4:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	693a      	ldr	r2, [r7, #16]
 8004cda:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8004cdc:	bf00      	nop
 8004cde:	3718      	adds	r7, #24
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b086      	sub	sp, #24
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6a1b      	ldr	r3, [r3, #32]
 8004cf0:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf6:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d043      	beq.n	8004d86 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8004cfe:	2300      	movs	r3, #0
 8004d00:	617b      	str	r3, [r7, #20]
 8004d02:	e037      	b.n	8004d74 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	3301      	adds	r3, #1
 8004d0e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	3b01      	subs	r3, #1
 8004d14:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	021a      	lsls	r2, r3, #8
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	3301      	adds	r3, #1
 8004d26:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	3b01      	subs	r3, #1
 8004d2c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	041a      	lsls	r2, r3, #16
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	3301      	adds	r3, #1
 8004d3e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	3b01      	subs	r3, #1
 8004d44:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	781b      	ldrb	r3, [r3, #0]
 8004d4a:	061a      	lsls	r2, r3, #24
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	3301      	adds	r3, #1
 8004d56:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f107 0208 	add.w	r2, r7, #8
 8004d66:	4611      	mov	r1, r2
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f000 fc09 	bl	8005580 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	3301      	adds	r3, #1
 8004d72:	617b      	str	r3, [r7, #20]
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	2b07      	cmp	r3, #7
 8004d78:	d9c4      	bls.n	8004d04 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	68fa      	ldr	r2, [r7, #12]
 8004d7e:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	693a      	ldr	r2, [r7, #16]
 8004d84:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8004d86:	bf00      	nop
 8004d88:	3718      	adds	r7, #24
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}

08004d8e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d8e:	b580      	push	{r7, lr}
 8004d90:	b082      	sub	sp, #8
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d101      	bne.n	8004da0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e03f      	b.n	8004e20 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d106      	bne.n	8004dba <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f7fc fa9b 	bl	80012f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2224      	movs	r2, #36	; 0x24
 8004dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	68da      	ldr	r2, [r3, #12]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004dd0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 f928 	bl	8005028 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	691a      	ldr	r2, [r3, #16]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004de6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	695a      	ldr	r2, [r3, #20]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004df6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	68da      	ldr	r2, [r3, #12]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e06:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2220      	movs	r2, #32
 8004e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2220      	movs	r2, #32
 8004e1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e1e:	2300      	movs	r3, #0
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3708      	adds	r7, #8
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b08a      	sub	sp, #40	; 0x28
 8004e2c:	af02      	add	r7, sp, #8
 8004e2e:	60f8      	str	r0, [r7, #12]
 8004e30:	60b9      	str	r1, [r7, #8]
 8004e32:	603b      	str	r3, [r7, #0]
 8004e34:	4613      	mov	r3, r2
 8004e36:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	2b20      	cmp	r3, #32
 8004e46:	d17c      	bne.n	8004f42 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d002      	beq.n	8004e54 <HAL_UART_Transmit+0x2c>
 8004e4e:	88fb      	ldrh	r3, [r7, #6]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d101      	bne.n	8004e58 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e075      	b.n	8004f44 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d101      	bne.n	8004e66 <HAL_UART_Transmit+0x3e>
 8004e62:	2302      	movs	r3, #2
 8004e64:	e06e      	b.n	8004f44 <HAL_UART_Transmit+0x11c>
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2201      	movs	r2, #1
 8004e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2200      	movs	r2, #0
 8004e72:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2221      	movs	r2, #33	; 0x21
 8004e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e7c:	f7fc fbc2 	bl	8001604 <HAL_GetTick>
 8004e80:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	88fa      	ldrh	r2, [r7, #6]
 8004e86:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	88fa      	ldrh	r2, [r7, #6]
 8004e8c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e96:	d108      	bne.n	8004eaa <HAL_UART_Transmit+0x82>
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	691b      	ldr	r3, [r3, #16]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d104      	bne.n	8004eaa <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	61bb      	str	r3, [r7, #24]
 8004ea8:	e003      	b.n	8004eb2 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004eba:	e02a      	b.n	8004f12 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	9300      	str	r3, [sp, #0]
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	2180      	movs	r1, #128	; 0x80
 8004ec6:	68f8      	ldr	r0, [r7, #12]
 8004ec8:	f000 f840 	bl	8004f4c <UART_WaitOnFlagUntilTimeout>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d001      	beq.n	8004ed6 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e036      	b.n	8004f44 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d10b      	bne.n	8004ef4 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	881b      	ldrh	r3, [r3, #0]
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004eea:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004eec:	69bb      	ldr	r3, [r7, #24]
 8004eee:	3302      	adds	r3, #2
 8004ef0:	61bb      	str	r3, [r7, #24]
 8004ef2:	e007      	b.n	8004f04 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	781a      	ldrb	r2, [r3, #0]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	3301      	adds	r3, #1
 8004f02:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	3b01      	subs	r3, #1
 8004f0c:	b29a      	uxth	r2, r3
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d1cf      	bne.n	8004ebc <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	9300      	str	r3, [sp, #0]
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	2200      	movs	r2, #0
 8004f24:	2140      	movs	r1, #64	; 0x40
 8004f26:	68f8      	ldr	r0, [r7, #12]
 8004f28:	f000 f810 	bl	8004f4c <UART_WaitOnFlagUntilTimeout>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d001      	beq.n	8004f36 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004f32:	2303      	movs	r3, #3
 8004f34:	e006      	b.n	8004f44 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2220      	movs	r2, #32
 8004f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	e000      	b.n	8004f44 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004f42:	2302      	movs	r3, #2
  }
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3720      	adds	r7, #32
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b090      	sub	sp, #64	; 0x40
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	60b9      	str	r1, [r7, #8]
 8004f56:	603b      	str	r3, [r7, #0]
 8004f58:	4613      	mov	r3, r2
 8004f5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f5c:	e050      	b.n	8005000 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f64:	d04c      	beq.n	8005000 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004f66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d007      	beq.n	8004f7c <UART_WaitOnFlagUntilTimeout+0x30>
 8004f6c:	f7fc fb4a 	bl	8001604 <HAL_GetTick>
 8004f70:	4602      	mov	r2, r0
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d241      	bcs.n	8005000 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	330c      	adds	r3, #12
 8004f82:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f86:	e853 3f00 	ldrex	r3, [r3]
 8004f8a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	330c      	adds	r3, #12
 8004f9a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004f9c:	637a      	str	r2, [r7, #52]	; 0x34
 8004f9e:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004fa2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fa4:	e841 2300 	strex	r3, r2, [r1]
 8004fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d1e5      	bne.n	8004f7c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	3314      	adds	r3, #20
 8004fb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	e853 3f00 	ldrex	r3, [r3]
 8004fbe:	613b      	str	r3, [r7, #16]
   return(result);
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	f023 0301 	bic.w	r3, r3, #1
 8004fc6:	63bb      	str	r3, [r7, #56]	; 0x38
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	3314      	adds	r3, #20
 8004fce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004fd0:	623a      	str	r2, [r7, #32]
 8004fd2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd4:	69f9      	ldr	r1, [r7, #28]
 8004fd6:	6a3a      	ldr	r2, [r7, #32]
 8004fd8:	e841 2300 	strex	r3, r2, [r1]
 8004fdc:	61bb      	str	r3, [r7, #24]
   return(result);
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d1e5      	bne.n	8004fb0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2220      	movs	r2, #32
 8004fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2220      	movs	r2, #32
 8004ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	e00f      	b.n	8005020 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	4013      	ands	r3, r2
 800500a:	68ba      	ldr	r2, [r7, #8]
 800500c:	429a      	cmp	r2, r3
 800500e:	bf0c      	ite	eq
 8005010:	2301      	moveq	r3, #1
 8005012:	2300      	movne	r3, #0
 8005014:	b2db      	uxtb	r3, r3
 8005016:	461a      	mov	r2, r3
 8005018:	79fb      	ldrb	r3, [r7, #7]
 800501a:	429a      	cmp	r2, r3
 800501c:	d09f      	beq.n	8004f5e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800501e:	2300      	movs	r3, #0
}
 8005020:	4618      	mov	r0, r3
 8005022:	3740      	adds	r7, #64	; 0x40
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}

08005028 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005028:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800502c:	b0c0      	sub	sp, #256	; 0x100
 800502e:	af00      	add	r7, sp, #0
 8005030:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	691b      	ldr	r3, [r3, #16]
 800503c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005044:	68d9      	ldr	r1, [r3, #12]
 8005046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	ea40 0301 	orr.w	r3, r0, r1
 8005050:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005052:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005056:	689a      	ldr	r2, [r3, #8]
 8005058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	431a      	orrs	r2, r3
 8005060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005064:	695b      	ldr	r3, [r3, #20]
 8005066:	431a      	orrs	r2, r3
 8005068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800506c:	69db      	ldr	r3, [r3, #28]
 800506e:	4313      	orrs	r3, r2
 8005070:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005080:	f021 010c 	bic.w	r1, r1, #12
 8005084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800508e:	430b      	orrs	r3, r1
 8005090:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	695b      	ldr	r3, [r3, #20]
 800509a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800509e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050a2:	6999      	ldr	r1, [r3, #24]
 80050a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	ea40 0301 	orr.w	r3, r0, r1
 80050ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80050b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	4b8f      	ldr	r3, [pc, #572]	; (80052f4 <UART_SetConfig+0x2cc>)
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d005      	beq.n	80050c8 <UART_SetConfig+0xa0>
 80050bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	4b8d      	ldr	r3, [pc, #564]	; (80052f8 <UART_SetConfig+0x2d0>)
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d104      	bne.n	80050d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80050c8:	f7fe fb1a 	bl	8003700 <HAL_RCC_GetPCLK2Freq>
 80050cc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80050d0:	e003      	b.n	80050da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80050d2:	f7fe fb01 	bl	80036d8 <HAL_RCC_GetPCLK1Freq>
 80050d6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050de:	69db      	ldr	r3, [r3, #28]
 80050e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050e4:	f040 810c 	bne.w	8005300 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80050e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050ec:	2200      	movs	r2, #0
 80050ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80050f2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80050f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80050fa:	4622      	mov	r2, r4
 80050fc:	462b      	mov	r3, r5
 80050fe:	1891      	adds	r1, r2, r2
 8005100:	65b9      	str	r1, [r7, #88]	; 0x58
 8005102:	415b      	adcs	r3, r3
 8005104:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005106:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800510a:	4621      	mov	r1, r4
 800510c:	eb12 0801 	adds.w	r8, r2, r1
 8005110:	4629      	mov	r1, r5
 8005112:	eb43 0901 	adc.w	r9, r3, r1
 8005116:	f04f 0200 	mov.w	r2, #0
 800511a:	f04f 0300 	mov.w	r3, #0
 800511e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005122:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005126:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800512a:	4690      	mov	r8, r2
 800512c:	4699      	mov	r9, r3
 800512e:	4623      	mov	r3, r4
 8005130:	eb18 0303 	adds.w	r3, r8, r3
 8005134:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005138:	462b      	mov	r3, r5
 800513a:	eb49 0303 	adc.w	r3, r9, r3
 800513e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800514e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005152:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005156:	460b      	mov	r3, r1
 8005158:	18db      	adds	r3, r3, r3
 800515a:	653b      	str	r3, [r7, #80]	; 0x50
 800515c:	4613      	mov	r3, r2
 800515e:	eb42 0303 	adc.w	r3, r2, r3
 8005162:	657b      	str	r3, [r7, #84]	; 0x54
 8005164:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005168:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800516c:	f7fb f888 	bl	8000280 <__aeabi_uldivmod>
 8005170:	4602      	mov	r2, r0
 8005172:	460b      	mov	r3, r1
 8005174:	4b61      	ldr	r3, [pc, #388]	; (80052fc <UART_SetConfig+0x2d4>)
 8005176:	fba3 2302 	umull	r2, r3, r3, r2
 800517a:	095b      	lsrs	r3, r3, #5
 800517c:	011c      	lsls	r4, r3, #4
 800517e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005182:	2200      	movs	r2, #0
 8005184:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005188:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800518c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005190:	4642      	mov	r2, r8
 8005192:	464b      	mov	r3, r9
 8005194:	1891      	adds	r1, r2, r2
 8005196:	64b9      	str	r1, [r7, #72]	; 0x48
 8005198:	415b      	adcs	r3, r3
 800519a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800519c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80051a0:	4641      	mov	r1, r8
 80051a2:	eb12 0a01 	adds.w	sl, r2, r1
 80051a6:	4649      	mov	r1, r9
 80051a8:	eb43 0b01 	adc.w	fp, r3, r1
 80051ac:	f04f 0200 	mov.w	r2, #0
 80051b0:	f04f 0300 	mov.w	r3, #0
 80051b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80051b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80051bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80051c0:	4692      	mov	sl, r2
 80051c2:	469b      	mov	fp, r3
 80051c4:	4643      	mov	r3, r8
 80051c6:	eb1a 0303 	adds.w	r3, sl, r3
 80051ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80051ce:	464b      	mov	r3, r9
 80051d0:	eb4b 0303 	adc.w	r3, fp, r3
 80051d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80051d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80051e4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80051e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80051ec:	460b      	mov	r3, r1
 80051ee:	18db      	adds	r3, r3, r3
 80051f0:	643b      	str	r3, [r7, #64]	; 0x40
 80051f2:	4613      	mov	r3, r2
 80051f4:	eb42 0303 	adc.w	r3, r2, r3
 80051f8:	647b      	str	r3, [r7, #68]	; 0x44
 80051fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80051fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005202:	f7fb f83d 	bl	8000280 <__aeabi_uldivmod>
 8005206:	4602      	mov	r2, r0
 8005208:	460b      	mov	r3, r1
 800520a:	4611      	mov	r1, r2
 800520c:	4b3b      	ldr	r3, [pc, #236]	; (80052fc <UART_SetConfig+0x2d4>)
 800520e:	fba3 2301 	umull	r2, r3, r3, r1
 8005212:	095b      	lsrs	r3, r3, #5
 8005214:	2264      	movs	r2, #100	; 0x64
 8005216:	fb02 f303 	mul.w	r3, r2, r3
 800521a:	1acb      	subs	r3, r1, r3
 800521c:	00db      	lsls	r3, r3, #3
 800521e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005222:	4b36      	ldr	r3, [pc, #216]	; (80052fc <UART_SetConfig+0x2d4>)
 8005224:	fba3 2302 	umull	r2, r3, r3, r2
 8005228:	095b      	lsrs	r3, r3, #5
 800522a:	005b      	lsls	r3, r3, #1
 800522c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005230:	441c      	add	r4, r3
 8005232:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005236:	2200      	movs	r2, #0
 8005238:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800523c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005240:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005244:	4642      	mov	r2, r8
 8005246:	464b      	mov	r3, r9
 8005248:	1891      	adds	r1, r2, r2
 800524a:	63b9      	str	r1, [r7, #56]	; 0x38
 800524c:	415b      	adcs	r3, r3
 800524e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005250:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005254:	4641      	mov	r1, r8
 8005256:	1851      	adds	r1, r2, r1
 8005258:	6339      	str	r1, [r7, #48]	; 0x30
 800525a:	4649      	mov	r1, r9
 800525c:	414b      	adcs	r3, r1
 800525e:	637b      	str	r3, [r7, #52]	; 0x34
 8005260:	f04f 0200 	mov.w	r2, #0
 8005264:	f04f 0300 	mov.w	r3, #0
 8005268:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800526c:	4659      	mov	r1, fp
 800526e:	00cb      	lsls	r3, r1, #3
 8005270:	4651      	mov	r1, sl
 8005272:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005276:	4651      	mov	r1, sl
 8005278:	00ca      	lsls	r2, r1, #3
 800527a:	4610      	mov	r0, r2
 800527c:	4619      	mov	r1, r3
 800527e:	4603      	mov	r3, r0
 8005280:	4642      	mov	r2, r8
 8005282:	189b      	adds	r3, r3, r2
 8005284:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005288:	464b      	mov	r3, r9
 800528a:	460a      	mov	r2, r1
 800528c:	eb42 0303 	adc.w	r3, r2, r3
 8005290:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80052a0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80052a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80052a8:	460b      	mov	r3, r1
 80052aa:	18db      	adds	r3, r3, r3
 80052ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80052ae:	4613      	mov	r3, r2
 80052b0:	eb42 0303 	adc.w	r3, r2, r3
 80052b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80052ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80052be:	f7fa ffdf 	bl	8000280 <__aeabi_uldivmod>
 80052c2:	4602      	mov	r2, r0
 80052c4:	460b      	mov	r3, r1
 80052c6:	4b0d      	ldr	r3, [pc, #52]	; (80052fc <UART_SetConfig+0x2d4>)
 80052c8:	fba3 1302 	umull	r1, r3, r3, r2
 80052cc:	095b      	lsrs	r3, r3, #5
 80052ce:	2164      	movs	r1, #100	; 0x64
 80052d0:	fb01 f303 	mul.w	r3, r1, r3
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	00db      	lsls	r3, r3, #3
 80052d8:	3332      	adds	r3, #50	; 0x32
 80052da:	4a08      	ldr	r2, [pc, #32]	; (80052fc <UART_SetConfig+0x2d4>)
 80052dc:	fba2 2303 	umull	r2, r3, r2, r3
 80052e0:	095b      	lsrs	r3, r3, #5
 80052e2:	f003 0207 	and.w	r2, r3, #7
 80052e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4422      	add	r2, r4
 80052ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80052f0:	e106      	b.n	8005500 <UART_SetConfig+0x4d8>
 80052f2:	bf00      	nop
 80052f4:	40011000 	.word	0x40011000
 80052f8:	40011400 	.word	0x40011400
 80052fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005300:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005304:	2200      	movs	r2, #0
 8005306:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800530a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800530e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005312:	4642      	mov	r2, r8
 8005314:	464b      	mov	r3, r9
 8005316:	1891      	adds	r1, r2, r2
 8005318:	6239      	str	r1, [r7, #32]
 800531a:	415b      	adcs	r3, r3
 800531c:	627b      	str	r3, [r7, #36]	; 0x24
 800531e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005322:	4641      	mov	r1, r8
 8005324:	1854      	adds	r4, r2, r1
 8005326:	4649      	mov	r1, r9
 8005328:	eb43 0501 	adc.w	r5, r3, r1
 800532c:	f04f 0200 	mov.w	r2, #0
 8005330:	f04f 0300 	mov.w	r3, #0
 8005334:	00eb      	lsls	r3, r5, #3
 8005336:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800533a:	00e2      	lsls	r2, r4, #3
 800533c:	4614      	mov	r4, r2
 800533e:	461d      	mov	r5, r3
 8005340:	4643      	mov	r3, r8
 8005342:	18e3      	adds	r3, r4, r3
 8005344:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005348:	464b      	mov	r3, r9
 800534a:	eb45 0303 	adc.w	r3, r5, r3
 800534e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800535e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005362:	f04f 0200 	mov.w	r2, #0
 8005366:	f04f 0300 	mov.w	r3, #0
 800536a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800536e:	4629      	mov	r1, r5
 8005370:	008b      	lsls	r3, r1, #2
 8005372:	4621      	mov	r1, r4
 8005374:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005378:	4621      	mov	r1, r4
 800537a:	008a      	lsls	r2, r1, #2
 800537c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005380:	f7fa ff7e 	bl	8000280 <__aeabi_uldivmod>
 8005384:	4602      	mov	r2, r0
 8005386:	460b      	mov	r3, r1
 8005388:	4b60      	ldr	r3, [pc, #384]	; (800550c <UART_SetConfig+0x4e4>)
 800538a:	fba3 2302 	umull	r2, r3, r3, r2
 800538e:	095b      	lsrs	r3, r3, #5
 8005390:	011c      	lsls	r4, r3, #4
 8005392:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005396:	2200      	movs	r2, #0
 8005398:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800539c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80053a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80053a4:	4642      	mov	r2, r8
 80053a6:	464b      	mov	r3, r9
 80053a8:	1891      	adds	r1, r2, r2
 80053aa:	61b9      	str	r1, [r7, #24]
 80053ac:	415b      	adcs	r3, r3
 80053ae:	61fb      	str	r3, [r7, #28]
 80053b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053b4:	4641      	mov	r1, r8
 80053b6:	1851      	adds	r1, r2, r1
 80053b8:	6139      	str	r1, [r7, #16]
 80053ba:	4649      	mov	r1, r9
 80053bc:	414b      	adcs	r3, r1
 80053be:	617b      	str	r3, [r7, #20]
 80053c0:	f04f 0200 	mov.w	r2, #0
 80053c4:	f04f 0300 	mov.w	r3, #0
 80053c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80053cc:	4659      	mov	r1, fp
 80053ce:	00cb      	lsls	r3, r1, #3
 80053d0:	4651      	mov	r1, sl
 80053d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053d6:	4651      	mov	r1, sl
 80053d8:	00ca      	lsls	r2, r1, #3
 80053da:	4610      	mov	r0, r2
 80053dc:	4619      	mov	r1, r3
 80053de:	4603      	mov	r3, r0
 80053e0:	4642      	mov	r2, r8
 80053e2:	189b      	adds	r3, r3, r2
 80053e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80053e8:	464b      	mov	r3, r9
 80053ea:	460a      	mov	r2, r1
 80053ec:	eb42 0303 	adc.w	r3, r2, r3
 80053f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80053f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80053fe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005400:	f04f 0200 	mov.w	r2, #0
 8005404:	f04f 0300 	mov.w	r3, #0
 8005408:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800540c:	4649      	mov	r1, r9
 800540e:	008b      	lsls	r3, r1, #2
 8005410:	4641      	mov	r1, r8
 8005412:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005416:	4641      	mov	r1, r8
 8005418:	008a      	lsls	r2, r1, #2
 800541a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800541e:	f7fa ff2f 	bl	8000280 <__aeabi_uldivmod>
 8005422:	4602      	mov	r2, r0
 8005424:	460b      	mov	r3, r1
 8005426:	4611      	mov	r1, r2
 8005428:	4b38      	ldr	r3, [pc, #224]	; (800550c <UART_SetConfig+0x4e4>)
 800542a:	fba3 2301 	umull	r2, r3, r3, r1
 800542e:	095b      	lsrs	r3, r3, #5
 8005430:	2264      	movs	r2, #100	; 0x64
 8005432:	fb02 f303 	mul.w	r3, r2, r3
 8005436:	1acb      	subs	r3, r1, r3
 8005438:	011b      	lsls	r3, r3, #4
 800543a:	3332      	adds	r3, #50	; 0x32
 800543c:	4a33      	ldr	r2, [pc, #204]	; (800550c <UART_SetConfig+0x4e4>)
 800543e:	fba2 2303 	umull	r2, r3, r2, r3
 8005442:	095b      	lsrs	r3, r3, #5
 8005444:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005448:	441c      	add	r4, r3
 800544a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800544e:	2200      	movs	r2, #0
 8005450:	673b      	str	r3, [r7, #112]	; 0x70
 8005452:	677a      	str	r2, [r7, #116]	; 0x74
 8005454:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005458:	4642      	mov	r2, r8
 800545a:	464b      	mov	r3, r9
 800545c:	1891      	adds	r1, r2, r2
 800545e:	60b9      	str	r1, [r7, #8]
 8005460:	415b      	adcs	r3, r3
 8005462:	60fb      	str	r3, [r7, #12]
 8005464:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005468:	4641      	mov	r1, r8
 800546a:	1851      	adds	r1, r2, r1
 800546c:	6039      	str	r1, [r7, #0]
 800546e:	4649      	mov	r1, r9
 8005470:	414b      	adcs	r3, r1
 8005472:	607b      	str	r3, [r7, #4]
 8005474:	f04f 0200 	mov.w	r2, #0
 8005478:	f04f 0300 	mov.w	r3, #0
 800547c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005480:	4659      	mov	r1, fp
 8005482:	00cb      	lsls	r3, r1, #3
 8005484:	4651      	mov	r1, sl
 8005486:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800548a:	4651      	mov	r1, sl
 800548c:	00ca      	lsls	r2, r1, #3
 800548e:	4610      	mov	r0, r2
 8005490:	4619      	mov	r1, r3
 8005492:	4603      	mov	r3, r0
 8005494:	4642      	mov	r2, r8
 8005496:	189b      	adds	r3, r3, r2
 8005498:	66bb      	str	r3, [r7, #104]	; 0x68
 800549a:	464b      	mov	r3, r9
 800549c:	460a      	mov	r2, r1
 800549e:	eb42 0303 	adc.w	r3, r2, r3
 80054a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80054a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	663b      	str	r3, [r7, #96]	; 0x60
 80054ae:	667a      	str	r2, [r7, #100]	; 0x64
 80054b0:	f04f 0200 	mov.w	r2, #0
 80054b4:	f04f 0300 	mov.w	r3, #0
 80054b8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80054bc:	4649      	mov	r1, r9
 80054be:	008b      	lsls	r3, r1, #2
 80054c0:	4641      	mov	r1, r8
 80054c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054c6:	4641      	mov	r1, r8
 80054c8:	008a      	lsls	r2, r1, #2
 80054ca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80054ce:	f7fa fed7 	bl	8000280 <__aeabi_uldivmod>
 80054d2:	4602      	mov	r2, r0
 80054d4:	460b      	mov	r3, r1
 80054d6:	4b0d      	ldr	r3, [pc, #52]	; (800550c <UART_SetConfig+0x4e4>)
 80054d8:	fba3 1302 	umull	r1, r3, r3, r2
 80054dc:	095b      	lsrs	r3, r3, #5
 80054de:	2164      	movs	r1, #100	; 0x64
 80054e0:	fb01 f303 	mul.w	r3, r1, r3
 80054e4:	1ad3      	subs	r3, r2, r3
 80054e6:	011b      	lsls	r3, r3, #4
 80054e8:	3332      	adds	r3, #50	; 0x32
 80054ea:	4a08      	ldr	r2, [pc, #32]	; (800550c <UART_SetConfig+0x4e4>)
 80054ec:	fba2 2303 	umull	r2, r3, r2, r3
 80054f0:	095b      	lsrs	r3, r3, #5
 80054f2:	f003 020f 	and.w	r2, r3, #15
 80054f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4422      	add	r2, r4
 80054fe:	609a      	str	r2, [r3, #8]
}
 8005500:	bf00      	nop
 8005502:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005506:	46bd      	mov	sp, r7
 8005508:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800550c:	51eb851f 	.word	0x51eb851f

08005510 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8005510:	b084      	sub	sp, #16
 8005512:	b480      	push	{r7}
 8005514:	b085      	sub	sp, #20
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
 800551a:	f107 001c 	add.w	r0, r7, #28
 800551e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8005522:	2300      	movs	r3, #0
 8005524:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8005526:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8005528:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800552a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800552c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800552e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005530:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8005532:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8005536:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800553a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800553c:	68fa      	ldr	r2, [r7, #12]
 800553e:	4313      	orrs	r3, r2
 8005540:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800554a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800554e:	68fa      	ldr	r2, [r7, #12]
 8005550:	431a      	orrs	r2, r3
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005556:	2300      	movs	r3, #0
}
 8005558:	4618      	mov	r0, r3
 800555a:	3714      	adds	r7, #20
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	b004      	add	sp, #16
 8005564:	4770      	bx	lr

08005566 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8005566:	b480      	push	{r7}
 8005568:	b083      	sub	sp, #12
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8005574:	4618      	mov	r0, r3
 8005576:	370c      	adds	r7, #12
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005594:	2300      	movs	r3, #0
}
 8005596:	4618      	mov	r0, r3
 8005598:	370c      	adds	r7, #12
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr

080055a2 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80055a2:	b480      	push	{r7}
 80055a4:	b083      	sub	sp, #12
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2203      	movs	r2, #3
 80055ae:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80055b0:	2300      	movs	r3, #0
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	370c      	adds	r7, #12
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr

080055be <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80055be:	b480      	push	{r7}
 80055c0:	b083      	sub	sp, #12
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 0303 	and.w	r3, r3, #3
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	370c      	adds	r7, #12
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr

080055da <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80055da:	b480      	push	{r7}
 80055dc:	b085      	sub	sp, #20
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
 80055e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80055e4:	2300      	movs	r3, #0
 80055e6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80055f8:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80055fe:	431a      	orrs	r2, r3
                       Command->CPSM);
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8005604:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005606:	68fa      	ldr	r2, [r7, #12]
 8005608:	4313      	orrs	r3, r2
 800560a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005614:	f023 030f 	bic.w	r3, r3, #15
 8005618:	68fa      	ldr	r2, [r7, #12]
 800561a:	431a      	orrs	r2, r3
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8005620:	2300      	movs	r3, #0
}
 8005622:	4618      	mov	r0, r3
 8005624:	3714      	adds	r7, #20
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr

0800562e <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800562e:	b480      	push	{r7}
 8005630:	b083      	sub	sp, #12
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	691b      	ldr	r3, [r3, #16]
 800563a:	b2db      	uxtb	r3, r3
}
 800563c:	4618      	mov	r0, r3
 800563e:	370c      	adds	r7, #12
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr

08005648 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8005648:	b480      	push	{r7}
 800564a:	b085      	sub	sp, #20
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	3314      	adds	r3, #20
 8005656:	461a      	mov	r2, r3
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	4413      	add	r3, r2
 800565c:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
}  
 8005662:	4618      	mov	r0, r3
 8005664:	3714      	adds	r7, #20
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr

0800566e <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800566e:	b480      	push	{r7}
 8005670:	b085      	sub	sp, #20
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
 8005676:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005678:	2300      	movs	r3, #0
 800567a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	685a      	ldr	r2, [r3, #4]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005694:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800569a:	431a      	orrs	r2, r3
                       Data->DPSM);
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80056a0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80056a2:	68fa      	ldr	r2, [r7, #12]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ac:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	431a      	orrs	r2, r3
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80056b8:	2300      	movs	r3, #0

}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3714      	adds	r7, #20
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr

080056c6 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80056c6:	b580      	push	{r7, lr}
 80056c8:	b088      	sub	sp, #32
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
 80056ce:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80056d4:	2310      	movs	r3, #16
 80056d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80056d8:	2340      	movs	r3, #64	; 0x40
 80056da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80056dc:	2300      	movs	r3, #0
 80056de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80056e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056e4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80056e6:	f107 0308 	add.w	r3, r7, #8
 80056ea:	4619      	mov	r1, r3
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f7ff ff74 	bl	80055da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80056f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80056f6:	2110      	movs	r1, #16
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f000 fa19 	bl	8005b30 <SDMMC_GetCmdResp1>
 80056fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005700:	69fb      	ldr	r3, [r7, #28]
}
 8005702:	4618      	mov	r0, r3
 8005704:	3720      	adds	r7, #32
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}

0800570a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800570a:	b580      	push	{r7, lr}
 800570c:	b088      	sub	sp, #32
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
 8005712:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8005718:	2311      	movs	r3, #17
 800571a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800571c:	2340      	movs	r3, #64	; 0x40
 800571e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005720:	2300      	movs	r3, #0
 8005722:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005724:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005728:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800572a:	f107 0308 	add.w	r3, r7, #8
 800572e:	4619      	mov	r1, r3
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f7ff ff52 	bl	80055da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005736:	f241 3288 	movw	r2, #5000	; 0x1388
 800573a:	2111      	movs	r1, #17
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f000 f9f7 	bl	8005b30 <SDMMC_GetCmdResp1>
 8005742:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005744:	69fb      	ldr	r3, [r7, #28]
}
 8005746:	4618      	mov	r0, r3
 8005748:	3720      	adds	r7, #32
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}

0800574e <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800574e:	b580      	push	{r7, lr}
 8005750:	b088      	sub	sp, #32
 8005752:	af00      	add	r7, sp, #0
 8005754:	6078      	str	r0, [r7, #4]
 8005756:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800575c:	2312      	movs	r3, #18
 800575e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005760:	2340      	movs	r3, #64	; 0x40
 8005762:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005764:	2300      	movs	r3, #0
 8005766:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005768:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800576c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800576e:	f107 0308 	add.w	r3, r7, #8
 8005772:	4619      	mov	r1, r3
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f7ff ff30 	bl	80055da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800577a:	f241 3288 	movw	r2, #5000	; 0x1388
 800577e:	2112      	movs	r1, #18
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f000 f9d5 	bl	8005b30 <SDMMC_GetCmdResp1>
 8005786:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005788:	69fb      	ldr	r3, [r7, #28]
}
 800578a:	4618      	mov	r0, r3
 800578c:	3720      	adds	r7, #32
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}

08005792 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005792:	b580      	push	{r7, lr}
 8005794:	b088      	sub	sp, #32
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
 800579a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80057a0:	2318      	movs	r3, #24
 80057a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80057a4:	2340      	movs	r3, #64	; 0x40
 80057a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80057a8:	2300      	movs	r3, #0
 80057aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80057ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057b0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80057b2:	f107 0308 	add.w	r3, r7, #8
 80057b6:	4619      	mov	r1, r3
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f7ff ff0e 	bl	80055da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80057be:	f241 3288 	movw	r2, #5000	; 0x1388
 80057c2:	2118      	movs	r1, #24
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f000 f9b3 	bl	8005b30 <SDMMC_GetCmdResp1>
 80057ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80057cc:	69fb      	ldr	r3, [r7, #28]
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3720      	adds	r7, #32
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}

080057d6 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80057d6:	b580      	push	{r7, lr}
 80057d8:	b088      	sub	sp, #32
 80057da:	af00      	add	r7, sp, #0
 80057dc:	6078      	str	r0, [r7, #4]
 80057de:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80057e4:	2319      	movs	r3, #25
 80057e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80057e8:	2340      	movs	r3, #64	; 0x40
 80057ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80057ec:	2300      	movs	r3, #0
 80057ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80057f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057f4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80057f6:	f107 0308 	add.w	r3, r7, #8
 80057fa:	4619      	mov	r1, r3
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f7ff feec 	bl	80055da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005802:	f241 3288 	movw	r2, #5000	; 0x1388
 8005806:	2119      	movs	r1, #25
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f000 f991 	bl	8005b30 <SDMMC_GetCmdResp1>
 800580e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005810:	69fb      	ldr	r3, [r7, #28]
}
 8005812:	4618      	mov	r0, r3
 8005814:	3720      	adds	r7, #32
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
	...

0800581c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b088      	sub	sp, #32
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005824:	2300      	movs	r3, #0
 8005826:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8005828:	230c      	movs	r3, #12
 800582a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800582c:	2340      	movs	r3, #64	; 0x40
 800582e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005830:	2300      	movs	r3, #0
 8005832:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005834:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005838:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800583a:	f107 0308 	add.w	r3, r7, #8
 800583e:	4619      	mov	r1, r3
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f7ff feca 	bl	80055da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8005846:	4a05      	ldr	r2, [pc, #20]	; (800585c <SDMMC_CmdStopTransfer+0x40>)
 8005848:	210c      	movs	r1, #12
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 f970 	bl	8005b30 <SDMMC_GetCmdResp1>
 8005850:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005852:	69fb      	ldr	r3, [r7, #28]
}
 8005854:	4618      	mov	r0, r3
 8005856:	3720      	adds	r7, #32
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}
 800585c:	05f5e100 	.word	0x05f5e100

08005860 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b08a      	sub	sp, #40	; 0x28
 8005864:	af00      	add	r7, sp, #0
 8005866:	60f8      	str	r0, [r7, #12]
 8005868:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005870:	2307      	movs	r3, #7
 8005872:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005874:	2340      	movs	r3, #64	; 0x40
 8005876:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005878:	2300      	movs	r3, #0
 800587a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800587c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005880:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005882:	f107 0310 	add.w	r3, r7, #16
 8005886:	4619      	mov	r1, r3
 8005888:	68f8      	ldr	r0, [r7, #12]
 800588a:	f7ff fea6 	bl	80055da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800588e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005892:	2107      	movs	r1, #7
 8005894:	68f8      	ldr	r0, [r7, #12]
 8005896:	f000 f94b 	bl	8005b30 <SDMMC_GetCmdResp1>
 800589a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800589c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3728      	adds	r7, #40	; 0x28
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}

080058a6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80058a6:	b580      	push	{r7, lr}
 80058a8:	b088      	sub	sp, #32
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80058ae:	2300      	movs	r3, #0
 80058b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80058b2:	2300      	movs	r3, #0
 80058b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80058b6:	2300      	movs	r3, #0
 80058b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80058ba:	2300      	movs	r3, #0
 80058bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80058be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058c2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80058c4:	f107 0308 	add.w	r3, r7, #8
 80058c8:	4619      	mov	r1, r3
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f7ff fe85 	bl	80055da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f000 fb65 	bl	8005fa0 <SDMMC_GetCmdError>
 80058d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80058d8:	69fb      	ldr	r3, [r7, #28]
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3720      	adds	r7, #32
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}

080058e2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80058e2:	b580      	push	{r7, lr}
 80058e4:	b088      	sub	sp, #32
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80058ea:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80058ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80058f0:	2308      	movs	r3, #8
 80058f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80058f4:	2340      	movs	r3, #64	; 0x40
 80058f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80058f8:	2300      	movs	r3, #0
 80058fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80058fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005900:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005902:	f107 0308 	add.w	r3, r7, #8
 8005906:	4619      	mov	r1, r3
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f7ff fe66 	bl	80055da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f000 faf8 	bl	8005f04 <SDMMC_GetCmdResp7>
 8005914:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005916:	69fb      	ldr	r3, [r7, #28]
}
 8005918:	4618      	mov	r0, r3
 800591a:	3720      	adds	r7, #32
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b088      	sub	sp, #32
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800592e:	2337      	movs	r3, #55	; 0x37
 8005930:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005932:	2340      	movs	r3, #64	; 0x40
 8005934:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005936:	2300      	movs	r3, #0
 8005938:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800593a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800593e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005940:	f107 0308 	add.w	r3, r7, #8
 8005944:	4619      	mov	r1, r3
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f7ff fe47 	bl	80055da <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800594c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005950:	2137      	movs	r1, #55	; 0x37
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 f8ec 	bl	8005b30 <SDMMC_GetCmdResp1>
 8005958:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800595a:	69fb      	ldr	r3, [r7, #28]
}
 800595c:	4618      	mov	r0, r3
 800595e:	3720      	adds	r7, #32
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}

08005964 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b088      	sub	sp, #32
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005974:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005978:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800597a:	2329      	movs	r3, #41	; 0x29
 800597c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800597e:	2340      	movs	r3, #64	; 0x40
 8005980:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005982:	2300      	movs	r3, #0
 8005984:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005986:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800598a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800598c:	f107 0308 	add.w	r3, r7, #8
 8005990:	4619      	mov	r1, r3
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f7ff fe21 	bl	80055da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f000 f9ff 	bl	8005d9c <SDMMC_GetCmdResp3>
 800599e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80059a0:	69fb      	ldr	r3, [r7, #28]
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3720      	adds	r7, #32
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}

080059aa <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80059aa:	b580      	push	{r7, lr}
 80059ac:	b088      	sub	sp, #32
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	6078      	str	r0, [r7, #4]
 80059b2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80059b8:	2306      	movs	r3, #6
 80059ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80059bc:	2340      	movs	r3, #64	; 0x40
 80059be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80059c0:	2300      	movs	r3, #0
 80059c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80059c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059c8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80059ca:	f107 0308 	add.w	r3, r7, #8
 80059ce:	4619      	mov	r1, r3
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f7ff fe02 	bl	80055da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80059d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80059da:	2106      	movs	r1, #6
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f000 f8a7 	bl	8005b30 <SDMMC_GetCmdResp1>
 80059e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80059e4:	69fb      	ldr	r3, [r7, #28]
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3720      	adds	r7, #32
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}

080059ee <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80059ee:	b580      	push	{r7, lr}
 80059f0:	b088      	sub	sp, #32
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80059f6:	2300      	movs	r3, #0
 80059f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80059fa:	2333      	movs	r3, #51	; 0x33
 80059fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80059fe:	2340      	movs	r3, #64	; 0x40
 8005a00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005a02:	2300      	movs	r3, #0
 8005a04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005a06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a0a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005a0c:	f107 0308 	add.w	r3, r7, #8
 8005a10:	4619      	mov	r1, r3
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f7ff fde1 	bl	80055da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8005a18:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a1c:	2133      	movs	r1, #51	; 0x33
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 f886 	bl	8005b30 <SDMMC_GetCmdResp1>
 8005a24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005a26:	69fb      	ldr	r3, [r7, #28]
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3720      	adds	r7, #32
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}

08005a30 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b088      	sub	sp, #32
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005a3c:	2302      	movs	r3, #2
 8005a3e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005a40:	23c0      	movs	r3, #192	; 0xc0
 8005a42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005a44:	2300      	movs	r3, #0
 8005a46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005a48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a4c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005a4e:	f107 0308 	add.w	r3, r7, #8
 8005a52:	4619      	mov	r1, r3
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f7ff fdc0 	bl	80055da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f000 f956 	bl	8005d0c <SDMMC_GetCmdResp2>
 8005a60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005a62:	69fb      	ldr	r3, [r7, #28]
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3720      	adds	r7, #32
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}

08005a6c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b088      	sub	sp, #32
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005a7a:	2309      	movs	r3, #9
 8005a7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005a7e:	23c0      	movs	r3, #192	; 0xc0
 8005a80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005a82:	2300      	movs	r3, #0
 8005a84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005a86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a8a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005a8c:	f107 0308 	add.w	r3, r7, #8
 8005a90:	4619      	mov	r1, r3
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f7ff fda1 	bl	80055da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f000 f937 	bl	8005d0c <SDMMC_GetCmdResp2>
 8005a9e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005aa0:	69fb      	ldr	r3, [r7, #28]
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3720      	adds	r7, #32
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}

08005aaa <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8005aaa:	b580      	push	{r7, lr}
 8005aac:	b088      	sub	sp, #32
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	6078      	str	r0, [r7, #4]
 8005ab2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005ab8:	2303      	movs	r3, #3
 8005aba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005abc:	2340      	movs	r3, #64	; 0x40
 8005abe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005ac4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ac8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005aca:	f107 0308 	add.w	r3, r7, #8
 8005ace:	4619      	mov	r1, r3
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f7ff fd82 	bl	80055da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005ad6:	683a      	ldr	r2, [r7, #0]
 8005ad8:	2103      	movs	r1, #3
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 f99c 	bl	8005e18 <SDMMC_GetCmdResp6>
 8005ae0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005ae2:	69fb      	ldr	r3, [r7, #28]
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3720      	adds	r7, #32
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}

08005aec <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b088      	sub	sp, #32
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8005afa:	230d      	movs	r3, #13
 8005afc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005afe:	2340      	movs	r3, #64	; 0x40
 8005b00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005b02:	2300      	movs	r3, #0
 8005b04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005b06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b0a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005b0c:	f107 0308 	add.w	r3, r7, #8
 8005b10:	4619      	mov	r1, r3
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f7ff fd61 	bl	80055da <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8005b18:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b1c:	210d      	movs	r1, #13
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 f806 	bl	8005b30 <SDMMC_GetCmdResp1>
 8005b24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005b26:	69fb      	ldr	r3, [r7, #28]
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3720      	adds	r7, #32
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}

08005b30 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b088      	sub	sp, #32
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	60f8      	str	r0, [r7, #12]
 8005b38:	460b      	mov	r3, r1
 8005b3a:	607a      	str	r2, [r7, #4]
 8005b3c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005b3e:	4b70      	ldr	r3, [pc, #448]	; (8005d00 <SDMMC_GetCmdResp1+0x1d0>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a70      	ldr	r2, [pc, #448]	; (8005d04 <SDMMC_GetCmdResp1+0x1d4>)
 8005b44:	fba2 2303 	umull	r2, r3, r2, r3
 8005b48:	0a5a      	lsrs	r2, r3, #9
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	fb02 f303 	mul.w	r3, r2, r3
 8005b50:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	1e5a      	subs	r2, r3, #1
 8005b56:	61fa      	str	r2, [r7, #28]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d102      	bne.n	8005b62 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005b5c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005b60:	e0c9      	b.n	8005cf6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b66:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005b68:	69bb      	ldr	r3, [r7, #24]
 8005b6a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d0ef      	beq.n	8005b52 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005b72:	69bb      	ldr	r3, [r7, #24]
 8005b74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d1ea      	bne.n	8005b52 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b80:	f003 0304 	and.w	r3, r3, #4
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d004      	beq.n	8005b92 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2204      	movs	r2, #4
 8005b8c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005b8e:	2304      	movs	r3, #4
 8005b90:	e0b1      	b.n	8005cf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b96:	f003 0301 	and.w	r3, r3, #1
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d004      	beq.n	8005ba8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	e0a6      	b.n	8005cf6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	22c5      	movs	r2, #197	; 0xc5
 8005bac:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005bae:	68f8      	ldr	r0, [r7, #12]
 8005bb0:	f7ff fd3d 	bl	800562e <SDIO_GetCommandResponse>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	7afb      	ldrb	r3, [r7, #11]
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d001      	beq.n	8005bc2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e099      	b.n	8005cf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005bc2:	2100      	movs	r1, #0
 8005bc4:	68f8      	ldr	r0, [r7, #12]
 8005bc6:	f7ff fd3f 	bl	8005648 <SDIO_GetResponse>
 8005bca:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005bcc:	697a      	ldr	r2, [r7, #20]
 8005bce:	4b4e      	ldr	r3, [pc, #312]	; (8005d08 <SDMMC_GetCmdResp1+0x1d8>)
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d101      	bne.n	8005bda <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	e08d      	b.n	8005cf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	da02      	bge.n	8005be6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005be0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005be4:	e087      	b.n	8005cf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d001      	beq.n	8005bf4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005bf0:	2340      	movs	r3, #64	; 0x40
 8005bf2:	e080      	b.n	8005cf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d001      	beq.n	8005c02 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005bfe:	2380      	movs	r3, #128	; 0x80
 8005c00:	e079      	b.n	8005cf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d002      	beq.n	8005c12 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005c0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c10:	e071      	b.n	8005cf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d002      	beq.n	8005c22 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005c1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c20:	e069      	b.n	8005cf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d002      	beq.n	8005c32 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005c2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c30:	e061      	b.n	8005cf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d002      	beq.n	8005c42 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005c3c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005c40:	e059      	b.n	8005cf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d002      	beq.n	8005c52 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005c4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c50:	e051      	b.n	8005cf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d002      	beq.n	8005c62 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005c5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005c60:	e049      	b.n	8005cf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d002      	beq.n	8005c72 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005c6c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005c70:	e041      	b.n	8005cf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d002      	beq.n	8005c82 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8005c7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c80:	e039      	b.n	8005cf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d002      	beq.n	8005c92 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005c8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005c90:	e031      	b.n	8005cf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d002      	beq.n	8005ca2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005c9c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005ca0:	e029      	b.n	8005cf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d002      	beq.n	8005cb2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005cac:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005cb0:	e021      	b.n	8005cf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d002      	beq.n	8005cc2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005cbc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005cc0:	e019      	b.n	8005cf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d002      	beq.n	8005cd2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005ccc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005cd0:	e011      	b.n	8005cf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d002      	beq.n	8005ce2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005cdc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005ce0:	e009      	b.n	8005cf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	f003 0308 	and.w	r3, r3, #8
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d002      	beq.n	8005cf2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005cec:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005cf0:	e001      	b.n	8005cf6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005cf2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3720      	adds	r7, #32
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	bf00      	nop
 8005d00:	20000000 	.word	0x20000000
 8005d04:	10624dd3 	.word	0x10624dd3
 8005d08:	fdffe008 	.word	0xfdffe008

08005d0c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b085      	sub	sp, #20
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005d14:	4b1f      	ldr	r3, [pc, #124]	; (8005d94 <SDMMC_GetCmdResp2+0x88>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a1f      	ldr	r2, [pc, #124]	; (8005d98 <SDMMC_GetCmdResp2+0x8c>)
 8005d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d1e:	0a5b      	lsrs	r3, r3, #9
 8005d20:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d24:	fb02 f303 	mul.w	r3, r2, r3
 8005d28:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	1e5a      	subs	r2, r3, #1
 8005d2e:	60fa      	str	r2, [r7, #12]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d102      	bne.n	8005d3a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005d34:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005d38:	e026      	b.n	8005d88 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d3e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d0ef      	beq.n	8005d2a <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d1ea      	bne.n	8005d2a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d58:	f003 0304 	and.w	r3, r3, #4
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d004      	beq.n	8005d6a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2204      	movs	r2, #4
 8005d64:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005d66:	2304      	movs	r3, #4
 8005d68:	e00e      	b.n	8005d88 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d6e:	f003 0301 	and.w	r3, r3, #1
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d004      	beq.n	8005d80 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2201      	movs	r2, #1
 8005d7a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	e003      	b.n	8005d88 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	22c5      	movs	r2, #197	; 0xc5
 8005d84:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8005d86:	2300      	movs	r3, #0
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3714      	adds	r7, #20
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr
 8005d94:	20000000 	.word	0x20000000
 8005d98:	10624dd3 	.word	0x10624dd3

08005d9c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b085      	sub	sp, #20
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005da4:	4b1a      	ldr	r3, [pc, #104]	; (8005e10 <SDMMC_GetCmdResp3+0x74>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a1a      	ldr	r2, [pc, #104]	; (8005e14 <SDMMC_GetCmdResp3+0x78>)
 8005daa:	fba2 2303 	umull	r2, r3, r2, r3
 8005dae:	0a5b      	lsrs	r3, r3, #9
 8005db0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005db4:	fb02 f303 	mul.w	r3, r2, r3
 8005db8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	1e5a      	subs	r2, r3, #1
 8005dbe:	60fa      	str	r2, [r7, #12]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d102      	bne.n	8005dca <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005dc4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005dc8:	e01b      	b.n	8005e02 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dce:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d0ef      	beq.n	8005dba <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d1ea      	bne.n	8005dba <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005de8:	f003 0304 	and.w	r3, r3, #4
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d004      	beq.n	8005dfa <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2204      	movs	r2, #4
 8005df4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005df6:	2304      	movs	r3, #4
 8005df8:	e003      	b.n	8005e02 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	22c5      	movs	r2, #197	; 0xc5
 8005dfe:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3714      	adds	r7, #20
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr
 8005e0e:	bf00      	nop
 8005e10:	20000000 	.word	0x20000000
 8005e14:	10624dd3 	.word	0x10624dd3

08005e18 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b088      	sub	sp, #32
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	60f8      	str	r0, [r7, #12]
 8005e20:	460b      	mov	r3, r1
 8005e22:	607a      	str	r2, [r7, #4]
 8005e24:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005e26:	4b35      	ldr	r3, [pc, #212]	; (8005efc <SDMMC_GetCmdResp6+0xe4>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a35      	ldr	r2, [pc, #212]	; (8005f00 <SDMMC_GetCmdResp6+0xe8>)
 8005e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8005e30:	0a5b      	lsrs	r3, r3, #9
 8005e32:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e36:	fb02 f303 	mul.w	r3, r2, r3
 8005e3a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005e3c:	69fb      	ldr	r3, [r7, #28]
 8005e3e:	1e5a      	subs	r2, r3, #1
 8005e40:	61fa      	str	r2, [r7, #28]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d102      	bne.n	8005e4c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005e46:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005e4a:	e052      	b.n	8005ef2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e50:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005e52:	69bb      	ldr	r3, [r7, #24]
 8005e54:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d0ef      	beq.n	8005e3c <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005e5c:	69bb      	ldr	r3, [r7, #24]
 8005e5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d1ea      	bne.n	8005e3c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e6a:	f003 0304 	and.w	r3, r3, #4
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d004      	beq.n	8005e7c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2204      	movs	r2, #4
 8005e76:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005e78:	2304      	movs	r3, #4
 8005e7a:	e03a      	b.n	8005ef2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e80:	f003 0301 	and.w	r3, r3, #1
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d004      	beq.n	8005e92 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e02f      	b.n	8005ef2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005e92:	68f8      	ldr	r0, [r7, #12]
 8005e94:	f7ff fbcb 	bl	800562e <SDIO_GetCommandResponse>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	7afb      	ldrb	r3, [r7, #11]
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d001      	beq.n	8005ea6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e025      	b.n	8005ef2 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	22c5      	movs	r2, #197	; 0xc5
 8005eaa:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005eac:	2100      	movs	r1, #0
 8005eae:	68f8      	ldr	r0, [r7, #12]
 8005eb0:	f7ff fbca 	bl	8005648 <SDIO_GetResponse>
 8005eb4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d106      	bne.n	8005ece <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	0c1b      	lsrs	r3, r3, #16
 8005ec4:	b29a      	uxth	r2, r3
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	e011      	b.n	8005ef2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d002      	beq.n	8005ede <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005ed8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005edc:	e009      	b.n	8005ef2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d002      	beq.n	8005eee <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005ee8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005eec:	e001      	b.n	8005ef2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005eee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3720      	adds	r7, #32
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}
 8005efa:	bf00      	nop
 8005efc:	20000000 	.word	0x20000000
 8005f00:	10624dd3 	.word	0x10624dd3

08005f04 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b085      	sub	sp, #20
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005f0c:	4b22      	ldr	r3, [pc, #136]	; (8005f98 <SDMMC_GetCmdResp7+0x94>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a22      	ldr	r2, [pc, #136]	; (8005f9c <SDMMC_GetCmdResp7+0x98>)
 8005f12:	fba2 2303 	umull	r2, r3, r2, r3
 8005f16:	0a5b      	lsrs	r3, r3, #9
 8005f18:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f1c:	fb02 f303 	mul.w	r3, r2, r3
 8005f20:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	1e5a      	subs	r2, r3, #1
 8005f26:	60fa      	str	r2, [r7, #12]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d102      	bne.n	8005f32 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005f2c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005f30:	e02c      	b.n	8005f8c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f36:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d0ef      	beq.n	8005f22 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d1ea      	bne.n	8005f22 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f50:	f003 0304 	and.w	r3, r3, #4
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d004      	beq.n	8005f62 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2204      	movs	r2, #4
 8005f5c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005f5e:	2304      	movs	r3, #4
 8005f60:	e014      	b.n	8005f8c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f66:	f003 0301 	and.w	r3, r3, #1
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d004      	beq.n	8005f78 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2201      	movs	r2, #1
 8005f72:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005f74:	2301      	movs	r3, #1
 8005f76:	e009      	b.n	8005f8c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d002      	beq.n	8005f8a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2240      	movs	r2, #64	; 0x40
 8005f88:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005f8a:	2300      	movs	r3, #0
  
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3714      	adds	r7, #20
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr
 8005f98:	20000000 	.word	0x20000000
 8005f9c:	10624dd3 	.word	0x10624dd3

08005fa0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b085      	sub	sp, #20
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005fa8:	4b11      	ldr	r3, [pc, #68]	; (8005ff0 <SDMMC_GetCmdError+0x50>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a11      	ldr	r2, [pc, #68]	; (8005ff4 <SDMMC_GetCmdError+0x54>)
 8005fae:	fba2 2303 	umull	r2, r3, r2, r3
 8005fb2:	0a5b      	lsrs	r3, r3, #9
 8005fb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fb8:	fb02 f303 	mul.w	r3, r2, r3
 8005fbc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	1e5a      	subs	r2, r3, #1
 8005fc2:	60fa      	str	r2, [r7, #12]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d102      	bne.n	8005fce <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005fc8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005fcc:	e009      	b.n	8005fe2 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d0f1      	beq.n	8005fbe <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	22c5      	movs	r2, #197	; 0xc5
 8005fde:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8005fe0:	2300      	movs	r3, #0
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3714      	adds	r7, #20
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr
 8005fee:	bf00      	nop
 8005ff0:	20000000 	.word	0x20000000
 8005ff4:	10624dd3 	.word	0x10624dd3

08005ff8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005ffc:	4904      	ldr	r1, [pc, #16]	; (8006010 <MX_FATFS_Init+0x18>)
 8005ffe:	4805      	ldr	r0, [pc, #20]	; (8006014 <MX_FATFS_Init+0x1c>)
 8006000:	f002 fe2c 	bl	8008c5c <FATFS_LinkDriver>
 8006004:	4603      	mov	r3, r0
 8006006:	461a      	mov	r2, r3
 8006008:	4b03      	ldr	r3, [pc, #12]	; (8006018 <MX_FATFS_Init+0x20>)
 800600a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800600c:	bf00      	nop
 800600e:	bd80      	pop	{r7, pc}
 8006010:	20002584 	.word	0x20002584
 8006014:	0800c96c 	.word	0x0800c96c
 8006018:	20002580 	.word	0x20002580

0800601c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b082      	sub	sp, #8
 8006020:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8006022:	2300      	movs	r3, #0
 8006024:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8006026:	f000 f888 	bl	800613a <BSP_SD_IsDetected>
 800602a:	4603      	mov	r3, r0
 800602c:	2b01      	cmp	r3, #1
 800602e:	d001      	beq.n	8006034 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8006030:	2301      	movs	r3, #1
 8006032:	e005      	b.n	8006040 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8006034:	4804      	ldr	r0, [pc, #16]	; (8006048 <BSP_SD_Init+0x2c>)
 8006036:	f7fd fb77 	bl	8003728 <HAL_SD_Init>
 800603a:	4603      	mov	r3, r0
 800603c:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800603e:	79fb      	ldrb	r3, [r7, #7]
}
 8006040:	4618      	mov	r0, r3
 8006042:	3708      	adds	r7, #8
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}
 8006048:	200023cc 	.word	0x200023cc

0800604c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b086      	sub	sp, #24
 8006050:	af00      	add	r7, sp, #0
 8006052:	60f8      	str	r0, [r7, #12]
 8006054:	60b9      	str	r1, [r7, #8]
 8006056:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8006058:	2300      	movs	r3, #0
 800605a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	68ba      	ldr	r2, [r7, #8]
 8006060:	68f9      	ldr	r1, [r7, #12]
 8006062:	4806      	ldr	r0, [pc, #24]	; (800607c <BSP_SD_ReadBlocks_DMA+0x30>)
 8006064:	f7fd fc10 	bl	8003888 <HAL_SD_ReadBlocks_DMA>
 8006068:	4603      	mov	r3, r0
 800606a:	2b00      	cmp	r3, #0
 800606c:	d001      	beq.n	8006072 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8006072:	7dfb      	ldrb	r3, [r7, #23]
}
 8006074:	4618      	mov	r0, r3
 8006076:	3718      	adds	r7, #24
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}
 800607c:	200023cc 	.word	0x200023cc

08006080 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b086      	sub	sp, #24
 8006084:	af00      	add	r7, sp, #0
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	60b9      	str	r1, [r7, #8]
 800608a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800608c:	2300      	movs	r3, #0
 800608e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	68ba      	ldr	r2, [r7, #8]
 8006094:	68f9      	ldr	r1, [r7, #12]
 8006096:	4806      	ldr	r0, [pc, #24]	; (80060b0 <BSP_SD_WriteBlocks_DMA+0x30>)
 8006098:	f7fd fcd8 	bl	8003a4c <HAL_SD_WriteBlocks_DMA>
 800609c:	4603      	mov	r3, r0
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d001      	beq.n	80060a6 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80060a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3718      	adds	r7, #24
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}
 80060b0:	200023cc 	.word	0x200023cc

080060b4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80060b8:	4805      	ldr	r0, [pc, #20]	; (80060d0 <BSP_SD_GetCardState+0x1c>)
 80060ba:	f7fe f9a7 	bl	800440c <HAL_SD_GetCardState>
 80060be:	4603      	mov	r3, r0
 80060c0:	2b04      	cmp	r3, #4
 80060c2:	bf14      	ite	ne
 80060c4:	2301      	movne	r3, #1
 80060c6:	2300      	moveq	r3, #0
 80060c8:	b2db      	uxtb	r3, r3
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	bd80      	pop	{r7, pc}
 80060ce:	bf00      	nop
 80060d0:	200023cc 	.word	0x200023cc

080060d4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b082      	sub	sp, #8
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80060dc:	6879      	ldr	r1, [r7, #4]
 80060de:	4803      	ldr	r0, [pc, #12]	; (80060ec <BSP_SD_GetCardInfo+0x18>)
 80060e0:	f7fe f8ce 	bl	8004280 <HAL_SD_GetCardInfo>
}
 80060e4:	bf00      	nop
 80060e6:	3708      	adds	r7, #8
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}
 80060ec:	200023cc 	.word	0x200023cc

080060f0 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b082      	sub	sp, #8
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80060f8:	f000 f818 	bl	800612c <BSP_SD_AbortCallback>
}
 80060fc:	bf00      	nop
 80060fe:	3708      	adds	r7, #8
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}

08006104 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b082      	sub	sp, #8
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800610c:	f000 f9a8 	bl	8006460 <BSP_SD_WriteCpltCallback>
}
 8006110:	bf00      	nop
 8006112:	3708      	adds	r7, #8
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}

08006118 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b082      	sub	sp, #8
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8006120:	f000 f9ac 	bl	800647c <BSP_SD_ReadCpltCallback>
}
 8006124:	bf00      	nop
 8006126:	3708      	adds	r7, #8
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}

0800612c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800612c:	b480      	push	{r7}
 800612e:	af00      	add	r7, sp, #0

}
 8006130:	bf00      	nop
 8006132:	46bd      	mov	sp, r7
 8006134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006138:	4770      	bx	lr

0800613a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800613a:	b480      	push	{r7}
 800613c:	b083      	sub	sp, #12
 800613e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8006140:	2301      	movs	r3, #1
 8006142:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8006144:	79fb      	ldrb	r3, [r7, #7]
 8006146:	b2db      	uxtb	r3, r3
}
 8006148:	4618      	mov	r0, r3
 800614a:	370c      	adds	r7, #12
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr

08006154 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800615c:	f002 fe16 	bl	8008d8c <osKernelSysTick>
 8006160:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 8006162:	e006      	b.n	8006172 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006164:	f7ff ffa6 	bl	80060b4 <BSP_SD_GetCardState>
 8006168:	4603      	mov	r3, r0
 800616a:	2b00      	cmp	r3, #0
 800616c:	d101      	bne.n	8006172 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800616e:	2300      	movs	r3, #0
 8006170:	e009      	b.n	8006186 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 8006172:	f002 fe0b 	bl	8008d8c <osKernelSysTick>
 8006176:	4602      	mov	r2, r0
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	1ad3      	subs	r3, r2, r3
 800617c:	687a      	ldr	r2, [r7, #4]
 800617e:	429a      	cmp	r2, r3
 8006180:	d8f0      	bhi.n	8006164 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8006182:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006186:	4618      	mov	r0, r3
 8006188:	3710      	adds	r7, #16
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
	...

08006190 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b082      	sub	sp, #8
 8006194:	af00      	add	r7, sp, #0
 8006196:	4603      	mov	r3, r0
 8006198:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800619a:	4b0b      	ldr	r3, [pc, #44]	; (80061c8 <SD_CheckStatus+0x38>)
 800619c:	2201      	movs	r2, #1
 800619e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80061a0:	f7ff ff88 	bl	80060b4 <BSP_SD_GetCardState>
 80061a4:	4603      	mov	r3, r0
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d107      	bne.n	80061ba <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80061aa:	4b07      	ldr	r3, [pc, #28]	; (80061c8 <SD_CheckStatus+0x38>)
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	f023 0301 	bic.w	r3, r3, #1
 80061b4:	b2da      	uxtb	r2, r3
 80061b6:	4b04      	ldr	r3, [pc, #16]	; (80061c8 <SD_CheckStatus+0x38>)
 80061b8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80061ba:	4b03      	ldr	r3, [pc, #12]	; (80061c8 <SD_CheckStatus+0x38>)
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	b2db      	uxtb	r3, r3
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3708      	adds	r7, #8
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}
 80061c8:	20000009 	.word	0x20000009

080061cc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80061cc:	b590      	push	{r4, r7, lr}
 80061ce:	b087      	sub	sp, #28
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	4603      	mov	r3, r0
 80061d4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80061d6:	4b20      	ldr	r3, [pc, #128]	; (8006258 <SD_initialize+0x8c>)
 80061d8:	2201      	movs	r2, #1
 80061da:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 80061dc:	f002 fdca 	bl	8008d74 <osKernelRunning>
 80061e0:	4603      	mov	r3, r0
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d030      	beq.n	8006248 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 80061e6:	f7ff ff19 	bl	800601c <BSP_SD_Init>
 80061ea:	4603      	mov	r3, r0
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d107      	bne.n	8006200 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 80061f0:	79fb      	ldrb	r3, [r7, #7]
 80061f2:	4618      	mov	r0, r3
 80061f4:	f7ff ffcc 	bl	8006190 <SD_CheckStatus>
 80061f8:	4603      	mov	r3, r0
 80061fa:	461a      	mov	r2, r3
 80061fc:	4b16      	ldr	r3, [pc, #88]	; (8006258 <SD_initialize+0x8c>)
 80061fe:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8006200:	4b15      	ldr	r3, [pc, #84]	; (8006258 <SD_initialize+0x8c>)
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	b2db      	uxtb	r3, r3
 8006206:	2b01      	cmp	r3, #1
 8006208:	d01e      	beq.n	8006248 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800620a:	4b14      	ldr	r3, [pc, #80]	; (800625c <SD_initialize+0x90>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d10e      	bne.n	8006230 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 8006212:	4b13      	ldr	r3, [pc, #76]	; (8006260 <SD_initialize+0x94>)
 8006214:	f107 0408 	add.w	r4, r7, #8
 8006218:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800621a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800621e:	f107 0308 	add.w	r3, r7, #8
 8006222:	2100      	movs	r1, #0
 8006224:	4618      	mov	r0, r3
 8006226:	f002 fed6 	bl	8008fd6 <osMessageCreate>
 800622a:	4603      	mov	r3, r0
 800622c:	4a0b      	ldr	r2, [pc, #44]	; (800625c <SD_initialize+0x90>)
 800622e:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 8006230:	4b0a      	ldr	r3, [pc, #40]	; (800625c <SD_initialize+0x90>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d107      	bne.n	8006248 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 8006238:	4b07      	ldr	r3, [pc, #28]	; (8006258 <SD_initialize+0x8c>)
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	b2db      	uxtb	r3, r3
 800623e:	f043 0301 	orr.w	r3, r3, #1
 8006242:	b2da      	uxtb	r2, r3
 8006244:	4b04      	ldr	r3, [pc, #16]	; (8006258 <SD_initialize+0x8c>)
 8006246:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8006248:	4b03      	ldr	r3, [pc, #12]	; (8006258 <SD_initialize+0x8c>)
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	b2db      	uxtb	r3, r3
}
 800624e:	4618      	mov	r0, r3
 8006250:	371c      	adds	r7, #28
 8006252:	46bd      	mov	sp, r7
 8006254:	bd90      	pop	{r4, r7, pc}
 8006256:	bf00      	nop
 8006258:	20000009 	.word	0x20000009
 800625c:	20002588 	.word	0x20002588
 8006260:	0800c8f0 	.word	0x0800c8f0

08006264 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b082      	sub	sp, #8
 8006268:	af00      	add	r7, sp, #0
 800626a:	4603      	mov	r3, r0
 800626c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800626e:	79fb      	ldrb	r3, [r7, #7]
 8006270:	4618      	mov	r0, r3
 8006272:	f7ff ff8d 	bl	8006190 <SD_CheckStatus>
 8006276:	4603      	mov	r3, r0
}
 8006278:	4618      	mov	r0, r3
 800627a:	3708      	adds	r7, #8
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}

08006280 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b08a      	sub	sp, #40	; 0x28
 8006284:	af00      	add	r7, sp, #0
 8006286:	60b9      	str	r1, [r7, #8]
 8006288:	607a      	str	r2, [r7, #4]
 800628a:	603b      	str	r3, [r7, #0]
 800628c:	4603      	mov	r3, r0
 800628e:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8006296:	f247 5030 	movw	r0, #30000	; 0x7530
 800629a:	f7ff ff5b 	bl	8006154 <SD_CheckStatusWithTimeout>
 800629e:	4603      	mov	r3, r0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	da02      	bge.n	80062aa <SD_read+0x2a>
  {
    return res;
 80062a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80062a8:	e032      	b.n	8006310 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 80062aa:	683a      	ldr	r2, [r7, #0]
 80062ac:	6879      	ldr	r1, [r7, #4]
 80062ae:	68b8      	ldr	r0, [r7, #8]
 80062b0:	f7ff fecc 	bl	800604c <BSP_SD_ReadBlocks_DMA>
 80062b4:	4603      	mov	r3, r0
 80062b6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 80062ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d124      	bne.n	800630c <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 80062c2:	4b15      	ldr	r3, [pc, #84]	; (8006318 <SD_read+0x98>)
 80062c4:	6819      	ldr	r1, [r3, #0]
 80062c6:	f107 0314 	add.w	r3, r7, #20
 80062ca:	f247 5230 	movw	r2, #30000	; 0x7530
 80062ce:	4618      	mov	r0, r3
 80062d0:	f002 feea 	bl	80090a8 <osMessageGet>

    if (event.status == osEventMessage)
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	2b10      	cmp	r3, #16
 80062d8:	d118      	bne.n	800630c <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 80062da:	69bb      	ldr	r3, [r7, #24]
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d115      	bne.n	800630c <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 80062e0:	f002 fd54 	bl	8008d8c <osKernelSysTick>
 80062e4:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 80062e6:	e008      	b.n	80062fa <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80062e8:	f7ff fee4 	bl	80060b4 <BSP_SD_GetCardState>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d103      	bne.n	80062fa <SD_read+0x7a>
              {
                res = RES_OK;
 80062f2:	2300      	movs	r3, #0
 80062f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 80062f8:	e008      	b.n	800630c <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 80062fa:	f002 fd47 	bl	8008d8c <osKernelSysTick>
 80062fe:	4602      	mov	r2, r0
 8006300:	6a3b      	ldr	r3, [r7, #32]
 8006302:	1ad3      	subs	r3, r2, r3
 8006304:	f247 522f 	movw	r2, #29999	; 0x752f
 8006308:	4293      	cmp	r3, r2
 800630a:	d9ed      	bls.n	80062e8 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800630c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006310:	4618      	mov	r0, r3
 8006312:	3728      	adds	r7, #40	; 0x28
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}
 8006318:	20002588 	.word	0x20002588

0800631c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b08a      	sub	sp, #40	; 0x28
 8006320:	af00      	add	r7, sp, #0
 8006322:	60b9      	str	r1, [r7, #8]
 8006324:	607a      	str	r2, [r7, #4]
 8006326:	603b      	str	r3, [r7, #0]
 8006328:	4603      	mov	r3, r0
 800632a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800632c:	2301      	movs	r3, #1
 800632e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8006332:	f247 5030 	movw	r0, #30000	; 0x7530
 8006336:	f7ff ff0d 	bl	8006154 <SD_CheckStatusWithTimeout>
 800633a:	4603      	mov	r3, r0
 800633c:	2b00      	cmp	r3, #0
 800633e:	da02      	bge.n	8006346 <SD_write+0x2a>
  {
    return res;
 8006340:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006344:	e02e      	b.n	80063a4 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8006346:	683a      	ldr	r2, [r7, #0]
 8006348:	6879      	ldr	r1, [r7, #4]
 800634a:	68b8      	ldr	r0, [r7, #8]
 800634c:	f7ff fe98 	bl	8006080 <BSP_SD_WriteBlocks_DMA>
 8006350:	4603      	mov	r3, r0
 8006352:	2b00      	cmp	r3, #0
 8006354:	d124      	bne.n	80063a0 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8006356:	4b15      	ldr	r3, [pc, #84]	; (80063ac <SD_write+0x90>)
 8006358:	6819      	ldr	r1, [r3, #0]
 800635a:	f107 0314 	add.w	r3, r7, #20
 800635e:	f247 5230 	movw	r2, #30000	; 0x7530
 8006362:	4618      	mov	r0, r3
 8006364:	f002 fea0 	bl	80090a8 <osMessageGet>

    if (event.status == osEventMessage)
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	2b10      	cmp	r3, #16
 800636c:	d118      	bne.n	80063a0 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800636e:	69bb      	ldr	r3, [r7, #24]
 8006370:	2b02      	cmp	r3, #2
 8006372:	d115      	bne.n	80063a0 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 8006374:	f002 fd0a 	bl	8008d8c <osKernelSysTick>
 8006378:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800637a:	e008      	b.n	800638e <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800637c:	f7ff fe9a 	bl	80060b4 <BSP_SD_GetCardState>
 8006380:	4603      	mov	r3, r0
 8006382:	2b00      	cmp	r3, #0
 8006384:	d103      	bne.n	800638e <SD_write+0x72>
          {
            res = RES_OK;
 8006386:	2300      	movs	r3, #0
 8006388:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800638c:	e008      	b.n	80063a0 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800638e:	f002 fcfd 	bl	8008d8c <osKernelSysTick>
 8006392:	4602      	mov	r2, r0
 8006394:	6a3b      	ldr	r3, [r7, #32]
 8006396:	1ad3      	subs	r3, r2, r3
 8006398:	f247 522f 	movw	r2, #29999	; 0x752f
 800639c:	4293      	cmp	r3, r2
 800639e:	d9ed      	bls.n	800637c <SD_write+0x60>
    }

  }
#endif

  return res;
 80063a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3728      	adds	r7, #40	; 0x28
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}
 80063ac:	20002588 	.word	0x20002588

080063b0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b08c      	sub	sp, #48	; 0x30
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	4603      	mov	r3, r0
 80063b8:	603a      	str	r2, [r7, #0]
 80063ba:	71fb      	strb	r3, [r7, #7]
 80063bc:	460b      	mov	r3, r1
 80063be:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80063c6:	4b25      	ldr	r3, [pc, #148]	; (800645c <SD_ioctl+0xac>)
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	b2db      	uxtb	r3, r3
 80063cc:	f003 0301 	and.w	r3, r3, #1
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d001      	beq.n	80063d8 <SD_ioctl+0x28>
 80063d4:	2303      	movs	r3, #3
 80063d6:	e03c      	b.n	8006452 <SD_ioctl+0xa2>

  switch (cmd)
 80063d8:	79bb      	ldrb	r3, [r7, #6]
 80063da:	2b03      	cmp	r3, #3
 80063dc:	d834      	bhi.n	8006448 <SD_ioctl+0x98>
 80063de:	a201      	add	r2, pc, #4	; (adr r2, 80063e4 <SD_ioctl+0x34>)
 80063e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063e4:	080063f5 	.word	0x080063f5
 80063e8:	080063fd 	.word	0x080063fd
 80063ec:	08006415 	.word	0x08006415
 80063f0:	0800642f 	.word	0x0800642f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80063f4:	2300      	movs	r3, #0
 80063f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80063fa:	e028      	b.n	800644e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80063fc:	f107 030c 	add.w	r3, r7, #12
 8006400:	4618      	mov	r0, r3
 8006402:	f7ff fe67 	bl	80060d4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8006406:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800640c:	2300      	movs	r3, #0
 800640e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006412:	e01c      	b.n	800644e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006414:	f107 030c 	add.w	r3, r7, #12
 8006418:	4618      	mov	r0, r3
 800641a:	f7ff fe5b 	bl	80060d4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800641e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006420:	b29a      	uxth	r2, r3
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8006426:	2300      	movs	r3, #0
 8006428:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800642c:	e00f      	b.n	800644e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800642e:	f107 030c 	add.w	r3, r7, #12
 8006432:	4618      	mov	r0, r3
 8006434:	f7ff fe4e 	bl	80060d4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8006438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800643a:	0a5a      	lsrs	r2, r3, #9
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006440:	2300      	movs	r3, #0
 8006442:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006446:	e002      	b.n	800644e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8006448:	2304      	movs	r3, #4
 800644a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800644e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006452:	4618      	mov	r0, r3
 8006454:	3730      	adds	r7, #48	; 0x30
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
 800645a:	bf00      	nop
 800645c:	20000009 	.word	0x20000009

08006460 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
 8006464:	4b04      	ldr	r3, [pc, #16]	; (8006478 <BSP_SD_WriteCpltCallback+0x18>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	2200      	movs	r2, #0
 800646a:	2102      	movs	r1, #2
 800646c:	4618      	mov	r0, r3
 800646e:	f002 fddb 	bl	8009028 <osMessagePut>
#else
   const uint16_t msg = WRITE_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 8006472:	bf00      	nop
 8006474:	bd80      	pop	{r7, pc}
 8006476:	bf00      	nop
 8006478:	20002588 	.word	0x20002588

0800647c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 8006480:	4b04      	ldr	r3, [pc, #16]	; (8006494 <BSP_SD_ReadCpltCallback+0x18>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	2200      	movs	r2, #0
 8006486:	2101      	movs	r1, #1
 8006488:	4618      	mov	r0, r3
 800648a:	f002 fdcd 	bl	8009028 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800648e:	bf00      	nop
 8006490:	bd80      	pop	{r7, pc}
 8006492:	bf00      	nop
 8006494:	20002588 	.word	0x20002588

08006498 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b084      	sub	sp, #16
 800649c:	af00      	add	r7, sp, #0
 800649e:	4603      	mov	r3, r0
 80064a0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80064a2:	79fb      	ldrb	r3, [r7, #7]
 80064a4:	4a08      	ldr	r2, [pc, #32]	; (80064c8 <disk_status+0x30>)
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	4413      	add	r3, r2
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	79fa      	ldrb	r2, [r7, #7]
 80064b0:	4905      	ldr	r1, [pc, #20]	; (80064c8 <disk_status+0x30>)
 80064b2:	440a      	add	r2, r1
 80064b4:	7a12      	ldrb	r2, [r2, #8]
 80064b6:	4610      	mov	r0, r2
 80064b8:	4798      	blx	r3
 80064ba:	4603      	mov	r3, r0
 80064bc:	73fb      	strb	r3, [r7, #15]
  return stat;
 80064be:	7bfb      	ldrb	r3, [r7, #15]
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3710      	adds	r7, #16
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}
 80064c8:	200025b4 	.word	0x200025b4

080064cc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b084      	sub	sp, #16
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	4603      	mov	r3, r0
 80064d4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80064d6:	2300      	movs	r3, #0
 80064d8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80064da:	79fb      	ldrb	r3, [r7, #7]
 80064dc:	4a0d      	ldr	r2, [pc, #52]	; (8006514 <disk_initialize+0x48>)
 80064de:	5cd3      	ldrb	r3, [r2, r3]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d111      	bne.n	8006508 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80064e4:	79fb      	ldrb	r3, [r7, #7]
 80064e6:	4a0b      	ldr	r2, [pc, #44]	; (8006514 <disk_initialize+0x48>)
 80064e8:	2101      	movs	r1, #1
 80064ea:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80064ec:	79fb      	ldrb	r3, [r7, #7]
 80064ee:	4a09      	ldr	r2, [pc, #36]	; (8006514 <disk_initialize+0x48>)
 80064f0:	009b      	lsls	r3, r3, #2
 80064f2:	4413      	add	r3, r2
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	79fa      	ldrb	r2, [r7, #7]
 80064fa:	4906      	ldr	r1, [pc, #24]	; (8006514 <disk_initialize+0x48>)
 80064fc:	440a      	add	r2, r1
 80064fe:	7a12      	ldrb	r2, [r2, #8]
 8006500:	4610      	mov	r0, r2
 8006502:	4798      	blx	r3
 8006504:	4603      	mov	r3, r0
 8006506:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006508:	7bfb      	ldrb	r3, [r7, #15]
}
 800650a:	4618      	mov	r0, r3
 800650c:	3710      	adds	r7, #16
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
 8006512:	bf00      	nop
 8006514:	200025b4 	.word	0x200025b4

08006518 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006518:	b590      	push	{r4, r7, lr}
 800651a:	b087      	sub	sp, #28
 800651c:	af00      	add	r7, sp, #0
 800651e:	60b9      	str	r1, [r7, #8]
 8006520:	607a      	str	r2, [r7, #4]
 8006522:	603b      	str	r3, [r7, #0]
 8006524:	4603      	mov	r3, r0
 8006526:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006528:	7bfb      	ldrb	r3, [r7, #15]
 800652a:	4a0a      	ldr	r2, [pc, #40]	; (8006554 <disk_read+0x3c>)
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	4413      	add	r3, r2
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	689c      	ldr	r4, [r3, #8]
 8006534:	7bfb      	ldrb	r3, [r7, #15]
 8006536:	4a07      	ldr	r2, [pc, #28]	; (8006554 <disk_read+0x3c>)
 8006538:	4413      	add	r3, r2
 800653a:	7a18      	ldrb	r0, [r3, #8]
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	68b9      	ldr	r1, [r7, #8]
 8006542:	47a0      	blx	r4
 8006544:	4603      	mov	r3, r0
 8006546:	75fb      	strb	r3, [r7, #23]
  return res;
 8006548:	7dfb      	ldrb	r3, [r7, #23]
}
 800654a:	4618      	mov	r0, r3
 800654c:	371c      	adds	r7, #28
 800654e:	46bd      	mov	sp, r7
 8006550:	bd90      	pop	{r4, r7, pc}
 8006552:	bf00      	nop
 8006554:	200025b4 	.word	0x200025b4

08006558 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006558:	b590      	push	{r4, r7, lr}
 800655a:	b087      	sub	sp, #28
 800655c:	af00      	add	r7, sp, #0
 800655e:	60b9      	str	r1, [r7, #8]
 8006560:	607a      	str	r2, [r7, #4]
 8006562:	603b      	str	r3, [r7, #0]
 8006564:	4603      	mov	r3, r0
 8006566:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006568:	7bfb      	ldrb	r3, [r7, #15]
 800656a:	4a0a      	ldr	r2, [pc, #40]	; (8006594 <disk_write+0x3c>)
 800656c:	009b      	lsls	r3, r3, #2
 800656e:	4413      	add	r3, r2
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	68dc      	ldr	r4, [r3, #12]
 8006574:	7bfb      	ldrb	r3, [r7, #15]
 8006576:	4a07      	ldr	r2, [pc, #28]	; (8006594 <disk_write+0x3c>)
 8006578:	4413      	add	r3, r2
 800657a:	7a18      	ldrb	r0, [r3, #8]
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	687a      	ldr	r2, [r7, #4]
 8006580:	68b9      	ldr	r1, [r7, #8]
 8006582:	47a0      	blx	r4
 8006584:	4603      	mov	r3, r0
 8006586:	75fb      	strb	r3, [r7, #23]
  return res;
 8006588:	7dfb      	ldrb	r3, [r7, #23]
}
 800658a:	4618      	mov	r0, r3
 800658c:	371c      	adds	r7, #28
 800658e:	46bd      	mov	sp, r7
 8006590:	bd90      	pop	{r4, r7, pc}
 8006592:	bf00      	nop
 8006594:	200025b4 	.word	0x200025b4

08006598 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b084      	sub	sp, #16
 800659c:	af00      	add	r7, sp, #0
 800659e:	4603      	mov	r3, r0
 80065a0:	603a      	str	r2, [r7, #0]
 80065a2:	71fb      	strb	r3, [r7, #7]
 80065a4:	460b      	mov	r3, r1
 80065a6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80065a8:	79fb      	ldrb	r3, [r7, #7]
 80065aa:	4a09      	ldr	r2, [pc, #36]	; (80065d0 <disk_ioctl+0x38>)
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	4413      	add	r3, r2
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	691b      	ldr	r3, [r3, #16]
 80065b4:	79fa      	ldrb	r2, [r7, #7]
 80065b6:	4906      	ldr	r1, [pc, #24]	; (80065d0 <disk_ioctl+0x38>)
 80065b8:	440a      	add	r2, r1
 80065ba:	7a10      	ldrb	r0, [r2, #8]
 80065bc:	79b9      	ldrb	r1, [r7, #6]
 80065be:	683a      	ldr	r2, [r7, #0]
 80065c0:	4798      	blx	r3
 80065c2:	4603      	mov	r3, r0
 80065c4:	73fb      	strb	r3, [r7, #15]
  return res;
 80065c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3710      	adds	r7, #16
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}
 80065d0:	200025b4 	.word	0x200025b4

080065d4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80065d4:	b480      	push	{r7}
 80065d6:	b085      	sub	sp, #20
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	3301      	adds	r3, #1
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80065e4:	89fb      	ldrh	r3, [r7, #14]
 80065e6:	021b      	lsls	r3, r3, #8
 80065e8:	b21a      	sxth	r2, r3
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	781b      	ldrb	r3, [r3, #0]
 80065ee:	b21b      	sxth	r3, r3
 80065f0:	4313      	orrs	r3, r2
 80065f2:	b21b      	sxth	r3, r3
 80065f4:	81fb      	strh	r3, [r7, #14]
	return rv;
 80065f6:	89fb      	ldrh	r3, [r7, #14]
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3714      	adds	r7, #20
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr

08006604 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006604:	b480      	push	{r7}
 8006606:	b085      	sub	sp, #20
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	3303      	adds	r3, #3
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	021b      	lsls	r3, r3, #8
 8006618:	687a      	ldr	r2, [r7, #4]
 800661a:	3202      	adds	r2, #2
 800661c:	7812      	ldrb	r2, [r2, #0]
 800661e:	4313      	orrs	r3, r2
 8006620:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	021b      	lsls	r3, r3, #8
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	3201      	adds	r2, #1
 800662a:	7812      	ldrb	r2, [r2, #0]
 800662c:	4313      	orrs	r3, r2
 800662e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	021b      	lsls	r3, r3, #8
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	7812      	ldrb	r2, [r2, #0]
 8006638:	4313      	orrs	r3, r2
 800663a:	60fb      	str	r3, [r7, #12]
	return rv;
 800663c:	68fb      	ldr	r3, [r7, #12]
}
 800663e:	4618      	mov	r0, r3
 8006640:	3714      	adds	r7, #20
 8006642:	46bd      	mov	sp, r7
 8006644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006648:	4770      	bx	lr

0800664a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800664a:	b480      	push	{r7}
 800664c:	b083      	sub	sp, #12
 800664e:	af00      	add	r7, sp, #0
 8006650:	6078      	str	r0, [r7, #4]
 8006652:	460b      	mov	r3, r1
 8006654:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	1c5a      	adds	r2, r3, #1
 800665a:	607a      	str	r2, [r7, #4]
 800665c:	887a      	ldrh	r2, [r7, #2]
 800665e:	b2d2      	uxtb	r2, r2
 8006660:	701a      	strb	r2, [r3, #0]
 8006662:	887b      	ldrh	r3, [r7, #2]
 8006664:	0a1b      	lsrs	r3, r3, #8
 8006666:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	1c5a      	adds	r2, r3, #1
 800666c:	607a      	str	r2, [r7, #4]
 800666e:	887a      	ldrh	r2, [r7, #2]
 8006670:	b2d2      	uxtb	r2, r2
 8006672:	701a      	strb	r2, [r3, #0]
}
 8006674:	bf00      	nop
 8006676:	370c      	adds	r7, #12
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr

08006680 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006680:	b480      	push	{r7}
 8006682:	b083      	sub	sp, #12
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
 8006688:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	1c5a      	adds	r2, r3, #1
 800668e:	607a      	str	r2, [r7, #4]
 8006690:	683a      	ldr	r2, [r7, #0]
 8006692:	b2d2      	uxtb	r2, r2
 8006694:	701a      	strb	r2, [r3, #0]
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	0a1b      	lsrs	r3, r3, #8
 800669a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	1c5a      	adds	r2, r3, #1
 80066a0:	607a      	str	r2, [r7, #4]
 80066a2:	683a      	ldr	r2, [r7, #0]
 80066a4:	b2d2      	uxtb	r2, r2
 80066a6:	701a      	strb	r2, [r3, #0]
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	0a1b      	lsrs	r3, r3, #8
 80066ac:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	1c5a      	adds	r2, r3, #1
 80066b2:	607a      	str	r2, [r7, #4]
 80066b4:	683a      	ldr	r2, [r7, #0]
 80066b6:	b2d2      	uxtb	r2, r2
 80066b8:	701a      	strb	r2, [r3, #0]
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	0a1b      	lsrs	r3, r3, #8
 80066be:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	1c5a      	adds	r2, r3, #1
 80066c4:	607a      	str	r2, [r7, #4]
 80066c6:	683a      	ldr	r2, [r7, #0]
 80066c8:	b2d2      	uxtb	r2, r2
 80066ca:	701a      	strb	r2, [r3, #0]
}
 80066cc:	bf00      	nop
 80066ce:	370c      	adds	r7, #12
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr

080066d8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80066d8:	b480      	push	{r7}
 80066da:	b087      	sub	sp, #28
 80066dc:	af00      	add	r7, sp, #0
 80066de:	60f8      	str	r0, [r7, #12]
 80066e0:	60b9      	str	r1, [r7, #8]
 80066e2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d00d      	beq.n	800670e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80066f2:	693a      	ldr	r2, [r7, #16]
 80066f4:	1c53      	adds	r3, r2, #1
 80066f6:	613b      	str	r3, [r7, #16]
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	1c59      	adds	r1, r3, #1
 80066fc:	6179      	str	r1, [r7, #20]
 80066fe:	7812      	ldrb	r2, [r2, #0]
 8006700:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	3b01      	subs	r3, #1
 8006706:	607b      	str	r3, [r7, #4]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d1f1      	bne.n	80066f2 <mem_cpy+0x1a>
	}
}
 800670e:	bf00      	nop
 8006710:	371c      	adds	r7, #28
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr

0800671a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800671a:	b480      	push	{r7}
 800671c:	b087      	sub	sp, #28
 800671e:	af00      	add	r7, sp, #0
 8006720:	60f8      	str	r0, [r7, #12]
 8006722:	60b9      	str	r1, [r7, #8]
 8006724:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	1c5a      	adds	r2, r3, #1
 800672e:	617a      	str	r2, [r7, #20]
 8006730:	68ba      	ldr	r2, [r7, #8]
 8006732:	b2d2      	uxtb	r2, r2
 8006734:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	3b01      	subs	r3, #1
 800673a:	607b      	str	r3, [r7, #4]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d1f3      	bne.n	800672a <mem_set+0x10>
}
 8006742:	bf00      	nop
 8006744:	bf00      	nop
 8006746:	371c      	adds	r7, #28
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr

08006750 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006750:	b480      	push	{r7}
 8006752:	b089      	sub	sp, #36	; 0x24
 8006754:	af00      	add	r7, sp, #0
 8006756:	60f8      	str	r0, [r7, #12]
 8006758:	60b9      	str	r1, [r7, #8]
 800675a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	61fb      	str	r3, [r7, #28]
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006764:	2300      	movs	r3, #0
 8006766:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006768:	69fb      	ldr	r3, [r7, #28]
 800676a:	1c5a      	adds	r2, r3, #1
 800676c:	61fa      	str	r2, [r7, #28]
 800676e:	781b      	ldrb	r3, [r3, #0]
 8006770:	4619      	mov	r1, r3
 8006772:	69bb      	ldr	r3, [r7, #24]
 8006774:	1c5a      	adds	r2, r3, #1
 8006776:	61ba      	str	r2, [r7, #24]
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	1acb      	subs	r3, r1, r3
 800677c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	3b01      	subs	r3, #1
 8006782:	607b      	str	r3, [r7, #4]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d002      	beq.n	8006790 <mem_cmp+0x40>
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d0eb      	beq.n	8006768 <mem_cmp+0x18>

	return r;
 8006790:	697b      	ldr	r3, [r7, #20]
}
 8006792:	4618      	mov	r0, r3
 8006794:	3724      	adds	r7, #36	; 0x24
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr

0800679e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800679e:	b480      	push	{r7}
 80067a0:	b083      	sub	sp, #12
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	6078      	str	r0, [r7, #4]
 80067a6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80067a8:	e002      	b.n	80067b0 <chk_chr+0x12>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	3301      	adds	r3, #1
 80067ae:	607b      	str	r3, [r7, #4]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d005      	beq.n	80067c4 <chk_chr+0x26>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	461a      	mov	r2, r3
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d1f2      	bne.n	80067aa <chk_chr+0xc>
	return *str;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	781b      	ldrb	r3, [r3, #0]
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	370c      	adds	r7, #12
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr

080067d4 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b082      	sub	sp, #8
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d009      	beq.n	80067f6 <lock_fs+0x22>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	691b      	ldr	r3, [r3, #16]
 80067e6:	4618      	mov	r0, r3
 80067e8:	f002 fa73 	bl	8008cd2 <ff_req_grant>
 80067ec:	4603      	mov	r3, r0
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d001      	beq.n	80067f6 <lock_fs+0x22>
 80067f2:	2301      	movs	r3, #1
 80067f4:	e000      	b.n	80067f8 <lock_fs+0x24>
 80067f6:	2300      	movs	r3, #0
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3708      	adds	r7, #8
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}

08006800 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b082      	sub	sp, #8
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	460b      	mov	r3, r1
 800680a:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d00d      	beq.n	800682e <unlock_fs+0x2e>
 8006812:	78fb      	ldrb	r3, [r7, #3]
 8006814:	2b0c      	cmp	r3, #12
 8006816:	d00a      	beq.n	800682e <unlock_fs+0x2e>
 8006818:	78fb      	ldrb	r3, [r7, #3]
 800681a:	2b0b      	cmp	r3, #11
 800681c:	d007      	beq.n	800682e <unlock_fs+0x2e>
 800681e:	78fb      	ldrb	r3, [r7, #3]
 8006820:	2b0f      	cmp	r3, #15
 8006822:	d004      	beq.n	800682e <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	691b      	ldr	r3, [r3, #16]
 8006828:	4618      	mov	r0, r3
 800682a:	f002 fa67 	bl	8008cfc <ff_rel_grant>
	}
}
 800682e:	bf00      	nop
 8006830:	3708      	adds	r7, #8
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}
	...

08006838 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006838:	b480      	push	{r7}
 800683a:	b085      	sub	sp, #20
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006842:	2300      	movs	r3, #0
 8006844:	60bb      	str	r3, [r7, #8]
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	60fb      	str	r3, [r7, #12]
 800684a:	e029      	b.n	80068a0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800684c:	4a27      	ldr	r2, [pc, #156]	; (80068ec <chk_lock+0xb4>)
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	011b      	lsls	r3, r3, #4
 8006852:	4413      	add	r3, r2
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d01d      	beq.n	8006896 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800685a:	4a24      	ldr	r2, [pc, #144]	; (80068ec <chk_lock+0xb4>)
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	011b      	lsls	r3, r3, #4
 8006860:	4413      	add	r3, r2
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	429a      	cmp	r2, r3
 800686a:	d116      	bne.n	800689a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800686c:	4a1f      	ldr	r2, [pc, #124]	; (80068ec <chk_lock+0xb4>)
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	011b      	lsls	r3, r3, #4
 8006872:	4413      	add	r3, r2
 8006874:	3304      	adds	r3, #4
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800687c:	429a      	cmp	r2, r3
 800687e:	d10c      	bne.n	800689a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006880:	4a1a      	ldr	r2, [pc, #104]	; (80068ec <chk_lock+0xb4>)
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	011b      	lsls	r3, r3, #4
 8006886:	4413      	add	r3, r2
 8006888:	3308      	adds	r3, #8
 800688a:	681a      	ldr	r2, [r3, #0]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006890:	429a      	cmp	r2, r3
 8006892:	d102      	bne.n	800689a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006894:	e007      	b.n	80068a6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006896:	2301      	movs	r3, #1
 8006898:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	3301      	adds	r3, #1
 800689e:	60fb      	str	r3, [r7, #12]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d9d2      	bls.n	800684c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2b02      	cmp	r3, #2
 80068aa:	d109      	bne.n	80068c0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d102      	bne.n	80068b8 <chk_lock+0x80>
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	2b02      	cmp	r3, #2
 80068b6:	d101      	bne.n	80068bc <chk_lock+0x84>
 80068b8:	2300      	movs	r3, #0
 80068ba:	e010      	b.n	80068de <chk_lock+0xa6>
 80068bc:	2312      	movs	r3, #18
 80068be:	e00e      	b.n	80068de <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d108      	bne.n	80068d8 <chk_lock+0xa0>
 80068c6:	4a09      	ldr	r2, [pc, #36]	; (80068ec <chk_lock+0xb4>)
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	011b      	lsls	r3, r3, #4
 80068cc:	4413      	add	r3, r2
 80068ce:	330c      	adds	r3, #12
 80068d0:	881b      	ldrh	r3, [r3, #0]
 80068d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068d6:	d101      	bne.n	80068dc <chk_lock+0xa4>
 80068d8:	2310      	movs	r3, #16
 80068da:	e000      	b.n	80068de <chk_lock+0xa6>
 80068dc:	2300      	movs	r3, #0
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3714      	adds	r7, #20
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr
 80068ea:	bf00      	nop
 80068ec:	20002594 	.word	0x20002594

080068f0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80068f0:	b480      	push	{r7}
 80068f2:	b083      	sub	sp, #12
 80068f4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80068f6:	2300      	movs	r3, #0
 80068f8:	607b      	str	r3, [r7, #4]
 80068fa:	e002      	b.n	8006902 <enq_lock+0x12>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	3301      	adds	r3, #1
 8006900:	607b      	str	r3, [r7, #4]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2b01      	cmp	r3, #1
 8006906:	d806      	bhi.n	8006916 <enq_lock+0x26>
 8006908:	4a09      	ldr	r2, [pc, #36]	; (8006930 <enq_lock+0x40>)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	011b      	lsls	r3, r3, #4
 800690e:	4413      	add	r3, r2
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d1f2      	bne.n	80068fc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2b02      	cmp	r3, #2
 800691a:	bf14      	ite	ne
 800691c:	2301      	movne	r3, #1
 800691e:	2300      	moveq	r3, #0
 8006920:	b2db      	uxtb	r3, r3
}
 8006922:	4618      	mov	r0, r3
 8006924:	370c      	adds	r7, #12
 8006926:	46bd      	mov	sp, r7
 8006928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692c:	4770      	bx	lr
 800692e:	bf00      	nop
 8006930:	20002594 	.word	0x20002594

08006934 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006934:	b480      	push	{r7}
 8006936:	b085      	sub	sp, #20
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800693e:	2300      	movs	r3, #0
 8006940:	60fb      	str	r3, [r7, #12]
 8006942:	e01f      	b.n	8006984 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006944:	4a41      	ldr	r2, [pc, #260]	; (8006a4c <inc_lock+0x118>)
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	011b      	lsls	r3, r3, #4
 800694a:	4413      	add	r3, r2
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	429a      	cmp	r2, r3
 8006954:	d113      	bne.n	800697e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8006956:	4a3d      	ldr	r2, [pc, #244]	; (8006a4c <inc_lock+0x118>)
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	011b      	lsls	r3, r3, #4
 800695c:	4413      	add	r3, r2
 800695e:	3304      	adds	r3, #4
 8006960:	681a      	ldr	r2, [r3, #0]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006966:	429a      	cmp	r2, r3
 8006968:	d109      	bne.n	800697e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800696a:	4a38      	ldr	r2, [pc, #224]	; (8006a4c <inc_lock+0x118>)
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	011b      	lsls	r3, r3, #4
 8006970:	4413      	add	r3, r2
 8006972:	3308      	adds	r3, #8
 8006974:	681a      	ldr	r2, [r3, #0]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800697a:	429a      	cmp	r2, r3
 800697c:	d006      	beq.n	800698c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	3301      	adds	r3, #1
 8006982:	60fb      	str	r3, [r7, #12]
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2b01      	cmp	r3, #1
 8006988:	d9dc      	bls.n	8006944 <inc_lock+0x10>
 800698a:	e000      	b.n	800698e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800698c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2b02      	cmp	r3, #2
 8006992:	d132      	bne.n	80069fa <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006994:	2300      	movs	r3, #0
 8006996:	60fb      	str	r3, [r7, #12]
 8006998:	e002      	b.n	80069a0 <inc_lock+0x6c>
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	3301      	adds	r3, #1
 800699e:	60fb      	str	r3, [r7, #12]
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2b01      	cmp	r3, #1
 80069a4:	d806      	bhi.n	80069b4 <inc_lock+0x80>
 80069a6:	4a29      	ldr	r2, [pc, #164]	; (8006a4c <inc_lock+0x118>)
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	011b      	lsls	r3, r3, #4
 80069ac:	4413      	add	r3, r2
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d1f2      	bne.n	800699a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2b02      	cmp	r3, #2
 80069b8:	d101      	bne.n	80069be <inc_lock+0x8a>
 80069ba:	2300      	movs	r3, #0
 80069bc:	e040      	b.n	8006a40 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681a      	ldr	r2, [r3, #0]
 80069c2:	4922      	ldr	r1, [pc, #136]	; (8006a4c <inc_lock+0x118>)
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	011b      	lsls	r3, r3, #4
 80069c8:	440b      	add	r3, r1
 80069ca:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	689a      	ldr	r2, [r3, #8]
 80069d0:	491e      	ldr	r1, [pc, #120]	; (8006a4c <inc_lock+0x118>)
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	011b      	lsls	r3, r3, #4
 80069d6:	440b      	add	r3, r1
 80069d8:	3304      	adds	r3, #4
 80069da:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	695a      	ldr	r2, [r3, #20]
 80069e0:	491a      	ldr	r1, [pc, #104]	; (8006a4c <inc_lock+0x118>)
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	011b      	lsls	r3, r3, #4
 80069e6:	440b      	add	r3, r1
 80069e8:	3308      	adds	r3, #8
 80069ea:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80069ec:	4a17      	ldr	r2, [pc, #92]	; (8006a4c <inc_lock+0x118>)
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	011b      	lsls	r3, r3, #4
 80069f2:	4413      	add	r3, r2
 80069f4:	330c      	adds	r3, #12
 80069f6:	2200      	movs	r2, #0
 80069f8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d009      	beq.n	8006a14 <inc_lock+0xe0>
 8006a00:	4a12      	ldr	r2, [pc, #72]	; (8006a4c <inc_lock+0x118>)
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	011b      	lsls	r3, r3, #4
 8006a06:	4413      	add	r3, r2
 8006a08:	330c      	adds	r3, #12
 8006a0a:	881b      	ldrh	r3, [r3, #0]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d001      	beq.n	8006a14 <inc_lock+0xe0>
 8006a10:	2300      	movs	r3, #0
 8006a12:	e015      	b.n	8006a40 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d108      	bne.n	8006a2c <inc_lock+0xf8>
 8006a1a:	4a0c      	ldr	r2, [pc, #48]	; (8006a4c <inc_lock+0x118>)
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	011b      	lsls	r3, r3, #4
 8006a20:	4413      	add	r3, r2
 8006a22:	330c      	adds	r3, #12
 8006a24:	881b      	ldrh	r3, [r3, #0]
 8006a26:	3301      	adds	r3, #1
 8006a28:	b29a      	uxth	r2, r3
 8006a2a:	e001      	b.n	8006a30 <inc_lock+0xfc>
 8006a2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006a30:	4906      	ldr	r1, [pc, #24]	; (8006a4c <inc_lock+0x118>)
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	011b      	lsls	r3, r3, #4
 8006a36:	440b      	add	r3, r1
 8006a38:	330c      	adds	r3, #12
 8006a3a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	3301      	adds	r3, #1
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3714      	adds	r7, #20
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr
 8006a4c:	20002594 	.word	0x20002594

08006a50 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b085      	sub	sp, #20
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	3b01      	subs	r3, #1
 8006a5c:	607b      	str	r3, [r7, #4]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d825      	bhi.n	8006ab0 <dec_lock+0x60>
		n = Files[i].ctr;
 8006a64:	4a17      	ldr	r2, [pc, #92]	; (8006ac4 <dec_lock+0x74>)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	011b      	lsls	r3, r3, #4
 8006a6a:	4413      	add	r3, r2
 8006a6c:	330c      	adds	r3, #12
 8006a6e:	881b      	ldrh	r3, [r3, #0]
 8006a70:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006a72:	89fb      	ldrh	r3, [r7, #14]
 8006a74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a78:	d101      	bne.n	8006a7e <dec_lock+0x2e>
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8006a7e:	89fb      	ldrh	r3, [r7, #14]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d002      	beq.n	8006a8a <dec_lock+0x3a>
 8006a84:	89fb      	ldrh	r3, [r7, #14]
 8006a86:	3b01      	subs	r3, #1
 8006a88:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8006a8a:	4a0e      	ldr	r2, [pc, #56]	; (8006ac4 <dec_lock+0x74>)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	011b      	lsls	r3, r3, #4
 8006a90:	4413      	add	r3, r2
 8006a92:	330c      	adds	r3, #12
 8006a94:	89fa      	ldrh	r2, [r7, #14]
 8006a96:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006a98:	89fb      	ldrh	r3, [r7, #14]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d105      	bne.n	8006aaa <dec_lock+0x5a>
 8006a9e:	4a09      	ldr	r2, [pc, #36]	; (8006ac4 <dec_lock+0x74>)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	011b      	lsls	r3, r3, #4
 8006aa4:	4413      	add	r3, r2
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	737b      	strb	r3, [r7, #13]
 8006aae:	e001      	b.n	8006ab4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006ab0:	2302      	movs	r3, #2
 8006ab2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006ab4:	7b7b      	ldrb	r3, [r7, #13]
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3714      	adds	r7, #20
 8006aba:	46bd      	mov	sp, r7
 8006abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac0:	4770      	bx	lr
 8006ac2:	bf00      	nop
 8006ac4:	20002594 	.word	0x20002594

08006ac8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b085      	sub	sp, #20
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	60fb      	str	r3, [r7, #12]
 8006ad4:	e010      	b.n	8006af8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006ad6:	4a0d      	ldr	r2, [pc, #52]	; (8006b0c <clear_lock+0x44>)
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	011b      	lsls	r3, r3, #4
 8006adc:	4413      	add	r3, r2
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	687a      	ldr	r2, [r7, #4]
 8006ae2:	429a      	cmp	r2, r3
 8006ae4:	d105      	bne.n	8006af2 <clear_lock+0x2a>
 8006ae6:	4a09      	ldr	r2, [pc, #36]	; (8006b0c <clear_lock+0x44>)
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	011b      	lsls	r3, r3, #4
 8006aec:	4413      	add	r3, r2
 8006aee:	2200      	movs	r2, #0
 8006af0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	3301      	adds	r3, #1
 8006af6:	60fb      	str	r3, [r7, #12]
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	d9eb      	bls.n	8006ad6 <clear_lock+0xe>
	}
}
 8006afe:	bf00      	nop
 8006b00:	bf00      	nop
 8006b02:	3714      	adds	r7, #20
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr
 8006b0c:	20002594 	.word	0x20002594

08006b10 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b086      	sub	sp, #24
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	78db      	ldrb	r3, [r3, #3]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d034      	beq.n	8006b8e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b28:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	7858      	ldrb	r0, [r3, #1]
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006b34:	2301      	movs	r3, #1
 8006b36:	697a      	ldr	r2, [r7, #20]
 8006b38:	f7ff fd0e 	bl	8006558 <disk_write>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d002      	beq.n	8006b48 <sync_window+0x38>
			res = FR_DISK_ERR;
 8006b42:	2301      	movs	r3, #1
 8006b44:	73fb      	strb	r3, [r7, #15]
 8006b46:	e022      	b.n	8006b8e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b52:	697a      	ldr	r2, [r7, #20]
 8006b54:	1ad2      	subs	r2, r2, r3
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6a1b      	ldr	r3, [r3, #32]
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d217      	bcs.n	8006b8e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	789b      	ldrb	r3, [r3, #2]
 8006b62:	613b      	str	r3, [r7, #16]
 8006b64:	e010      	b.n	8006b88 <sync_window+0x78>
					wsect += fs->fsize;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6a1b      	ldr	r3, [r3, #32]
 8006b6a:	697a      	ldr	r2, [r7, #20]
 8006b6c:	4413      	add	r3, r2
 8006b6e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	7858      	ldrb	r0, [r3, #1]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	697a      	ldr	r2, [r7, #20]
 8006b7e:	f7ff fceb 	bl	8006558 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	3b01      	subs	r3, #1
 8006b86:	613b      	str	r3, [r7, #16]
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	d8eb      	bhi.n	8006b66 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8006b8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3718      	adds	r7, #24
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}

08006b98 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b084      	sub	sp, #16
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006baa:	683a      	ldr	r2, [r7, #0]
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d01b      	beq.n	8006be8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f7ff ffad 	bl	8006b10 <sync_window>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006bba:	7bfb      	ldrb	r3, [r7, #15]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d113      	bne.n	8006be8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	7858      	ldrb	r0, [r3, #1]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006bca:	2301      	movs	r3, #1
 8006bcc:	683a      	ldr	r2, [r7, #0]
 8006bce:	f7ff fca3 	bl	8006518 <disk_read>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d004      	beq.n	8006be2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006bd8:	f04f 33ff 	mov.w	r3, #4294967295
 8006bdc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006bde:	2301      	movs	r3, #1
 8006be0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	683a      	ldr	r2, [r7, #0]
 8006be6:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8006be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3710      	adds	r7, #16
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}
	...

08006bf4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b084      	sub	sp, #16
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f7ff ff87 	bl	8006b10 <sync_window>
 8006c02:	4603      	mov	r3, r0
 8006c04:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006c06:	7bfb      	ldrb	r3, [r7, #15]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d159      	bne.n	8006cc0 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	2b03      	cmp	r3, #3
 8006c12:	d149      	bne.n	8006ca8 <sync_fs+0xb4>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	791b      	ldrb	r3, [r3, #4]
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d145      	bne.n	8006ca8 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	899b      	ldrh	r3, [r3, #12]
 8006c26:	461a      	mov	r2, r3
 8006c28:	2100      	movs	r1, #0
 8006c2a:	f7ff fd76 	bl	800671a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	3338      	adds	r3, #56	; 0x38
 8006c32:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006c36:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f7ff fd05 	bl	800664a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	3338      	adds	r3, #56	; 0x38
 8006c44:	4921      	ldr	r1, [pc, #132]	; (8006ccc <sync_fs+0xd8>)
 8006c46:	4618      	mov	r0, r3
 8006c48:	f7ff fd1a 	bl	8006680 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	3338      	adds	r3, #56	; 0x38
 8006c50:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006c54:	491e      	ldr	r1, [pc, #120]	; (8006cd0 <sync_fs+0xdc>)
 8006c56:	4618      	mov	r0, r3
 8006c58:	f7ff fd12 	bl	8006680 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	3338      	adds	r3, #56	; 0x38
 8006c60:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	699b      	ldr	r3, [r3, #24]
 8006c68:	4619      	mov	r1, r3
 8006c6a:	4610      	mov	r0, r2
 8006c6c:	f7ff fd08 	bl	8006680 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	3338      	adds	r3, #56	; 0x38
 8006c74:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	695b      	ldr	r3, [r3, #20]
 8006c7c:	4619      	mov	r1, r3
 8006c7e:	4610      	mov	r0, r2
 8006c80:	f7ff fcfe 	bl	8006680 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c88:	1c5a      	adds	r2, r3, #1
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	7858      	ldrb	r0, [r3, #1]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	f7ff fc5b 	bl	8006558 <disk_write>
			fs->fsi_flag = 0;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	785b      	ldrb	r3, [r3, #1]
 8006cac:	2200      	movs	r2, #0
 8006cae:	2100      	movs	r1, #0
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f7ff fc71 	bl	8006598 <disk_ioctl>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d001      	beq.n	8006cc0 <sync_fs+0xcc>
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3710      	adds	r7, #16
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}
 8006cca:	bf00      	nop
 8006ccc:	41615252 	.word	0x41615252
 8006cd0:	61417272 	.word	0x61417272

08006cd4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b083      	sub	sp, #12
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	3b02      	subs	r3, #2
 8006ce2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	69db      	ldr	r3, [r3, #28]
 8006ce8:	3b02      	subs	r3, #2
 8006cea:	683a      	ldr	r2, [r7, #0]
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d301      	bcc.n	8006cf4 <clust2sect+0x20>
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	e008      	b.n	8006d06 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	895b      	ldrh	r3, [r3, #10]
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	fb03 f202 	mul.w	r2, r3, r2
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d04:	4413      	add	r3, r2
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	370c      	adds	r7, #12
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d10:	4770      	bx	lr

08006d12 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006d12:	b580      	push	{r7, lr}
 8006d14:	b086      	sub	sp, #24
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	6078      	str	r0, [r7, #4]
 8006d1a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d904      	bls.n	8006d32 <get_fat+0x20>
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	69db      	ldr	r3, [r3, #28]
 8006d2c:	683a      	ldr	r2, [r7, #0]
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	d302      	bcc.n	8006d38 <get_fat+0x26>
		val = 1;	/* Internal error */
 8006d32:	2301      	movs	r3, #1
 8006d34:	617b      	str	r3, [r7, #20]
 8006d36:	e0bb      	b.n	8006eb0 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006d38:	f04f 33ff 	mov.w	r3, #4294967295
 8006d3c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	781b      	ldrb	r3, [r3, #0]
 8006d42:	2b03      	cmp	r3, #3
 8006d44:	f000 8083 	beq.w	8006e4e <get_fat+0x13c>
 8006d48:	2b03      	cmp	r3, #3
 8006d4a:	f300 80a7 	bgt.w	8006e9c <get_fat+0x18a>
 8006d4e:	2b01      	cmp	r3, #1
 8006d50:	d002      	beq.n	8006d58 <get_fat+0x46>
 8006d52:	2b02      	cmp	r3, #2
 8006d54:	d056      	beq.n	8006e04 <get_fat+0xf2>
 8006d56:	e0a1      	b.n	8006e9c <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	60fb      	str	r3, [r7, #12]
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	085b      	lsrs	r3, r3, #1
 8006d60:	68fa      	ldr	r2, [r7, #12]
 8006d62:	4413      	add	r3, r2
 8006d64:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	899b      	ldrh	r3, [r3, #12]
 8006d6e:	4619      	mov	r1, r3
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	fbb3 f3f1 	udiv	r3, r3, r1
 8006d76:	4413      	add	r3, r2
 8006d78:	4619      	mov	r1, r3
 8006d7a:	6938      	ldr	r0, [r7, #16]
 8006d7c:	f7ff ff0c 	bl	8006b98 <move_window>
 8006d80:	4603      	mov	r3, r0
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	f040 808d 	bne.w	8006ea2 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	1c5a      	adds	r2, r3, #1
 8006d8c:	60fa      	str	r2, [r7, #12]
 8006d8e:	693a      	ldr	r2, [r7, #16]
 8006d90:	8992      	ldrh	r2, [r2, #12]
 8006d92:	fbb3 f1f2 	udiv	r1, r3, r2
 8006d96:	fb01 f202 	mul.w	r2, r1, r2
 8006d9a:	1a9b      	subs	r3, r3, r2
 8006d9c:	693a      	ldr	r2, [r7, #16]
 8006d9e:	4413      	add	r3, r2
 8006da0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006da4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	899b      	ldrh	r3, [r3, #12]
 8006dae:	4619      	mov	r1, r3
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	fbb3 f3f1 	udiv	r3, r3, r1
 8006db6:	4413      	add	r3, r2
 8006db8:	4619      	mov	r1, r3
 8006dba:	6938      	ldr	r0, [r7, #16]
 8006dbc:	f7ff feec 	bl	8006b98 <move_window>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d16f      	bne.n	8006ea6 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	899b      	ldrh	r3, [r3, #12]
 8006dca:	461a      	mov	r2, r3
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	fbb3 f1f2 	udiv	r1, r3, r2
 8006dd2:	fb01 f202 	mul.w	r2, r1, r2
 8006dd6:	1a9b      	subs	r3, r3, r2
 8006dd8:	693a      	ldr	r2, [r7, #16]
 8006dda:	4413      	add	r3, r2
 8006ddc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006de0:	021b      	lsls	r3, r3, #8
 8006de2:	461a      	mov	r2, r3
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	4313      	orrs	r3, r2
 8006de8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	f003 0301 	and.w	r3, r3, #1
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d002      	beq.n	8006dfa <get_fat+0xe8>
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	091b      	lsrs	r3, r3, #4
 8006df8:	e002      	b.n	8006e00 <get_fat+0xee>
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e00:	617b      	str	r3, [r7, #20]
			break;
 8006e02:	e055      	b.n	8006eb0 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	899b      	ldrh	r3, [r3, #12]
 8006e0c:	085b      	lsrs	r3, r3, #1
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	4619      	mov	r1, r3
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	fbb3 f3f1 	udiv	r3, r3, r1
 8006e18:	4413      	add	r3, r2
 8006e1a:	4619      	mov	r1, r3
 8006e1c:	6938      	ldr	r0, [r7, #16]
 8006e1e:	f7ff febb 	bl	8006b98 <move_window>
 8006e22:	4603      	mov	r3, r0
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d140      	bne.n	8006eaa <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	005b      	lsls	r3, r3, #1
 8006e32:	693a      	ldr	r2, [r7, #16]
 8006e34:	8992      	ldrh	r2, [r2, #12]
 8006e36:	fbb3 f0f2 	udiv	r0, r3, r2
 8006e3a:	fb00 f202 	mul.w	r2, r0, r2
 8006e3e:	1a9b      	subs	r3, r3, r2
 8006e40:	440b      	add	r3, r1
 8006e42:	4618      	mov	r0, r3
 8006e44:	f7ff fbc6 	bl	80065d4 <ld_word>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	617b      	str	r3, [r7, #20]
			break;
 8006e4c:	e030      	b.n	8006eb0 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	899b      	ldrh	r3, [r3, #12]
 8006e56:	089b      	lsrs	r3, r3, #2
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	4619      	mov	r1, r3
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006e62:	4413      	add	r3, r2
 8006e64:	4619      	mov	r1, r3
 8006e66:	6938      	ldr	r0, [r7, #16]
 8006e68:	f7ff fe96 	bl	8006b98 <move_window>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d11d      	bne.n	8006eae <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	009b      	lsls	r3, r3, #2
 8006e7c:	693a      	ldr	r2, [r7, #16]
 8006e7e:	8992      	ldrh	r2, [r2, #12]
 8006e80:	fbb3 f0f2 	udiv	r0, r3, r2
 8006e84:	fb00 f202 	mul.w	r2, r0, r2
 8006e88:	1a9b      	subs	r3, r3, r2
 8006e8a:	440b      	add	r3, r1
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f7ff fbb9 	bl	8006604 <ld_dword>
 8006e92:	4603      	mov	r3, r0
 8006e94:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006e98:	617b      	str	r3, [r7, #20]
			break;
 8006e9a:	e009      	b.n	8006eb0 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	617b      	str	r3, [r7, #20]
 8006ea0:	e006      	b.n	8006eb0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006ea2:	bf00      	nop
 8006ea4:	e004      	b.n	8006eb0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006ea6:	bf00      	nop
 8006ea8:	e002      	b.n	8006eb0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006eaa:	bf00      	nop
 8006eac:	e000      	b.n	8006eb0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006eae:	bf00      	nop
		}
	}

	return val;
 8006eb0:	697b      	ldr	r3, [r7, #20]
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3718      	adds	r7, #24
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}

08006eba <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006eba:	b590      	push	{r4, r7, lr}
 8006ebc:	b089      	sub	sp, #36	; 0x24
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	60f8      	str	r0, [r7, #12]
 8006ec2:	60b9      	str	r1, [r7, #8]
 8006ec4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006ec6:	2302      	movs	r3, #2
 8006ec8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	f240 8109 	bls.w	80070e4 <put_fat+0x22a>
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	69db      	ldr	r3, [r3, #28]
 8006ed6:	68ba      	ldr	r2, [r7, #8]
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	f080 8103 	bcs.w	80070e4 <put_fat+0x22a>
		switch (fs->fs_type) {
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	781b      	ldrb	r3, [r3, #0]
 8006ee2:	2b03      	cmp	r3, #3
 8006ee4:	f000 80b6 	beq.w	8007054 <put_fat+0x19a>
 8006ee8:	2b03      	cmp	r3, #3
 8006eea:	f300 80fb 	bgt.w	80070e4 <put_fat+0x22a>
 8006eee:	2b01      	cmp	r3, #1
 8006ef0:	d003      	beq.n	8006efa <put_fat+0x40>
 8006ef2:	2b02      	cmp	r3, #2
 8006ef4:	f000 8083 	beq.w	8006ffe <put_fat+0x144>
 8006ef8:	e0f4      	b.n	80070e4 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	61bb      	str	r3, [r7, #24]
 8006efe:	69bb      	ldr	r3, [r7, #24]
 8006f00:	085b      	lsrs	r3, r3, #1
 8006f02:	69ba      	ldr	r2, [r7, #24]
 8006f04:	4413      	add	r3, r2
 8006f06:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	899b      	ldrh	r3, [r3, #12]
 8006f10:	4619      	mov	r1, r3
 8006f12:	69bb      	ldr	r3, [r7, #24]
 8006f14:	fbb3 f3f1 	udiv	r3, r3, r1
 8006f18:	4413      	add	r3, r2
 8006f1a:	4619      	mov	r1, r3
 8006f1c:	68f8      	ldr	r0, [r7, #12]
 8006f1e:	f7ff fe3b 	bl	8006b98 <move_window>
 8006f22:	4603      	mov	r3, r0
 8006f24:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006f26:	7ffb      	ldrb	r3, [r7, #31]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	f040 80d4 	bne.w	80070d6 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006f34:	69bb      	ldr	r3, [r7, #24]
 8006f36:	1c5a      	adds	r2, r3, #1
 8006f38:	61ba      	str	r2, [r7, #24]
 8006f3a:	68fa      	ldr	r2, [r7, #12]
 8006f3c:	8992      	ldrh	r2, [r2, #12]
 8006f3e:	fbb3 f0f2 	udiv	r0, r3, r2
 8006f42:	fb00 f202 	mul.w	r2, r0, r2
 8006f46:	1a9b      	subs	r3, r3, r2
 8006f48:	440b      	add	r3, r1
 8006f4a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	f003 0301 	and.w	r3, r3, #1
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d00d      	beq.n	8006f72 <put_fat+0xb8>
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	781b      	ldrb	r3, [r3, #0]
 8006f5a:	b25b      	sxtb	r3, r3
 8006f5c:	f003 030f 	and.w	r3, r3, #15
 8006f60:	b25a      	sxtb	r2, r3
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	b2db      	uxtb	r3, r3
 8006f66:	011b      	lsls	r3, r3, #4
 8006f68:	b25b      	sxtb	r3, r3
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	b25b      	sxtb	r3, r3
 8006f6e:	b2db      	uxtb	r3, r3
 8006f70:	e001      	b.n	8006f76 <put_fat+0xbc>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	b2db      	uxtb	r3, r3
 8006f76:	697a      	ldr	r2, [r7, #20]
 8006f78:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2201      	movs	r2, #1
 8006f7e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	899b      	ldrh	r3, [r3, #12]
 8006f88:	4619      	mov	r1, r3
 8006f8a:	69bb      	ldr	r3, [r7, #24]
 8006f8c:	fbb3 f3f1 	udiv	r3, r3, r1
 8006f90:	4413      	add	r3, r2
 8006f92:	4619      	mov	r1, r3
 8006f94:	68f8      	ldr	r0, [r7, #12]
 8006f96:	f7ff fdff 	bl	8006b98 <move_window>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006f9e:	7ffb      	ldrb	r3, [r7, #31]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	f040 809a 	bne.w	80070da <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	899b      	ldrh	r3, [r3, #12]
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	69bb      	ldr	r3, [r7, #24]
 8006fb4:	fbb3 f0f2 	udiv	r0, r3, r2
 8006fb8:	fb00 f202 	mul.w	r2, r0, r2
 8006fbc:	1a9b      	subs	r3, r3, r2
 8006fbe:	440b      	add	r3, r1
 8006fc0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	f003 0301 	and.w	r3, r3, #1
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d003      	beq.n	8006fd4 <put_fat+0x11a>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	091b      	lsrs	r3, r3, #4
 8006fd0:	b2db      	uxtb	r3, r3
 8006fd2:	e00e      	b.n	8006ff2 <put_fat+0x138>
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	781b      	ldrb	r3, [r3, #0]
 8006fd8:	b25b      	sxtb	r3, r3
 8006fda:	f023 030f 	bic.w	r3, r3, #15
 8006fde:	b25a      	sxtb	r2, r3
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	0a1b      	lsrs	r3, r3, #8
 8006fe4:	b25b      	sxtb	r3, r3
 8006fe6:	f003 030f 	and.w	r3, r3, #15
 8006fea:	b25b      	sxtb	r3, r3
 8006fec:	4313      	orrs	r3, r2
 8006fee:	b25b      	sxtb	r3, r3
 8006ff0:	b2db      	uxtb	r3, r3
 8006ff2:	697a      	ldr	r2, [r7, #20]
 8006ff4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2201      	movs	r2, #1
 8006ffa:	70da      	strb	r2, [r3, #3]
			break;
 8006ffc:	e072      	b.n	80070e4 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	899b      	ldrh	r3, [r3, #12]
 8007006:	085b      	lsrs	r3, r3, #1
 8007008:	b29b      	uxth	r3, r3
 800700a:	4619      	mov	r1, r3
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007012:	4413      	add	r3, r2
 8007014:	4619      	mov	r1, r3
 8007016:	68f8      	ldr	r0, [r7, #12]
 8007018:	f7ff fdbe 	bl	8006b98 <move_window>
 800701c:	4603      	mov	r3, r0
 800701e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007020:	7ffb      	ldrb	r3, [r7, #31]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d15b      	bne.n	80070de <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	005b      	lsls	r3, r3, #1
 8007030:	68fa      	ldr	r2, [r7, #12]
 8007032:	8992      	ldrh	r2, [r2, #12]
 8007034:	fbb3 f0f2 	udiv	r0, r3, r2
 8007038:	fb00 f202 	mul.w	r2, r0, r2
 800703c:	1a9b      	subs	r3, r3, r2
 800703e:	440b      	add	r3, r1
 8007040:	687a      	ldr	r2, [r7, #4]
 8007042:	b292      	uxth	r2, r2
 8007044:	4611      	mov	r1, r2
 8007046:	4618      	mov	r0, r3
 8007048:	f7ff faff 	bl	800664a <st_word>
			fs->wflag = 1;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2201      	movs	r2, #1
 8007050:	70da      	strb	r2, [r3, #3]
			break;
 8007052:	e047      	b.n	80070e4 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	899b      	ldrh	r3, [r3, #12]
 800705c:	089b      	lsrs	r3, r3, #2
 800705e:	b29b      	uxth	r3, r3
 8007060:	4619      	mov	r1, r3
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	fbb3 f3f1 	udiv	r3, r3, r1
 8007068:	4413      	add	r3, r2
 800706a:	4619      	mov	r1, r3
 800706c:	68f8      	ldr	r0, [r7, #12]
 800706e:	f7ff fd93 	bl	8006b98 <move_window>
 8007072:	4603      	mov	r3, r0
 8007074:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007076:	7ffb      	ldrb	r3, [r7, #31]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d132      	bne.n	80070e2 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	009b      	lsls	r3, r3, #2
 800708c:	68fa      	ldr	r2, [r7, #12]
 800708e:	8992      	ldrh	r2, [r2, #12]
 8007090:	fbb3 f0f2 	udiv	r0, r3, r2
 8007094:	fb00 f202 	mul.w	r2, r0, r2
 8007098:	1a9b      	subs	r3, r3, r2
 800709a:	440b      	add	r3, r1
 800709c:	4618      	mov	r0, r3
 800709e:	f7ff fab1 	bl	8006604 <ld_dword>
 80070a2:	4603      	mov	r3, r0
 80070a4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80070a8:	4323      	orrs	r3, r4
 80070aa:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	009b      	lsls	r3, r3, #2
 80070b6:	68fa      	ldr	r2, [r7, #12]
 80070b8:	8992      	ldrh	r2, [r2, #12]
 80070ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80070be:	fb00 f202 	mul.w	r2, r0, r2
 80070c2:	1a9b      	subs	r3, r3, r2
 80070c4:	440b      	add	r3, r1
 80070c6:	6879      	ldr	r1, [r7, #4]
 80070c8:	4618      	mov	r0, r3
 80070ca:	f7ff fad9 	bl	8006680 <st_dword>
			fs->wflag = 1;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2201      	movs	r2, #1
 80070d2:	70da      	strb	r2, [r3, #3]
			break;
 80070d4:	e006      	b.n	80070e4 <put_fat+0x22a>
			if (res != FR_OK) break;
 80070d6:	bf00      	nop
 80070d8:	e004      	b.n	80070e4 <put_fat+0x22a>
			if (res != FR_OK) break;
 80070da:	bf00      	nop
 80070dc:	e002      	b.n	80070e4 <put_fat+0x22a>
			if (res != FR_OK) break;
 80070de:	bf00      	nop
 80070e0:	e000      	b.n	80070e4 <put_fat+0x22a>
			if (res != FR_OK) break;
 80070e2:	bf00      	nop
		}
	}
	return res;
 80070e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3724      	adds	r7, #36	; 0x24
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd90      	pop	{r4, r7, pc}

080070ee <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80070ee:	b580      	push	{r7, lr}
 80070f0:	b088      	sub	sp, #32
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	60f8      	str	r0, [r7, #12]
 80070f6:	60b9      	str	r1, [r7, #8]
 80070f8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80070fa:	2300      	movs	r3, #0
 80070fc:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	2b01      	cmp	r3, #1
 8007108:	d904      	bls.n	8007114 <remove_chain+0x26>
 800710a:	69bb      	ldr	r3, [r7, #24]
 800710c:	69db      	ldr	r3, [r3, #28]
 800710e:	68ba      	ldr	r2, [r7, #8]
 8007110:	429a      	cmp	r2, r3
 8007112:	d301      	bcc.n	8007118 <remove_chain+0x2a>
 8007114:	2302      	movs	r3, #2
 8007116:	e04b      	b.n	80071b0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d00c      	beq.n	8007138 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800711e:	f04f 32ff 	mov.w	r2, #4294967295
 8007122:	6879      	ldr	r1, [r7, #4]
 8007124:	69b8      	ldr	r0, [r7, #24]
 8007126:	f7ff fec8 	bl	8006eba <put_fat>
 800712a:	4603      	mov	r3, r0
 800712c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800712e:	7ffb      	ldrb	r3, [r7, #31]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d001      	beq.n	8007138 <remove_chain+0x4a>
 8007134:	7ffb      	ldrb	r3, [r7, #31]
 8007136:	e03b      	b.n	80071b0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007138:	68b9      	ldr	r1, [r7, #8]
 800713a:	68f8      	ldr	r0, [r7, #12]
 800713c:	f7ff fde9 	bl	8006d12 <get_fat>
 8007140:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d031      	beq.n	80071ac <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	2b01      	cmp	r3, #1
 800714c:	d101      	bne.n	8007152 <remove_chain+0x64>
 800714e:	2302      	movs	r3, #2
 8007150:	e02e      	b.n	80071b0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007158:	d101      	bne.n	800715e <remove_chain+0x70>
 800715a:	2301      	movs	r3, #1
 800715c:	e028      	b.n	80071b0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800715e:	2200      	movs	r2, #0
 8007160:	68b9      	ldr	r1, [r7, #8]
 8007162:	69b8      	ldr	r0, [r7, #24]
 8007164:	f7ff fea9 	bl	8006eba <put_fat>
 8007168:	4603      	mov	r3, r0
 800716a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800716c:	7ffb      	ldrb	r3, [r7, #31]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d001      	beq.n	8007176 <remove_chain+0x88>
 8007172:	7ffb      	ldrb	r3, [r7, #31]
 8007174:	e01c      	b.n	80071b0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007176:	69bb      	ldr	r3, [r7, #24]
 8007178:	699a      	ldr	r2, [r3, #24]
 800717a:	69bb      	ldr	r3, [r7, #24]
 800717c:	69db      	ldr	r3, [r3, #28]
 800717e:	3b02      	subs	r3, #2
 8007180:	429a      	cmp	r2, r3
 8007182:	d20b      	bcs.n	800719c <remove_chain+0xae>
			fs->free_clst++;
 8007184:	69bb      	ldr	r3, [r7, #24]
 8007186:	699b      	ldr	r3, [r3, #24]
 8007188:	1c5a      	adds	r2, r3, #1
 800718a:	69bb      	ldr	r3, [r7, #24]
 800718c:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800718e:	69bb      	ldr	r3, [r7, #24]
 8007190:	791b      	ldrb	r3, [r3, #4]
 8007192:	f043 0301 	orr.w	r3, r3, #1
 8007196:	b2da      	uxtb	r2, r3
 8007198:	69bb      	ldr	r3, [r7, #24]
 800719a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80071a0:	69bb      	ldr	r3, [r7, #24]
 80071a2:	69db      	ldr	r3, [r3, #28]
 80071a4:	68ba      	ldr	r2, [r7, #8]
 80071a6:	429a      	cmp	r2, r3
 80071a8:	d3c6      	bcc.n	8007138 <remove_chain+0x4a>
 80071aa:	e000      	b.n	80071ae <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80071ac:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80071ae:	2300      	movs	r3, #0
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3720      	adds	r7, #32
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}

080071b8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b088      	sub	sp, #32
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d10d      	bne.n	80071ea <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	695b      	ldr	r3, [r3, #20]
 80071d2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80071d4:	69bb      	ldr	r3, [r7, #24]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d004      	beq.n	80071e4 <create_chain+0x2c>
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	69db      	ldr	r3, [r3, #28]
 80071de:	69ba      	ldr	r2, [r7, #24]
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d31b      	bcc.n	800721c <create_chain+0x64>
 80071e4:	2301      	movs	r3, #1
 80071e6:	61bb      	str	r3, [r7, #24]
 80071e8:	e018      	b.n	800721c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80071ea:	6839      	ldr	r1, [r7, #0]
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f7ff fd90 	bl	8006d12 <get_fat>
 80071f2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d801      	bhi.n	80071fe <create_chain+0x46>
 80071fa:	2301      	movs	r3, #1
 80071fc:	e070      	b.n	80072e0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007204:	d101      	bne.n	800720a <create_chain+0x52>
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	e06a      	b.n	80072e0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	69db      	ldr	r3, [r3, #28]
 800720e:	68fa      	ldr	r2, [r7, #12]
 8007210:	429a      	cmp	r2, r3
 8007212:	d201      	bcs.n	8007218 <create_chain+0x60>
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	e063      	b.n	80072e0 <create_chain+0x128>
		scl = clst;
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800721c:	69bb      	ldr	r3, [r7, #24]
 800721e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007220:	69fb      	ldr	r3, [r7, #28]
 8007222:	3301      	adds	r3, #1
 8007224:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	69db      	ldr	r3, [r3, #28]
 800722a:	69fa      	ldr	r2, [r7, #28]
 800722c:	429a      	cmp	r2, r3
 800722e:	d307      	bcc.n	8007240 <create_chain+0x88>
				ncl = 2;
 8007230:	2302      	movs	r3, #2
 8007232:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007234:	69fa      	ldr	r2, [r7, #28]
 8007236:	69bb      	ldr	r3, [r7, #24]
 8007238:	429a      	cmp	r2, r3
 800723a:	d901      	bls.n	8007240 <create_chain+0x88>
 800723c:	2300      	movs	r3, #0
 800723e:	e04f      	b.n	80072e0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007240:	69f9      	ldr	r1, [r7, #28]
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f7ff fd65 	bl	8006d12 <get_fat>
 8007248:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d00e      	beq.n	800726e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2b01      	cmp	r3, #1
 8007254:	d003      	beq.n	800725e <create_chain+0xa6>
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800725c:	d101      	bne.n	8007262 <create_chain+0xaa>
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	e03e      	b.n	80072e0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007262:	69fa      	ldr	r2, [r7, #28]
 8007264:	69bb      	ldr	r3, [r7, #24]
 8007266:	429a      	cmp	r2, r3
 8007268:	d1da      	bne.n	8007220 <create_chain+0x68>
 800726a:	2300      	movs	r3, #0
 800726c:	e038      	b.n	80072e0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800726e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007270:	f04f 32ff 	mov.w	r2, #4294967295
 8007274:	69f9      	ldr	r1, [r7, #28]
 8007276:	6938      	ldr	r0, [r7, #16]
 8007278:	f7ff fe1f 	bl	8006eba <put_fat>
 800727c:	4603      	mov	r3, r0
 800727e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007280:	7dfb      	ldrb	r3, [r7, #23]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d109      	bne.n	800729a <create_chain+0xe2>
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d006      	beq.n	800729a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800728c:	69fa      	ldr	r2, [r7, #28]
 800728e:	6839      	ldr	r1, [r7, #0]
 8007290:	6938      	ldr	r0, [r7, #16]
 8007292:	f7ff fe12 	bl	8006eba <put_fat>
 8007296:	4603      	mov	r3, r0
 8007298:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800729a:	7dfb      	ldrb	r3, [r7, #23]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d116      	bne.n	80072ce <create_chain+0x116>
		fs->last_clst = ncl;
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	69fa      	ldr	r2, [r7, #28]
 80072a4:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	699a      	ldr	r2, [r3, #24]
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	69db      	ldr	r3, [r3, #28]
 80072ae:	3b02      	subs	r3, #2
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d804      	bhi.n	80072be <create_chain+0x106>
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	699b      	ldr	r3, [r3, #24]
 80072b8:	1e5a      	subs	r2, r3, #1
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	791b      	ldrb	r3, [r3, #4]
 80072c2:	f043 0301 	orr.w	r3, r3, #1
 80072c6:	b2da      	uxtb	r2, r3
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	711a      	strb	r2, [r3, #4]
 80072cc:	e007      	b.n	80072de <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80072ce:	7dfb      	ldrb	r3, [r7, #23]
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d102      	bne.n	80072da <create_chain+0x122>
 80072d4:	f04f 33ff 	mov.w	r3, #4294967295
 80072d8:	e000      	b.n	80072dc <create_chain+0x124>
 80072da:	2301      	movs	r3, #1
 80072dc:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80072de:	69fb      	ldr	r3, [r7, #28]
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3720      	adds	r7, #32
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}

080072e8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b087      	sub	sp, #28
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
 80072f0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072fc:	3304      	adds	r3, #4
 80072fe:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	899b      	ldrh	r3, [r3, #12]
 8007304:	461a      	mov	r2, r3
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	fbb3 f3f2 	udiv	r3, r3, r2
 800730c:	68fa      	ldr	r2, [r7, #12]
 800730e:	8952      	ldrh	r2, [r2, #10]
 8007310:	fbb3 f3f2 	udiv	r3, r3, r2
 8007314:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	1d1a      	adds	r2, r3, #4
 800731a:	613a      	str	r2, [r7, #16]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d101      	bne.n	800732a <clmt_clust+0x42>
 8007326:	2300      	movs	r3, #0
 8007328:	e010      	b.n	800734c <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800732a:	697a      	ldr	r2, [r7, #20]
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	429a      	cmp	r2, r3
 8007330:	d307      	bcc.n	8007342 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8007332:	697a      	ldr	r2, [r7, #20]
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	1ad3      	subs	r3, r2, r3
 8007338:	617b      	str	r3, [r7, #20]
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	3304      	adds	r3, #4
 800733e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007340:	e7e9      	b.n	8007316 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8007342:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	4413      	add	r3, r2
}
 800734c:	4618      	mov	r0, r3
 800734e:	371c      	adds	r7, #28
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr

08007358 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b086      	sub	sp, #24
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800736e:	d204      	bcs.n	800737a <dir_sdi+0x22>
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	f003 031f 	and.w	r3, r3, #31
 8007376:	2b00      	cmp	r3, #0
 8007378:	d001      	beq.n	800737e <dir_sdi+0x26>
		return FR_INT_ERR;
 800737a:	2302      	movs	r3, #2
 800737c:	e071      	b.n	8007462 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	683a      	ldr	r2, [r7, #0]
 8007382:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	689b      	ldr	r3, [r3, #8]
 8007388:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d106      	bne.n	800739e <dir_sdi+0x46>
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	781b      	ldrb	r3, [r3, #0]
 8007394:	2b02      	cmp	r3, #2
 8007396:	d902      	bls.n	800739e <dir_sdi+0x46>
		clst = fs->dirbase;
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800739c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d10c      	bne.n	80073be <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	095b      	lsrs	r3, r3, #5
 80073a8:	693a      	ldr	r2, [r7, #16]
 80073aa:	8912      	ldrh	r2, [r2, #8]
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d301      	bcc.n	80073b4 <dir_sdi+0x5c>
 80073b0:	2302      	movs	r3, #2
 80073b2:	e056      	b.n	8007462 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	61da      	str	r2, [r3, #28]
 80073bc:	e02d      	b.n	800741a <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	895b      	ldrh	r3, [r3, #10]
 80073c2:	461a      	mov	r2, r3
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	899b      	ldrh	r3, [r3, #12]
 80073c8:	fb02 f303 	mul.w	r3, r2, r3
 80073cc:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80073ce:	e019      	b.n	8007404 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6979      	ldr	r1, [r7, #20]
 80073d4:	4618      	mov	r0, r3
 80073d6:	f7ff fc9c 	bl	8006d12 <get_fat>
 80073da:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073e2:	d101      	bne.n	80073e8 <dir_sdi+0x90>
 80073e4:	2301      	movs	r3, #1
 80073e6:	e03c      	b.n	8007462 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	2b01      	cmp	r3, #1
 80073ec:	d904      	bls.n	80073f8 <dir_sdi+0xa0>
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	69db      	ldr	r3, [r3, #28]
 80073f2:	697a      	ldr	r2, [r7, #20]
 80073f4:	429a      	cmp	r2, r3
 80073f6:	d301      	bcc.n	80073fc <dir_sdi+0xa4>
 80073f8:	2302      	movs	r3, #2
 80073fa:	e032      	b.n	8007462 <dir_sdi+0x10a>
			ofs -= csz;
 80073fc:	683a      	ldr	r2, [r7, #0]
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	1ad3      	subs	r3, r2, r3
 8007402:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007404:	683a      	ldr	r2, [r7, #0]
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	429a      	cmp	r2, r3
 800740a:	d2e1      	bcs.n	80073d0 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800740c:	6979      	ldr	r1, [r7, #20]
 800740e:	6938      	ldr	r0, [r7, #16]
 8007410:	f7ff fc60 	bl	8006cd4 <clust2sect>
 8007414:	4602      	mov	r2, r0
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	697a      	ldr	r2, [r7, #20]
 800741e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	69db      	ldr	r3, [r3, #28]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d101      	bne.n	800742c <dir_sdi+0xd4>
 8007428:	2302      	movs	r3, #2
 800742a:	e01a      	b.n	8007462 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	69da      	ldr	r2, [r3, #28]
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	899b      	ldrh	r3, [r3, #12]
 8007434:	4619      	mov	r1, r3
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	fbb3 f3f1 	udiv	r3, r3, r1
 800743c:	441a      	add	r2, r3
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	899b      	ldrh	r3, [r3, #12]
 800744c:	461a      	mov	r2, r3
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	fbb3 f0f2 	udiv	r0, r3, r2
 8007454:	fb00 f202 	mul.w	r2, r0, r2
 8007458:	1a9b      	subs	r3, r3, r2
 800745a:	18ca      	adds	r2, r1, r3
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007460:	2300      	movs	r3, #0
}
 8007462:	4618      	mov	r0, r3
 8007464:	3718      	adds	r7, #24
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}

0800746a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800746a:	b580      	push	{r7, lr}
 800746c:	b086      	sub	sp, #24
 800746e:	af00      	add	r7, sp, #0
 8007470:	6078      	str	r0, [r7, #4]
 8007472:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	695b      	ldr	r3, [r3, #20]
 800747e:	3320      	adds	r3, #32
 8007480:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	69db      	ldr	r3, [r3, #28]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d003      	beq.n	8007492 <dir_next+0x28>
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007490:	d301      	bcc.n	8007496 <dir_next+0x2c>
 8007492:	2304      	movs	r3, #4
 8007494:	e0bb      	b.n	800760e <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	899b      	ldrh	r3, [r3, #12]
 800749a:	461a      	mov	r2, r3
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	fbb3 f1f2 	udiv	r1, r3, r2
 80074a2:	fb01 f202 	mul.w	r2, r1, r2
 80074a6:	1a9b      	subs	r3, r3, r2
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	f040 809d 	bne.w	80075e8 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	69db      	ldr	r3, [r3, #28]
 80074b2:	1c5a      	adds	r2, r3, #1
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	699b      	ldr	r3, [r3, #24]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d10b      	bne.n	80074d8 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	095b      	lsrs	r3, r3, #5
 80074c4:	68fa      	ldr	r2, [r7, #12]
 80074c6:	8912      	ldrh	r2, [r2, #8]
 80074c8:	4293      	cmp	r3, r2
 80074ca:	f0c0 808d 	bcc.w	80075e8 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2200      	movs	r2, #0
 80074d2:	61da      	str	r2, [r3, #28]
 80074d4:	2304      	movs	r3, #4
 80074d6:	e09a      	b.n	800760e <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	899b      	ldrh	r3, [r3, #12]
 80074dc:	461a      	mov	r2, r3
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80074e4:	68fa      	ldr	r2, [r7, #12]
 80074e6:	8952      	ldrh	r2, [r2, #10]
 80074e8:	3a01      	subs	r2, #1
 80074ea:	4013      	ands	r3, r2
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d17b      	bne.n	80075e8 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	699b      	ldr	r3, [r3, #24]
 80074f6:	4619      	mov	r1, r3
 80074f8:	4610      	mov	r0, r2
 80074fa:	f7ff fc0a 	bl	8006d12 <get_fat>
 80074fe:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	2b01      	cmp	r3, #1
 8007504:	d801      	bhi.n	800750a <dir_next+0xa0>
 8007506:	2302      	movs	r3, #2
 8007508:	e081      	b.n	800760e <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007510:	d101      	bne.n	8007516 <dir_next+0xac>
 8007512:	2301      	movs	r3, #1
 8007514:	e07b      	b.n	800760e <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	69db      	ldr	r3, [r3, #28]
 800751a:	697a      	ldr	r2, [r7, #20]
 800751c:	429a      	cmp	r2, r3
 800751e:	d359      	bcc.n	80075d4 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d104      	bne.n	8007530 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2200      	movs	r2, #0
 800752a:	61da      	str	r2, [r3, #28]
 800752c:	2304      	movs	r3, #4
 800752e:	e06e      	b.n	800760e <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007530:	687a      	ldr	r2, [r7, #4]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	699b      	ldr	r3, [r3, #24]
 8007536:	4619      	mov	r1, r3
 8007538:	4610      	mov	r0, r2
 800753a:	f7ff fe3d 	bl	80071b8 <create_chain>
 800753e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d101      	bne.n	800754a <dir_next+0xe0>
 8007546:	2307      	movs	r3, #7
 8007548:	e061      	b.n	800760e <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	2b01      	cmp	r3, #1
 800754e:	d101      	bne.n	8007554 <dir_next+0xea>
 8007550:	2302      	movs	r3, #2
 8007552:	e05c      	b.n	800760e <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800755a:	d101      	bne.n	8007560 <dir_next+0xf6>
 800755c:	2301      	movs	r3, #1
 800755e:	e056      	b.n	800760e <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007560:	68f8      	ldr	r0, [r7, #12]
 8007562:	f7ff fad5 	bl	8006b10 <sync_window>
 8007566:	4603      	mov	r3, r0
 8007568:	2b00      	cmp	r3, #0
 800756a:	d001      	beq.n	8007570 <dir_next+0x106>
 800756c:	2301      	movs	r3, #1
 800756e:	e04e      	b.n	800760e <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	899b      	ldrh	r3, [r3, #12]
 800757a:	461a      	mov	r2, r3
 800757c:	2100      	movs	r1, #0
 800757e:	f7ff f8cc 	bl	800671a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007582:	2300      	movs	r3, #0
 8007584:	613b      	str	r3, [r7, #16]
 8007586:	6979      	ldr	r1, [r7, #20]
 8007588:	68f8      	ldr	r0, [r7, #12]
 800758a:	f7ff fba3 	bl	8006cd4 <clust2sect>
 800758e:	4602      	mov	r2, r0
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	635a      	str	r2, [r3, #52]	; 0x34
 8007594:	e012      	b.n	80075bc <dir_next+0x152>
						fs->wflag = 1;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2201      	movs	r2, #1
 800759a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800759c:	68f8      	ldr	r0, [r7, #12]
 800759e:	f7ff fab7 	bl	8006b10 <sync_window>
 80075a2:	4603      	mov	r3, r0
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d001      	beq.n	80075ac <dir_next+0x142>
 80075a8:	2301      	movs	r3, #1
 80075aa:	e030      	b.n	800760e <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	3301      	adds	r3, #1
 80075b0:	613b      	str	r3, [r7, #16]
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075b6:	1c5a      	adds	r2, r3, #1
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	635a      	str	r2, [r3, #52]	; 0x34
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	895b      	ldrh	r3, [r3, #10]
 80075c0:	461a      	mov	r2, r3
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d3e6      	bcc.n	8007596 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	1ad2      	subs	r2, r2, r3
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	697a      	ldr	r2, [r7, #20]
 80075d8:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80075da:	6979      	ldr	r1, [r7, #20]
 80075dc:	68f8      	ldr	r0, [r7, #12]
 80075de:	f7ff fb79 	bl	8006cd4 <clust2sect>
 80075e2:	4602      	mov	r2, r0
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	68ba      	ldr	r2, [r7, #8]
 80075ec:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	899b      	ldrh	r3, [r3, #12]
 80075f8:	461a      	mov	r2, r3
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	fbb3 f0f2 	udiv	r0, r3, r2
 8007600:	fb00 f202 	mul.w	r2, r0, r2
 8007604:	1a9b      	subs	r3, r3, r2
 8007606:	18ca      	adds	r2, r1, r3
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800760c:	2300      	movs	r3, #0
}
 800760e:	4618      	mov	r0, r3
 8007610:	3718      	adds	r7, #24
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}

08007616 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007616:	b580      	push	{r7, lr}
 8007618:	b086      	sub	sp, #24
 800761a:	af00      	add	r7, sp, #0
 800761c:	6078      	str	r0, [r7, #4]
 800761e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007626:	2100      	movs	r1, #0
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f7ff fe95 	bl	8007358 <dir_sdi>
 800762e:	4603      	mov	r3, r0
 8007630:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007632:	7dfb      	ldrb	r3, [r7, #23]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d12b      	bne.n	8007690 <dir_alloc+0x7a>
		n = 0;
 8007638:	2300      	movs	r3, #0
 800763a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	69db      	ldr	r3, [r3, #28]
 8007640:	4619      	mov	r1, r3
 8007642:	68f8      	ldr	r0, [r7, #12]
 8007644:	f7ff faa8 	bl	8006b98 <move_window>
 8007648:	4603      	mov	r3, r0
 800764a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800764c:	7dfb      	ldrb	r3, [r7, #23]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d11d      	bne.n	800768e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6a1b      	ldr	r3, [r3, #32]
 8007656:	781b      	ldrb	r3, [r3, #0]
 8007658:	2be5      	cmp	r3, #229	; 0xe5
 800765a:	d004      	beq.n	8007666 <dir_alloc+0x50>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6a1b      	ldr	r3, [r3, #32]
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d107      	bne.n	8007676 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	3301      	adds	r3, #1
 800766a:	613b      	str	r3, [r7, #16]
 800766c:	693a      	ldr	r2, [r7, #16]
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	429a      	cmp	r2, r3
 8007672:	d102      	bne.n	800767a <dir_alloc+0x64>
 8007674:	e00c      	b.n	8007690 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007676:	2300      	movs	r3, #0
 8007678:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800767a:	2101      	movs	r1, #1
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f7ff fef4 	bl	800746a <dir_next>
 8007682:	4603      	mov	r3, r0
 8007684:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007686:	7dfb      	ldrb	r3, [r7, #23]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d0d7      	beq.n	800763c <dir_alloc+0x26>
 800768c:	e000      	b.n	8007690 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800768e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007690:	7dfb      	ldrb	r3, [r7, #23]
 8007692:	2b04      	cmp	r3, #4
 8007694:	d101      	bne.n	800769a <dir_alloc+0x84>
 8007696:	2307      	movs	r3, #7
 8007698:	75fb      	strb	r3, [r7, #23]
	return res;
 800769a:	7dfb      	ldrb	r3, [r7, #23]
}
 800769c:	4618      	mov	r0, r3
 800769e:	3718      	adds	r7, #24
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}

080076a4 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b084      	sub	sp, #16
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	331a      	adds	r3, #26
 80076b2:	4618      	mov	r0, r3
 80076b4:	f7fe ff8e 	bl	80065d4 <ld_word>
 80076b8:	4603      	mov	r3, r0
 80076ba:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	781b      	ldrb	r3, [r3, #0]
 80076c0:	2b03      	cmp	r3, #3
 80076c2:	d109      	bne.n	80076d8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	3314      	adds	r3, #20
 80076c8:	4618      	mov	r0, r3
 80076ca:	f7fe ff83 	bl	80065d4 <ld_word>
 80076ce:	4603      	mov	r3, r0
 80076d0:	041b      	lsls	r3, r3, #16
 80076d2:	68fa      	ldr	r2, [r7, #12]
 80076d4:	4313      	orrs	r3, r2
 80076d6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80076d8:	68fb      	ldr	r3, [r7, #12]
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3710      	adds	r7, #16
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}

080076e2 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80076e2:	b580      	push	{r7, lr}
 80076e4:	b084      	sub	sp, #16
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	60f8      	str	r0, [r7, #12]
 80076ea:	60b9      	str	r1, [r7, #8]
 80076ec:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	331a      	adds	r3, #26
 80076f2:	687a      	ldr	r2, [r7, #4]
 80076f4:	b292      	uxth	r2, r2
 80076f6:	4611      	mov	r1, r2
 80076f8:	4618      	mov	r0, r3
 80076fa:	f7fe ffa6 	bl	800664a <st_word>
	if (fs->fs_type == FS_FAT32) {
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	2b03      	cmp	r3, #3
 8007704:	d109      	bne.n	800771a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	f103 0214 	add.w	r2, r3, #20
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	0c1b      	lsrs	r3, r3, #16
 8007710:	b29b      	uxth	r3, r3
 8007712:	4619      	mov	r1, r3
 8007714:	4610      	mov	r0, r2
 8007716:	f7fe ff98 	bl	800664a <st_word>
	}
}
 800771a:	bf00      	nop
 800771c:	3710      	adds	r7, #16
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}

08007722 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007722:	b580      	push	{r7, lr}
 8007724:	b086      	sub	sp, #24
 8007726:	af00      	add	r7, sp, #0
 8007728:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007730:	2100      	movs	r1, #0
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f7ff fe10 	bl	8007358 <dir_sdi>
 8007738:	4603      	mov	r3, r0
 800773a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800773c:	7dfb      	ldrb	r3, [r7, #23]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d001      	beq.n	8007746 <dir_find+0x24>
 8007742:	7dfb      	ldrb	r3, [r7, #23]
 8007744:	e03e      	b.n	80077c4 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	69db      	ldr	r3, [r3, #28]
 800774a:	4619      	mov	r1, r3
 800774c:	6938      	ldr	r0, [r7, #16]
 800774e:	f7ff fa23 	bl	8006b98 <move_window>
 8007752:	4603      	mov	r3, r0
 8007754:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007756:	7dfb      	ldrb	r3, [r7, #23]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d12f      	bne.n	80077bc <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6a1b      	ldr	r3, [r3, #32]
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007764:	7bfb      	ldrb	r3, [r7, #15]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d102      	bne.n	8007770 <dir_find+0x4e>
 800776a:	2304      	movs	r3, #4
 800776c:	75fb      	strb	r3, [r7, #23]
 800776e:	e028      	b.n	80077c2 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6a1b      	ldr	r3, [r3, #32]
 8007774:	330b      	adds	r3, #11
 8007776:	781b      	ldrb	r3, [r3, #0]
 8007778:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800777c:	b2da      	uxtb	r2, r3
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6a1b      	ldr	r3, [r3, #32]
 8007786:	330b      	adds	r3, #11
 8007788:	781b      	ldrb	r3, [r3, #0]
 800778a:	f003 0308 	and.w	r3, r3, #8
 800778e:	2b00      	cmp	r3, #0
 8007790:	d10a      	bne.n	80077a8 <dir_find+0x86>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6a18      	ldr	r0, [r3, #32]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	3324      	adds	r3, #36	; 0x24
 800779a:	220b      	movs	r2, #11
 800779c:	4619      	mov	r1, r3
 800779e:	f7fe ffd7 	bl	8006750 <mem_cmp>
 80077a2:	4603      	mov	r3, r0
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d00b      	beq.n	80077c0 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80077a8:	2100      	movs	r1, #0
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f7ff fe5d 	bl	800746a <dir_next>
 80077b0:	4603      	mov	r3, r0
 80077b2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80077b4:	7dfb      	ldrb	r3, [r7, #23]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d0c5      	beq.n	8007746 <dir_find+0x24>
 80077ba:	e002      	b.n	80077c2 <dir_find+0xa0>
		if (res != FR_OK) break;
 80077bc:	bf00      	nop
 80077be:	e000      	b.n	80077c2 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80077c0:	bf00      	nop

	return res;
 80077c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3718      	adds	r7, #24
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}

080077cc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80077da:	2101      	movs	r1, #1
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f7ff ff1a 	bl	8007616 <dir_alloc>
 80077e2:	4603      	mov	r3, r0
 80077e4:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80077e6:	7bfb      	ldrb	r3, [r7, #15]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d11c      	bne.n	8007826 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	69db      	ldr	r3, [r3, #28]
 80077f0:	4619      	mov	r1, r3
 80077f2:	68b8      	ldr	r0, [r7, #8]
 80077f4:	f7ff f9d0 	bl	8006b98 <move_window>
 80077f8:	4603      	mov	r3, r0
 80077fa:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80077fc:	7bfb      	ldrb	r3, [r7, #15]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d111      	bne.n	8007826 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6a1b      	ldr	r3, [r3, #32]
 8007806:	2220      	movs	r2, #32
 8007808:	2100      	movs	r1, #0
 800780a:	4618      	mov	r0, r3
 800780c:	f7fe ff85 	bl	800671a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6a18      	ldr	r0, [r3, #32]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	3324      	adds	r3, #36	; 0x24
 8007818:	220b      	movs	r2, #11
 800781a:	4619      	mov	r1, r3
 800781c:	f7fe ff5c 	bl	80066d8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	2201      	movs	r2, #1
 8007824:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007826:	7bfb      	ldrb	r3, [r7, #15]
}
 8007828:	4618      	mov	r0, r3
 800782a:	3710      	adds	r7, #16
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}

08007830 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b086      	sub	sp, #24
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
 8007838:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	2200      	movs	r2, #0
 800783e:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	69db      	ldr	r3, [r3, #28]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d04e      	beq.n	80078e6 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8007848:	2300      	movs	r3, #0
 800784a:	613b      	str	r3, [r7, #16]
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8007850:	e021      	b.n	8007896 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6a1a      	ldr	r2, [r3, #32]
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	1c59      	adds	r1, r3, #1
 800785a:	6179      	str	r1, [r7, #20]
 800785c:	4413      	add	r3, r2
 800785e:	781b      	ldrb	r3, [r3, #0]
 8007860:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8007862:	7bfb      	ldrb	r3, [r7, #15]
 8007864:	2b20      	cmp	r3, #32
 8007866:	d100      	bne.n	800786a <get_fileinfo+0x3a>
 8007868:	e015      	b.n	8007896 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800786a:	7bfb      	ldrb	r3, [r7, #15]
 800786c:	2b05      	cmp	r3, #5
 800786e:	d101      	bne.n	8007874 <get_fileinfo+0x44>
 8007870:	23e5      	movs	r3, #229	; 0xe5
 8007872:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	2b09      	cmp	r3, #9
 8007878:	d106      	bne.n	8007888 <get_fileinfo+0x58>
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	1c5a      	adds	r2, r3, #1
 800787e:	613a      	str	r2, [r7, #16]
 8007880:	683a      	ldr	r2, [r7, #0]
 8007882:	4413      	add	r3, r2
 8007884:	222e      	movs	r2, #46	; 0x2e
 8007886:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	1c5a      	adds	r2, r3, #1
 800788c:	613a      	str	r2, [r7, #16]
 800788e:	683a      	ldr	r2, [r7, #0]
 8007890:	4413      	add	r3, r2
 8007892:	7bfa      	ldrb	r2, [r7, #15]
 8007894:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	2b0a      	cmp	r3, #10
 800789a:	d9da      	bls.n	8007852 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800789c:	683a      	ldr	r2, [r7, #0]
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	4413      	add	r3, r2
 80078a2:	3309      	adds	r3, #9
 80078a4:	2200      	movs	r2, #0
 80078a6:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6a1b      	ldr	r3, [r3, #32]
 80078ac:	7ada      	ldrb	r2, [r3, #11]
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6a1b      	ldr	r3, [r3, #32]
 80078b6:	331c      	adds	r3, #28
 80078b8:	4618      	mov	r0, r3
 80078ba:	f7fe fea3 	bl	8006604 <ld_dword>
 80078be:	4602      	mov	r2, r0
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6a1b      	ldr	r3, [r3, #32]
 80078c8:	3316      	adds	r3, #22
 80078ca:	4618      	mov	r0, r3
 80078cc:	f7fe fe9a 	bl	8006604 <ld_dword>
 80078d0:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	b29a      	uxth	r2, r3
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	80da      	strh	r2, [r3, #6]
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	0c1b      	lsrs	r3, r3, #16
 80078de:	b29a      	uxth	r2, r3
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	809a      	strh	r2, [r3, #4]
 80078e4:	e000      	b.n	80078e8 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80078e6:	bf00      	nop
}
 80078e8:	3718      	adds	r7, #24
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}
	...

080078f0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b088      	sub	sp, #32
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
 80078f8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	60fb      	str	r3, [r7, #12]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	3324      	adds	r3, #36	; 0x24
 8007904:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8007906:	220b      	movs	r2, #11
 8007908:	2120      	movs	r1, #32
 800790a:	68b8      	ldr	r0, [r7, #8]
 800790c:	f7fe ff05 	bl	800671a <mem_set>
	si = i = 0; ni = 8;
 8007910:	2300      	movs	r3, #0
 8007912:	613b      	str	r3, [r7, #16]
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	61fb      	str	r3, [r7, #28]
 8007918:	2308      	movs	r3, #8
 800791a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800791c:	69fb      	ldr	r3, [r7, #28]
 800791e:	1c5a      	adds	r2, r3, #1
 8007920:	61fa      	str	r2, [r7, #28]
 8007922:	68fa      	ldr	r2, [r7, #12]
 8007924:	4413      	add	r3, r2
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800792a:	7efb      	ldrb	r3, [r7, #27]
 800792c:	2b20      	cmp	r3, #32
 800792e:	d94e      	bls.n	80079ce <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8007930:	7efb      	ldrb	r3, [r7, #27]
 8007932:	2b2f      	cmp	r3, #47	; 0x2f
 8007934:	d006      	beq.n	8007944 <create_name+0x54>
 8007936:	7efb      	ldrb	r3, [r7, #27]
 8007938:	2b5c      	cmp	r3, #92	; 0x5c
 800793a:	d110      	bne.n	800795e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800793c:	e002      	b.n	8007944 <create_name+0x54>
 800793e:	69fb      	ldr	r3, [r7, #28]
 8007940:	3301      	adds	r3, #1
 8007942:	61fb      	str	r3, [r7, #28]
 8007944:	68fa      	ldr	r2, [r7, #12]
 8007946:	69fb      	ldr	r3, [r7, #28]
 8007948:	4413      	add	r3, r2
 800794a:	781b      	ldrb	r3, [r3, #0]
 800794c:	2b2f      	cmp	r3, #47	; 0x2f
 800794e:	d0f6      	beq.n	800793e <create_name+0x4e>
 8007950:	68fa      	ldr	r2, [r7, #12]
 8007952:	69fb      	ldr	r3, [r7, #28]
 8007954:	4413      	add	r3, r2
 8007956:	781b      	ldrb	r3, [r3, #0]
 8007958:	2b5c      	cmp	r3, #92	; 0x5c
 800795a:	d0f0      	beq.n	800793e <create_name+0x4e>
			break;
 800795c:	e038      	b.n	80079d0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800795e:	7efb      	ldrb	r3, [r7, #27]
 8007960:	2b2e      	cmp	r3, #46	; 0x2e
 8007962:	d003      	beq.n	800796c <create_name+0x7c>
 8007964:	693a      	ldr	r2, [r7, #16]
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	429a      	cmp	r2, r3
 800796a:	d30c      	bcc.n	8007986 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	2b0b      	cmp	r3, #11
 8007970:	d002      	beq.n	8007978 <create_name+0x88>
 8007972:	7efb      	ldrb	r3, [r7, #27]
 8007974:	2b2e      	cmp	r3, #46	; 0x2e
 8007976:	d001      	beq.n	800797c <create_name+0x8c>
 8007978:	2306      	movs	r3, #6
 800797a:	e044      	b.n	8007a06 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800797c:	2308      	movs	r3, #8
 800797e:	613b      	str	r3, [r7, #16]
 8007980:	230b      	movs	r3, #11
 8007982:	617b      	str	r3, [r7, #20]
			continue;
 8007984:	e022      	b.n	80079cc <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8007986:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800798a:	2b00      	cmp	r3, #0
 800798c:	da04      	bge.n	8007998 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800798e:	7efb      	ldrb	r3, [r7, #27]
 8007990:	3b80      	subs	r3, #128	; 0x80
 8007992:	4a1f      	ldr	r2, [pc, #124]	; (8007a10 <create_name+0x120>)
 8007994:	5cd3      	ldrb	r3, [r2, r3]
 8007996:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8007998:	7efb      	ldrb	r3, [r7, #27]
 800799a:	4619      	mov	r1, r3
 800799c:	481d      	ldr	r0, [pc, #116]	; (8007a14 <create_name+0x124>)
 800799e:	f7fe fefe 	bl	800679e <chk_chr>
 80079a2:	4603      	mov	r3, r0
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d001      	beq.n	80079ac <create_name+0xbc>
 80079a8:	2306      	movs	r3, #6
 80079aa:	e02c      	b.n	8007a06 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80079ac:	7efb      	ldrb	r3, [r7, #27]
 80079ae:	2b60      	cmp	r3, #96	; 0x60
 80079b0:	d905      	bls.n	80079be <create_name+0xce>
 80079b2:	7efb      	ldrb	r3, [r7, #27]
 80079b4:	2b7a      	cmp	r3, #122	; 0x7a
 80079b6:	d802      	bhi.n	80079be <create_name+0xce>
 80079b8:	7efb      	ldrb	r3, [r7, #27]
 80079ba:	3b20      	subs	r3, #32
 80079bc:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	1c5a      	adds	r2, r3, #1
 80079c2:	613a      	str	r2, [r7, #16]
 80079c4:	68ba      	ldr	r2, [r7, #8]
 80079c6:	4413      	add	r3, r2
 80079c8:	7efa      	ldrb	r2, [r7, #27]
 80079ca:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80079cc:	e7a6      	b.n	800791c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80079ce:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80079d0:	68fa      	ldr	r2, [r7, #12]
 80079d2:	69fb      	ldr	r3, [r7, #28]
 80079d4:	441a      	add	r2, r3
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d101      	bne.n	80079e4 <create_name+0xf4>
 80079e0:	2306      	movs	r3, #6
 80079e2:	e010      	b.n	8007a06 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	2be5      	cmp	r3, #229	; 0xe5
 80079ea:	d102      	bne.n	80079f2 <create_name+0x102>
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	2205      	movs	r2, #5
 80079f0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80079f2:	7efb      	ldrb	r3, [r7, #27]
 80079f4:	2b20      	cmp	r3, #32
 80079f6:	d801      	bhi.n	80079fc <create_name+0x10c>
 80079f8:	2204      	movs	r2, #4
 80079fa:	e000      	b.n	80079fe <create_name+0x10e>
 80079fc:	2200      	movs	r2, #0
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	330b      	adds	r3, #11
 8007a02:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007a04:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	3720      	adds	r7, #32
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}
 8007a0e:	bf00      	nop
 8007a10:	0800c980 	.word	0x0800c980
 8007a14:	0800c900 	.word	0x0800c900

08007a18 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b086      	sub	sp, #24
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007a2c:	e002      	b.n	8007a34 <follow_path+0x1c>
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	3301      	adds	r3, #1
 8007a32:	603b      	str	r3, [r7, #0]
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	781b      	ldrb	r3, [r3, #0]
 8007a38:	2b2f      	cmp	r3, #47	; 0x2f
 8007a3a:	d0f8      	beq.n	8007a2e <follow_path+0x16>
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	781b      	ldrb	r3, [r3, #0]
 8007a40:	2b5c      	cmp	r3, #92	; 0x5c
 8007a42:	d0f4      	beq.n	8007a2e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	2200      	movs	r2, #0
 8007a48:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	781b      	ldrb	r3, [r3, #0]
 8007a4e:	2b1f      	cmp	r3, #31
 8007a50:	d80a      	bhi.n	8007a68 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2280      	movs	r2, #128	; 0x80
 8007a56:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007a5a:	2100      	movs	r1, #0
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f7ff fc7b 	bl	8007358 <dir_sdi>
 8007a62:	4603      	mov	r3, r0
 8007a64:	75fb      	strb	r3, [r7, #23]
 8007a66:	e048      	b.n	8007afa <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007a68:	463b      	mov	r3, r7
 8007a6a:	4619      	mov	r1, r3
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f7ff ff3f 	bl	80078f0 <create_name>
 8007a72:	4603      	mov	r3, r0
 8007a74:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007a76:	7dfb      	ldrb	r3, [r7, #23]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d139      	bne.n	8007af0 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f7ff fe50 	bl	8007722 <dir_find>
 8007a82:	4603      	mov	r3, r0
 8007a84:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007a8c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007a8e:	7dfb      	ldrb	r3, [r7, #23]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d00a      	beq.n	8007aaa <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007a94:	7dfb      	ldrb	r3, [r7, #23]
 8007a96:	2b04      	cmp	r3, #4
 8007a98:	d12c      	bne.n	8007af4 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007a9a:	7afb      	ldrb	r3, [r7, #11]
 8007a9c:	f003 0304 	and.w	r3, r3, #4
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d127      	bne.n	8007af4 <follow_path+0xdc>
 8007aa4:	2305      	movs	r3, #5
 8007aa6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007aa8:	e024      	b.n	8007af4 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007aaa:	7afb      	ldrb	r3, [r7, #11]
 8007aac:	f003 0304 	and.w	r3, r3, #4
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d121      	bne.n	8007af8 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	799b      	ldrb	r3, [r3, #6]
 8007ab8:	f003 0310 	and.w	r3, r3, #16
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d102      	bne.n	8007ac6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007ac0:	2305      	movs	r3, #5
 8007ac2:	75fb      	strb	r3, [r7, #23]
 8007ac4:	e019      	b.n	8007afa <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	695b      	ldr	r3, [r3, #20]
 8007ad0:	68fa      	ldr	r2, [r7, #12]
 8007ad2:	8992      	ldrh	r2, [r2, #12]
 8007ad4:	fbb3 f0f2 	udiv	r0, r3, r2
 8007ad8:	fb00 f202 	mul.w	r2, r0, r2
 8007adc:	1a9b      	subs	r3, r3, r2
 8007ade:	440b      	add	r3, r1
 8007ae0:	4619      	mov	r1, r3
 8007ae2:	68f8      	ldr	r0, [r7, #12]
 8007ae4:	f7ff fdde 	bl	80076a4 <ld_clust>
 8007ae8:	4602      	mov	r2, r0
 8007aea:	693b      	ldr	r3, [r7, #16]
 8007aec:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007aee:	e7bb      	b.n	8007a68 <follow_path+0x50>
			if (res != FR_OK) break;
 8007af0:	bf00      	nop
 8007af2:	e002      	b.n	8007afa <follow_path+0xe2>
				break;
 8007af4:	bf00      	nop
 8007af6:	e000      	b.n	8007afa <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007af8:	bf00      	nop
			}
		}
	}

	return res;
 8007afa:	7dfb      	ldrb	r3, [r7, #23]
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3718      	adds	r7, #24
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}

08007b04 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b087      	sub	sp, #28
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8007b10:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d031      	beq.n	8007b7e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	617b      	str	r3, [r7, #20]
 8007b20:	e002      	b.n	8007b28 <get_ldnumber+0x24>
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	3301      	adds	r3, #1
 8007b26:	617b      	str	r3, [r7, #20]
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	781b      	ldrb	r3, [r3, #0]
 8007b2c:	2b20      	cmp	r3, #32
 8007b2e:	d903      	bls.n	8007b38 <get_ldnumber+0x34>
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	781b      	ldrb	r3, [r3, #0]
 8007b34:	2b3a      	cmp	r3, #58	; 0x3a
 8007b36:	d1f4      	bne.n	8007b22 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	781b      	ldrb	r3, [r3, #0]
 8007b3c:	2b3a      	cmp	r3, #58	; 0x3a
 8007b3e:	d11c      	bne.n	8007b7a <get_ldnumber+0x76>
			tp = *path;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	1c5a      	adds	r2, r3, #1
 8007b4a:	60fa      	str	r2, [r7, #12]
 8007b4c:	781b      	ldrb	r3, [r3, #0]
 8007b4e:	3b30      	subs	r3, #48	; 0x30
 8007b50:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	2b09      	cmp	r3, #9
 8007b56:	d80e      	bhi.n	8007b76 <get_ldnumber+0x72>
 8007b58:	68fa      	ldr	r2, [r7, #12]
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	d10a      	bne.n	8007b76 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d107      	bne.n	8007b76 <get_ldnumber+0x72>
					vol = (int)i;
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	3301      	adds	r3, #1
 8007b6e:	617b      	str	r3, [r7, #20]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	697a      	ldr	r2, [r7, #20]
 8007b74:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	e002      	b.n	8007b80 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007b7e:	693b      	ldr	r3, [r7, #16]
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	371c      	adds	r7, #28
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr

08007b8c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b082      	sub	sp, #8
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
 8007b94:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	70da      	strb	r2, [r3, #3]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f04f 32ff 	mov.w	r2, #4294967295
 8007ba2:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007ba4:	6839      	ldr	r1, [r7, #0]
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f7fe fff6 	bl	8006b98 <move_window>
 8007bac:	4603      	mov	r3, r0
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d001      	beq.n	8007bb6 <check_fs+0x2a>
 8007bb2:	2304      	movs	r3, #4
 8007bb4:	e038      	b.n	8007c28 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	3338      	adds	r3, #56	; 0x38
 8007bba:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f7fe fd08 	bl	80065d4 <ld_word>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	461a      	mov	r2, r3
 8007bc8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d001      	beq.n	8007bd4 <check_fs+0x48>
 8007bd0:	2303      	movs	r3, #3
 8007bd2:	e029      	b.n	8007c28 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007bda:	2be9      	cmp	r3, #233	; 0xe9
 8007bdc:	d009      	beq.n	8007bf2 <check_fs+0x66>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007be4:	2beb      	cmp	r3, #235	; 0xeb
 8007be6:	d11e      	bne.n	8007c26 <check_fs+0x9a>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007bee:	2b90      	cmp	r3, #144	; 0x90
 8007bf0:	d119      	bne.n	8007c26 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	3338      	adds	r3, #56	; 0x38
 8007bf6:	3336      	adds	r3, #54	; 0x36
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f7fe fd03 	bl	8006604 <ld_dword>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007c04:	4a0a      	ldr	r2, [pc, #40]	; (8007c30 <check_fs+0xa4>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d101      	bne.n	8007c0e <check_fs+0x82>
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	e00c      	b.n	8007c28 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	3338      	adds	r3, #56	; 0x38
 8007c12:	3352      	adds	r3, #82	; 0x52
 8007c14:	4618      	mov	r0, r3
 8007c16:	f7fe fcf5 	bl	8006604 <ld_dword>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	4a05      	ldr	r2, [pc, #20]	; (8007c34 <check_fs+0xa8>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d101      	bne.n	8007c26 <check_fs+0x9a>
 8007c22:	2300      	movs	r3, #0
 8007c24:	e000      	b.n	8007c28 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007c26:	2302      	movs	r3, #2
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3708      	adds	r7, #8
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}
 8007c30:	00544146 	.word	0x00544146
 8007c34:	33544146 	.word	0x33544146

08007c38 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b096      	sub	sp, #88	; 0x58
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	60f8      	str	r0, [r7, #12]
 8007c40:	60b9      	str	r1, [r7, #8]
 8007c42:	4613      	mov	r3, r2
 8007c44:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007c4c:	68f8      	ldr	r0, [r7, #12]
 8007c4e:	f7ff ff59 	bl	8007b04 <get_ldnumber>
 8007c52:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007c54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	da01      	bge.n	8007c5e <find_volume+0x26>
 8007c5a:	230b      	movs	r3, #11
 8007c5c:	e26a      	b.n	8008134 <find_volume+0x4fc>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007c5e:	4aa3      	ldr	r2, [pc, #652]	; (8007eec <find_volume+0x2b4>)
 8007c60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c66:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d101      	bne.n	8007c72 <find_volume+0x3a>
 8007c6e:	230c      	movs	r3, #12
 8007c70:	e260      	b.n	8008134 <find_volume+0x4fc>

	ENTER_FF(fs);						/* Lock the volume */
 8007c72:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007c74:	f7fe fdae 	bl	80067d4 <lock_fs>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d101      	bne.n	8007c82 <find_volume+0x4a>
 8007c7e:	230f      	movs	r3, #15
 8007c80:	e258      	b.n	8008134 <find_volume+0x4fc>
	*rfs = fs;							/* Return pointer to the file system object */
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c86:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007c88:	79fb      	ldrb	r3, [r7, #7]
 8007c8a:	f023 0301 	bic.w	r3, r3, #1
 8007c8e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c92:	781b      	ldrb	r3, [r3, #0]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d01a      	beq.n	8007cce <find_volume+0x96>
		stat = disk_status(fs->drv);
 8007c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c9a:	785b      	ldrb	r3, [r3, #1]
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f7fe fbfb 	bl	8006498 <disk_status>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007ca8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007cac:	f003 0301 	and.w	r3, r3, #1
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d10c      	bne.n	8007cce <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007cb4:	79fb      	ldrb	r3, [r7, #7]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d007      	beq.n	8007cca <find_volume+0x92>
 8007cba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007cbe:	f003 0304 	and.w	r3, r3, #4
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d001      	beq.n	8007cca <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8007cc6:	230a      	movs	r3, #10
 8007cc8:	e234      	b.n	8008134 <find_volume+0x4fc>
			}
			return FR_OK;				/* The file system object is valid */
 8007cca:	2300      	movs	r3, #0
 8007ccc:	e232      	b.n	8008134 <find_volume+0x4fc>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007cd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cd6:	b2da      	uxtb	r2, r3
 8007cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cda:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cde:	785b      	ldrb	r3, [r3, #1]
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	f7fe fbf3 	bl	80064cc <disk_initialize>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007cec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007cf0:	f003 0301 	and.w	r3, r3, #1
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d001      	beq.n	8007cfc <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007cf8:	2303      	movs	r3, #3
 8007cfa:	e21b      	b.n	8008134 <find_volume+0x4fc>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007cfc:	79fb      	ldrb	r3, [r7, #7]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d007      	beq.n	8007d12 <find_volume+0xda>
 8007d02:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007d06:	f003 0304 	and.w	r3, r3, #4
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d001      	beq.n	8007d12 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8007d0e:	230a      	movs	r3, #10
 8007d10:	e210      	b.n	8008134 <find_volume+0x4fc>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8007d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d14:	7858      	ldrb	r0, [r3, #1]
 8007d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d18:	330c      	adds	r3, #12
 8007d1a:	461a      	mov	r2, r3
 8007d1c:	2102      	movs	r1, #2
 8007d1e:	f7fe fc3b 	bl	8006598 <disk_ioctl>
 8007d22:	4603      	mov	r3, r0
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d001      	beq.n	8007d2c <find_volume+0xf4>
 8007d28:	2301      	movs	r3, #1
 8007d2a:	e203      	b.n	8008134 <find_volume+0x4fc>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8007d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d2e:	899b      	ldrh	r3, [r3, #12]
 8007d30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d34:	d80d      	bhi.n	8007d52 <find_volume+0x11a>
 8007d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d38:	899b      	ldrh	r3, [r3, #12]
 8007d3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d3e:	d308      	bcc.n	8007d52 <find_volume+0x11a>
 8007d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d42:	899b      	ldrh	r3, [r3, #12]
 8007d44:	461a      	mov	r2, r3
 8007d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d48:	899b      	ldrh	r3, [r3, #12]
 8007d4a:	3b01      	subs	r3, #1
 8007d4c:	4013      	ands	r3, r2
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d001      	beq.n	8007d56 <find_volume+0x11e>
 8007d52:	2301      	movs	r3, #1
 8007d54:	e1ee      	b.n	8008134 <find_volume+0x4fc>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007d56:	2300      	movs	r3, #0
 8007d58:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007d5a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007d5c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007d5e:	f7ff ff15 	bl	8007b8c <check_fs>
 8007d62:	4603      	mov	r3, r0
 8007d64:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007d68:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007d6c:	2b02      	cmp	r3, #2
 8007d6e:	d149      	bne.n	8007e04 <find_volume+0x1cc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007d70:	2300      	movs	r3, #0
 8007d72:	643b      	str	r3, [r7, #64]	; 0x40
 8007d74:	e01e      	b.n	8007db4 <find_volume+0x17c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d78:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8007d7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d7e:	011b      	lsls	r3, r3, #4
 8007d80:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007d84:	4413      	add	r3, r2
 8007d86:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d8a:	3304      	adds	r3, #4
 8007d8c:	781b      	ldrb	r3, [r3, #0]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d006      	beq.n	8007da0 <find_volume+0x168>
 8007d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d94:	3308      	adds	r3, #8
 8007d96:	4618      	mov	r0, r3
 8007d98:	f7fe fc34 	bl	8006604 <ld_dword>
 8007d9c:	4602      	mov	r2, r0
 8007d9e:	e000      	b.n	8007da2 <find_volume+0x16a>
 8007da0:	2200      	movs	r2, #0
 8007da2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007da4:	009b      	lsls	r3, r3, #2
 8007da6:	3358      	adds	r3, #88	; 0x58
 8007da8:	443b      	add	r3, r7
 8007daa:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007dae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007db0:	3301      	adds	r3, #1
 8007db2:	643b      	str	r3, [r7, #64]	; 0x40
 8007db4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007db6:	2b03      	cmp	r3, #3
 8007db8:	d9dd      	bls.n	8007d76 <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007dba:	2300      	movs	r3, #0
 8007dbc:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007dbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d002      	beq.n	8007dca <find_volume+0x192>
 8007dc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007dc6:	3b01      	subs	r3, #1
 8007dc8:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007dca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007dcc:	009b      	lsls	r3, r3, #2
 8007dce:	3358      	adds	r3, #88	; 0x58
 8007dd0:	443b      	add	r3, r7
 8007dd2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007dd6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007dd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d005      	beq.n	8007dea <find_volume+0x1b2>
 8007dde:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007de0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007de2:	f7ff fed3 	bl	8007b8c <check_fs>
 8007de6:	4603      	mov	r3, r0
 8007de8:	e000      	b.n	8007dec <find_volume+0x1b4>
 8007dea:	2303      	movs	r3, #3
 8007dec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007df0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007df4:	2b01      	cmp	r3, #1
 8007df6:	d905      	bls.n	8007e04 <find_volume+0x1cc>
 8007df8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007dfa:	3301      	adds	r3, #1
 8007dfc:	643b      	str	r3, [r7, #64]	; 0x40
 8007dfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e00:	2b03      	cmp	r3, #3
 8007e02:	d9e2      	bls.n	8007dca <find_volume+0x192>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007e04:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007e08:	2b04      	cmp	r3, #4
 8007e0a:	d101      	bne.n	8007e10 <find_volume+0x1d8>
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	e191      	b.n	8008134 <find_volume+0x4fc>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007e10:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	d901      	bls.n	8007e1c <find_volume+0x1e4>
 8007e18:	230d      	movs	r3, #13
 8007e1a:	e18b      	b.n	8008134 <find_volume+0x4fc>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e1e:	3338      	adds	r3, #56	; 0x38
 8007e20:	330b      	adds	r3, #11
 8007e22:	4618      	mov	r0, r3
 8007e24:	f7fe fbd6 	bl	80065d4 <ld_word>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	461a      	mov	r2, r3
 8007e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e2e:	899b      	ldrh	r3, [r3, #12]
 8007e30:	429a      	cmp	r2, r3
 8007e32:	d001      	beq.n	8007e38 <find_volume+0x200>
 8007e34:	230d      	movs	r3, #13
 8007e36:	e17d      	b.n	8008134 <find_volume+0x4fc>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e3a:	3338      	adds	r3, #56	; 0x38
 8007e3c:	3316      	adds	r3, #22
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f7fe fbc8 	bl	80065d4 <ld_word>
 8007e44:	4603      	mov	r3, r0
 8007e46:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007e48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d106      	bne.n	8007e5c <find_volume+0x224>
 8007e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e50:	3338      	adds	r3, #56	; 0x38
 8007e52:	3324      	adds	r3, #36	; 0x24
 8007e54:	4618      	mov	r0, r3
 8007e56:	f7fe fbd5 	bl	8006604 <ld_dword>
 8007e5a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e5e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007e60:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e64:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8007e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e6a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e6e:	789b      	ldrb	r3, [r3, #2]
 8007e70:	2b01      	cmp	r3, #1
 8007e72:	d005      	beq.n	8007e80 <find_volume+0x248>
 8007e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e76:	789b      	ldrb	r3, [r3, #2]
 8007e78:	2b02      	cmp	r3, #2
 8007e7a:	d001      	beq.n	8007e80 <find_volume+0x248>
 8007e7c:	230d      	movs	r3, #13
 8007e7e:	e159      	b.n	8008134 <find_volume+0x4fc>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e82:	789b      	ldrb	r3, [r3, #2]
 8007e84:	461a      	mov	r2, r3
 8007e86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e88:	fb02 f303 	mul.w	r3, r2, r3
 8007e8c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e94:	b29a      	uxth	r2, r3
 8007e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e98:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e9c:	895b      	ldrh	r3, [r3, #10]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d008      	beq.n	8007eb4 <find_volume+0x27c>
 8007ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ea4:	895b      	ldrh	r3, [r3, #10]
 8007ea6:	461a      	mov	r2, r3
 8007ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eaa:	895b      	ldrh	r3, [r3, #10]
 8007eac:	3b01      	subs	r3, #1
 8007eae:	4013      	ands	r3, r2
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d001      	beq.n	8007eb8 <find_volume+0x280>
 8007eb4:	230d      	movs	r3, #13
 8007eb6:	e13d      	b.n	8008134 <find_volume+0x4fc>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eba:	3338      	adds	r3, #56	; 0x38
 8007ebc:	3311      	adds	r3, #17
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f7fe fb88 	bl	80065d4 <ld_word>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	461a      	mov	r2, r3
 8007ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eca:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ece:	891b      	ldrh	r3, [r3, #8]
 8007ed0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ed2:	8992      	ldrh	r2, [r2, #12]
 8007ed4:	0952      	lsrs	r2, r2, #5
 8007ed6:	b292      	uxth	r2, r2
 8007ed8:	fbb3 f1f2 	udiv	r1, r3, r2
 8007edc:	fb01 f202 	mul.w	r2, r1, r2
 8007ee0:	1a9b      	subs	r3, r3, r2
 8007ee2:	b29b      	uxth	r3, r3
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d003      	beq.n	8007ef0 <find_volume+0x2b8>
 8007ee8:	230d      	movs	r3, #13
 8007eea:	e123      	b.n	8008134 <find_volume+0x4fc>
 8007eec:	2000258c 	.word	0x2000258c

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ef2:	3338      	adds	r3, #56	; 0x38
 8007ef4:	3313      	adds	r3, #19
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f7fe fb6c 	bl	80065d4 <ld_word>
 8007efc:	4603      	mov	r3, r0
 8007efe:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007f00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d106      	bne.n	8007f14 <find_volume+0x2dc>
 8007f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f08:	3338      	adds	r3, #56	; 0x38
 8007f0a:	3320      	adds	r3, #32
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f7fe fb79 	bl	8006604 <ld_dword>
 8007f12:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f16:	3338      	adds	r3, #56	; 0x38
 8007f18:	330e      	adds	r3, #14
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f7fe fb5a 	bl	80065d4 <ld_word>
 8007f20:	4603      	mov	r3, r0
 8007f22:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007f24:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d101      	bne.n	8007f2e <find_volume+0x2f6>
 8007f2a:	230d      	movs	r3, #13
 8007f2c:	e102      	b.n	8008134 <find_volume+0x4fc>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007f2e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007f30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f32:	4413      	add	r3, r2
 8007f34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f36:	8911      	ldrh	r1, [r2, #8]
 8007f38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f3a:	8992      	ldrh	r2, [r2, #12]
 8007f3c:	0952      	lsrs	r2, r2, #5
 8007f3e:	b292      	uxth	r2, r2
 8007f40:	fbb1 f2f2 	udiv	r2, r1, r2
 8007f44:	b292      	uxth	r2, r2
 8007f46:	4413      	add	r3, r2
 8007f48:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007f4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f4e:	429a      	cmp	r2, r3
 8007f50:	d201      	bcs.n	8007f56 <find_volume+0x31e>
 8007f52:	230d      	movs	r3, #13
 8007f54:	e0ee      	b.n	8008134 <find_volume+0x4fc>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007f56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f5a:	1ad3      	subs	r3, r2, r3
 8007f5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f5e:	8952      	ldrh	r2, [r2, #10]
 8007f60:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f64:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d101      	bne.n	8007f70 <find_volume+0x338>
 8007f6c:	230d      	movs	r3, #13
 8007f6e:	e0e1      	b.n	8008134 <find_volume+0x4fc>
		fmt = FS_FAT32;
 8007f70:	2303      	movs	r3, #3
 8007f72:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f78:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d802      	bhi.n	8007f86 <find_volume+0x34e>
 8007f80:	2302      	movs	r3, #2
 8007f82:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f88:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d802      	bhi.n	8007f96 <find_volume+0x35e>
 8007f90:	2301      	movs	r3, #1
 8007f92:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f98:	1c9a      	adds	r2, r3, #2
 8007f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f9c:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8007f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fa0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007fa2:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007fa4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007fa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007fa8:	441a      	add	r2, r3
 8007faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fac:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8007fae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fb2:	441a      	add	r2, r3
 8007fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fb6:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8007fb8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007fbc:	2b03      	cmp	r3, #3
 8007fbe:	d11e      	bne.n	8007ffe <find_volume+0x3c6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fc2:	3338      	adds	r3, #56	; 0x38
 8007fc4:	332a      	adds	r3, #42	; 0x2a
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f7fe fb04 	bl	80065d4 <ld_word>
 8007fcc:	4603      	mov	r3, r0
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d001      	beq.n	8007fd6 <find_volume+0x39e>
 8007fd2:	230d      	movs	r3, #13
 8007fd4:	e0ae      	b.n	8008134 <find_volume+0x4fc>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fd8:	891b      	ldrh	r3, [r3, #8]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d001      	beq.n	8007fe2 <find_volume+0x3aa>
 8007fde:	230d      	movs	r3, #13
 8007fe0:	e0a8      	b.n	8008134 <find_volume+0x4fc>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fe4:	3338      	adds	r3, #56	; 0x38
 8007fe6:	332c      	adds	r3, #44	; 0x2c
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f7fe fb0b 	bl	8006604 <ld_dword>
 8007fee:	4602      	mov	r2, r0
 8007ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ff2:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ff6:	69db      	ldr	r3, [r3, #28]
 8007ff8:	009b      	lsls	r3, r3, #2
 8007ffa:	647b      	str	r3, [r7, #68]	; 0x44
 8007ffc:	e01f      	b.n	800803e <find_volume+0x406>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008000:	891b      	ldrh	r3, [r3, #8]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d101      	bne.n	800800a <find_volume+0x3d2>
 8008006:	230d      	movs	r3, #13
 8008008:	e094      	b.n	8008134 <find_volume+0x4fc>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800800a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800800c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800800e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008010:	441a      	add	r2, r3
 8008012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008014:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008016:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800801a:	2b02      	cmp	r3, #2
 800801c:	d103      	bne.n	8008026 <find_volume+0x3ee>
 800801e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008020:	69db      	ldr	r3, [r3, #28]
 8008022:	005b      	lsls	r3, r3, #1
 8008024:	e00a      	b.n	800803c <find_volume+0x404>
 8008026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008028:	69da      	ldr	r2, [r3, #28]
 800802a:	4613      	mov	r3, r2
 800802c:	005b      	lsls	r3, r3, #1
 800802e:	4413      	add	r3, r2
 8008030:	085a      	lsrs	r2, r3, #1
 8008032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008034:	69db      	ldr	r3, [r3, #28]
 8008036:	f003 0301 	and.w	r3, r3, #1
 800803a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800803c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800803e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008040:	6a1a      	ldr	r2, [r3, #32]
 8008042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008044:	899b      	ldrh	r3, [r3, #12]
 8008046:	4619      	mov	r1, r3
 8008048:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800804a:	440b      	add	r3, r1
 800804c:	3b01      	subs	r3, #1
 800804e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008050:	8989      	ldrh	r1, [r1, #12]
 8008052:	fbb3 f3f1 	udiv	r3, r3, r1
 8008056:	429a      	cmp	r2, r3
 8008058:	d201      	bcs.n	800805e <find_volume+0x426>
 800805a:	230d      	movs	r3, #13
 800805c:	e06a      	b.n	8008134 <find_volume+0x4fc>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800805e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008060:	f04f 32ff 	mov.w	r2, #4294967295
 8008064:	619a      	str	r2, [r3, #24]
 8008066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008068:	699a      	ldr	r2, [r3, #24]
 800806a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800806c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800806e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008070:	2280      	movs	r2, #128	; 0x80
 8008072:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008074:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008078:	2b03      	cmp	r3, #3
 800807a:	d149      	bne.n	8008110 <find_volume+0x4d8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800807c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800807e:	3338      	adds	r3, #56	; 0x38
 8008080:	3330      	adds	r3, #48	; 0x30
 8008082:	4618      	mov	r0, r3
 8008084:	f7fe faa6 	bl	80065d4 <ld_word>
 8008088:	4603      	mov	r3, r0
 800808a:	2b01      	cmp	r3, #1
 800808c:	d140      	bne.n	8008110 <find_volume+0x4d8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800808e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008090:	3301      	adds	r3, #1
 8008092:	4619      	mov	r1, r3
 8008094:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008096:	f7fe fd7f 	bl	8006b98 <move_window>
 800809a:	4603      	mov	r3, r0
 800809c:	2b00      	cmp	r3, #0
 800809e:	d137      	bne.n	8008110 <find_volume+0x4d8>
		{
			fs->fsi_flag = 0;
 80080a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080a2:	2200      	movs	r2, #0
 80080a4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80080a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080a8:	3338      	adds	r3, #56	; 0x38
 80080aa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80080ae:	4618      	mov	r0, r3
 80080b0:	f7fe fa90 	bl	80065d4 <ld_word>
 80080b4:	4603      	mov	r3, r0
 80080b6:	461a      	mov	r2, r3
 80080b8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80080bc:	429a      	cmp	r2, r3
 80080be:	d127      	bne.n	8008110 <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80080c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080c2:	3338      	adds	r3, #56	; 0x38
 80080c4:	4618      	mov	r0, r3
 80080c6:	f7fe fa9d 	bl	8006604 <ld_dword>
 80080ca:	4603      	mov	r3, r0
 80080cc:	4a1b      	ldr	r2, [pc, #108]	; (800813c <find_volume+0x504>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d11e      	bne.n	8008110 <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80080d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080d4:	3338      	adds	r3, #56	; 0x38
 80080d6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80080da:	4618      	mov	r0, r3
 80080dc:	f7fe fa92 	bl	8006604 <ld_dword>
 80080e0:	4603      	mov	r3, r0
 80080e2:	4a17      	ldr	r2, [pc, #92]	; (8008140 <find_volume+0x508>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d113      	bne.n	8008110 <find_volume+0x4d8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80080e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ea:	3338      	adds	r3, #56	; 0x38
 80080ec:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80080f0:	4618      	mov	r0, r3
 80080f2:	f7fe fa87 	bl	8006604 <ld_dword>
 80080f6:	4602      	mov	r2, r0
 80080f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080fa:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80080fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080fe:	3338      	adds	r3, #56	; 0x38
 8008100:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8008104:	4618      	mov	r0, r3
 8008106:	f7fe fa7d 	bl	8006604 <ld_dword>
 800810a:	4602      	mov	r2, r0
 800810c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800810e:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008112:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8008116:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008118:	4b0a      	ldr	r3, [pc, #40]	; (8008144 <find_volume+0x50c>)
 800811a:	881b      	ldrh	r3, [r3, #0]
 800811c:	3301      	adds	r3, #1
 800811e:	b29a      	uxth	r2, r3
 8008120:	4b08      	ldr	r3, [pc, #32]	; (8008144 <find_volume+0x50c>)
 8008122:	801a      	strh	r2, [r3, #0]
 8008124:	4b07      	ldr	r3, [pc, #28]	; (8008144 <find_volume+0x50c>)
 8008126:	881a      	ldrh	r2, [r3, #0]
 8008128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800812a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800812c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800812e:	f7fe fccb 	bl	8006ac8 <clear_lock>
#endif
	return FR_OK;
 8008132:	2300      	movs	r3, #0
}
 8008134:	4618      	mov	r0, r3
 8008136:	3758      	adds	r7, #88	; 0x58
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}
 800813c:	41615252 	.word	0x41615252
 8008140:	61417272 	.word	0x61417272
 8008144:	20002590 	.word	0x20002590

08008148 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b084      	sub	sp, #16
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008152:	2309      	movs	r3, #9
 8008154:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d02e      	beq.n	80081ba <validate+0x72>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d02a      	beq.n	80081ba <validate+0x72>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	781b      	ldrb	r3, [r3, #0]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d025      	beq.n	80081ba <validate+0x72>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	889a      	ldrh	r2, [r3, #4]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	88db      	ldrh	r3, [r3, #6]
 8008178:	429a      	cmp	r2, r3
 800817a:	d11e      	bne.n	80081ba <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4618      	mov	r0, r3
 8008182:	f7fe fb27 	bl	80067d4 <lock_fs>
 8008186:	4603      	mov	r3, r0
 8008188:	2b00      	cmp	r3, #0
 800818a:	d014      	beq.n	80081b6 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	785b      	ldrb	r3, [r3, #1]
 8008192:	4618      	mov	r0, r3
 8008194:	f7fe f980 	bl	8006498 <disk_status>
 8008198:	4603      	mov	r3, r0
 800819a:	f003 0301 	and.w	r3, r3, #1
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d102      	bne.n	80081a8 <validate+0x60>
				res = FR_OK;
 80081a2:	2300      	movs	r3, #0
 80081a4:	73fb      	strb	r3, [r7, #15]
 80081a6:	e008      	b.n	80081ba <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	2100      	movs	r1, #0
 80081ae:	4618      	mov	r0, r3
 80081b0:	f7fe fb26 	bl	8006800 <unlock_fs>
 80081b4:	e001      	b.n	80081ba <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 80081b6:	230f      	movs	r3, #15
 80081b8:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80081ba:	7bfb      	ldrb	r3, [r7, #15]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d102      	bne.n	80081c6 <validate+0x7e>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	e000      	b.n	80081c8 <validate+0x80>
 80081c6:	2300      	movs	r3, #0
 80081c8:	683a      	ldr	r2, [r7, #0]
 80081ca:	6013      	str	r3, [r2, #0]
	return res;
 80081cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3710      	adds	r7, #16
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}
	...

080081d8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b088      	sub	sp, #32
 80081dc:	af00      	add	r7, sp, #0
 80081de:	60f8      	str	r0, [r7, #12]
 80081e0:	60b9      	str	r1, [r7, #8]
 80081e2:	4613      	mov	r3, r2
 80081e4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80081ea:	f107 0310 	add.w	r3, r7, #16
 80081ee:	4618      	mov	r0, r3
 80081f0:	f7ff fc88 	bl	8007b04 <get_ldnumber>
 80081f4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80081f6:	69fb      	ldr	r3, [r7, #28]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	da01      	bge.n	8008200 <f_mount+0x28>
 80081fc:	230b      	movs	r3, #11
 80081fe:	e048      	b.n	8008292 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008200:	4a26      	ldr	r2, [pc, #152]	; (800829c <f_mount+0xc4>)
 8008202:	69fb      	ldr	r3, [r7, #28]
 8008204:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008208:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800820a:	69bb      	ldr	r3, [r7, #24]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d00f      	beq.n	8008230 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008210:	69b8      	ldr	r0, [r7, #24]
 8008212:	f7fe fc59 	bl	8006ac8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8008216:	69bb      	ldr	r3, [r7, #24]
 8008218:	691b      	ldr	r3, [r3, #16]
 800821a:	4618      	mov	r0, r3
 800821c:	f000 fd4d 	bl	8008cba <ff_del_syncobj>
 8008220:	4603      	mov	r3, r0
 8008222:	2b00      	cmp	r3, #0
 8008224:	d101      	bne.n	800822a <f_mount+0x52>
 8008226:	2302      	movs	r3, #2
 8008228:	e033      	b.n	8008292 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800822a:	69bb      	ldr	r3, [r7, #24]
 800822c:	2200      	movs	r2, #0
 800822e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d00f      	beq.n	8008256 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	2200      	movs	r2, #0
 800823a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800823c:	69fb      	ldr	r3, [r7, #28]
 800823e:	b2da      	uxtb	r2, r3
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	3310      	adds	r3, #16
 8008244:	4619      	mov	r1, r3
 8008246:	4610      	mov	r0, r2
 8008248:	f000 fd17 	bl	8008c7a <ff_cre_syncobj>
 800824c:	4603      	mov	r3, r0
 800824e:	2b00      	cmp	r3, #0
 8008250:	d101      	bne.n	8008256 <f_mount+0x7e>
 8008252:	2302      	movs	r3, #2
 8008254:	e01d      	b.n	8008292 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008256:	68fa      	ldr	r2, [r7, #12]
 8008258:	4910      	ldr	r1, [pc, #64]	; (800829c <f_mount+0xc4>)
 800825a:	69fb      	ldr	r3, [r7, #28]
 800825c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d002      	beq.n	800826c <f_mount+0x94>
 8008266:	79fb      	ldrb	r3, [r7, #7]
 8008268:	2b01      	cmp	r3, #1
 800826a:	d001      	beq.n	8008270 <f_mount+0x98>
 800826c:	2300      	movs	r3, #0
 800826e:	e010      	b.n	8008292 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008270:	f107 010c 	add.w	r1, r7, #12
 8008274:	f107 0308 	add.w	r3, r7, #8
 8008278:	2200      	movs	r2, #0
 800827a:	4618      	mov	r0, r3
 800827c:	f7ff fcdc 	bl	8007c38 <find_volume>
 8008280:	4603      	mov	r3, r0
 8008282:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	7dfa      	ldrb	r2, [r7, #23]
 8008288:	4611      	mov	r1, r2
 800828a:	4618      	mov	r0, r3
 800828c:	f7fe fab8 	bl	8006800 <unlock_fs>
 8008290:	7dfb      	ldrb	r3, [r7, #23]
}
 8008292:	4618      	mov	r0, r3
 8008294:	3720      	adds	r7, #32
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}
 800829a:	bf00      	nop
 800829c:	2000258c 	.word	0x2000258c

080082a0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b098      	sub	sp, #96	; 0x60
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	60f8      	str	r0, [r7, #12]
 80082a8:	60b9      	str	r1, [r7, #8]
 80082aa:	4613      	mov	r3, r2
 80082ac:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d101      	bne.n	80082b8 <f_open+0x18>
 80082b4:	2309      	movs	r3, #9
 80082b6:	e1c1      	b.n	800863c <f_open+0x39c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80082b8:	79fb      	ldrb	r3, [r7, #7]
 80082ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80082be:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80082c0:	79fa      	ldrb	r2, [r7, #7]
 80082c2:	f107 0110 	add.w	r1, r7, #16
 80082c6:	f107 0308 	add.w	r3, r7, #8
 80082ca:	4618      	mov	r0, r3
 80082cc:	f7ff fcb4 	bl	8007c38 <find_volume>
 80082d0:	4603      	mov	r3, r0
 80082d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80082d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80082da:	2b00      	cmp	r3, #0
 80082dc:	f040 819e 	bne.w	800861c <f_open+0x37c>
		dj.obj.fs = fs;
 80082e0:	693b      	ldr	r3, [r7, #16]
 80082e2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80082e4:	68ba      	ldr	r2, [r7, #8]
 80082e6:	f107 0314 	add.w	r3, r7, #20
 80082ea:	4611      	mov	r1, r2
 80082ec:	4618      	mov	r0, r3
 80082ee:	f7ff fb93 	bl	8007a18 <follow_path>
 80082f2:	4603      	mov	r3, r0
 80082f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80082f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d11a      	bne.n	8008336 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008300:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008304:	b25b      	sxtb	r3, r3
 8008306:	2b00      	cmp	r3, #0
 8008308:	da03      	bge.n	8008312 <f_open+0x72>
				res = FR_INVALID_NAME;
 800830a:	2306      	movs	r3, #6
 800830c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008310:	e011      	b.n	8008336 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008312:	79fb      	ldrb	r3, [r7, #7]
 8008314:	f023 0301 	bic.w	r3, r3, #1
 8008318:	2b00      	cmp	r3, #0
 800831a:	bf14      	ite	ne
 800831c:	2301      	movne	r3, #1
 800831e:	2300      	moveq	r3, #0
 8008320:	b2db      	uxtb	r3, r3
 8008322:	461a      	mov	r2, r3
 8008324:	f107 0314 	add.w	r3, r7, #20
 8008328:	4611      	mov	r1, r2
 800832a:	4618      	mov	r0, r3
 800832c:	f7fe fa84 	bl	8006838 <chk_lock>
 8008330:	4603      	mov	r3, r0
 8008332:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008336:	79fb      	ldrb	r3, [r7, #7]
 8008338:	f003 031c 	and.w	r3, r3, #28
 800833c:	2b00      	cmp	r3, #0
 800833e:	d07e      	beq.n	800843e <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 8008340:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008344:	2b00      	cmp	r3, #0
 8008346:	d017      	beq.n	8008378 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008348:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800834c:	2b04      	cmp	r3, #4
 800834e:	d10e      	bne.n	800836e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008350:	f7fe face 	bl	80068f0 <enq_lock>
 8008354:	4603      	mov	r3, r0
 8008356:	2b00      	cmp	r3, #0
 8008358:	d006      	beq.n	8008368 <f_open+0xc8>
 800835a:	f107 0314 	add.w	r3, r7, #20
 800835e:	4618      	mov	r0, r3
 8008360:	f7ff fa34 	bl	80077cc <dir_register>
 8008364:	4603      	mov	r3, r0
 8008366:	e000      	b.n	800836a <f_open+0xca>
 8008368:	2312      	movs	r3, #18
 800836a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800836e:	79fb      	ldrb	r3, [r7, #7]
 8008370:	f043 0308 	orr.w	r3, r3, #8
 8008374:	71fb      	strb	r3, [r7, #7]
 8008376:	e010      	b.n	800839a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008378:	7ebb      	ldrb	r3, [r7, #26]
 800837a:	f003 0311 	and.w	r3, r3, #17
 800837e:	2b00      	cmp	r3, #0
 8008380:	d003      	beq.n	800838a <f_open+0xea>
					res = FR_DENIED;
 8008382:	2307      	movs	r3, #7
 8008384:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008388:	e007      	b.n	800839a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800838a:	79fb      	ldrb	r3, [r7, #7]
 800838c:	f003 0304 	and.w	r3, r3, #4
 8008390:	2b00      	cmp	r3, #0
 8008392:	d002      	beq.n	800839a <f_open+0xfa>
 8008394:	2308      	movs	r3, #8
 8008396:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800839a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d167      	bne.n	8008472 <f_open+0x1d2>
 80083a2:	79fb      	ldrb	r3, [r7, #7]
 80083a4:	f003 0308 	and.w	r3, r3, #8
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d062      	beq.n	8008472 <f_open+0x1d2>
				dw = GET_FATTIME();
 80083ac:	4ba5      	ldr	r3, [pc, #660]	; (8008644 <f_open+0x3a4>)
 80083ae:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80083b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083b2:	330e      	adds	r3, #14
 80083b4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80083b6:	4618      	mov	r0, r3
 80083b8:	f7fe f962 	bl	8006680 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80083bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083be:	3316      	adds	r3, #22
 80083c0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80083c2:	4618      	mov	r0, r3
 80083c4:	f7fe f95c 	bl	8006680 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80083c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083ca:	330b      	adds	r3, #11
 80083cc:	2220      	movs	r2, #32
 80083ce:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80083d4:	4611      	mov	r1, r2
 80083d6:	4618      	mov	r0, r3
 80083d8:	f7ff f964 	bl	80076a4 <ld_clust>
 80083dc:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80083de:	693b      	ldr	r3, [r7, #16]
 80083e0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80083e2:	2200      	movs	r2, #0
 80083e4:	4618      	mov	r0, r3
 80083e6:	f7ff f97c 	bl	80076e2 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80083ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083ec:	331c      	adds	r3, #28
 80083ee:	2100      	movs	r1, #0
 80083f0:	4618      	mov	r0, r3
 80083f2:	f7fe f945 	bl	8006680 <st_dword>
					fs->wflag = 1;
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	2201      	movs	r2, #1
 80083fa:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80083fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d037      	beq.n	8008472 <f_open+0x1d2>
						dw = fs->winsect;
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008406:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8008408:	f107 0314 	add.w	r3, r7, #20
 800840c:	2200      	movs	r2, #0
 800840e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8008410:	4618      	mov	r0, r3
 8008412:	f7fe fe6c 	bl	80070ee <remove_chain>
 8008416:	4603      	mov	r3, r0
 8008418:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800841c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008420:	2b00      	cmp	r3, #0
 8008422:	d126      	bne.n	8008472 <f_open+0x1d2>
							res = move_window(fs, dw);
 8008424:	693b      	ldr	r3, [r7, #16]
 8008426:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008428:	4618      	mov	r0, r3
 800842a:	f7fe fbb5 	bl	8006b98 <move_window>
 800842e:	4603      	mov	r3, r0
 8008430:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008434:	693b      	ldr	r3, [r7, #16]
 8008436:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008438:	3a01      	subs	r2, #1
 800843a:	615a      	str	r2, [r3, #20]
 800843c:	e019      	b.n	8008472 <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800843e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008442:	2b00      	cmp	r3, #0
 8008444:	d115      	bne.n	8008472 <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008446:	7ebb      	ldrb	r3, [r7, #26]
 8008448:	f003 0310 	and.w	r3, r3, #16
 800844c:	2b00      	cmp	r3, #0
 800844e:	d003      	beq.n	8008458 <f_open+0x1b8>
					res = FR_NO_FILE;
 8008450:	2304      	movs	r3, #4
 8008452:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008456:	e00c      	b.n	8008472 <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008458:	79fb      	ldrb	r3, [r7, #7]
 800845a:	f003 0302 	and.w	r3, r3, #2
 800845e:	2b00      	cmp	r3, #0
 8008460:	d007      	beq.n	8008472 <f_open+0x1d2>
 8008462:	7ebb      	ldrb	r3, [r7, #26]
 8008464:	f003 0301 	and.w	r3, r3, #1
 8008468:	2b00      	cmp	r3, #0
 800846a:	d002      	beq.n	8008472 <f_open+0x1d2>
						res = FR_DENIED;
 800846c:	2307      	movs	r3, #7
 800846e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8008472:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008476:	2b00      	cmp	r3, #0
 8008478:	d128      	bne.n	80084cc <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800847a:	79fb      	ldrb	r3, [r7, #7]
 800847c:	f003 0308 	and.w	r3, r3, #8
 8008480:	2b00      	cmp	r3, #0
 8008482:	d003      	beq.n	800848c <f_open+0x1ec>
				mode |= FA_MODIFIED;
 8008484:	79fb      	ldrb	r3, [r7, #7]
 8008486:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800848a:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8008494:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800849a:	79fb      	ldrb	r3, [r7, #7]
 800849c:	f023 0301 	bic.w	r3, r3, #1
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	bf14      	ite	ne
 80084a4:	2301      	movne	r3, #1
 80084a6:	2300      	moveq	r3, #0
 80084a8:	b2db      	uxtb	r3, r3
 80084aa:	461a      	mov	r2, r3
 80084ac:	f107 0314 	add.w	r3, r7, #20
 80084b0:	4611      	mov	r1, r2
 80084b2:	4618      	mov	r0, r3
 80084b4:	f7fe fa3e 	bl	8006934 <inc_lock>
 80084b8:	4602      	mov	r2, r0
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	691b      	ldr	r3, [r3, #16]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d102      	bne.n	80084cc <f_open+0x22c>
 80084c6:	2302      	movs	r3, #2
 80084c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80084cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	f040 80a3 	bne.w	800861c <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80084da:	4611      	mov	r1, r2
 80084dc:	4618      	mov	r0, r3
 80084de:	f7ff f8e1 	bl	80076a4 <ld_clust>
 80084e2:	4602      	mov	r2, r0
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80084e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084ea:	331c      	adds	r3, #28
 80084ec:	4618      	mov	r0, r3
 80084ee:	f7fe f889 	bl	8006604 <ld_dword>
 80084f2:	4602      	mov	r2, r0
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	2200      	movs	r2, #0
 80084fc:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80084fe:	693a      	ldr	r2, [r7, #16]
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	88da      	ldrh	r2, [r3, #6]
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	79fa      	ldrb	r2, [r7, #7]
 8008510:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	2200      	movs	r2, #0
 8008516:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2200      	movs	r2, #0
 800851c:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2200      	movs	r2, #0
 8008522:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	3330      	adds	r3, #48	; 0x30
 8008528:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800852c:	2100      	movs	r1, #0
 800852e:	4618      	mov	r0, r3
 8008530:	f7fe f8f3 	bl	800671a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008534:	79fb      	ldrb	r3, [r7, #7]
 8008536:	f003 0320 	and.w	r3, r3, #32
 800853a:	2b00      	cmp	r3, #0
 800853c:	d06e      	beq.n	800861c <f_open+0x37c>
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	68db      	ldr	r3, [r3, #12]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d06a      	beq.n	800861c <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	68da      	ldr	r2, [r3, #12]
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800854e:	693b      	ldr	r3, [r7, #16]
 8008550:	895b      	ldrh	r3, [r3, #10]
 8008552:	461a      	mov	r2, r3
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	899b      	ldrh	r3, [r3, #12]
 8008558:	fb02 f303 	mul.w	r3, r2, r3
 800855c:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	689b      	ldr	r3, [r3, #8]
 8008562:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	68db      	ldr	r3, [r3, #12]
 8008568:	657b      	str	r3, [r7, #84]	; 0x54
 800856a:	e016      	b.n	800859a <f_open+0x2fa>
					clst = get_fat(&fp->obj, clst);
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008570:	4618      	mov	r0, r3
 8008572:	f7fe fbce 	bl	8006d12 <get_fat>
 8008576:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8008578:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800857a:	2b01      	cmp	r3, #1
 800857c:	d802      	bhi.n	8008584 <f_open+0x2e4>
 800857e:	2302      	movs	r3, #2
 8008580:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008584:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800858a:	d102      	bne.n	8008592 <f_open+0x2f2>
 800858c:	2301      	movs	r3, #1
 800858e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008592:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008594:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008596:	1ad3      	subs	r3, r2, r3
 8008598:	657b      	str	r3, [r7, #84]	; 0x54
 800859a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d103      	bne.n	80085aa <f_open+0x30a>
 80085a2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80085a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d8e0      	bhi.n	800856c <f_open+0x2cc>
				}
				fp->clust = clst;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80085ae:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80085b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d131      	bne.n	800861c <f_open+0x37c>
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	899b      	ldrh	r3, [r3, #12]
 80085bc:	461a      	mov	r2, r3
 80085be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80085c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80085c4:	fb01 f202 	mul.w	r2, r1, r2
 80085c8:	1a9b      	subs	r3, r3, r2
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d026      	beq.n	800861c <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80085ce:	693b      	ldr	r3, [r7, #16]
 80085d0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80085d2:	4618      	mov	r0, r3
 80085d4:	f7fe fb7e 	bl	8006cd4 <clust2sect>
 80085d8:	6478      	str	r0, [r7, #68]	; 0x44
 80085da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d103      	bne.n	80085e8 <f_open+0x348>
						res = FR_INT_ERR;
 80085e0:	2302      	movs	r3, #2
 80085e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80085e6:	e019      	b.n	800861c <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	899b      	ldrh	r3, [r3, #12]
 80085ec:	461a      	mov	r2, r3
 80085ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80085f0:	fbb3 f2f2 	udiv	r2, r3, r2
 80085f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085f6:	441a      	add	r2, r3
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80085fc:	693b      	ldr	r3, [r7, #16]
 80085fe:	7858      	ldrb	r0, [r3, #1]
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	6a1a      	ldr	r2, [r3, #32]
 800860a:	2301      	movs	r3, #1
 800860c:	f7fd ff84 	bl	8006518 <disk_read>
 8008610:	4603      	mov	r3, r0
 8008612:	2b00      	cmp	r3, #0
 8008614:	d002      	beq.n	800861c <f_open+0x37c>
 8008616:	2301      	movs	r3, #1
 8008618:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800861c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008620:	2b00      	cmp	r3, #0
 8008622:	d002      	beq.n	800862a <f_open+0x38a>
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	2200      	movs	r2, #0
 8008628:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800862a:	693b      	ldr	r3, [r7, #16]
 800862c:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8008630:	4611      	mov	r1, r2
 8008632:	4618      	mov	r0, r3
 8008634:	f7fe f8e4 	bl	8006800 <unlock_fs>
 8008638:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800863c:	4618      	mov	r0, r3
 800863e:	3760      	adds	r7, #96	; 0x60
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}
 8008644:	58c40000 	.word	0x58c40000

08008648 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b08c      	sub	sp, #48	; 0x30
 800864c:	af00      	add	r7, sp, #0
 800864e:	60f8      	str	r0, [r7, #12]
 8008650:	60b9      	str	r1, [r7, #8]
 8008652:	607a      	str	r2, [r7, #4]
 8008654:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	2200      	movs	r2, #0
 800865e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	f107 0210 	add.w	r2, r7, #16
 8008666:	4611      	mov	r1, r2
 8008668:	4618      	mov	r0, r3
 800866a:	f7ff fd6d 	bl	8008148 <validate>
 800866e:	4603      	mov	r3, r0
 8008670:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008674:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008678:	2b00      	cmp	r3, #0
 800867a:	d107      	bne.n	800868c <f_write+0x44>
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	7d5b      	ldrb	r3, [r3, #21]
 8008680:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008684:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008688:	2b00      	cmp	r3, #0
 800868a:	d009      	beq.n	80086a0 <f_write+0x58>
 800868c:	693b      	ldr	r3, [r7, #16]
 800868e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8008692:	4611      	mov	r1, r2
 8008694:	4618      	mov	r0, r3
 8008696:	f7fe f8b3 	bl	8006800 <unlock_fs>
 800869a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800869e:	e192      	b.n	80089c6 <f_write+0x37e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	7d1b      	ldrb	r3, [r3, #20]
 80086a4:	f003 0302 	and.w	r3, r3, #2
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d106      	bne.n	80086ba <f_write+0x72>
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	2107      	movs	r1, #7
 80086b0:	4618      	mov	r0, r3
 80086b2:	f7fe f8a5 	bl	8006800 <unlock_fs>
 80086b6:	2307      	movs	r3, #7
 80086b8:	e185      	b.n	80089c6 <f_write+0x37e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	699a      	ldr	r2, [r3, #24]
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	441a      	add	r2, r3
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	699b      	ldr	r3, [r3, #24]
 80086c6:	429a      	cmp	r2, r3
 80086c8:	f080 816a 	bcs.w	80089a0 <f_write+0x358>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	699b      	ldr	r3, [r3, #24]
 80086d0:	43db      	mvns	r3, r3
 80086d2:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80086d4:	e164      	b.n	80089a0 <f_write+0x358>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	699b      	ldr	r3, [r3, #24]
 80086da:	693a      	ldr	r2, [r7, #16]
 80086dc:	8992      	ldrh	r2, [r2, #12]
 80086de:	fbb3 f1f2 	udiv	r1, r3, r2
 80086e2:	fb01 f202 	mul.w	r2, r1, r2
 80086e6:	1a9b      	subs	r3, r3, r2
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	f040 810f 	bne.w	800890c <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	699b      	ldr	r3, [r3, #24]
 80086f2:	693a      	ldr	r2, [r7, #16]
 80086f4:	8992      	ldrh	r2, [r2, #12]
 80086f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80086fa:	693a      	ldr	r2, [r7, #16]
 80086fc:	8952      	ldrh	r2, [r2, #10]
 80086fe:	3a01      	subs	r2, #1
 8008700:	4013      	ands	r3, r2
 8008702:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008704:	69bb      	ldr	r3, [r7, #24]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d14d      	bne.n	80087a6 <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	699b      	ldr	r3, [r3, #24]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d10c      	bne.n	800872c <f_write+0xe4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	689b      	ldr	r3, [r3, #8]
 8008716:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800871a:	2b00      	cmp	r3, #0
 800871c:	d11a      	bne.n	8008754 <f_write+0x10c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	2100      	movs	r1, #0
 8008722:	4618      	mov	r0, r3
 8008724:	f7fe fd48 	bl	80071b8 <create_chain>
 8008728:	62b8      	str	r0, [r7, #40]	; 0x28
 800872a:	e013      	b.n	8008754 <f_write+0x10c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008730:	2b00      	cmp	r3, #0
 8008732:	d007      	beq.n	8008744 <f_write+0xfc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	699b      	ldr	r3, [r3, #24]
 8008738:	4619      	mov	r1, r3
 800873a:	68f8      	ldr	r0, [r7, #12]
 800873c:	f7fe fdd4 	bl	80072e8 <clmt_clust>
 8008740:	62b8      	str	r0, [r7, #40]	; 0x28
 8008742:	e007      	b.n	8008754 <f_write+0x10c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008744:	68fa      	ldr	r2, [r7, #12]
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	69db      	ldr	r3, [r3, #28]
 800874a:	4619      	mov	r1, r3
 800874c:	4610      	mov	r0, r2
 800874e:	f7fe fd33 	bl	80071b8 <create_chain>
 8008752:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008756:	2b00      	cmp	r3, #0
 8008758:	f000 8127 	beq.w	80089aa <f_write+0x362>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800875c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800875e:	2b01      	cmp	r3, #1
 8008760:	d109      	bne.n	8008776 <f_write+0x12e>
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	2202      	movs	r2, #2
 8008766:	755a      	strb	r2, [r3, #21]
 8008768:	693b      	ldr	r3, [r7, #16]
 800876a:	2102      	movs	r1, #2
 800876c:	4618      	mov	r0, r3
 800876e:	f7fe f847 	bl	8006800 <unlock_fs>
 8008772:	2302      	movs	r3, #2
 8008774:	e127      	b.n	80089c6 <f_write+0x37e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800877c:	d109      	bne.n	8008792 <f_write+0x14a>
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	2201      	movs	r2, #1
 8008782:	755a      	strb	r2, [r3, #21]
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	2101      	movs	r1, #1
 8008788:	4618      	mov	r0, r3
 800878a:	f7fe f839 	bl	8006800 <unlock_fs>
 800878e:	2301      	movs	r3, #1
 8008790:	e119      	b.n	80089c6 <f_write+0x37e>
				fp->clust = clst;			/* Update current cluster */
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008796:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	689b      	ldr	r3, [r3, #8]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d102      	bne.n	80087a6 <f_write+0x15e>
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80087a4:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	7d1b      	ldrb	r3, [r3, #20]
 80087aa:	b25b      	sxtb	r3, r3
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	da1d      	bge.n	80087ec <f_write+0x1a4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80087b0:	693b      	ldr	r3, [r7, #16]
 80087b2:	7858      	ldrb	r0, [r3, #1]
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	6a1a      	ldr	r2, [r3, #32]
 80087be:	2301      	movs	r3, #1
 80087c0:	f7fd feca 	bl	8006558 <disk_write>
 80087c4:	4603      	mov	r3, r0
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d009      	beq.n	80087de <f_write+0x196>
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	2201      	movs	r2, #1
 80087ce:	755a      	strb	r2, [r3, #21]
 80087d0:	693b      	ldr	r3, [r7, #16]
 80087d2:	2101      	movs	r1, #1
 80087d4:	4618      	mov	r0, r3
 80087d6:	f7fe f813 	bl	8006800 <unlock_fs>
 80087da:	2301      	movs	r3, #1
 80087dc:	e0f3      	b.n	80089c6 <f_write+0x37e>
				fp->flag &= (BYTE)~FA_DIRTY;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	7d1b      	ldrb	r3, [r3, #20]
 80087e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087e6:	b2da      	uxtb	r2, r3
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80087ec:	693a      	ldr	r2, [r7, #16]
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	69db      	ldr	r3, [r3, #28]
 80087f2:	4619      	mov	r1, r3
 80087f4:	4610      	mov	r0, r2
 80087f6:	f7fe fa6d 	bl	8006cd4 <clust2sect>
 80087fa:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80087fc:	697b      	ldr	r3, [r7, #20]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d109      	bne.n	8008816 <f_write+0x1ce>
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	2202      	movs	r2, #2
 8008806:	755a      	strb	r2, [r3, #21]
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	2102      	movs	r1, #2
 800880c:	4618      	mov	r0, r3
 800880e:	f7fd fff7 	bl	8006800 <unlock_fs>
 8008812:	2302      	movs	r3, #2
 8008814:	e0d7      	b.n	80089c6 <f_write+0x37e>
			sect += csect;
 8008816:	697a      	ldr	r2, [r7, #20]
 8008818:	69bb      	ldr	r3, [r7, #24]
 800881a:	4413      	add	r3, r2
 800881c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	899b      	ldrh	r3, [r3, #12]
 8008822:	461a      	mov	r2, r3
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	fbb3 f3f2 	udiv	r3, r3, r2
 800882a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800882c:	6a3b      	ldr	r3, [r7, #32]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d048      	beq.n	80088c4 <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008832:	69ba      	ldr	r2, [r7, #24]
 8008834:	6a3b      	ldr	r3, [r7, #32]
 8008836:	4413      	add	r3, r2
 8008838:	693a      	ldr	r2, [r7, #16]
 800883a:	8952      	ldrh	r2, [r2, #10]
 800883c:	4293      	cmp	r3, r2
 800883e:	d905      	bls.n	800884c <f_write+0x204>
					cc = fs->csize - csect;
 8008840:	693b      	ldr	r3, [r7, #16]
 8008842:	895b      	ldrh	r3, [r3, #10]
 8008844:	461a      	mov	r2, r3
 8008846:	69bb      	ldr	r3, [r7, #24]
 8008848:	1ad3      	subs	r3, r2, r3
 800884a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800884c:	693b      	ldr	r3, [r7, #16]
 800884e:	7858      	ldrb	r0, [r3, #1]
 8008850:	6a3b      	ldr	r3, [r7, #32]
 8008852:	697a      	ldr	r2, [r7, #20]
 8008854:	69f9      	ldr	r1, [r7, #28]
 8008856:	f7fd fe7f 	bl	8006558 <disk_write>
 800885a:	4603      	mov	r3, r0
 800885c:	2b00      	cmp	r3, #0
 800885e:	d009      	beq.n	8008874 <f_write+0x22c>
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	2201      	movs	r2, #1
 8008864:	755a      	strb	r2, [r3, #21]
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	2101      	movs	r1, #1
 800886a:	4618      	mov	r0, r3
 800886c:	f7fd ffc8 	bl	8006800 <unlock_fs>
 8008870:	2301      	movs	r3, #1
 8008872:	e0a8      	b.n	80089c6 <f_write+0x37e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	6a1a      	ldr	r2, [r3, #32]
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	1ad3      	subs	r3, r2, r3
 800887c:	6a3a      	ldr	r2, [r7, #32]
 800887e:	429a      	cmp	r2, r3
 8008880:	d918      	bls.n	80088b4 <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	6a1a      	ldr	r2, [r3, #32]
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	1ad3      	subs	r3, r2, r3
 8008890:	693a      	ldr	r2, [r7, #16]
 8008892:	8992      	ldrh	r2, [r2, #12]
 8008894:	fb02 f303 	mul.w	r3, r2, r3
 8008898:	69fa      	ldr	r2, [r7, #28]
 800889a:	18d1      	adds	r1, r2, r3
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	899b      	ldrh	r3, [r3, #12]
 80088a0:	461a      	mov	r2, r3
 80088a2:	f7fd ff19 	bl	80066d8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	7d1b      	ldrb	r3, [r3, #20]
 80088aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088ae:	b2da      	uxtb	r2, r3
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80088b4:	693b      	ldr	r3, [r7, #16]
 80088b6:	899b      	ldrh	r3, [r3, #12]
 80088b8:	461a      	mov	r2, r3
 80088ba:	6a3b      	ldr	r3, [r7, #32]
 80088bc:	fb02 f303 	mul.w	r3, r2, r3
 80088c0:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80088c2:	e050      	b.n	8008966 <f_write+0x31e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	6a1b      	ldr	r3, [r3, #32]
 80088c8:	697a      	ldr	r2, [r7, #20]
 80088ca:	429a      	cmp	r2, r3
 80088cc:	d01b      	beq.n	8008906 <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	699a      	ldr	r2, [r3, #24]
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80088d6:	429a      	cmp	r2, r3
 80088d8:	d215      	bcs.n	8008906 <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	7858      	ldrb	r0, [r3, #1]
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80088e4:	2301      	movs	r3, #1
 80088e6:	697a      	ldr	r2, [r7, #20]
 80088e8:	f7fd fe16 	bl	8006518 <disk_read>
 80088ec:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d009      	beq.n	8008906 <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2201      	movs	r2, #1
 80088f6:	755a      	strb	r2, [r3, #21]
 80088f8:	693b      	ldr	r3, [r7, #16]
 80088fa:	2101      	movs	r1, #1
 80088fc:	4618      	mov	r0, r3
 80088fe:	f7fd ff7f 	bl	8006800 <unlock_fs>
 8008902:	2301      	movs	r3, #1
 8008904:	e05f      	b.n	80089c6 <f_write+0x37e>
			}
#endif
			fp->sect = sect;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	697a      	ldr	r2, [r7, #20]
 800890a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	899b      	ldrh	r3, [r3, #12]
 8008910:	4618      	mov	r0, r3
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	699b      	ldr	r3, [r3, #24]
 8008916:	693a      	ldr	r2, [r7, #16]
 8008918:	8992      	ldrh	r2, [r2, #12]
 800891a:	fbb3 f1f2 	udiv	r1, r3, r2
 800891e:	fb01 f202 	mul.w	r2, r1, r2
 8008922:	1a9b      	subs	r3, r3, r2
 8008924:	1ac3      	subs	r3, r0, r3
 8008926:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	429a      	cmp	r2, r3
 800892e:	d901      	bls.n	8008934 <f_write+0x2ec>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	699b      	ldr	r3, [r3, #24]
 800893e:	693a      	ldr	r2, [r7, #16]
 8008940:	8992      	ldrh	r2, [r2, #12]
 8008942:	fbb3 f0f2 	udiv	r0, r3, r2
 8008946:	fb00 f202 	mul.w	r2, r0, r2
 800894a:	1a9b      	subs	r3, r3, r2
 800894c:	440b      	add	r3, r1
 800894e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008950:	69f9      	ldr	r1, [r7, #28]
 8008952:	4618      	mov	r0, r3
 8008954:	f7fd fec0 	bl	80066d8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	7d1b      	ldrb	r3, [r3, #20]
 800895c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008960:	b2da      	uxtb	r2, r3
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008966:	69fa      	ldr	r2, [r7, #28]
 8008968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800896a:	4413      	add	r3, r2
 800896c:	61fb      	str	r3, [r7, #28]
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	699a      	ldr	r2, [r3, #24]
 8008972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008974:	441a      	add	r2, r3
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	619a      	str	r2, [r3, #24]
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	68da      	ldr	r2, [r3, #12]
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	699b      	ldr	r3, [r3, #24]
 8008982:	429a      	cmp	r2, r3
 8008984:	bf38      	it	cc
 8008986:	461a      	movcc	r2, r3
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	60da      	str	r2, [r3, #12]
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	681a      	ldr	r2, [r3, #0]
 8008990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008992:	441a      	add	r2, r3
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	601a      	str	r2, [r3, #0]
 8008998:	687a      	ldr	r2, [r7, #4]
 800899a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800899c:	1ad3      	subs	r3, r2, r3
 800899e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	f47f ae97 	bne.w	80086d6 <f_write+0x8e>
 80089a8:	e000      	b.n	80089ac <f_write+0x364>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80089aa:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	7d1b      	ldrb	r3, [r3, #20]
 80089b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089b4:	b2da      	uxtb	r2, r3
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80089ba:	693b      	ldr	r3, [r7, #16]
 80089bc:	2100      	movs	r1, #0
 80089be:	4618      	mov	r0, r3
 80089c0:	f7fd ff1e 	bl	8006800 <unlock_fs>
 80089c4:	2300      	movs	r3, #0
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	3730      	adds	r7, #48	; 0x30
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}
	...

080089d0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b086      	sub	sp, #24
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f107 0208 	add.w	r2, r7, #8
 80089de:	4611      	mov	r1, r2
 80089e0:	4618      	mov	r0, r3
 80089e2:	f7ff fbb1 	bl	8008148 <validate>
 80089e6:	4603      	mov	r3, r0
 80089e8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80089ea:	7dfb      	ldrb	r3, [r7, #23]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d16c      	bne.n	8008aca <f_sync+0xfa>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	7d1b      	ldrb	r3, [r3, #20]
 80089f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d066      	beq.n	8008aca <f_sync+0xfa>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	7d1b      	ldrb	r3, [r3, #20]
 8008a00:	b25b      	sxtb	r3, r3
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	da1a      	bge.n	8008a3c <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	7858      	ldrb	r0, [r3, #1]
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6a1a      	ldr	r2, [r3, #32]
 8008a14:	2301      	movs	r3, #1
 8008a16:	f7fd fd9f 	bl	8006558 <disk_write>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d006      	beq.n	8008a2e <f_sync+0x5e>
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	2101      	movs	r1, #1
 8008a24:	4618      	mov	r0, r3
 8008a26:	f7fd feeb 	bl	8006800 <unlock_fs>
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	e054      	b.n	8008ad8 <f_sync+0x108>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	7d1b      	ldrb	r3, [r3, #20]
 8008a32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a36:	b2da      	uxtb	r2, r3
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008a3c:	4b28      	ldr	r3, [pc, #160]	; (8008ae0 <f_sync+0x110>)
 8008a3e:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008a40:	68ba      	ldr	r2, [r7, #8]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a46:	4619      	mov	r1, r3
 8008a48:	4610      	mov	r0, r2
 8008a4a:	f7fe f8a5 	bl	8006b98 <move_window>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008a52:	7dfb      	ldrb	r3, [r7, #23]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d138      	bne.n	8008aca <f_sync+0xfa>
					dir = fp->dir_ptr;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a5c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	330b      	adds	r3, #11
 8008a62:	781a      	ldrb	r2, [r3, #0]
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	330b      	adds	r3, #11
 8008a68:	f042 0220 	orr.w	r2, r2, #32
 8008a6c:	b2d2      	uxtb	r2, r2
 8008a6e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6818      	ldr	r0, [r3, #0]
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	689b      	ldr	r3, [r3, #8]
 8008a78:	461a      	mov	r2, r3
 8008a7a:	68f9      	ldr	r1, [r7, #12]
 8008a7c:	f7fe fe31 	bl	80076e2 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	f103 021c 	add.w	r2, r3, #28
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	68db      	ldr	r3, [r3, #12]
 8008a8a:	4619      	mov	r1, r3
 8008a8c:	4610      	mov	r0, r2
 8008a8e:	f7fd fdf7 	bl	8006680 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	3316      	adds	r3, #22
 8008a96:	6939      	ldr	r1, [r7, #16]
 8008a98:	4618      	mov	r0, r3
 8008a9a:	f7fd fdf1 	bl	8006680 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	3312      	adds	r3, #18
 8008aa2:	2100      	movs	r1, #0
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	f7fd fdd0 	bl	800664a <st_word>
					fs->wflag = 1;
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	2201      	movs	r2, #1
 8008aae:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f7fe f89e 	bl	8006bf4 <sync_fs>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	7d1b      	ldrb	r3, [r3, #20]
 8008ac0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ac4:	b2da      	uxtb	r2, r3
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	7dfa      	ldrb	r2, [r7, #23]
 8008ace:	4611      	mov	r1, r2
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f7fd fe95 	bl	8006800 <unlock_fs>
 8008ad6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	3718      	adds	r7, #24
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}
 8008ae0:	58c40000 	.word	0x58c40000

08008ae4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b084      	sub	sp, #16
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f7ff ff6f 	bl	80089d0 <f_sync>
 8008af2:	4603      	mov	r3, r0
 8008af4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008af6:	7bfb      	ldrb	r3, [r7, #15]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d11d      	bne.n	8008b38 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f107 0208 	add.w	r2, r7, #8
 8008b02:	4611      	mov	r1, r2
 8008b04:	4618      	mov	r0, r3
 8008b06:	f7ff fb1f 	bl	8008148 <validate>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008b0e:	7bfb      	ldrb	r3, [r7, #15]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d111      	bne.n	8008b38 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	691b      	ldr	r3, [r3, #16]
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f7fd ff99 	bl	8006a50 <dec_lock>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008b22:	7bfb      	ldrb	r3, [r7, #15]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d102      	bne.n	8008b2e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	2100      	movs	r1, #0
 8008b32:	4618      	mov	r0, r3
 8008b34:	f7fd fe64 	bl	8006800 <unlock_fs>
#endif
		}
	}
	return res;
 8008b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3710      	adds	r7, #16
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}

08008b42 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8008b42:	b580      	push	{r7, lr}
 8008b44:	b090      	sub	sp, #64	; 0x40
 8008b46:	af00      	add	r7, sp, #0
 8008b48:	6078      	str	r0, [r7, #4]
 8008b4a:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8008b4c:	f107 010c 	add.w	r1, r7, #12
 8008b50:	1d3b      	adds	r3, r7, #4
 8008b52:	2200      	movs	r2, #0
 8008b54:	4618      	mov	r0, r3
 8008b56:	f7ff f86f 	bl	8007c38 <find_volume>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8008b60:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d11f      	bne.n	8008ba8 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008b68:	687a      	ldr	r2, [r7, #4]
 8008b6a:	f107 030c 	add.w	r3, r7, #12
 8008b6e:	4611      	mov	r1, r2
 8008b70:	4618      	mov	r0, r3
 8008b72:	f7fe ff51 	bl	8007a18 <follow_path>
 8008b76:	4603      	mov	r3, r0
 8008b78:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 8008b7c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d111      	bne.n	8008ba8 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8008b84:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008b88:	b25b      	sxtb	r3, r3
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	da03      	bge.n	8008b96 <f_stat+0x54>
				res = FR_INVALID_NAME;
 8008b8e:	2306      	movs	r3, #6
 8008b90:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8008b94:	e008      	b.n	8008ba8 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d005      	beq.n	8008ba8 <f_stat+0x66>
 8008b9c:	f107 030c 	add.w	r3, r7, #12
 8008ba0:	6839      	ldr	r1, [r7, #0]
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f7fe fe44 	bl	8007830 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8008bae:	4611      	mov	r1, r2
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	f7fd fe25 	bl	8006800 <unlock_fs>
 8008bb6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3740      	adds	r7, #64	; 0x40
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}
	...

08008bc4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b087      	sub	sp, #28
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	60f8      	str	r0, [r7, #12]
 8008bcc:	60b9      	str	r1, [r7, #8]
 8008bce:	4613      	mov	r3, r2
 8008bd0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008bda:	4b1f      	ldr	r3, [pc, #124]	; (8008c58 <FATFS_LinkDriverEx+0x94>)
 8008bdc:	7a5b      	ldrb	r3, [r3, #9]
 8008bde:	b2db      	uxtb	r3, r3
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d131      	bne.n	8008c48 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008be4:	4b1c      	ldr	r3, [pc, #112]	; (8008c58 <FATFS_LinkDriverEx+0x94>)
 8008be6:	7a5b      	ldrb	r3, [r3, #9]
 8008be8:	b2db      	uxtb	r3, r3
 8008bea:	461a      	mov	r2, r3
 8008bec:	4b1a      	ldr	r3, [pc, #104]	; (8008c58 <FATFS_LinkDriverEx+0x94>)
 8008bee:	2100      	movs	r1, #0
 8008bf0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008bf2:	4b19      	ldr	r3, [pc, #100]	; (8008c58 <FATFS_LinkDriverEx+0x94>)
 8008bf4:	7a5b      	ldrb	r3, [r3, #9]
 8008bf6:	b2db      	uxtb	r3, r3
 8008bf8:	4a17      	ldr	r2, [pc, #92]	; (8008c58 <FATFS_LinkDriverEx+0x94>)
 8008bfa:	009b      	lsls	r3, r3, #2
 8008bfc:	4413      	add	r3, r2
 8008bfe:	68fa      	ldr	r2, [r7, #12]
 8008c00:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008c02:	4b15      	ldr	r3, [pc, #84]	; (8008c58 <FATFS_LinkDriverEx+0x94>)
 8008c04:	7a5b      	ldrb	r3, [r3, #9]
 8008c06:	b2db      	uxtb	r3, r3
 8008c08:	461a      	mov	r2, r3
 8008c0a:	4b13      	ldr	r3, [pc, #76]	; (8008c58 <FATFS_LinkDriverEx+0x94>)
 8008c0c:	4413      	add	r3, r2
 8008c0e:	79fa      	ldrb	r2, [r7, #7]
 8008c10:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008c12:	4b11      	ldr	r3, [pc, #68]	; (8008c58 <FATFS_LinkDriverEx+0x94>)
 8008c14:	7a5b      	ldrb	r3, [r3, #9]
 8008c16:	b2db      	uxtb	r3, r3
 8008c18:	1c5a      	adds	r2, r3, #1
 8008c1a:	b2d1      	uxtb	r1, r2
 8008c1c:	4a0e      	ldr	r2, [pc, #56]	; (8008c58 <FATFS_LinkDriverEx+0x94>)
 8008c1e:	7251      	strb	r1, [r2, #9]
 8008c20:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008c22:	7dbb      	ldrb	r3, [r7, #22]
 8008c24:	3330      	adds	r3, #48	; 0x30
 8008c26:	b2da      	uxtb	r2, r3
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	3301      	adds	r3, #1
 8008c30:	223a      	movs	r2, #58	; 0x3a
 8008c32:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	3302      	adds	r3, #2
 8008c38:	222f      	movs	r2, #47	; 0x2f
 8008c3a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	3303      	adds	r3, #3
 8008c40:	2200      	movs	r2, #0
 8008c42:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008c44:	2300      	movs	r3, #0
 8008c46:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008c48:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	371c      	adds	r7, #28
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c54:	4770      	bx	lr
 8008c56:	bf00      	nop
 8008c58:	200025b4 	.word	0x200025b4

08008c5c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b082      	sub	sp, #8
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
 8008c64:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008c66:	2200      	movs	r2, #0
 8008c68:	6839      	ldr	r1, [r7, #0]
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f7ff ffaa 	bl	8008bc4 <FATFS_LinkDriverEx>
 8008c70:	4603      	mov	r3, r0
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	3708      	adds	r7, #8
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}

08008c7a <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8008c7a:	b580      	push	{r7, lr}
 8008c7c:	b086      	sub	sp, #24
 8008c7e:	af00      	add	r7, sp, #0
 8008c80:	4603      	mov	r3, r0
 8008c82:	6039      	str	r1, [r7, #0]
 8008c84:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 8008c86:	2300      	movs	r3, #0
 8008c88:	60fb      	str	r3, [r7, #12]
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 8008c8e:	f107 030c 	add.w	r3, r7, #12
 8008c92:	2101      	movs	r1, #1
 8008c94:	4618      	mov	r0, r3
 8008c96:	f000 f8d5 	bl	8008e44 <osSemaphoreCreate>
 8008c9a:	4602      	mov	r2, r0
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	bf14      	ite	ne
 8008ca8:	2301      	movne	r3, #1
 8008caa:	2300      	moveq	r3, #0
 8008cac:	b2db      	uxtb	r3, r3
 8008cae:	617b      	str	r3, [r7, #20]

    return ret;
 8008cb0:	697b      	ldr	r3, [r7, #20]
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3718      	adds	r7, #24
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}

08008cba <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8008cba:	b580      	push	{r7, lr}
 8008cbc:	b082      	sub	sp, #8
 8008cbe:	af00      	add	r7, sp, #0
 8008cc0:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f000 f974 	bl	8008fb0 <osSemaphoreDelete>
#endif
    return 1;
 8008cc8:	2301      	movs	r3, #1
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	3708      	adds	r7, #8
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}

08008cd2 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8008cd2:	b580      	push	{r7, lr}
 8008cd4:	b084      	sub	sp, #16
 8008cd6:	af00      	add	r7, sp, #0
 8008cd8:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 8008cde:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f000 f8e0 	bl	8008ea8 <osSemaphoreWait>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d101      	bne.n	8008cf2 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 8008cee:	2301      	movs	r3, #1
 8008cf0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3710      	adds	r7, #16
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}

08008cfc <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b082      	sub	sp, #8
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f000 f91d 	bl	8008f44 <osSemaphoreRelease>
#endif
}
 8008d0a:	bf00      	nop
 8008d0c:	3708      	adds	r7, #8
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}

08008d12 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008d12:	b480      	push	{r7}
 8008d14:	b085      	sub	sp, #20
 8008d16:	af00      	add	r7, sp, #0
 8008d18:	4603      	mov	r3, r0
 8008d1a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008d20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008d24:	2b84      	cmp	r3, #132	; 0x84
 8008d26:	d005      	beq.n	8008d34 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008d28:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	4413      	add	r3, r2
 8008d30:	3303      	adds	r3, #3
 8008d32:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008d34:	68fb      	ldr	r3, [r7, #12]
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3714      	adds	r7, #20
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d40:	4770      	bx	lr

08008d42 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8008d42:	b480      	push	{r7}
 8008d44:	b083      	sub	sp, #12
 8008d46:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d48:	f3ef 8305 	mrs	r3, IPSR
 8008d4c:	607b      	str	r3, [r7, #4]
  return(result);
 8008d4e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	bf14      	ite	ne
 8008d54:	2301      	movne	r3, #1
 8008d56:	2300      	moveq	r3, #0
 8008d58:	b2db      	uxtb	r3, r3
}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	370c      	adds	r7, #12
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d64:	4770      	bx	lr

08008d66 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008d66:	b580      	push	{r7, lr}
 8008d68:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008d6a:	f001 fbb1 	bl	800a4d0 <vTaskStartScheduler>
  
  return osOK;
 8008d6e:	2300      	movs	r3, #0
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	bd80      	pop	{r7, pc}

08008d74 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8008d78:	f001 ffde 	bl	800ad38 <xTaskGetSchedulerState>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	2b01      	cmp	r3, #1
 8008d80:	d101      	bne.n	8008d86 <osKernelRunning+0x12>
    return 0;
 8008d82:	2300      	movs	r3, #0
 8008d84:	e000      	b.n	8008d88 <osKernelRunning+0x14>
  else
    return 1;
 8008d86:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	bd80      	pop	{r7, pc}

08008d8c <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8008d90:	f7ff ffd7 	bl	8008d42 <inHandlerMode>
 8008d94:	4603      	mov	r3, r0
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d003      	beq.n	8008da2 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8008d9a:	f001 fcbd 	bl	800a718 <xTaskGetTickCountFromISR>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	e002      	b.n	8008da8 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8008da2:	f001 fca9 	bl	800a6f8 <xTaskGetTickCount>
 8008da6:	4603      	mov	r3, r0
  }
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	bd80      	pop	{r7, pc}

08008dac <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008dac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008dae:	b089      	sub	sp, #36	; 0x24
 8008db0:	af04      	add	r7, sp, #16
 8008db2:	6078      	str	r0, [r7, #4]
 8008db4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	695b      	ldr	r3, [r3, #20]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d020      	beq.n	8008e00 <osThreadCreate+0x54>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	699b      	ldr	r3, [r3, #24]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d01c      	beq.n	8008e00 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	685c      	ldr	r4, [r3, #4]
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	691e      	ldr	r6, [r3, #16]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f7ff ff9a 	bl	8008d12 <makeFreeRtosPriority>
 8008dde:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	695b      	ldr	r3, [r3, #20]
 8008de4:	687a      	ldr	r2, [r7, #4]
 8008de6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008de8:	9202      	str	r2, [sp, #8]
 8008dea:	9301      	str	r3, [sp, #4]
 8008dec:	9100      	str	r1, [sp, #0]
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	4632      	mov	r2, r6
 8008df2:	4629      	mov	r1, r5
 8008df4:	4620      	mov	r0, r4
 8008df6:	f001 f9c1 	bl	800a17c <xTaskCreateStatic>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	60fb      	str	r3, [r7, #12]
 8008dfe:	e01c      	b.n	8008e3a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	685c      	ldr	r4, [r3, #4]
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008e0c:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008e14:	4618      	mov	r0, r3
 8008e16:	f7ff ff7c 	bl	8008d12 <makeFreeRtosPriority>
 8008e1a:	4602      	mov	r2, r0
 8008e1c:	f107 030c 	add.w	r3, r7, #12
 8008e20:	9301      	str	r3, [sp, #4]
 8008e22:	9200      	str	r2, [sp, #0]
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	4632      	mov	r2, r6
 8008e28:	4629      	mov	r1, r5
 8008e2a:	4620      	mov	r0, r4
 8008e2c:	f001 fa03 	bl	800a236 <xTaskCreate>
 8008e30:	4603      	mov	r3, r0
 8008e32:	2b01      	cmp	r3, #1
 8008e34:	d001      	beq.n	8008e3a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008e36:	2300      	movs	r3, #0
 8008e38:	e000      	b.n	8008e3c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3714      	adds	r7, #20
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008e44 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b086      	sub	sp, #24
 8008e48:	af02      	add	r7, sp, #8
 8008e4a:	6078      	str	r0, [r7, #4]
 8008e4c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	685b      	ldr	r3, [r3, #4]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d00f      	beq.n	8008e76 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	2b01      	cmp	r3, #1
 8008e5a:	d10a      	bne.n	8008e72 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	685b      	ldr	r3, [r3, #4]
 8008e60:	2203      	movs	r2, #3
 8008e62:	9200      	str	r2, [sp, #0]
 8008e64:	2200      	movs	r2, #0
 8008e66:	2100      	movs	r1, #0
 8008e68:	2001      	movs	r0, #1
 8008e6a:	f000 faad 	bl	80093c8 <xQueueGenericCreateStatic>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	e016      	b.n	8008ea0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8008e72:	2300      	movs	r3, #0
 8008e74:	e014      	b.n	8008ea0 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	2b01      	cmp	r3, #1
 8008e7a:	d110      	bne.n	8008e9e <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8008e7c:	2203      	movs	r2, #3
 8008e7e:	2100      	movs	r1, #0
 8008e80:	2001      	movs	r0, #1
 8008e82:	f000 fb19 	bl	80094b8 <xQueueGenericCreate>
 8008e86:	60f8      	str	r0, [r7, #12]
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d005      	beq.n	8008e9a <osSemaphoreCreate+0x56>
 8008e8e:	2300      	movs	r3, #0
 8008e90:	2200      	movs	r2, #0
 8008e92:	2100      	movs	r1, #0
 8008e94:	68f8      	ldr	r0, [r7, #12]
 8008e96:	f000 fb69 	bl	800956c <xQueueGenericSend>
      return sema;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	e000      	b.n	8008ea0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8008e9e:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	3710      	adds	r7, #16
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}

08008ea8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b084      	sub	sp, #16
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
 8008eb0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d101      	bne.n	8008ec0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8008ebc:	2380      	movs	r3, #128	; 0x80
 8008ebe:	e03a      	b.n	8008f36 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eca:	d103      	bne.n	8008ed4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8008ecc:	f04f 33ff 	mov.w	r3, #4294967295
 8008ed0:	60fb      	str	r3, [r7, #12]
 8008ed2:	e009      	b.n	8008ee8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d006      	beq.n	8008ee8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d101      	bne.n	8008ee8 <osSemaphoreWait+0x40>
      ticks = 1;
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8008ee8:	f7ff ff2b 	bl	8008d42 <inHandlerMode>
 8008eec:	4603      	mov	r3, r0
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d017      	beq.n	8008f22 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8008ef2:	f107 0308 	add.w	r3, r7, #8
 8008ef6:	461a      	mov	r2, r3
 8008ef8:	2100      	movs	r1, #0
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f000 ff48 	bl	8009d90 <xQueueReceiveFromISR>
 8008f00:	4603      	mov	r3, r0
 8008f02:	2b01      	cmp	r3, #1
 8008f04:	d001      	beq.n	8008f0a <osSemaphoreWait+0x62>
      return osErrorOS;
 8008f06:	23ff      	movs	r3, #255	; 0xff
 8008f08:	e015      	b.n	8008f36 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d011      	beq.n	8008f34 <osSemaphoreWait+0x8c>
 8008f10:	4b0b      	ldr	r3, [pc, #44]	; (8008f40 <osSemaphoreWait+0x98>)
 8008f12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f16:	601a      	str	r2, [r3, #0]
 8008f18:	f3bf 8f4f 	dsb	sy
 8008f1c:	f3bf 8f6f 	isb	sy
 8008f20:	e008      	b.n	8008f34 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8008f22:	68f9      	ldr	r1, [r7, #12]
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f000 fe27 	bl	8009b78 <xQueueSemaphoreTake>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	2b01      	cmp	r3, #1
 8008f2e:	d001      	beq.n	8008f34 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8008f30:	23ff      	movs	r3, #255	; 0xff
 8008f32:	e000      	b.n	8008f36 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8008f34:	2300      	movs	r3, #0
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	3710      	adds	r7, #16
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd80      	pop	{r7, pc}
 8008f3e:	bf00      	nop
 8008f40:	e000ed04 	.word	0xe000ed04

08008f44 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b084      	sub	sp, #16
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8008f50:	2300      	movs	r3, #0
 8008f52:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8008f54:	f7ff fef5 	bl	8008d42 <inHandlerMode>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d016      	beq.n	8008f8c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8008f5e:	f107 0308 	add.w	r3, r7, #8
 8008f62:	4619      	mov	r1, r3
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f000 fc9a 	bl	800989e <xQueueGiveFromISR>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	2b01      	cmp	r3, #1
 8008f6e:	d001      	beq.n	8008f74 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8008f70:	23ff      	movs	r3, #255	; 0xff
 8008f72:	e017      	b.n	8008fa4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d013      	beq.n	8008fa2 <osSemaphoreRelease+0x5e>
 8008f7a:	4b0c      	ldr	r3, [pc, #48]	; (8008fac <osSemaphoreRelease+0x68>)
 8008f7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f80:	601a      	str	r2, [r3, #0]
 8008f82:	f3bf 8f4f 	dsb	sy
 8008f86:	f3bf 8f6f 	isb	sy
 8008f8a:	e00a      	b.n	8008fa2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	2200      	movs	r2, #0
 8008f90:	2100      	movs	r1, #0
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f000 faea 	bl	800956c <xQueueGenericSend>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	2b01      	cmp	r3, #1
 8008f9c:	d001      	beq.n	8008fa2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8008f9e:	23ff      	movs	r3, #255	; 0xff
 8008fa0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3710      	adds	r7, #16
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}
 8008fac:	e000ed04 	.word	0xe000ed04

08008fb0 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b082      	sub	sp, #8
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8008fb8:	f7ff fec3 	bl	8008d42 <inHandlerMode>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d001      	beq.n	8008fc6 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8008fc2:	2382      	movs	r3, #130	; 0x82
 8008fc4:	e003      	b.n	8008fce <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f000 ff62 	bl	8009e90 <vQueueDelete>

  return osOK; 
 8008fcc:	2300      	movs	r3, #0
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	3708      	adds	r7, #8
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}

08008fd6 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8008fd6:	b590      	push	{r4, r7, lr}
 8008fd8:	b085      	sub	sp, #20
 8008fda:	af02      	add	r7, sp, #8
 8008fdc:	6078      	str	r0, [r7, #4]
 8008fde:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	689b      	ldr	r3, [r3, #8]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d011      	beq.n	800900c <osMessageCreate+0x36>
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	68db      	ldr	r3, [r3, #12]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d00d      	beq.n	800900c <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6818      	ldr	r0, [r3, #0]
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6859      	ldr	r1, [r3, #4]
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	689a      	ldr	r2, [r3, #8]
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	68db      	ldr	r3, [r3, #12]
 8009000:	2400      	movs	r4, #0
 8009002:	9400      	str	r4, [sp, #0]
 8009004:	f000 f9e0 	bl	80093c8 <xQueueGenericCreateStatic>
 8009008:	4603      	mov	r3, r0
 800900a:	e008      	b.n	800901e <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6818      	ldr	r0, [r3, #0]
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	685b      	ldr	r3, [r3, #4]
 8009014:	2200      	movs	r2, #0
 8009016:	4619      	mov	r1, r3
 8009018:	f000 fa4e 	bl	80094b8 <xQueueGenericCreate>
 800901c:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800901e:	4618      	mov	r0, r3
 8009020:	370c      	adds	r7, #12
 8009022:	46bd      	mov	sp, r7
 8009024:	bd90      	pop	{r4, r7, pc}
	...

08009028 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b086      	sub	sp, #24
 800902c:	af00      	add	r7, sp, #0
 800902e:	60f8      	str	r0, [r7, #12]
 8009030:	60b9      	str	r1, [r7, #8]
 8009032:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8009034:	2300      	movs	r3, #0
 8009036:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800903c:	697b      	ldr	r3, [r7, #20]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d101      	bne.n	8009046 <osMessagePut+0x1e>
    ticks = 1;
 8009042:	2301      	movs	r3, #1
 8009044:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8009046:	f7ff fe7c 	bl	8008d42 <inHandlerMode>
 800904a:	4603      	mov	r3, r0
 800904c:	2b00      	cmp	r3, #0
 800904e:	d018      	beq.n	8009082 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8009050:	f107 0210 	add.w	r2, r7, #16
 8009054:	f107 0108 	add.w	r1, r7, #8
 8009058:	2300      	movs	r3, #0
 800905a:	68f8      	ldr	r0, [r7, #12]
 800905c:	f000 fb84 	bl	8009768 <xQueueGenericSendFromISR>
 8009060:	4603      	mov	r3, r0
 8009062:	2b01      	cmp	r3, #1
 8009064:	d001      	beq.n	800906a <osMessagePut+0x42>
      return osErrorOS;
 8009066:	23ff      	movs	r3, #255	; 0xff
 8009068:	e018      	b.n	800909c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800906a:	693b      	ldr	r3, [r7, #16]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d014      	beq.n	800909a <osMessagePut+0x72>
 8009070:	4b0c      	ldr	r3, [pc, #48]	; (80090a4 <osMessagePut+0x7c>)
 8009072:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009076:	601a      	str	r2, [r3, #0]
 8009078:	f3bf 8f4f 	dsb	sy
 800907c:	f3bf 8f6f 	isb	sy
 8009080:	e00b      	b.n	800909a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8009082:	f107 0108 	add.w	r1, r7, #8
 8009086:	2300      	movs	r3, #0
 8009088:	697a      	ldr	r2, [r7, #20]
 800908a:	68f8      	ldr	r0, [r7, #12]
 800908c:	f000 fa6e 	bl	800956c <xQueueGenericSend>
 8009090:	4603      	mov	r3, r0
 8009092:	2b01      	cmp	r3, #1
 8009094:	d001      	beq.n	800909a <osMessagePut+0x72>
      return osErrorOS;
 8009096:	23ff      	movs	r3, #255	; 0xff
 8009098:	e000      	b.n	800909c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800909a:	2300      	movs	r3, #0
}
 800909c:	4618      	mov	r0, r3
 800909e:	3718      	adds	r7, #24
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bd80      	pop	{r7, pc}
 80090a4:	e000ed04 	.word	0xe000ed04

080090a8 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80090a8:	b590      	push	{r4, r7, lr}
 80090aa:	b08b      	sub	sp, #44	; 0x2c
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	60f8      	str	r0, [r7, #12]
 80090b0:	60b9      	str	r1, [r7, #8]
 80090b2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80090b8:	2300      	movs	r3, #0
 80090ba:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d10a      	bne.n	80090d8 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80090c2:	2380      	movs	r3, #128	; 0x80
 80090c4:	617b      	str	r3, [r7, #20]
    return event;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	461c      	mov	r4, r3
 80090ca:	f107 0314 	add.w	r3, r7, #20
 80090ce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80090d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80090d6:	e054      	b.n	8009182 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80090d8:	2300      	movs	r3, #0
 80090da:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80090dc:	2300      	movs	r3, #0
 80090de:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090e6:	d103      	bne.n	80090f0 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80090e8:	f04f 33ff 	mov.w	r3, #4294967295
 80090ec:	627b      	str	r3, [r7, #36]	; 0x24
 80090ee:	e009      	b.n	8009104 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d006      	beq.n	8009104 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80090fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d101      	bne.n	8009104 <osMessageGet+0x5c>
      ticks = 1;
 8009100:	2301      	movs	r3, #1
 8009102:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8009104:	f7ff fe1d 	bl	8008d42 <inHandlerMode>
 8009108:	4603      	mov	r3, r0
 800910a:	2b00      	cmp	r3, #0
 800910c:	d01c      	beq.n	8009148 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800910e:	f107 0220 	add.w	r2, r7, #32
 8009112:	f107 0314 	add.w	r3, r7, #20
 8009116:	3304      	adds	r3, #4
 8009118:	4619      	mov	r1, r3
 800911a:	68b8      	ldr	r0, [r7, #8]
 800911c:	f000 fe38 	bl	8009d90 <xQueueReceiveFromISR>
 8009120:	4603      	mov	r3, r0
 8009122:	2b01      	cmp	r3, #1
 8009124:	d102      	bne.n	800912c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8009126:	2310      	movs	r3, #16
 8009128:	617b      	str	r3, [r7, #20]
 800912a:	e001      	b.n	8009130 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800912c:	2300      	movs	r3, #0
 800912e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009130:	6a3b      	ldr	r3, [r7, #32]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d01d      	beq.n	8009172 <osMessageGet+0xca>
 8009136:	4b15      	ldr	r3, [pc, #84]	; (800918c <osMessageGet+0xe4>)
 8009138:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800913c:	601a      	str	r2, [r3, #0]
 800913e:	f3bf 8f4f 	dsb	sy
 8009142:	f3bf 8f6f 	isb	sy
 8009146:	e014      	b.n	8009172 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8009148:	f107 0314 	add.w	r3, r7, #20
 800914c:	3304      	adds	r3, #4
 800914e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009150:	4619      	mov	r1, r3
 8009152:	68b8      	ldr	r0, [r7, #8]
 8009154:	f000 fc30 	bl	80099b8 <xQueueReceive>
 8009158:	4603      	mov	r3, r0
 800915a:	2b01      	cmp	r3, #1
 800915c:	d102      	bne.n	8009164 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800915e:	2310      	movs	r3, #16
 8009160:	617b      	str	r3, [r7, #20]
 8009162:	e006      	b.n	8009172 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8009164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009166:	2b00      	cmp	r3, #0
 8009168:	d101      	bne.n	800916e <osMessageGet+0xc6>
 800916a:	2300      	movs	r3, #0
 800916c:	e000      	b.n	8009170 <osMessageGet+0xc8>
 800916e:	2340      	movs	r3, #64	; 0x40
 8009170:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	461c      	mov	r4, r3
 8009176:	f107 0314 	add.w	r3, r7, #20
 800917a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800917e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8009182:	68f8      	ldr	r0, [r7, #12]
 8009184:	372c      	adds	r7, #44	; 0x2c
 8009186:	46bd      	mov	sp, r7
 8009188:	bd90      	pop	{r4, r7, pc}
 800918a:	bf00      	nop
 800918c:	e000ed04 	.word	0xe000ed04

08009190 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009190:	b480      	push	{r7}
 8009192:	b083      	sub	sp, #12
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f103 0208 	add.w	r2, r3, #8
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f04f 32ff 	mov.w	r2, #4294967295
 80091a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f103 0208 	add.w	r2, r3, #8
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f103 0208 	add.w	r2, r3, #8
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	2200      	movs	r2, #0
 80091c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80091c4:	bf00      	nop
 80091c6:	370c      	adds	r7, #12
 80091c8:	46bd      	mov	sp, r7
 80091ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ce:	4770      	bx	lr

080091d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80091d0:	b480      	push	{r7}
 80091d2:	b083      	sub	sp, #12
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2200      	movs	r2, #0
 80091dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80091de:	bf00      	nop
 80091e0:	370c      	adds	r7, #12
 80091e2:	46bd      	mov	sp, r7
 80091e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e8:	4770      	bx	lr

080091ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80091ea:	b480      	push	{r7}
 80091ec:	b085      	sub	sp, #20
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	6078      	str	r0, [r7, #4]
 80091f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	685b      	ldr	r3, [r3, #4]
 80091f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	68fa      	ldr	r2, [r7, #12]
 80091fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	689a      	ldr	r2, [r3, #8]
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	689b      	ldr	r3, [r3, #8]
 800920c:	683a      	ldr	r2, [r7, #0]
 800920e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	683a      	ldr	r2, [r7, #0]
 8009214:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	687a      	ldr	r2, [r7, #4]
 800921a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	1c5a      	adds	r2, r3, #1
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	601a      	str	r2, [r3, #0]
}
 8009226:	bf00      	nop
 8009228:	3714      	adds	r7, #20
 800922a:	46bd      	mov	sp, r7
 800922c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009230:	4770      	bx	lr

08009232 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009232:	b480      	push	{r7}
 8009234:	b085      	sub	sp, #20
 8009236:	af00      	add	r7, sp, #0
 8009238:	6078      	str	r0, [r7, #4]
 800923a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009248:	d103      	bne.n	8009252 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	691b      	ldr	r3, [r3, #16]
 800924e:	60fb      	str	r3, [r7, #12]
 8009250:	e00c      	b.n	800926c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	3308      	adds	r3, #8
 8009256:	60fb      	str	r3, [r7, #12]
 8009258:	e002      	b.n	8009260 <vListInsert+0x2e>
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	685b      	ldr	r3, [r3, #4]
 800925e:	60fb      	str	r3, [r7, #12]
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	685b      	ldr	r3, [r3, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	68ba      	ldr	r2, [r7, #8]
 8009268:	429a      	cmp	r2, r3
 800926a:	d2f6      	bcs.n	800925a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	685a      	ldr	r2, [r3, #4]
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	685b      	ldr	r3, [r3, #4]
 8009278:	683a      	ldr	r2, [r7, #0]
 800927a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	68fa      	ldr	r2, [r7, #12]
 8009280:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	683a      	ldr	r2, [r7, #0]
 8009286:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	687a      	ldr	r2, [r7, #4]
 800928c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	1c5a      	adds	r2, r3, #1
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	601a      	str	r2, [r3, #0]
}
 8009298:	bf00      	nop
 800929a:	3714      	adds	r7, #20
 800929c:	46bd      	mov	sp, r7
 800929e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a2:	4770      	bx	lr

080092a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80092a4:	b480      	push	{r7}
 80092a6:	b085      	sub	sp, #20
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	691b      	ldr	r3, [r3, #16]
 80092b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	685b      	ldr	r3, [r3, #4]
 80092b6:	687a      	ldr	r2, [r7, #4]
 80092b8:	6892      	ldr	r2, [r2, #8]
 80092ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	689b      	ldr	r3, [r3, #8]
 80092c0:	687a      	ldr	r2, [r7, #4]
 80092c2:	6852      	ldr	r2, [r2, #4]
 80092c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	685b      	ldr	r3, [r3, #4]
 80092ca:	687a      	ldr	r2, [r7, #4]
 80092cc:	429a      	cmp	r2, r3
 80092ce:	d103      	bne.n	80092d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	689a      	ldr	r2, [r3, #8]
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2200      	movs	r2, #0
 80092dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	1e5a      	subs	r2, r3, #1
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	3714      	adds	r7, #20
 80092f0:	46bd      	mov	sp, r7
 80092f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f6:	4770      	bx	lr

080092f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b084      	sub	sp, #16
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
 8009300:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d10a      	bne.n	8009322 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800930c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009310:	f383 8811 	msr	BASEPRI, r3
 8009314:	f3bf 8f6f 	isb	sy
 8009318:	f3bf 8f4f 	dsb	sy
 800931c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800931e:	bf00      	nop
 8009320:	e7fe      	b.n	8009320 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009322:	f002 f857 	bl	800b3d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681a      	ldr	r2, [r3, #0]
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800932e:	68f9      	ldr	r1, [r7, #12]
 8009330:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009332:	fb01 f303 	mul.w	r3, r1, r3
 8009336:	441a      	add	r2, r3
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	2200      	movs	r2, #0
 8009340:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	681a      	ldr	r2, [r3, #0]
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	681a      	ldr	r2, [r3, #0]
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009352:	3b01      	subs	r3, #1
 8009354:	68f9      	ldr	r1, [r7, #12]
 8009356:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009358:	fb01 f303 	mul.w	r3, r1, r3
 800935c:	441a      	add	r2, r3
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	22ff      	movs	r2, #255	; 0xff
 8009366:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	22ff      	movs	r2, #255	; 0xff
 800936e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d114      	bne.n	80093a2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	691b      	ldr	r3, [r3, #16]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d01a      	beq.n	80093b6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	3310      	adds	r3, #16
 8009384:	4618      	mov	r0, r3
 8009386:	f001 fb17 	bl	800a9b8 <xTaskRemoveFromEventList>
 800938a:	4603      	mov	r3, r0
 800938c:	2b00      	cmp	r3, #0
 800938e:	d012      	beq.n	80093b6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009390:	4b0c      	ldr	r3, [pc, #48]	; (80093c4 <xQueueGenericReset+0xcc>)
 8009392:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009396:	601a      	str	r2, [r3, #0]
 8009398:	f3bf 8f4f 	dsb	sy
 800939c:	f3bf 8f6f 	isb	sy
 80093a0:	e009      	b.n	80093b6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	3310      	adds	r3, #16
 80093a6:	4618      	mov	r0, r3
 80093a8:	f7ff fef2 	bl	8009190 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	3324      	adds	r3, #36	; 0x24
 80093b0:	4618      	mov	r0, r3
 80093b2:	f7ff feed 	bl	8009190 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80093b6:	f002 f83d 	bl	800b434 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80093ba:	2301      	movs	r3, #1
}
 80093bc:	4618      	mov	r0, r3
 80093be:	3710      	adds	r7, #16
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}
 80093c4:	e000ed04 	.word	0xe000ed04

080093c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b08e      	sub	sp, #56	; 0x38
 80093cc:	af02      	add	r7, sp, #8
 80093ce:	60f8      	str	r0, [r7, #12]
 80093d0:	60b9      	str	r1, [r7, #8]
 80093d2:	607a      	str	r2, [r7, #4]
 80093d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d10a      	bne.n	80093f2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80093dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093e0:	f383 8811 	msr	BASEPRI, r3
 80093e4:	f3bf 8f6f 	isb	sy
 80093e8:	f3bf 8f4f 	dsb	sy
 80093ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80093ee:	bf00      	nop
 80093f0:	e7fe      	b.n	80093f0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d10a      	bne.n	800940e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80093f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093fc:	f383 8811 	msr	BASEPRI, r3
 8009400:	f3bf 8f6f 	isb	sy
 8009404:	f3bf 8f4f 	dsb	sy
 8009408:	627b      	str	r3, [r7, #36]	; 0x24
}
 800940a:	bf00      	nop
 800940c:	e7fe      	b.n	800940c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d002      	beq.n	800941a <xQueueGenericCreateStatic+0x52>
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d001      	beq.n	800941e <xQueueGenericCreateStatic+0x56>
 800941a:	2301      	movs	r3, #1
 800941c:	e000      	b.n	8009420 <xQueueGenericCreateStatic+0x58>
 800941e:	2300      	movs	r3, #0
 8009420:	2b00      	cmp	r3, #0
 8009422:	d10a      	bne.n	800943a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009428:	f383 8811 	msr	BASEPRI, r3
 800942c:	f3bf 8f6f 	isb	sy
 8009430:	f3bf 8f4f 	dsb	sy
 8009434:	623b      	str	r3, [r7, #32]
}
 8009436:	bf00      	nop
 8009438:	e7fe      	b.n	8009438 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d102      	bne.n	8009446 <xQueueGenericCreateStatic+0x7e>
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d101      	bne.n	800944a <xQueueGenericCreateStatic+0x82>
 8009446:	2301      	movs	r3, #1
 8009448:	e000      	b.n	800944c <xQueueGenericCreateStatic+0x84>
 800944a:	2300      	movs	r3, #0
 800944c:	2b00      	cmp	r3, #0
 800944e:	d10a      	bne.n	8009466 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009454:	f383 8811 	msr	BASEPRI, r3
 8009458:	f3bf 8f6f 	isb	sy
 800945c:	f3bf 8f4f 	dsb	sy
 8009460:	61fb      	str	r3, [r7, #28]
}
 8009462:	bf00      	nop
 8009464:	e7fe      	b.n	8009464 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009466:	2348      	movs	r3, #72	; 0x48
 8009468:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	2b48      	cmp	r3, #72	; 0x48
 800946e:	d00a      	beq.n	8009486 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009474:	f383 8811 	msr	BASEPRI, r3
 8009478:	f3bf 8f6f 	isb	sy
 800947c:	f3bf 8f4f 	dsb	sy
 8009480:	61bb      	str	r3, [r7, #24]
}
 8009482:	bf00      	nop
 8009484:	e7fe      	b.n	8009484 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009486:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800948c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800948e:	2b00      	cmp	r3, #0
 8009490:	d00d      	beq.n	80094ae <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009494:	2201      	movs	r2, #1
 8009496:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800949a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800949e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094a0:	9300      	str	r3, [sp, #0]
 80094a2:	4613      	mov	r3, r2
 80094a4:	687a      	ldr	r2, [r7, #4]
 80094a6:	68b9      	ldr	r1, [r7, #8]
 80094a8:	68f8      	ldr	r0, [r7, #12]
 80094aa:	f000 f83f 	bl	800952c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80094ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80094b0:	4618      	mov	r0, r3
 80094b2:	3730      	adds	r7, #48	; 0x30
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bd80      	pop	{r7, pc}

080094b8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b08a      	sub	sp, #40	; 0x28
 80094bc:	af02      	add	r7, sp, #8
 80094be:	60f8      	str	r0, [r7, #12]
 80094c0:	60b9      	str	r1, [r7, #8]
 80094c2:	4613      	mov	r3, r2
 80094c4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d10a      	bne.n	80094e2 <xQueueGenericCreate+0x2a>
	__asm volatile
 80094cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094d0:	f383 8811 	msr	BASEPRI, r3
 80094d4:	f3bf 8f6f 	isb	sy
 80094d8:	f3bf 8f4f 	dsb	sy
 80094dc:	613b      	str	r3, [r7, #16]
}
 80094de:	bf00      	nop
 80094e0:	e7fe      	b.n	80094e0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	68ba      	ldr	r2, [r7, #8]
 80094e6:	fb02 f303 	mul.w	r3, r2, r3
 80094ea:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80094ec:	69fb      	ldr	r3, [r7, #28]
 80094ee:	3348      	adds	r3, #72	; 0x48
 80094f0:	4618      	mov	r0, r3
 80094f2:	f002 f891 	bl	800b618 <pvPortMalloc>
 80094f6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80094f8:	69bb      	ldr	r3, [r7, #24]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d011      	beq.n	8009522 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80094fe:	69bb      	ldr	r3, [r7, #24]
 8009500:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009502:	697b      	ldr	r3, [r7, #20]
 8009504:	3348      	adds	r3, #72	; 0x48
 8009506:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009508:	69bb      	ldr	r3, [r7, #24]
 800950a:	2200      	movs	r2, #0
 800950c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009510:	79fa      	ldrb	r2, [r7, #7]
 8009512:	69bb      	ldr	r3, [r7, #24]
 8009514:	9300      	str	r3, [sp, #0]
 8009516:	4613      	mov	r3, r2
 8009518:	697a      	ldr	r2, [r7, #20]
 800951a:	68b9      	ldr	r1, [r7, #8]
 800951c:	68f8      	ldr	r0, [r7, #12]
 800951e:	f000 f805 	bl	800952c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009522:	69bb      	ldr	r3, [r7, #24]
	}
 8009524:	4618      	mov	r0, r3
 8009526:	3720      	adds	r7, #32
 8009528:	46bd      	mov	sp, r7
 800952a:	bd80      	pop	{r7, pc}

0800952c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b084      	sub	sp, #16
 8009530:	af00      	add	r7, sp, #0
 8009532:	60f8      	str	r0, [r7, #12]
 8009534:	60b9      	str	r1, [r7, #8]
 8009536:	607a      	str	r2, [r7, #4]
 8009538:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d103      	bne.n	8009548 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009540:	69bb      	ldr	r3, [r7, #24]
 8009542:	69ba      	ldr	r2, [r7, #24]
 8009544:	601a      	str	r2, [r3, #0]
 8009546:	e002      	b.n	800954e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009548:	69bb      	ldr	r3, [r7, #24]
 800954a:	687a      	ldr	r2, [r7, #4]
 800954c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800954e:	69bb      	ldr	r3, [r7, #24]
 8009550:	68fa      	ldr	r2, [r7, #12]
 8009552:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009554:	69bb      	ldr	r3, [r7, #24]
 8009556:	68ba      	ldr	r2, [r7, #8]
 8009558:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800955a:	2101      	movs	r1, #1
 800955c:	69b8      	ldr	r0, [r7, #24]
 800955e:	f7ff fecb 	bl	80092f8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009562:	bf00      	nop
 8009564:	3710      	adds	r7, #16
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}
	...

0800956c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b08e      	sub	sp, #56	; 0x38
 8009570:	af00      	add	r7, sp, #0
 8009572:	60f8      	str	r0, [r7, #12]
 8009574:	60b9      	str	r1, [r7, #8]
 8009576:	607a      	str	r2, [r7, #4]
 8009578:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800957a:	2300      	movs	r3, #0
 800957c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009584:	2b00      	cmp	r3, #0
 8009586:	d10a      	bne.n	800959e <xQueueGenericSend+0x32>
	__asm volatile
 8009588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800958c:	f383 8811 	msr	BASEPRI, r3
 8009590:	f3bf 8f6f 	isb	sy
 8009594:	f3bf 8f4f 	dsb	sy
 8009598:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800959a:	bf00      	nop
 800959c:	e7fe      	b.n	800959c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d103      	bne.n	80095ac <xQueueGenericSend+0x40>
 80095a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d101      	bne.n	80095b0 <xQueueGenericSend+0x44>
 80095ac:	2301      	movs	r3, #1
 80095ae:	e000      	b.n	80095b2 <xQueueGenericSend+0x46>
 80095b0:	2300      	movs	r3, #0
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d10a      	bne.n	80095cc <xQueueGenericSend+0x60>
	__asm volatile
 80095b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ba:	f383 8811 	msr	BASEPRI, r3
 80095be:	f3bf 8f6f 	isb	sy
 80095c2:	f3bf 8f4f 	dsb	sy
 80095c6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80095c8:	bf00      	nop
 80095ca:	e7fe      	b.n	80095ca <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	2b02      	cmp	r3, #2
 80095d0:	d103      	bne.n	80095da <xQueueGenericSend+0x6e>
 80095d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095d6:	2b01      	cmp	r3, #1
 80095d8:	d101      	bne.n	80095de <xQueueGenericSend+0x72>
 80095da:	2301      	movs	r3, #1
 80095dc:	e000      	b.n	80095e0 <xQueueGenericSend+0x74>
 80095de:	2300      	movs	r3, #0
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d10a      	bne.n	80095fa <xQueueGenericSend+0x8e>
	__asm volatile
 80095e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e8:	f383 8811 	msr	BASEPRI, r3
 80095ec:	f3bf 8f6f 	isb	sy
 80095f0:	f3bf 8f4f 	dsb	sy
 80095f4:	623b      	str	r3, [r7, #32]
}
 80095f6:	bf00      	nop
 80095f8:	e7fe      	b.n	80095f8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80095fa:	f001 fb9d 	bl	800ad38 <xTaskGetSchedulerState>
 80095fe:	4603      	mov	r3, r0
 8009600:	2b00      	cmp	r3, #0
 8009602:	d102      	bne.n	800960a <xQueueGenericSend+0x9e>
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d101      	bne.n	800960e <xQueueGenericSend+0xa2>
 800960a:	2301      	movs	r3, #1
 800960c:	e000      	b.n	8009610 <xQueueGenericSend+0xa4>
 800960e:	2300      	movs	r3, #0
 8009610:	2b00      	cmp	r3, #0
 8009612:	d10a      	bne.n	800962a <xQueueGenericSend+0xbe>
	__asm volatile
 8009614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009618:	f383 8811 	msr	BASEPRI, r3
 800961c:	f3bf 8f6f 	isb	sy
 8009620:	f3bf 8f4f 	dsb	sy
 8009624:	61fb      	str	r3, [r7, #28]
}
 8009626:	bf00      	nop
 8009628:	e7fe      	b.n	8009628 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800962a:	f001 fed3 	bl	800b3d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800962e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009630:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009636:	429a      	cmp	r2, r3
 8009638:	d302      	bcc.n	8009640 <xQueueGenericSend+0xd4>
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	2b02      	cmp	r3, #2
 800963e:	d129      	bne.n	8009694 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009640:	683a      	ldr	r2, [r7, #0]
 8009642:	68b9      	ldr	r1, [r7, #8]
 8009644:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009646:	f000 fc5e 	bl	8009f06 <prvCopyDataToQueue>
 800964a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800964c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800964e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009650:	2b00      	cmp	r3, #0
 8009652:	d010      	beq.n	8009676 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009656:	3324      	adds	r3, #36	; 0x24
 8009658:	4618      	mov	r0, r3
 800965a:	f001 f9ad 	bl	800a9b8 <xTaskRemoveFromEventList>
 800965e:	4603      	mov	r3, r0
 8009660:	2b00      	cmp	r3, #0
 8009662:	d013      	beq.n	800968c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009664:	4b3f      	ldr	r3, [pc, #252]	; (8009764 <xQueueGenericSend+0x1f8>)
 8009666:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800966a:	601a      	str	r2, [r3, #0]
 800966c:	f3bf 8f4f 	dsb	sy
 8009670:	f3bf 8f6f 	isb	sy
 8009674:	e00a      	b.n	800968c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009678:	2b00      	cmp	r3, #0
 800967a:	d007      	beq.n	800968c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800967c:	4b39      	ldr	r3, [pc, #228]	; (8009764 <xQueueGenericSend+0x1f8>)
 800967e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009682:	601a      	str	r2, [r3, #0]
 8009684:	f3bf 8f4f 	dsb	sy
 8009688:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800968c:	f001 fed2 	bl	800b434 <vPortExitCritical>
				return pdPASS;
 8009690:	2301      	movs	r3, #1
 8009692:	e063      	b.n	800975c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d103      	bne.n	80096a2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800969a:	f001 fecb 	bl	800b434 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800969e:	2300      	movs	r3, #0
 80096a0:	e05c      	b.n	800975c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80096a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d106      	bne.n	80096b6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80096a8:	f107 0314 	add.w	r3, r7, #20
 80096ac:	4618      	mov	r0, r3
 80096ae:	f001 f9e5 	bl	800aa7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80096b2:	2301      	movs	r3, #1
 80096b4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80096b6:	f001 febd 	bl	800b434 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80096ba:	f000 ff73 	bl	800a5a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80096be:	f001 fe89 	bl	800b3d4 <vPortEnterCritical>
 80096c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80096c8:	b25b      	sxtb	r3, r3
 80096ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096ce:	d103      	bne.n	80096d8 <xQueueGenericSend+0x16c>
 80096d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096d2:	2200      	movs	r2, #0
 80096d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80096d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80096de:	b25b      	sxtb	r3, r3
 80096e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096e4:	d103      	bne.n	80096ee <xQueueGenericSend+0x182>
 80096e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096e8:	2200      	movs	r2, #0
 80096ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80096ee:	f001 fea1 	bl	800b434 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80096f2:	1d3a      	adds	r2, r7, #4
 80096f4:	f107 0314 	add.w	r3, r7, #20
 80096f8:	4611      	mov	r1, r2
 80096fa:	4618      	mov	r0, r3
 80096fc:	f001 f9d4 	bl	800aaa8 <xTaskCheckForTimeOut>
 8009700:	4603      	mov	r3, r0
 8009702:	2b00      	cmp	r3, #0
 8009704:	d124      	bne.n	8009750 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009706:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009708:	f000 fcf5 	bl	800a0f6 <prvIsQueueFull>
 800970c:	4603      	mov	r3, r0
 800970e:	2b00      	cmp	r3, #0
 8009710:	d018      	beq.n	8009744 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009714:	3310      	adds	r3, #16
 8009716:	687a      	ldr	r2, [r7, #4]
 8009718:	4611      	mov	r1, r2
 800971a:	4618      	mov	r0, r3
 800971c:	f001 f928 	bl	800a970 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009720:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009722:	f000 fc80 	bl	800a026 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009726:	f000 ff4b 	bl	800a5c0 <xTaskResumeAll>
 800972a:	4603      	mov	r3, r0
 800972c:	2b00      	cmp	r3, #0
 800972e:	f47f af7c 	bne.w	800962a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009732:	4b0c      	ldr	r3, [pc, #48]	; (8009764 <xQueueGenericSend+0x1f8>)
 8009734:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009738:	601a      	str	r2, [r3, #0]
 800973a:	f3bf 8f4f 	dsb	sy
 800973e:	f3bf 8f6f 	isb	sy
 8009742:	e772      	b.n	800962a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009744:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009746:	f000 fc6e 	bl	800a026 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800974a:	f000 ff39 	bl	800a5c0 <xTaskResumeAll>
 800974e:	e76c      	b.n	800962a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009750:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009752:	f000 fc68 	bl	800a026 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009756:	f000 ff33 	bl	800a5c0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800975a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800975c:	4618      	mov	r0, r3
 800975e:	3738      	adds	r7, #56	; 0x38
 8009760:	46bd      	mov	sp, r7
 8009762:	bd80      	pop	{r7, pc}
 8009764:	e000ed04 	.word	0xe000ed04

08009768 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b090      	sub	sp, #64	; 0x40
 800976c:	af00      	add	r7, sp, #0
 800976e:	60f8      	str	r0, [r7, #12]
 8009770:	60b9      	str	r1, [r7, #8]
 8009772:	607a      	str	r2, [r7, #4]
 8009774:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800977a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800977c:	2b00      	cmp	r3, #0
 800977e:	d10a      	bne.n	8009796 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009784:	f383 8811 	msr	BASEPRI, r3
 8009788:	f3bf 8f6f 	isb	sy
 800978c:	f3bf 8f4f 	dsb	sy
 8009790:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009792:	bf00      	nop
 8009794:	e7fe      	b.n	8009794 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009796:	68bb      	ldr	r3, [r7, #8]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d103      	bne.n	80097a4 <xQueueGenericSendFromISR+0x3c>
 800979c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800979e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d101      	bne.n	80097a8 <xQueueGenericSendFromISR+0x40>
 80097a4:	2301      	movs	r3, #1
 80097a6:	e000      	b.n	80097aa <xQueueGenericSendFromISR+0x42>
 80097a8:	2300      	movs	r3, #0
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d10a      	bne.n	80097c4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80097ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097b2:	f383 8811 	msr	BASEPRI, r3
 80097b6:	f3bf 8f6f 	isb	sy
 80097ba:	f3bf 8f4f 	dsb	sy
 80097be:	627b      	str	r3, [r7, #36]	; 0x24
}
 80097c0:	bf00      	nop
 80097c2:	e7fe      	b.n	80097c2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	2b02      	cmp	r3, #2
 80097c8:	d103      	bne.n	80097d2 <xQueueGenericSendFromISR+0x6a>
 80097ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097ce:	2b01      	cmp	r3, #1
 80097d0:	d101      	bne.n	80097d6 <xQueueGenericSendFromISR+0x6e>
 80097d2:	2301      	movs	r3, #1
 80097d4:	e000      	b.n	80097d8 <xQueueGenericSendFromISR+0x70>
 80097d6:	2300      	movs	r3, #0
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d10a      	bne.n	80097f2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80097dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097e0:	f383 8811 	msr	BASEPRI, r3
 80097e4:	f3bf 8f6f 	isb	sy
 80097e8:	f3bf 8f4f 	dsb	sy
 80097ec:	623b      	str	r3, [r7, #32]
}
 80097ee:	bf00      	nop
 80097f0:	e7fe      	b.n	80097f0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80097f2:	f001 fed1 	bl	800b598 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80097f6:	f3ef 8211 	mrs	r2, BASEPRI
 80097fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097fe:	f383 8811 	msr	BASEPRI, r3
 8009802:	f3bf 8f6f 	isb	sy
 8009806:	f3bf 8f4f 	dsb	sy
 800980a:	61fa      	str	r2, [r7, #28]
 800980c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800980e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009810:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009814:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800981a:	429a      	cmp	r2, r3
 800981c:	d302      	bcc.n	8009824 <xQueueGenericSendFromISR+0xbc>
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	2b02      	cmp	r3, #2
 8009822:	d12f      	bne.n	8009884 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009826:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800982a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800982e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009832:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009834:	683a      	ldr	r2, [r7, #0]
 8009836:	68b9      	ldr	r1, [r7, #8]
 8009838:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800983a:	f000 fb64 	bl	8009f06 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800983e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009846:	d112      	bne.n	800986e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800984a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800984c:	2b00      	cmp	r3, #0
 800984e:	d016      	beq.n	800987e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009852:	3324      	adds	r3, #36	; 0x24
 8009854:	4618      	mov	r0, r3
 8009856:	f001 f8af 	bl	800a9b8 <xTaskRemoveFromEventList>
 800985a:	4603      	mov	r3, r0
 800985c:	2b00      	cmp	r3, #0
 800985e:	d00e      	beq.n	800987e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d00b      	beq.n	800987e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2201      	movs	r2, #1
 800986a:	601a      	str	r2, [r3, #0]
 800986c:	e007      	b.n	800987e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800986e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009872:	3301      	adds	r3, #1
 8009874:	b2db      	uxtb	r3, r3
 8009876:	b25a      	sxtb	r2, r3
 8009878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800987a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800987e:	2301      	movs	r3, #1
 8009880:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009882:	e001      	b.n	8009888 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009884:	2300      	movs	r3, #0
 8009886:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800988a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800988c:	697b      	ldr	r3, [r7, #20]
 800988e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009892:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009894:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009896:	4618      	mov	r0, r3
 8009898:	3740      	adds	r7, #64	; 0x40
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}

0800989e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800989e:	b580      	push	{r7, lr}
 80098a0:	b08e      	sub	sp, #56	; 0x38
 80098a2:	af00      	add	r7, sp, #0
 80098a4:	6078      	str	r0, [r7, #4]
 80098a6:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80098ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d10a      	bne.n	80098c8 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80098b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098b6:	f383 8811 	msr	BASEPRI, r3
 80098ba:	f3bf 8f6f 	isb	sy
 80098be:	f3bf 8f4f 	dsb	sy
 80098c2:	623b      	str	r3, [r7, #32]
}
 80098c4:	bf00      	nop
 80098c6:	e7fe      	b.n	80098c6 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80098c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d00a      	beq.n	80098e6 <xQueueGiveFromISR+0x48>
	__asm volatile
 80098d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098d4:	f383 8811 	msr	BASEPRI, r3
 80098d8:	f3bf 8f6f 	isb	sy
 80098dc:	f3bf 8f4f 	dsb	sy
 80098e0:	61fb      	str	r3, [r7, #28]
}
 80098e2:	bf00      	nop
 80098e4:	e7fe      	b.n	80098e4 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80098e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d103      	bne.n	80098f6 <xQueueGiveFromISR+0x58>
 80098ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098f0:	689b      	ldr	r3, [r3, #8]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d101      	bne.n	80098fa <xQueueGiveFromISR+0x5c>
 80098f6:	2301      	movs	r3, #1
 80098f8:	e000      	b.n	80098fc <xQueueGiveFromISR+0x5e>
 80098fa:	2300      	movs	r3, #0
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d10a      	bne.n	8009916 <xQueueGiveFromISR+0x78>
	__asm volatile
 8009900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009904:	f383 8811 	msr	BASEPRI, r3
 8009908:	f3bf 8f6f 	isb	sy
 800990c:	f3bf 8f4f 	dsb	sy
 8009910:	61bb      	str	r3, [r7, #24]
}
 8009912:	bf00      	nop
 8009914:	e7fe      	b.n	8009914 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009916:	f001 fe3f 	bl	800b598 <vPortValidateInterruptPriority>
	__asm volatile
 800991a:	f3ef 8211 	mrs	r2, BASEPRI
 800991e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009922:	f383 8811 	msr	BASEPRI, r3
 8009926:	f3bf 8f6f 	isb	sy
 800992a:	f3bf 8f4f 	dsb	sy
 800992e:	617a      	str	r2, [r7, #20]
 8009930:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009932:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009934:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800993a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800993c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800993e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009940:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009942:	429a      	cmp	r2, r3
 8009944:	d22b      	bcs.n	800999e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009948:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800994c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009952:	1c5a      	adds	r2, r3, #1
 8009954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009956:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009958:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800995c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009960:	d112      	bne.n	8009988 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009966:	2b00      	cmp	r3, #0
 8009968:	d016      	beq.n	8009998 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800996a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800996c:	3324      	adds	r3, #36	; 0x24
 800996e:	4618      	mov	r0, r3
 8009970:	f001 f822 	bl	800a9b8 <xTaskRemoveFromEventList>
 8009974:	4603      	mov	r3, r0
 8009976:	2b00      	cmp	r3, #0
 8009978:	d00e      	beq.n	8009998 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d00b      	beq.n	8009998 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	2201      	movs	r2, #1
 8009984:	601a      	str	r2, [r3, #0]
 8009986:	e007      	b.n	8009998 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009988:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800998c:	3301      	adds	r3, #1
 800998e:	b2db      	uxtb	r3, r3
 8009990:	b25a      	sxtb	r2, r3
 8009992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009994:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009998:	2301      	movs	r3, #1
 800999a:	637b      	str	r3, [r7, #52]	; 0x34
 800999c:	e001      	b.n	80099a2 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800999e:	2300      	movs	r3, #0
 80099a0:	637b      	str	r3, [r7, #52]	; 0x34
 80099a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099a4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	f383 8811 	msr	BASEPRI, r3
}
 80099ac:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80099ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80099b0:	4618      	mov	r0, r3
 80099b2:	3738      	adds	r7, #56	; 0x38
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd80      	pop	{r7, pc}

080099b8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b08c      	sub	sp, #48	; 0x30
 80099bc:	af00      	add	r7, sp, #0
 80099be:	60f8      	str	r0, [r7, #12]
 80099c0:	60b9      	str	r1, [r7, #8]
 80099c2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80099c4:	2300      	movs	r3, #0
 80099c6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80099cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d10a      	bne.n	80099e8 <xQueueReceive+0x30>
	__asm volatile
 80099d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099d6:	f383 8811 	msr	BASEPRI, r3
 80099da:	f3bf 8f6f 	isb	sy
 80099de:	f3bf 8f4f 	dsb	sy
 80099e2:	623b      	str	r3, [r7, #32]
}
 80099e4:	bf00      	nop
 80099e6:	e7fe      	b.n	80099e6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d103      	bne.n	80099f6 <xQueueReceive+0x3e>
 80099ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d101      	bne.n	80099fa <xQueueReceive+0x42>
 80099f6:	2301      	movs	r3, #1
 80099f8:	e000      	b.n	80099fc <xQueueReceive+0x44>
 80099fa:	2300      	movs	r3, #0
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d10a      	bne.n	8009a16 <xQueueReceive+0x5e>
	__asm volatile
 8009a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a04:	f383 8811 	msr	BASEPRI, r3
 8009a08:	f3bf 8f6f 	isb	sy
 8009a0c:	f3bf 8f4f 	dsb	sy
 8009a10:	61fb      	str	r3, [r7, #28]
}
 8009a12:	bf00      	nop
 8009a14:	e7fe      	b.n	8009a14 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009a16:	f001 f98f 	bl	800ad38 <xTaskGetSchedulerState>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d102      	bne.n	8009a26 <xQueueReceive+0x6e>
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d101      	bne.n	8009a2a <xQueueReceive+0x72>
 8009a26:	2301      	movs	r3, #1
 8009a28:	e000      	b.n	8009a2c <xQueueReceive+0x74>
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d10a      	bne.n	8009a46 <xQueueReceive+0x8e>
	__asm volatile
 8009a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a34:	f383 8811 	msr	BASEPRI, r3
 8009a38:	f3bf 8f6f 	isb	sy
 8009a3c:	f3bf 8f4f 	dsb	sy
 8009a40:	61bb      	str	r3, [r7, #24]
}
 8009a42:	bf00      	nop
 8009a44:	e7fe      	b.n	8009a44 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009a46:	f001 fcc5 	bl	800b3d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a4e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d01f      	beq.n	8009a96 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009a56:	68b9      	ldr	r1, [r7, #8]
 8009a58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a5a:	f000 fabe 	bl	8009fda <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a60:	1e5a      	subs	r2, r3, #1
 8009a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a64:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a68:	691b      	ldr	r3, [r3, #16]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d00f      	beq.n	8009a8e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a70:	3310      	adds	r3, #16
 8009a72:	4618      	mov	r0, r3
 8009a74:	f000 ffa0 	bl	800a9b8 <xTaskRemoveFromEventList>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d007      	beq.n	8009a8e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009a7e:	4b3d      	ldr	r3, [pc, #244]	; (8009b74 <xQueueReceive+0x1bc>)
 8009a80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a84:	601a      	str	r2, [r3, #0]
 8009a86:	f3bf 8f4f 	dsb	sy
 8009a8a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009a8e:	f001 fcd1 	bl	800b434 <vPortExitCritical>
				return pdPASS;
 8009a92:	2301      	movs	r3, #1
 8009a94:	e069      	b.n	8009b6a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d103      	bne.n	8009aa4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009a9c:	f001 fcca 	bl	800b434 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	e062      	b.n	8009b6a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d106      	bne.n	8009ab8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009aaa:	f107 0310 	add.w	r3, r7, #16
 8009aae:	4618      	mov	r0, r3
 8009ab0:	f000 ffe4 	bl	800aa7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009ab8:	f001 fcbc 	bl	800b434 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009abc:	f000 fd72 	bl	800a5a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009ac0:	f001 fc88 	bl	800b3d4 <vPortEnterCritical>
 8009ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ac6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009aca:	b25b      	sxtb	r3, r3
 8009acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ad0:	d103      	bne.n	8009ada <xQueueReceive+0x122>
 8009ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009adc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009ae0:	b25b      	sxtb	r3, r3
 8009ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ae6:	d103      	bne.n	8009af0 <xQueueReceive+0x138>
 8009ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aea:	2200      	movs	r2, #0
 8009aec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009af0:	f001 fca0 	bl	800b434 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009af4:	1d3a      	adds	r2, r7, #4
 8009af6:	f107 0310 	add.w	r3, r7, #16
 8009afa:	4611      	mov	r1, r2
 8009afc:	4618      	mov	r0, r3
 8009afe:	f000 ffd3 	bl	800aaa8 <xTaskCheckForTimeOut>
 8009b02:	4603      	mov	r3, r0
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d123      	bne.n	8009b50 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009b08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b0a:	f000 fade 	bl	800a0ca <prvIsQueueEmpty>
 8009b0e:	4603      	mov	r3, r0
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d017      	beq.n	8009b44 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b16:	3324      	adds	r3, #36	; 0x24
 8009b18:	687a      	ldr	r2, [r7, #4]
 8009b1a:	4611      	mov	r1, r2
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	f000 ff27 	bl	800a970 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009b22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b24:	f000 fa7f 	bl	800a026 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009b28:	f000 fd4a 	bl	800a5c0 <xTaskResumeAll>
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d189      	bne.n	8009a46 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009b32:	4b10      	ldr	r3, [pc, #64]	; (8009b74 <xQueueReceive+0x1bc>)
 8009b34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b38:	601a      	str	r2, [r3, #0]
 8009b3a:	f3bf 8f4f 	dsb	sy
 8009b3e:	f3bf 8f6f 	isb	sy
 8009b42:	e780      	b.n	8009a46 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009b44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b46:	f000 fa6e 	bl	800a026 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009b4a:	f000 fd39 	bl	800a5c0 <xTaskResumeAll>
 8009b4e:	e77a      	b.n	8009a46 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009b50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b52:	f000 fa68 	bl	800a026 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009b56:	f000 fd33 	bl	800a5c0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009b5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b5c:	f000 fab5 	bl	800a0ca <prvIsQueueEmpty>
 8009b60:	4603      	mov	r3, r0
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	f43f af6f 	beq.w	8009a46 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009b68:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	3730      	adds	r7, #48	; 0x30
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}
 8009b72:	bf00      	nop
 8009b74:	e000ed04 	.word	0xe000ed04

08009b78 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b08e      	sub	sp, #56	; 0x38
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
 8009b80:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009b82:	2300      	movs	r3, #0
 8009b84:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d10a      	bne.n	8009baa <xQueueSemaphoreTake+0x32>
	__asm volatile
 8009b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b98:	f383 8811 	msr	BASEPRI, r3
 8009b9c:	f3bf 8f6f 	isb	sy
 8009ba0:	f3bf 8f4f 	dsb	sy
 8009ba4:	623b      	str	r3, [r7, #32]
}
 8009ba6:	bf00      	nop
 8009ba8:	e7fe      	b.n	8009ba8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d00a      	beq.n	8009bc8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8009bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bb6:	f383 8811 	msr	BASEPRI, r3
 8009bba:	f3bf 8f6f 	isb	sy
 8009bbe:	f3bf 8f4f 	dsb	sy
 8009bc2:	61fb      	str	r3, [r7, #28]
}
 8009bc4:	bf00      	nop
 8009bc6:	e7fe      	b.n	8009bc6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009bc8:	f001 f8b6 	bl	800ad38 <xTaskGetSchedulerState>
 8009bcc:	4603      	mov	r3, r0
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d102      	bne.n	8009bd8 <xQueueSemaphoreTake+0x60>
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d101      	bne.n	8009bdc <xQueueSemaphoreTake+0x64>
 8009bd8:	2301      	movs	r3, #1
 8009bda:	e000      	b.n	8009bde <xQueueSemaphoreTake+0x66>
 8009bdc:	2300      	movs	r3, #0
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d10a      	bne.n	8009bf8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8009be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be6:	f383 8811 	msr	BASEPRI, r3
 8009bea:	f3bf 8f6f 	isb	sy
 8009bee:	f3bf 8f4f 	dsb	sy
 8009bf2:	61bb      	str	r3, [r7, #24]
}
 8009bf4:	bf00      	nop
 8009bf6:	e7fe      	b.n	8009bf6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009bf8:	f001 fbec 	bl	800b3d4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c00:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d024      	beq.n	8009c52 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c0a:	1e5a      	subs	r2, r3, #1
 8009c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c0e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d104      	bne.n	8009c22 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009c18:	f001 fa36 	bl	800b088 <pvTaskIncrementMutexHeldCount>
 8009c1c:	4602      	mov	r2, r0
 8009c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c20:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c24:	691b      	ldr	r3, [r3, #16]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d00f      	beq.n	8009c4a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c2c:	3310      	adds	r3, #16
 8009c2e:	4618      	mov	r0, r3
 8009c30:	f000 fec2 	bl	800a9b8 <xTaskRemoveFromEventList>
 8009c34:	4603      	mov	r3, r0
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d007      	beq.n	8009c4a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009c3a:	4b54      	ldr	r3, [pc, #336]	; (8009d8c <xQueueSemaphoreTake+0x214>)
 8009c3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c40:	601a      	str	r2, [r3, #0]
 8009c42:	f3bf 8f4f 	dsb	sy
 8009c46:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009c4a:	f001 fbf3 	bl	800b434 <vPortExitCritical>
				return pdPASS;
 8009c4e:	2301      	movs	r3, #1
 8009c50:	e097      	b.n	8009d82 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d111      	bne.n	8009c7c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d00a      	beq.n	8009c74 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8009c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c62:	f383 8811 	msr	BASEPRI, r3
 8009c66:	f3bf 8f6f 	isb	sy
 8009c6a:	f3bf 8f4f 	dsb	sy
 8009c6e:	617b      	str	r3, [r7, #20]
}
 8009c70:	bf00      	nop
 8009c72:	e7fe      	b.n	8009c72 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009c74:	f001 fbde 	bl	800b434 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009c78:	2300      	movs	r3, #0
 8009c7a:	e082      	b.n	8009d82 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009c7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d106      	bne.n	8009c90 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009c82:	f107 030c 	add.w	r3, r7, #12
 8009c86:	4618      	mov	r0, r3
 8009c88:	f000 fef8 	bl	800aa7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009c90:	f001 fbd0 	bl	800b434 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009c94:	f000 fc86 	bl	800a5a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009c98:	f001 fb9c 	bl	800b3d4 <vPortEnterCritical>
 8009c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009ca2:	b25b      	sxtb	r3, r3
 8009ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ca8:	d103      	bne.n	8009cb2 <xQueueSemaphoreTake+0x13a>
 8009caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cac:	2200      	movs	r2, #0
 8009cae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009cb8:	b25b      	sxtb	r3, r3
 8009cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cbe:	d103      	bne.n	8009cc8 <xQueueSemaphoreTake+0x150>
 8009cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009cc8:	f001 fbb4 	bl	800b434 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009ccc:	463a      	mov	r2, r7
 8009cce:	f107 030c 	add.w	r3, r7, #12
 8009cd2:	4611      	mov	r1, r2
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	f000 fee7 	bl	800aaa8 <xTaskCheckForTimeOut>
 8009cda:	4603      	mov	r3, r0
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d132      	bne.n	8009d46 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009ce0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009ce2:	f000 f9f2 	bl	800a0ca <prvIsQueueEmpty>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d026      	beq.n	8009d3a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d109      	bne.n	8009d08 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8009cf4:	f001 fb6e 	bl	800b3d4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cfa:	689b      	ldr	r3, [r3, #8]
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	f001 f839 	bl	800ad74 <xTaskPriorityInherit>
 8009d02:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009d04:	f001 fb96 	bl	800b434 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d0a:	3324      	adds	r3, #36	; 0x24
 8009d0c:	683a      	ldr	r2, [r7, #0]
 8009d0e:	4611      	mov	r1, r2
 8009d10:	4618      	mov	r0, r3
 8009d12:	f000 fe2d 	bl	800a970 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009d16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009d18:	f000 f985 	bl	800a026 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009d1c:	f000 fc50 	bl	800a5c0 <xTaskResumeAll>
 8009d20:	4603      	mov	r3, r0
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	f47f af68 	bne.w	8009bf8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8009d28:	4b18      	ldr	r3, [pc, #96]	; (8009d8c <xQueueSemaphoreTake+0x214>)
 8009d2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d2e:	601a      	str	r2, [r3, #0]
 8009d30:	f3bf 8f4f 	dsb	sy
 8009d34:	f3bf 8f6f 	isb	sy
 8009d38:	e75e      	b.n	8009bf8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009d3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009d3c:	f000 f973 	bl	800a026 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009d40:	f000 fc3e 	bl	800a5c0 <xTaskResumeAll>
 8009d44:	e758      	b.n	8009bf8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009d46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009d48:	f000 f96d 	bl	800a026 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009d4c:	f000 fc38 	bl	800a5c0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009d50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009d52:	f000 f9ba 	bl	800a0ca <prvIsQueueEmpty>
 8009d56:	4603      	mov	r3, r0
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	f43f af4d 	beq.w	8009bf8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d00d      	beq.n	8009d80 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8009d64:	f001 fb36 	bl	800b3d4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009d68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009d6a:	f000 f8b4 	bl	8009ed6 <prvGetDisinheritPriorityAfterTimeout>
 8009d6e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d72:	689b      	ldr	r3, [r3, #8]
 8009d74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009d76:	4618      	mov	r0, r3
 8009d78:	f001 f8f8 	bl	800af6c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009d7c:	f001 fb5a 	bl	800b434 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009d80:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009d82:	4618      	mov	r0, r3
 8009d84:	3738      	adds	r7, #56	; 0x38
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}
 8009d8a:	bf00      	nop
 8009d8c:	e000ed04 	.word	0xe000ed04

08009d90 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b08e      	sub	sp, #56	; 0x38
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	60f8      	str	r0, [r7, #12]
 8009d98:	60b9      	str	r1, [r7, #8]
 8009d9a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d10a      	bne.n	8009dbc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8009da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009daa:	f383 8811 	msr	BASEPRI, r3
 8009dae:	f3bf 8f6f 	isb	sy
 8009db2:	f3bf 8f4f 	dsb	sy
 8009db6:	623b      	str	r3, [r7, #32]
}
 8009db8:	bf00      	nop
 8009dba:	e7fe      	b.n	8009dba <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d103      	bne.n	8009dca <xQueueReceiveFromISR+0x3a>
 8009dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d101      	bne.n	8009dce <xQueueReceiveFromISR+0x3e>
 8009dca:	2301      	movs	r3, #1
 8009dcc:	e000      	b.n	8009dd0 <xQueueReceiveFromISR+0x40>
 8009dce:	2300      	movs	r3, #0
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d10a      	bne.n	8009dea <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8009dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dd8:	f383 8811 	msr	BASEPRI, r3
 8009ddc:	f3bf 8f6f 	isb	sy
 8009de0:	f3bf 8f4f 	dsb	sy
 8009de4:	61fb      	str	r3, [r7, #28]
}
 8009de6:	bf00      	nop
 8009de8:	e7fe      	b.n	8009de8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009dea:	f001 fbd5 	bl	800b598 <vPortValidateInterruptPriority>
	__asm volatile
 8009dee:	f3ef 8211 	mrs	r2, BASEPRI
 8009df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009df6:	f383 8811 	msr	BASEPRI, r3
 8009dfa:	f3bf 8f6f 	isb	sy
 8009dfe:	f3bf 8f4f 	dsb	sy
 8009e02:	61ba      	str	r2, [r7, #24]
 8009e04:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009e06:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009e08:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e0e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d02f      	beq.n	8009e76 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009e1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009e20:	68b9      	ldr	r1, [r7, #8]
 8009e22:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e24:	f000 f8d9 	bl	8009fda <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e2a:	1e5a      	subs	r2, r3, #1
 8009e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e2e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009e30:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e38:	d112      	bne.n	8009e60 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e3c:	691b      	ldr	r3, [r3, #16]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d016      	beq.n	8009e70 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e44:	3310      	adds	r3, #16
 8009e46:	4618      	mov	r0, r3
 8009e48:	f000 fdb6 	bl	800a9b8 <xTaskRemoveFromEventList>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d00e      	beq.n	8009e70 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d00b      	beq.n	8009e70 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2201      	movs	r2, #1
 8009e5c:	601a      	str	r2, [r3, #0]
 8009e5e:	e007      	b.n	8009e70 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009e60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e64:	3301      	adds	r3, #1
 8009e66:	b2db      	uxtb	r3, r3
 8009e68:	b25a      	sxtb	r2, r3
 8009e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009e70:	2301      	movs	r3, #1
 8009e72:	637b      	str	r3, [r7, #52]	; 0x34
 8009e74:	e001      	b.n	8009e7a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8009e76:	2300      	movs	r3, #0
 8009e78:	637b      	str	r3, [r7, #52]	; 0x34
 8009e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e7c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009e7e:	693b      	ldr	r3, [r7, #16]
 8009e80:	f383 8811 	msr	BASEPRI, r3
}
 8009e84:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009e88:	4618      	mov	r0, r3
 8009e8a:	3738      	adds	r7, #56	; 0x38
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	bd80      	pop	{r7, pc}

08009e90 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b084      	sub	sp, #16
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d10a      	bne.n	8009eb8 <vQueueDelete+0x28>
	__asm volatile
 8009ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ea6:	f383 8811 	msr	BASEPRI, r3
 8009eaa:	f3bf 8f6f 	isb	sy
 8009eae:	f3bf 8f4f 	dsb	sy
 8009eb2:	60bb      	str	r3, [r7, #8]
}
 8009eb4:	bf00      	nop
 8009eb6:	e7fe      	b.n	8009eb6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8009eb8:	68f8      	ldr	r0, [r7, #12]
 8009eba:	f000 f935 	bl	800a128 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d102      	bne.n	8009ece <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8009ec8:	68f8      	ldr	r0, [r7, #12]
 8009eca:	f001 fc71 	bl	800b7b0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8009ece:	bf00      	nop
 8009ed0:	3710      	adds	r7, #16
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}

08009ed6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009ed6:	b480      	push	{r7}
 8009ed8:	b085      	sub	sp, #20
 8009eda:	af00      	add	r7, sp, #0
 8009edc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d006      	beq.n	8009ef4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f1c3 0307 	rsb	r3, r3, #7
 8009ef0:	60fb      	str	r3, [r7, #12]
 8009ef2:	e001      	b.n	8009ef8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
	}
 8009efa:	4618      	mov	r0, r3
 8009efc:	3714      	adds	r7, #20
 8009efe:	46bd      	mov	sp, r7
 8009f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f04:	4770      	bx	lr

08009f06 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009f06:	b580      	push	{r7, lr}
 8009f08:	b086      	sub	sp, #24
 8009f0a:	af00      	add	r7, sp, #0
 8009f0c:	60f8      	str	r0, [r7, #12]
 8009f0e:	60b9      	str	r1, [r7, #8]
 8009f10:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009f12:	2300      	movs	r3, #0
 8009f14:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f1a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d10d      	bne.n	8009f40 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d14d      	bne.n	8009fc8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	689b      	ldr	r3, [r3, #8]
 8009f30:	4618      	mov	r0, r3
 8009f32:	f000 ff95 	bl	800ae60 <xTaskPriorityDisinherit>
 8009f36:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	609a      	str	r2, [r3, #8]
 8009f3e:	e043      	b.n	8009fc8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d119      	bne.n	8009f7a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	6858      	ldr	r0, [r3, #4]
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f4e:	461a      	mov	r2, r3
 8009f50:	68b9      	ldr	r1, [r7, #8]
 8009f52:	f001 feb3 	bl	800bcbc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	685a      	ldr	r2, [r3, #4]
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f5e:	441a      	add	r2, r3
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	685a      	ldr	r2, [r3, #4]
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	689b      	ldr	r3, [r3, #8]
 8009f6c:	429a      	cmp	r2, r3
 8009f6e:	d32b      	bcc.n	8009fc8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	681a      	ldr	r2, [r3, #0]
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	605a      	str	r2, [r3, #4]
 8009f78:	e026      	b.n	8009fc8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	68d8      	ldr	r0, [r3, #12]
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f82:	461a      	mov	r2, r3
 8009f84:	68b9      	ldr	r1, [r7, #8]
 8009f86:	f001 fe99 	bl	800bcbc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	68da      	ldr	r2, [r3, #12]
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f92:	425b      	negs	r3, r3
 8009f94:	441a      	add	r2, r3
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	68da      	ldr	r2, [r3, #12]
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	429a      	cmp	r2, r3
 8009fa4:	d207      	bcs.n	8009fb6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	689a      	ldr	r2, [r3, #8]
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fae:	425b      	negs	r3, r3
 8009fb0:	441a      	add	r2, r3
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2b02      	cmp	r3, #2
 8009fba:	d105      	bne.n	8009fc8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009fbc:	693b      	ldr	r3, [r7, #16]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d002      	beq.n	8009fc8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009fc2:	693b      	ldr	r3, [r7, #16]
 8009fc4:	3b01      	subs	r3, #1
 8009fc6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009fc8:	693b      	ldr	r3, [r7, #16]
 8009fca:	1c5a      	adds	r2, r3, #1
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009fd0:	697b      	ldr	r3, [r7, #20]
}
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	3718      	adds	r7, #24
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}

08009fda <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009fda:	b580      	push	{r7, lr}
 8009fdc:	b082      	sub	sp, #8
 8009fde:	af00      	add	r7, sp, #0
 8009fe0:	6078      	str	r0, [r7, #4]
 8009fe2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d018      	beq.n	800a01e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	68da      	ldr	r2, [r3, #12]
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ff4:	441a      	add	r2, r3
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	68da      	ldr	r2, [r3, #12]
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	689b      	ldr	r3, [r3, #8]
 800a002:	429a      	cmp	r2, r3
 800a004:	d303      	bcc.n	800a00e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681a      	ldr	r2, [r3, #0]
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	68d9      	ldr	r1, [r3, #12]
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a016:	461a      	mov	r2, r3
 800a018:	6838      	ldr	r0, [r7, #0]
 800a01a:	f001 fe4f 	bl	800bcbc <memcpy>
	}
}
 800a01e:	bf00      	nop
 800a020:	3708      	adds	r7, #8
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}

0800a026 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a026:	b580      	push	{r7, lr}
 800a028:	b084      	sub	sp, #16
 800a02a:	af00      	add	r7, sp, #0
 800a02c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a02e:	f001 f9d1 	bl	800b3d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a038:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a03a:	e011      	b.n	800a060 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a040:	2b00      	cmp	r3, #0
 800a042:	d012      	beq.n	800a06a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	3324      	adds	r3, #36	; 0x24
 800a048:	4618      	mov	r0, r3
 800a04a:	f000 fcb5 	bl	800a9b8 <xTaskRemoveFromEventList>
 800a04e:	4603      	mov	r3, r0
 800a050:	2b00      	cmp	r3, #0
 800a052:	d001      	beq.n	800a058 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a054:	f000 fd8a 	bl	800ab6c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a058:	7bfb      	ldrb	r3, [r7, #15]
 800a05a:	3b01      	subs	r3, #1
 800a05c:	b2db      	uxtb	r3, r3
 800a05e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a060:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a064:	2b00      	cmp	r3, #0
 800a066:	dce9      	bgt.n	800a03c <prvUnlockQueue+0x16>
 800a068:	e000      	b.n	800a06c <prvUnlockQueue+0x46>
					break;
 800a06a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	22ff      	movs	r2, #255	; 0xff
 800a070:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a074:	f001 f9de 	bl	800b434 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a078:	f001 f9ac 	bl	800b3d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a082:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a084:	e011      	b.n	800a0aa <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	691b      	ldr	r3, [r3, #16]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d012      	beq.n	800a0b4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	3310      	adds	r3, #16
 800a092:	4618      	mov	r0, r3
 800a094:	f000 fc90 	bl	800a9b8 <xTaskRemoveFromEventList>
 800a098:	4603      	mov	r3, r0
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d001      	beq.n	800a0a2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a09e:	f000 fd65 	bl	800ab6c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a0a2:	7bbb      	ldrb	r3, [r7, #14]
 800a0a4:	3b01      	subs	r3, #1
 800a0a6:	b2db      	uxtb	r3, r3
 800a0a8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a0aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	dce9      	bgt.n	800a086 <prvUnlockQueue+0x60>
 800a0b2:	e000      	b.n	800a0b6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a0b4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	22ff      	movs	r2, #255	; 0xff
 800a0ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a0be:	f001 f9b9 	bl	800b434 <vPortExitCritical>
}
 800a0c2:	bf00      	nop
 800a0c4:	3710      	adds	r7, #16
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}

0800a0ca <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a0ca:	b580      	push	{r7, lr}
 800a0cc:	b084      	sub	sp, #16
 800a0ce:	af00      	add	r7, sp, #0
 800a0d0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a0d2:	f001 f97f 	bl	800b3d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d102      	bne.n	800a0e4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a0de:	2301      	movs	r3, #1
 800a0e0:	60fb      	str	r3, [r7, #12]
 800a0e2:	e001      	b.n	800a0e8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a0e8:	f001 f9a4 	bl	800b434 <vPortExitCritical>

	return xReturn;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
}
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	3710      	adds	r7, #16
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}

0800a0f6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a0f6:	b580      	push	{r7, lr}
 800a0f8:	b084      	sub	sp, #16
 800a0fa:	af00      	add	r7, sp, #0
 800a0fc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a0fe:	f001 f969 	bl	800b3d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a10a:	429a      	cmp	r2, r3
 800a10c:	d102      	bne.n	800a114 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a10e:	2301      	movs	r3, #1
 800a110:	60fb      	str	r3, [r7, #12]
 800a112:	e001      	b.n	800a118 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a114:	2300      	movs	r3, #0
 800a116:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a118:	f001 f98c 	bl	800b434 <vPortExitCritical>

	return xReturn;
 800a11c:	68fb      	ldr	r3, [r7, #12]
}
 800a11e:	4618      	mov	r0, r3
 800a120:	3710      	adds	r7, #16
 800a122:	46bd      	mov	sp, r7
 800a124:	bd80      	pop	{r7, pc}
	...

0800a128 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800a128:	b480      	push	{r7}
 800a12a:	b085      	sub	sp, #20
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a130:	2300      	movs	r3, #0
 800a132:	60fb      	str	r3, [r7, #12]
 800a134:	e016      	b.n	800a164 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a136:	4a10      	ldr	r2, [pc, #64]	; (800a178 <vQueueUnregisterQueue+0x50>)
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	00db      	lsls	r3, r3, #3
 800a13c:	4413      	add	r3, r2
 800a13e:	685b      	ldr	r3, [r3, #4]
 800a140:	687a      	ldr	r2, [r7, #4]
 800a142:	429a      	cmp	r2, r3
 800a144:	d10b      	bne.n	800a15e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a146:	4a0c      	ldr	r2, [pc, #48]	; (800a178 <vQueueUnregisterQueue+0x50>)
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	2100      	movs	r1, #0
 800a14c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a150:	4a09      	ldr	r2, [pc, #36]	; (800a178 <vQueueUnregisterQueue+0x50>)
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	00db      	lsls	r3, r3, #3
 800a156:	4413      	add	r3, r2
 800a158:	2200      	movs	r2, #0
 800a15a:	605a      	str	r2, [r3, #4]
				break;
 800a15c:	e006      	b.n	800a16c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	3301      	adds	r3, #1
 800a162:	60fb      	str	r3, [r7, #12]
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	2b07      	cmp	r3, #7
 800a168:	d9e5      	bls.n	800a136 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a16a:	bf00      	nop
 800a16c:	bf00      	nop
 800a16e:	3714      	adds	r7, #20
 800a170:	46bd      	mov	sp, r7
 800a172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a176:	4770      	bx	lr
 800a178:	200025c0 	.word	0x200025c0

0800a17c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b08e      	sub	sp, #56	; 0x38
 800a180:	af04      	add	r7, sp, #16
 800a182:	60f8      	str	r0, [r7, #12]
 800a184:	60b9      	str	r1, [r7, #8]
 800a186:	607a      	str	r2, [r7, #4]
 800a188:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a18a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d10a      	bne.n	800a1a6 <xTaskCreateStatic+0x2a>
	__asm volatile
 800a190:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a194:	f383 8811 	msr	BASEPRI, r3
 800a198:	f3bf 8f6f 	isb	sy
 800a19c:	f3bf 8f4f 	dsb	sy
 800a1a0:	623b      	str	r3, [r7, #32]
}
 800a1a2:	bf00      	nop
 800a1a4:	e7fe      	b.n	800a1a4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a1a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d10a      	bne.n	800a1c2 <xTaskCreateStatic+0x46>
	__asm volatile
 800a1ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1b0:	f383 8811 	msr	BASEPRI, r3
 800a1b4:	f3bf 8f6f 	isb	sy
 800a1b8:	f3bf 8f4f 	dsb	sy
 800a1bc:	61fb      	str	r3, [r7, #28]
}
 800a1be:	bf00      	nop
 800a1c0:	e7fe      	b.n	800a1c0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a1c2:	23a0      	movs	r3, #160	; 0xa0
 800a1c4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a1c6:	693b      	ldr	r3, [r7, #16]
 800a1c8:	2ba0      	cmp	r3, #160	; 0xa0
 800a1ca:	d00a      	beq.n	800a1e2 <xTaskCreateStatic+0x66>
	__asm volatile
 800a1cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1d0:	f383 8811 	msr	BASEPRI, r3
 800a1d4:	f3bf 8f6f 	isb	sy
 800a1d8:	f3bf 8f4f 	dsb	sy
 800a1dc:	61bb      	str	r3, [r7, #24]
}
 800a1de:	bf00      	nop
 800a1e0:	e7fe      	b.n	800a1e0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a1e2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a1e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d01e      	beq.n	800a228 <xTaskCreateStatic+0xac>
 800a1ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d01b      	beq.n	800a228 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a1f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1f2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a1f8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1fc:	2202      	movs	r2, #2
 800a1fe:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a202:	2300      	movs	r3, #0
 800a204:	9303      	str	r3, [sp, #12]
 800a206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a208:	9302      	str	r3, [sp, #8]
 800a20a:	f107 0314 	add.w	r3, r7, #20
 800a20e:	9301      	str	r3, [sp, #4]
 800a210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a212:	9300      	str	r3, [sp, #0]
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	687a      	ldr	r2, [r7, #4]
 800a218:	68b9      	ldr	r1, [r7, #8]
 800a21a:	68f8      	ldr	r0, [r7, #12]
 800a21c:	f000 f850 	bl	800a2c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a220:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a222:	f000 f8eb 	bl	800a3fc <prvAddNewTaskToReadyList>
 800a226:	e001      	b.n	800a22c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a228:	2300      	movs	r3, #0
 800a22a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a22c:	697b      	ldr	r3, [r7, #20]
	}
 800a22e:	4618      	mov	r0, r3
 800a230:	3728      	adds	r7, #40	; 0x28
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}

0800a236 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a236:	b580      	push	{r7, lr}
 800a238:	b08c      	sub	sp, #48	; 0x30
 800a23a:	af04      	add	r7, sp, #16
 800a23c:	60f8      	str	r0, [r7, #12]
 800a23e:	60b9      	str	r1, [r7, #8]
 800a240:	603b      	str	r3, [r7, #0]
 800a242:	4613      	mov	r3, r2
 800a244:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a246:	88fb      	ldrh	r3, [r7, #6]
 800a248:	009b      	lsls	r3, r3, #2
 800a24a:	4618      	mov	r0, r3
 800a24c:	f001 f9e4 	bl	800b618 <pvPortMalloc>
 800a250:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a252:	697b      	ldr	r3, [r7, #20]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d00e      	beq.n	800a276 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a258:	20a0      	movs	r0, #160	; 0xa0
 800a25a:	f001 f9dd 	bl	800b618 <pvPortMalloc>
 800a25e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a260:	69fb      	ldr	r3, [r7, #28]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d003      	beq.n	800a26e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a266:	69fb      	ldr	r3, [r7, #28]
 800a268:	697a      	ldr	r2, [r7, #20]
 800a26a:	631a      	str	r2, [r3, #48]	; 0x30
 800a26c:	e005      	b.n	800a27a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a26e:	6978      	ldr	r0, [r7, #20]
 800a270:	f001 fa9e 	bl	800b7b0 <vPortFree>
 800a274:	e001      	b.n	800a27a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a276:	2300      	movs	r3, #0
 800a278:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a27a:	69fb      	ldr	r3, [r7, #28]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d017      	beq.n	800a2b0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a280:	69fb      	ldr	r3, [r7, #28]
 800a282:	2200      	movs	r2, #0
 800a284:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a288:	88fa      	ldrh	r2, [r7, #6]
 800a28a:	2300      	movs	r3, #0
 800a28c:	9303      	str	r3, [sp, #12]
 800a28e:	69fb      	ldr	r3, [r7, #28]
 800a290:	9302      	str	r3, [sp, #8]
 800a292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a294:	9301      	str	r3, [sp, #4]
 800a296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a298:	9300      	str	r3, [sp, #0]
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	68b9      	ldr	r1, [r7, #8]
 800a29e:	68f8      	ldr	r0, [r7, #12]
 800a2a0:	f000 f80e 	bl	800a2c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a2a4:	69f8      	ldr	r0, [r7, #28]
 800a2a6:	f000 f8a9 	bl	800a3fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	61bb      	str	r3, [r7, #24]
 800a2ae:	e002      	b.n	800a2b6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a2b0:	f04f 33ff 	mov.w	r3, #4294967295
 800a2b4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a2b6:	69bb      	ldr	r3, [r7, #24]
	}
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	3720      	adds	r7, #32
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	bd80      	pop	{r7, pc}

0800a2c0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b088      	sub	sp, #32
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	60f8      	str	r0, [r7, #12]
 800a2c8:	60b9      	str	r1, [r7, #8]
 800a2ca:	607a      	str	r2, [r7, #4]
 800a2cc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a2ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a2d8:	3b01      	subs	r3, #1
 800a2da:	009b      	lsls	r3, r3, #2
 800a2dc:	4413      	add	r3, r2
 800a2de:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a2e0:	69bb      	ldr	r3, [r7, #24]
 800a2e2:	f023 0307 	bic.w	r3, r3, #7
 800a2e6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a2e8:	69bb      	ldr	r3, [r7, #24]
 800a2ea:	f003 0307 	and.w	r3, r3, #7
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d00a      	beq.n	800a308 <prvInitialiseNewTask+0x48>
	__asm volatile
 800a2f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2f6:	f383 8811 	msr	BASEPRI, r3
 800a2fa:	f3bf 8f6f 	isb	sy
 800a2fe:	f3bf 8f4f 	dsb	sy
 800a302:	617b      	str	r3, [r7, #20]
}
 800a304:	bf00      	nop
 800a306:	e7fe      	b.n	800a306 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d01f      	beq.n	800a34e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a30e:	2300      	movs	r3, #0
 800a310:	61fb      	str	r3, [r7, #28]
 800a312:	e012      	b.n	800a33a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a314:	68ba      	ldr	r2, [r7, #8]
 800a316:	69fb      	ldr	r3, [r7, #28]
 800a318:	4413      	add	r3, r2
 800a31a:	7819      	ldrb	r1, [r3, #0]
 800a31c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a31e:	69fb      	ldr	r3, [r7, #28]
 800a320:	4413      	add	r3, r2
 800a322:	3334      	adds	r3, #52	; 0x34
 800a324:	460a      	mov	r2, r1
 800a326:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a328:	68ba      	ldr	r2, [r7, #8]
 800a32a:	69fb      	ldr	r3, [r7, #28]
 800a32c:	4413      	add	r3, r2
 800a32e:	781b      	ldrb	r3, [r3, #0]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d006      	beq.n	800a342 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a334:	69fb      	ldr	r3, [r7, #28]
 800a336:	3301      	adds	r3, #1
 800a338:	61fb      	str	r3, [r7, #28]
 800a33a:	69fb      	ldr	r3, [r7, #28]
 800a33c:	2b0f      	cmp	r3, #15
 800a33e:	d9e9      	bls.n	800a314 <prvInitialiseNewTask+0x54>
 800a340:	e000      	b.n	800a344 <prvInitialiseNewTask+0x84>
			{
				break;
 800a342:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a346:	2200      	movs	r2, #0
 800a348:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a34c:	e003      	b.n	800a356 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a34e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a350:	2200      	movs	r2, #0
 800a352:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a358:	2b06      	cmp	r3, #6
 800a35a:	d901      	bls.n	800a360 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a35c:	2306      	movs	r3, #6
 800a35e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a362:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a364:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a368:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a36a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a36c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a36e:	2200      	movs	r2, #0
 800a370:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a374:	3304      	adds	r3, #4
 800a376:	4618      	mov	r0, r3
 800a378:	f7fe ff2a 	bl	80091d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a37c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a37e:	3318      	adds	r3, #24
 800a380:	4618      	mov	r0, r3
 800a382:	f7fe ff25 	bl	80091d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a388:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a38a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a38c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a38e:	f1c3 0207 	rsb	r2, r3, #7
 800a392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a394:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a398:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a39a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a39c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a39e:	2200      	movs	r2, #0
 800a3a0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a3a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a3ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ae:	334c      	adds	r3, #76	; 0x4c
 800a3b0:	224c      	movs	r2, #76	; 0x4c
 800a3b2:	2100      	movs	r1, #0
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	f001 fbe7 	bl	800bb88 <memset>
 800a3ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3bc:	4a0c      	ldr	r2, [pc, #48]	; (800a3f0 <prvInitialiseNewTask+0x130>)
 800a3be:	651a      	str	r2, [r3, #80]	; 0x50
 800a3c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3c2:	4a0c      	ldr	r2, [pc, #48]	; (800a3f4 <prvInitialiseNewTask+0x134>)
 800a3c4:	655a      	str	r2, [r3, #84]	; 0x54
 800a3c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3c8:	4a0b      	ldr	r2, [pc, #44]	; (800a3f8 <prvInitialiseNewTask+0x138>)
 800a3ca:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a3cc:	683a      	ldr	r2, [r7, #0]
 800a3ce:	68f9      	ldr	r1, [r7, #12]
 800a3d0:	69b8      	ldr	r0, [r7, #24]
 800a3d2:	f000 fed3 	bl	800b17c <pxPortInitialiseStack>
 800a3d6:	4602      	mov	r2, r0
 800a3d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3da:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a3dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d002      	beq.n	800a3e8 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a3e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3e6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a3e8:	bf00      	nop
 800a3ea:	3720      	adds	r7, #32
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bd80      	pop	{r7, pc}
 800a3f0:	2001adfc 	.word	0x2001adfc
 800a3f4:	2001ae64 	.word	0x2001ae64
 800a3f8:	2001aecc 	.word	0x2001aecc

0800a3fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b082      	sub	sp, #8
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a404:	f000 ffe6 	bl	800b3d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a408:	4b2a      	ldr	r3, [pc, #168]	; (800a4b4 <prvAddNewTaskToReadyList+0xb8>)
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	3301      	adds	r3, #1
 800a40e:	4a29      	ldr	r2, [pc, #164]	; (800a4b4 <prvAddNewTaskToReadyList+0xb8>)
 800a410:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a412:	4b29      	ldr	r3, [pc, #164]	; (800a4b8 <prvAddNewTaskToReadyList+0xbc>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d109      	bne.n	800a42e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a41a:	4a27      	ldr	r2, [pc, #156]	; (800a4b8 <prvAddNewTaskToReadyList+0xbc>)
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a420:	4b24      	ldr	r3, [pc, #144]	; (800a4b4 <prvAddNewTaskToReadyList+0xb8>)
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	2b01      	cmp	r3, #1
 800a426:	d110      	bne.n	800a44a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a428:	f000 fbc4 	bl	800abb4 <prvInitialiseTaskLists>
 800a42c:	e00d      	b.n	800a44a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a42e:	4b23      	ldr	r3, [pc, #140]	; (800a4bc <prvAddNewTaskToReadyList+0xc0>)
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d109      	bne.n	800a44a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a436:	4b20      	ldr	r3, [pc, #128]	; (800a4b8 <prvAddNewTaskToReadyList+0xbc>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a440:	429a      	cmp	r2, r3
 800a442:	d802      	bhi.n	800a44a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a444:	4a1c      	ldr	r2, [pc, #112]	; (800a4b8 <prvAddNewTaskToReadyList+0xbc>)
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a44a:	4b1d      	ldr	r3, [pc, #116]	; (800a4c0 <prvAddNewTaskToReadyList+0xc4>)
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	3301      	adds	r3, #1
 800a450:	4a1b      	ldr	r2, [pc, #108]	; (800a4c0 <prvAddNewTaskToReadyList+0xc4>)
 800a452:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a458:	2201      	movs	r2, #1
 800a45a:	409a      	lsls	r2, r3
 800a45c:	4b19      	ldr	r3, [pc, #100]	; (800a4c4 <prvAddNewTaskToReadyList+0xc8>)
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	4313      	orrs	r3, r2
 800a462:	4a18      	ldr	r2, [pc, #96]	; (800a4c4 <prvAddNewTaskToReadyList+0xc8>)
 800a464:	6013      	str	r3, [r2, #0]
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a46a:	4613      	mov	r3, r2
 800a46c:	009b      	lsls	r3, r3, #2
 800a46e:	4413      	add	r3, r2
 800a470:	009b      	lsls	r3, r3, #2
 800a472:	4a15      	ldr	r2, [pc, #84]	; (800a4c8 <prvAddNewTaskToReadyList+0xcc>)
 800a474:	441a      	add	r2, r3
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	3304      	adds	r3, #4
 800a47a:	4619      	mov	r1, r3
 800a47c:	4610      	mov	r0, r2
 800a47e:	f7fe feb4 	bl	80091ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a482:	f000 ffd7 	bl	800b434 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a486:	4b0d      	ldr	r3, [pc, #52]	; (800a4bc <prvAddNewTaskToReadyList+0xc0>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d00e      	beq.n	800a4ac <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a48e:	4b0a      	ldr	r3, [pc, #40]	; (800a4b8 <prvAddNewTaskToReadyList+0xbc>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a498:	429a      	cmp	r2, r3
 800a49a:	d207      	bcs.n	800a4ac <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a49c:	4b0b      	ldr	r3, [pc, #44]	; (800a4cc <prvAddNewTaskToReadyList+0xd0>)
 800a49e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4a2:	601a      	str	r2, [r3, #0]
 800a4a4:	f3bf 8f4f 	dsb	sy
 800a4a8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a4ac:	bf00      	nop
 800a4ae:	3708      	adds	r7, #8
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}
 800a4b4:	20002700 	.word	0x20002700
 800a4b8:	20002600 	.word	0x20002600
 800a4bc:	2000270c 	.word	0x2000270c
 800a4c0:	2000271c 	.word	0x2000271c
 800a4c4:	20002708 	.word	0x20002708
 800a4c8:	20002604 	.word	0x20002604
 800a4cc:	e000ed04 	.word	0xe000ed04

0800a4d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b08a      	sub	sp, #40	; 0x28
 800a4d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a4da:	2300      	movs	r3, #0
 800a4dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a4de:	463a      	mov	r2, r7
 800a4e0:	1d39      	adds	r1, r7, #4
 800a4e2:	f107 0308 	add.w	r3, r7, #8
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f7f6 f93a 	bl	8000760 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a4ec:	6839      	ldr	r1, [r7, #0]
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	68ba      	ldr	r2, [r7, #8]
 800a4f2:	9202      	str	r2, [sp, #8]
 800a4f4:	9301      	str	r3, [sp, #4]
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	9300      	str	r3, [sp, #0]
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	460a      	mov	r2, r1
 800a4fe:	4921      	ldr	r1, [pc, #132]	; (800a584 <vTaskStartScheduler+0xb4>)
 800a500:	4821      	ldr	r0, [pc, #132]	; (800a588 <vTaskStartScheduler+0xb8>)
 800a502:	f7ff fe3b 	bl	800a17c <xTaskCreateStatic>
 800a506:	4603      	mov	r3, r0
 800a508:	4a20      	ldr	r2, [pc, #128]	; (800a58c <vTaskStartScheduler+0xbc>)
 800a50a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a50c:	4b1f      	ldr	r3, [pc, #124]	; (800a58c <vTaskStartScheduler+0xbc>)
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d002      	beq.n	800a51a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a514:	2301      	movs	r3, #1
 800a516:	617b      	str	r3, [r7, #20]
 800a518:	e001      	b.n	800a51e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a51a:	2300      	movs	r3, #0
 800a51c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	2b01      	cmp	r3, #1
 800a522:	d11b      	bne.n	800a55c <vTaskStartScheduler+0x8c>
	__asm volatile
 800a524:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a528:	f383 8811 	msr	BASEPRI, r3
 800a52c:	f3bf 8f6f 	isb	sy
 800a530:	f3bf 8f4f 	dsb	sy
 800a534:	613b      	str	r3, [r7, #16]
}
 800a536:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a538:	4b15      	ldr	r3, [pc, #84]	; (800a590 <vTaskStartScheduler+0xc0>)
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	334c      	adds	r3, #76	; 0x4c
 800a53e:	4a15      	ldr	r2, [pc, #84]	; (800a594 <vTaskStartScheduler+0xc4>)
 800a540:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a542:	4b15      	ldr	r3, [pc, #84]	; (800a598 <vTaskStartScheduler+0xc8>)
 800a544:	f04f 32ff 	mov.w	r2, #4294967295
 800a548:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a54a:	4b14      	ldr	r3, [pc, #80]	; (800a59c <vTaskStartScheduler+0xcc>)
 800a54c:	2201      	movs	r2, #1
 800a54e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a550:	4b13      	ldr	r3, [pc, #76]	; (800a5a0 <vTaskStartScheduler+0xd0>)
 800a552:	2200      	movs	r2, #0
 800a554:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a556:	f000 fe9b 	bl	800b290 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a55a:	e00e      	b.n	800a57a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a55c:	697b      	ldr	r3, [r7, #20]
 800a55e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a562:	d10a      	bne.n	800a57a <vTaskStartScheduler+0xaa>
	__asm volatile
 800a564:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a568:	f383 8811 	msr	BASEPRI, r3
 800a56c:	f3bf 8f6f 	isb	sy
 800a570:	f3bf 8f4f 	dsb	sy
 800a574:	60fb      	str	r3, [r7, #12]
}
 800a576:	bf00      	nop
 800a578:	e7fe      	b.n	800a578 <vTaskStartScheduler+0xa8>
}
 800a57a:	bf00      	nop
 800a57c:	3718      	adds	r7, #24
 800a57e:	46bd      	mov	sp, r7
 800a580:	bd80      	pop	{r7, pc}
 800a582:	bf00      	nop
 800a584:	0800c944 	.word	0x0800c944
 800a588:	0800ab85 	.word	0x0800ab85
 800a58c:	20002724 	.word	0x20002724
 800a590:	20002600 	.word	0x20002600
 800a594:	2000005c 	.word	0x2000005c
 800a598:	20002720 	.word	0x20002720
 800a59c:	2000270c 	.word	0x2000270c
 800a5a0:	20002704 	.word	0x20002704

0800a5a4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a5a4:	b480      	push	{r7}
 800a5a6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a5a8:	4b04      	ldr	r3, [pc, #16]	; (800a5bc <vTaskSuspendAll+0x18>)
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	3301      	adds	r3, #1
 800a5ae:	4a03      	ldr	r2, [pc, #12]	; (800a5bc <vTaskSuspendAll+0x18>)
 800a5b0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a5b2:	bf00      	nop
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ba:	4770      	bx	lr
 800a5bc:	20002728 	.word	0x20002728

0800a5c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b084      	sub	sp, #16
 800a5c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a5ce:	4b41      	ldr	r3, [pc, #260]	; (800a6d4 <xTaskResumeAll+0x114>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d10a      	bne.n	800a5ec <xTaskResumeAll+0x2c>
	__asm volatile
 800a5d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5da:	f383 8811 	msr	BASEPRI, r3
 800a5de:	f3bf 8f6f 	isb	sy
 800a5e2:	f3bf 8f4f 	dsb	sy
 800a5e6:	603b      	str	r3, [r7, #0]
}
 800a5e8:	bf00      	nop
 800a5ea:	e7fe      	b.n	800a5ea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a5ec:	f000 fef2 	bl	800b3d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a5f0:	4b38      	ldr	r3, [pc, #224]	; (800a6d4 <xTaskResumeAll+0x114>)
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	3b01      	subs	r3, #1
 800a5f6:	4a37      	ldr	r2, [pc, #220]	; (800a6d4 <xTaskResumeAll+0x114>)
 800a5f8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a5fa:	4b36      	ldr	r3, [pc, #216]	; (800a6d4 <xTaskResumeAll+0x114>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d161      	bne.n	800a6c6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a602:	4b35      	ldr	r3, [pc, #212]	; (800a6d8 <xTaskResumeAll+0x118>)
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d05d      	beq.n	800a6c6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a60a:	e02e      	b.n	800a66a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a60c:	4b33      	ldr	r3, [pc, #204]	; (800a6dc <xTaskResumeAll+0x11c>)
 800a60e:	68db      	ldr	r3, [r3, #12]
 800a610:	68db      	ldr	r3, [r3, #12]
 800a612:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	3318      	adds	r3, #24
 800a618:	4618      	mov	r0, r3
 800a61a:	f7fe fe43 	bl	80092a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	3304      	adds	r3, #4
 800a622:	4618      	mov	r0, r3
 800a624:	f7fe fe3e 	bl	80092a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a62c:	2201      	movs	r2, #1
 800a62e:	409a      	lsls	r2, r3
 800a630:	4b2b      	ldr	r3, [pc, #172]	; (800a6e0 <xTaskResumeAll+0x120>)
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	4313      	orrs	r3, r2
 800a636:	4a2a      	ldr	r2, [pc, #168]	; (800a6e0 <xTaskResumeAll+0x120>)
 800a638:	6013      	str	r3, [r2, #0]
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a63e:	4613      	mov	r3, r2
 800a640:	009b      	lsls	r3, r3, #2
 800a642:	4413      	add	r3, r2
 800a644:	009b      	lsls	r3, r3, #2
 800a646:	4a27      	ldr	r2, [pc, #156]	; (800a6e4 <xTaskResumeAll+0x124>)
 800a648:	441a      	add	r2, r3
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	3304      	adds	r3, #4
 800a64e:	4619      	mov	r1, r3
 800a650:	4610      	mov	r0, r2
 800a652:	f7fe fdca 	bl	80091ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a65a:	4b23      	ldr	r3, [pc, #140]	; (800a6e8 <xTaskResumeAll+0x128>)
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a660:	429a      	cmp	r2, r3
 800a662:	d302      	bcc.n	800a66a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800a664:	4b21      	ldr	r3, [pc, #132]	; (800a6ec <xTaskResumeAll+0x12c>)
 800a666:	2201      	movs	r2, #1
 800a668:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a66a:	4b1c      	ldr	r3, [pc, #112]	; (800a6dc <xTaskResumeAll+0x11c>)
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d1cc      	bne.n	800a60c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d001      	beq.n	800a67c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a678:	f000 fb3e 	bl	800acf8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a67c:	4b1c      	ldr	r3, [pc, #112]	; (800a6f0 <xTaskResumeAll+0x130>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d010      	beq.n	800a6aa <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a688:	f000 f858 	bl	800a73c <xTaskIncrementTick>
 800a68c:	4603      	mov	r3, r0
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d002      	beq.n	800a698 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800a692:	4b16      	ldr	r3, [pc, #88]	; (800a6ec <xTaskResumeAll+0x12c>)
 800a694:	2201      	movs	r2, #1
 800a696:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	3b01      	subs	r3, #1
 800a69c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d1f1      	bne.n	800a688 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800a6a4:	4b12      	ldr	r3, [pc, #72]	; (800a6f0 <xTaskResumeAll+0x130>)
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a6aa:	4b10      	ldr	r3, [pc, #64]	; (800a6ec <xTaskResumeAll+0x12c>)
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d009      	beq.n	800a6c6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a6b2:	2301      	movs	r3, #1
 800a6b4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a6b6:	4b0f      	ldr	r3, [pc, #60]	; (800a6f4 <xTaskResumeAll+0x134>)
 800a6b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6bc:	601a      	str	r2, [r3, #0]
 800a6be:	f3bf 8f4f 	dsb	sy
 800a6c2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a6c6:	f000 feb5 	bl	800b434 <vPortExitCritical>

	return xAlreadyYielded;
 800a6ca:	68bb      	ldr	r3, [r7, #8]
}
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	3710      	adds	r7, #16
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	bd80      	pop	{r7, pc}
 800a6d4:	20002728 	.word	0x20002728
 800a6d8:	20002700 	.word	0x20002700
 800a6dc:	200026c0 	.word	0x200026c0
 800a6e0:	20002708 	.word	0x20002708
 800a6e4:	20002604 	.word	0x20002604
 800a6e8:	20002600 	.word	0x20002600
 800a6ec:	20002714 	.word	0x20002714
 800a6f0:	20002710 	.word	0x20002710
 800a6f4:	e000ed04 	.word	0xe000ed04

0800a6f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a6f8:	b480      	push	{r7}
 800a6fa:	b083      	sub	sp, #12
 800a6fc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a6fe:	4b05      	ldr	r3, [pc, #20]	; (800a714 <xTaskGetTickCount+0x1c>)
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a704:	687b      	ldr	r3, [r7, #4]
}
 800a706:	4618      	mov	r0, r3
 800a708:	370c      	adds	r7, #12
 800a70a:	46bd      	mov	sp, r7
 800a70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a710:	4770      	bx	lr
 800a712:	bf00      	nop
 800a714:	20002704 	.word	0x20002704

0800a718 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b082      	sub	sp, #8
 800a71c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a71e:	f000 ff3b 	bl	800b598 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800a722:	2300      	movs	r3, #0
 800a724:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800a726:	4b04      	ldr	r3, [pc, #16]	; (800a738 <xTaskGetTickCountFromISR+0x20>)
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a72c:	683b      	ldr	r3, [r7, #0]
}
 800a72e:	4618      	mov	r0, r3
 800a730:	3708      	adds	r7, #8
 800a732:	46bd      	mov	sp, r7
 800a734:	bd80      	pop	{r7, pc}
 800a736:	bf00      	nop
 800a738:	20002704 	.word	0x20002704

0800a73c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b086      	sub	sp, #24
 800a740:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a742:	2300      	movs	r3, #0
 800a744:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a746:	4b4e      	ldr	r3, [pc, #312]	; (800a880 <xTaskIncrementTick+0x144>)
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	f040 808e 	bne.w	800a86c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a750:	4b4c      	ldr	r3, [pc, #304]	; (800a884 <xTaskIncrementTick+0x148>)
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	3301      	adds	r3, #1
 800a756:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a758:	4a4a      	ldr	r2, [pc, #296]	; (800a884 <xTaskIncrementTick+0x148>)
 800a75a:	693b      	ldr	r3, [r7, #16]
 800a75c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a75e:	693b      	ldr	r3, [r7, #16]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d120      	bne.n	800a7a6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a764:	4b48      	ldr	r3, [pc, #288]	; (800a888 <xTaskIncrementTick+0x14c>)
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d00a      	beq.n	800a784 <xTaskIncrementTick+0x48>
	__asm volatile
 800a76e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a772:	f383 8811 	msr	BASEPRI, r3
 800a776:	f3bf 8f6f 	isb	sy
 800a77a:	f3bf 8f4f 	dsb	sy
 800a77e:	603b      	str	r3, [r7, #0]
}
 800a780:	bf00      	nop
 800a782:	e7fe      	b.n	800a782 <xTaskIncrementTick+0x46>
 800a784:	4b40      	ldr	r3, [pc, #256]	; (800a888 <xTaskIncrementTick+0x14c>)
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	60fb      	str	r3, [r7, #12]
 800a78a:	4b40      	ldr	r3, [pc, #256]	; (800a88c <xTaskIncrementTick+0x150>)
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	4a3e      	ldr	r2, [pc, #248]	; (800a888 <xTaskIncrementTick+0x14c>)
 800a790:	6013      	str	r3, [r2, #0]
 800a792:	4a3e      	ldr	r2, [pc, #248]	; (800a88c <xTaskIncrementTick+0x150>)
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	6013      	str	r3, [r2, #0]
 800a798:	4b3d      	ldr	r3, [pc, #244]	; (800a890 <xTaskIncrementTick+0x154>)
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	3301      	adds	r3, #1
 800a79e:	4a3c      	ldr	r2, [pc, #240]	; (800a890 <xTaskIncrementTick+0x154>)
 800a7a0:	6013      	str	r3, [r2, #0]
 800a7a2:	f000 faa9 	bl	800acf8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a7a6:	4b3b      	ldr	r3, [pc, #236]	; (800a894 <xTaskIncrementTick+0x158>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	693a      	ldr	r2, [r7, #16]
 800a7ac:	429a      	cmp	r2, r3
 800a7ae:	d348      	bcc.n	800a842 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a7b0:	4b35      	ldr	r3, [pc, #212]	; (800a888 <xTaskIncrementTick+0x14c>)
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d104      	bne.n	800a7c4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7ba:	4b36      	ldr	r3, [pc, #216]	; (800a894 <xTaskIncrementTick+0x158>)
 800a7bc:	f04f 32ff 	mov.w	r2, #4294967295
 800a7c0:	601a      	str	r2, [r3, #0]
					break;
 800a7c2:	e03e      	b.n	800a842 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7c4:	4b30      	ldr	r3, [pc, #192]	; (800a888 <xTaskIncrementTick+0x14c>)
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	68db      	ldr	r3, [r3, #12]
 800a7ca:	68db      	ldr	r3, [r3, #12]
 800a7cc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a7ce:	68bb      	ldr	r3, [r7, #8]
 800a7d0:	685b      	ldr	r3, [r3, #4]
 800a7d2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a7d4:	693a      	ldr	r2, [r7, #16]
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	429a      	cmp	r2, r3
 800a7da:	d203      	bcs.n	800a7e4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a7dc:	4a2d      	ldr	r2, [pc, #180]	; (800a894 <xTaskIncrementTick+0x158>)
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a7e2:	e02e      	b.n	800a842 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	3304      	adds	r3, #4
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	f7fe fd5b 	bl	80092a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a7ee:	68bb      	ldr	r3, [r7, #8]
 800a7f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d004      	beq.n	800a800 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a7f6:	68bb      	ldr	r3, [r7, #8]
 800a7f8:	3318      	adds	r3, #24
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	f7fe fd52 	bl	80092a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a800:	68bb      	ldr	r3, [r7, #8]
 800a802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a804:	2201      	movs	r2, #1
 800a806:	409a      	lsls	r2, r3
 800a808:	4b23      	ldr	r3, [pc, #140]	; (800a898 <xTaskIncrementTick+0x15c>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	4313      	orrs	r3, r2
 800a80e:	4a22      	ldr	r2, [pc, #136]	; (800a898 <xTaskIncrementTick+0x15c>)
 800a810:	6013      	str	r3, [r2, #0]
 800a812:	68bb      	ldr	r3, [r7, #8]
 800a814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a816:	4613      	mov	r3, r2
 800a818:	009b      	lsls	r3, r3, #2
 800a81a:	4413      	add	r3, r2
 800a81c:	009b      	lsls	r3, r3, #2
 800a81e:	4a1f      	ldr	r2, [pc, #124]	; (800a89c <xTaskIncrementTick+0x160>)
 800a820:	441a      	add	r2, r3
 800a822:	68bb      	ldr	r3, [r7, #8]
 800a824:	3304      	adds	r3, #4
 800a826:	4619      	mov	r1, r3
 800a828:	4610      	mov	r0, r2
 800a82a:	f7fe fcde 	bl	80091ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a82e:	68bb      	ldr	r3, [r7, #8]
 800a830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a832:	4b1b      	ldr	r3, [pc, #108]	; (800a8a0 <xTaskIncrementTick+0x164>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a838:	429a      	cmp	r2, r3
 800a83a:	d3b9      	bcc.n	800a7b0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a83c:	2301      	movs	r3, #1
 800a83e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a840:	e7b6      	b.n	800a7b0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a842:	4b17      	ldr	r3, [pc, #92]	; (800a8a0 <xTaskIncrementTick+0x164>)
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a848:	4914      	ldr	r1, [pc, #80]	; (800a89c <xTaskIncrementTick+0x160>)
 800a84a:	4613      	mov	r3, r2
 800a84c:	009b      	lsls	r3, r3, #2
 800a84e:	4413      	add	r3, r2
 800a850:	009b      	lsls	r3, r3, #2
 800a852:	440b      	add	r3, r1
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	2b01      	cmp	r3, #1
 800a858:	d901      	bls.n	800a85e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800a85a:	2301      	movs	r3, #1
 800a85c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a85e:	4b11      	ldr	r3, [pc, #68]	; (800a8a4 <xTaskIncrementTick+0x168>)
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d007      	beq.n	800a876 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800a866:	2301      	movs	r3, #1
 800a868:	617b      	str	r3, [r7, #20]
 800a86a:	e004      	b.n	800a876 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a86c:	4b0e      	ldr	r3, [pc, #56]	; (800a8a8 <xTaskIncrementTick+0x16c>)
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	3301      	adds	r3, #1
 800a872:	4a0d      	ldr	r2, [pc, #52]	; (800a8a8 <xTaskIncrementTick+0x16c>)
 800a874:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a876:	697b      	ldr	r3, [r7, #20]
}
 800a878:	4618      	mov	r0, r3
 800a87a:	3718      	adds	r7, #24
 800a87c:	46bd      	mov	sp, r7
 800a87e:	bd80      	pop	{r7, pc}
 800a880:	20002728 	.word	0x20002728
 800a884:	20002704 	.word	0x20002704
 800a888:	200026b8 	.word	0x200026b8
 800a88c:	200026bc 	.word	0x200026bc
 800a890:	20002718 	.word	0x20002718
 800a894:	20002720 	.word	0x20002720
 800a898:	20002708 	.word	0x20002708
 800a89c:	20002604 	.word	0x20002604
 800a8a0:	20002600 	.word	0x20002600
 800a8a4:	20002714 	.word	0x20002714
 800a8a8:	20002710 	.word	0x20002710

0800a8ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a8ac:	b480      	push	{r7}
 800a8ae:	b087      	sub	sp, #28
 800a8b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a8b2:	4b29      	ldr	r3, [pc, #164]	; (800a958 <vTaskSwitchContext+0xac>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d003      	beq.n	800a8c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a8ba:	4b28      	ldr	r3, [pc, #160]	; (800a95c <vTaskSwitchContext+0xb0>)
 800a8bc:	2201      	movs	r2, #1
 800a8be:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a8c0:	e044      	b.n	800a94c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800a8c2:	4b26      	ldr	r3, [pc, #152]	; (800a95c <vTaskSwitchContext+0xb0>)
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8c8:	4b25      	ldr	r3, [pc, #148]	; (800a960 <vTaskSwitchContext+0xb4>)
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	fab3 f383 	clz	r3, r3
 800a8d4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a8d6:	7afb      	ldrb	r3, [r7, #11]
 800a8d8:	f1c3 031f 	rsb	r3, r3, #31
 800a8dc:	617b      	str	r3, [r7, #20]
 800a8de:	4921      	ldr	r1, [pc, #132]	; (800a964 <vTaskSwitchContext+0xb8>)
 800a8e0:	697a      	ldr	r2, [r7, #20]
 800a8e2:	4613      	mov	r3, r2
 800a8e4:	009b      	lsls	r3, r3, #2
 800a8e6:	4413      	add	r3, r2
 800a8e8:	009b      	lsls	r3, r3, #2
 800a8ea:	440b      	add	r3, r1
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d10a      	bne.n	800a908 <vTaskSwitchContext+0x5c>
	__asm volatile
 800a8f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8f6:	f383 8811 	msr	BASEPRI, r3
 800a8fa:	f3bf 8f6f 	isb	sy
 800a8fe:	f3bf 8f4f 	dsb	sy
 800a902:	607b      	str	r3, [r7, #4]
}
 800a904:	bf00      	nop
 800a906:	e7fe      	b.n	800a906 <vTaskSwitchContext+0x5a>
 800a908:	697a      	ldr	r2, [r7, #20]
 800a90a:	4613      	mov	r3, r2
 800a90c:	009b      	lsls	r3, r3, #2
 800a90e:	4413      	add	r3, r2
 800a910:	009b      	lsls	r3, r3, #2
 800a912:	4a14      	ldr	r2, [pc, #80]	; (800a964 <vTaskSwitchContext+0xb8>)
 800a914:	4413      	add	r3, r2
 800a916:	613b      	str	r3, [r7, #16]
 800a918:	693b      	ldr	r3, [r7, #16]
 800a91a:	685b      	ldr	r3, [r3, #4]
 800a91c:	685a      	ldr	r2, [r3, #4]
 800a91e:	693b      	ldr	r3, [r7, #16]
 800a920:	605a      	str	r2, [r3, #4]
 800a922:	693b      	ldr	r3, [r7, #16]
 800a924:	685a      	ldr	r2, [r3, #4]
 800a926:	693b      	ldr	r3, [r7, #16]
 800a928:	3308      	adds	r3, #8
 800a92a:	429a      	cmp	r2, r3
 800a92c:	d104      	bne.n	800a938 <vTaskSwitchContext+0x8c>
 800a92e:	693b      	ldr	r3, [r7, #16]
 800a930:	685b      	ldr	r3, [r3, #4]
 800a932:	685a      	ldr	r2, [r3, #4]
 800a934:	693b      	ldr	r3, [r7, #16]
 800a936:	605a      	str	r2, [r3, #4]
 800a938:	693b      	ldr	r3, [r7, #16]
 800a93a:	685b      	ldr	r3, [r3, #4]
 800a93c:	68db      	ldr	r3, [r3, #12]
 800a93e:	4a0a      	ldr	r2, [pc, #40]	; (800a968 <vTaskSwitchContext+0xbc>)
 800a940:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a942:	4b09      	ldr	r3, [pc, #36]	; (800a968 <vTaskSwitchContext+0xbc>)
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	334c      	adds	r3, #76	; 0x4c
 800a948:	4a08      	ldr	r2, [pc, #32]	; (800a96c <vTaskSwitchContext+0xc0>)
 800a94a:	6013      	str	r3, [r2, #0]
}
 800a94c:	bf00      	nop
 800a94e:	371c      	adds	r7, #28
 800a950:	46bd      	mov	sp, r7
 800a952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a956:	4770      	bx	lr
 800a958:	20002728 	.word	0x20002728
 800a95c:	20002714 	.word	0x20002714
 800a960:	20002708 	.word	0x20002708
 800a964:	20002604 	.word	0x20002604
 800a968:	20002600 	.word	0x20002600
 800a96c:	2000005c 	.word	0x2000005c

0800a970 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b084      	sub	sp, #16
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
 800a978:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d10a      	bne.n	800a996 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a980:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a984:	f383 8811 	msr	BASEPRI, r3
 800a988:	f3bf 8f6f 	isb	sy
 800a98c:	f3bf 8f4f 	dsb	sy
 800a990:	60fb      	str	r3, [r7, #12]
}
 800a992:	bf00      	nop
 800a994:	e7fe      	b.n	800a994 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a996:	4b07      	ldr	r3, [pc, #28]	; (800a9b4 <vTaskPlaceOnEventList+0x44>)
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	3318      	adds	r3, #24
 800a99c:	4619      	mov	r1, r3
 800a99e:	6878      	ldr	r0, [r7, #4]
 800a9a0:	f7fe fc47 	bl	8009232 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a9a4:	2101      	movs	r1, #1
 800a9a6:	6838      	ldr	r0, [r7, #0]
 800a9a8:	f000 fb82 	bl	800b0b0 <prvAddCurrentTaskToDelayedList>
}
 800a9ac:	bf00      	nop
 800a9ae:	3710      	adds	r7, #16
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	bd80      	pop	{r7, pc}
 800a9b4:	20002600 	.word	0x20002600

0800a9b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b086      	sub	sp, #24
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	68db      	ldr	r3, [r3, #12]
 800a9c4:	68db      	ldr	r3, [r3, #12]
 800a9c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a9c8:	693b      	ldr	r3, [r7, #16]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d10a      	bne.n	800a9e4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a9ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9d2:	f383 8811 	msr	BASEPRI, r3
 800a9d6:	f3bf 8f6f 	isb	sy
 800a9da:	f3bf 8f4f 	dsb	sy
 800a9de:	60fb      	str	r3, [r7, #12]
}
 800a9e0:	bf00      	nop
 800a9e2:	e7fe      	b.n	800a9e2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a9e4:	693b      	ldr	r3, [r7, #16]
 800a9e6:	3318      	adds	r3, #24
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	f7fe fc5b 	bl	80092a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a9ee:	4b1d      	ldr	r3, [pc, #116]	; (800aa64 <xTaskRemoveFromEventList+0xac>)
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d11c      	bne.n	800aa30 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a9f6:	693b      	ldr	r3, [r7, #16]
 800a9f8:	3304      	adds	r3, #4
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	f7fe fc52 	bl	80092a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800aa00:	693b      	ldr	r3, [r7, #16]
 800aa02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa04:	2201      	movs	r2, #1
 800aa06:	409a      	lsls	r2, r3
 800aa08:	4b17      	ldr	r3, [pc, #92]	; (800aa68 <xTaskRemoveFromEventList+0xb0>)
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	4313      	orrs	r3, r2
 800aa0e:	4a16      	ldr	r2, [pc, #88]	; (800aa68 <xTaskRemoveFromEventList+0xb0>)
 800aa10:	6013      	str	r3, [r2, #0]
 800aa12:	693b      	ldr	r3, [r7, #16]
 800aa14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa16:	4613      	mov	r3, r2
 800aa18:	009b      	lsls	r3, r3, #2
 800aa1a:	4413      	add	r3, r2
 800aa1c:	009b      	lsls	r3, r3, #2
 800aa1e:	4a13      	ldr	r2, [pc, #76]	; (800aa6c <xTaskRemoveFromEventList+0xb4>)
 800aa20:	441a      	add	r2, r3
 800aa22:	693b      	ldr	r3, [r7, #16]
 800aa24:	3304      	adds	r3, #4
 800aa26:	4619      	mov	r1, r3
 800aa28:	4610      	mov	r0, r2
 800aa2a:	f7fe fbde 	bl	80091ea <vListInsertEnd>
 800aa2e:	e005      	b.n	800aa3c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800aa30:	693b      	ldr	r3, [r7, #16]
 800aa32:	3318      	adds	r3, #24
 800aa34:	4619      	mov	r1, r3
 800aa36:	480e      	ldr	r0, [pc, #56]	; (800aa70 <xTaskRemoveFromEventList+0xb8>)
 800aa38:	f7fe fbd7 	bl	80091ea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800aa3c:	693b      	ldr	r3, [r7, #16]
 800aa3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa40:	4b0c      	ldr	r3, [pc, #48]	; (800aa74 <xTaskRemoveFromEventList+0xbc>)
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa46:	429a      	cmp	r2, r3
 800aa48:	d905      	bls.n	800aa56 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800aa4a:	2301      	movs	r3, #1
 800aa4c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800aa4e:	4b0a      	ldr	r3, [pc, #40]	; (800aa78 <xTaskRemoveFromEventList+0xc0>)
 800aa50:	2201      	movs	r2, #1
 800aa52:	601a      	str	r2, [r3, #0]
 800aa54:	e001      	b.n	800aa5a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800aa56:	2300      	movs	r3, #0
 800aa58:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800aa5a:	697b      	ldr	r3, [r7, #20]
}
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	3718      	adds	r7, #24
 800aa60:	46bd      	mov	sp, r7
 800aa62:	bd80      	pop	{r7, pc}
 800aa64:	20002728 	.word	0x20002728
 800aa68:	20002708 	.word	0x20002708
 800aa6c:	20002604 	.word	0x20002604
 800aa70:	200026c0 	.word	0x200026c0
 800aa74:	20002600 	.word	0x20002600
 800aa78:	20002714 	.word	0x20002714

0800aa7c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800aa7c:	b480      	push	{r7}
 800aa7e:	b083      	sub	sp, #12
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800aa84:	4b06      	ldr	r3, [pc, #24]	; (800aaa0 <vTaskInternalSetTimeOutState+0x24>)
 800aa86:	681a      	ldr	r2, [r3, #0]
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800aa8c:	4b05      	ldr	r3, [pc, #20]	; (800aaa4 <vTaskInternalSetTimeOutState+0x28>)
 800aa8e:	681a      	ldr	r2, [r3, #0]
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	605a      	str	r2, [r3, #4]
}
 800aa94:	bf00      	nop
 800aa96:	370c      	adds	r7, #12
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9e:	4770      	bx	lr
 800aaa0:	20002718 	.word	0x20002718
 800aaa4:	20002704 	.word	0x20002704

0800aaa8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b088      	sub	sp, #32
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
 800aab0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d10a      	bne.n	800aace <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800aab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aabc:	f383 8811 	msr	BASEPRI, r3
 800aac0:	f3bf 8f6f 	isb	sy
 800aac4:	f3bf 8f4f 	dsb	sy
 800aac8:	613b      	str	r3, [r7, #16]
}
 800aaca:	bf00      	nop
 800aacc:	e7fe      	b.n	800aacc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d10a      	bne.n	800aaea <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800aad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aad8:	f383 8811 	msr	BASEPRI, r3
 800aadc:	f3bf 8f6f 	isb	sy
 800aae0:	f3bf 8f4f 	dsb	sy
 800aae4:	60fb      	str	r3, [r7, #12]
}
 800aae6:	bf00      	nop
 800aae8:	e7fe      	b.n	800aae8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800aaea:	f000 fc73 	bl	800b3d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800aaee:	4b1d      	ldr	r3, [pc, #116]	; (800ab64 <xTaskCheckForTimeOut+0xbc>)
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	685b      	ldr	r3, [r3, #4]
 800aaf8:	69ba      	ldr	r2, [r7, #24]
 800aafa:	1ad3      	subs	r3, r2, r3
 800aafc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab06:	d102      	bne.n	800ab0e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ab08:	2300      	movs	r3, #0
 800ab0a:	61fb      	str	r3, [r7, #28]
 800ab0c:	e023      	b.n	800ab56 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681a      	ldr	r2, [r3, #0]
 800ab12:	4b15      	ldr	r3, [pc, #84]	; (800ab68 <xTaskCheckForTimeOut+0xc0>)
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	429a      	cmp	r2, r3
 800ab18:	d007      	beq.n	800ab2a <xTaskCheckForTimeOut+0x82>
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	685b      	ldr	r3, [r3, #4]
 800ab1e:	69ba      	ldr	r2, [r7, #24]
 800ab20:	429a      	cmp	r2, r3
 800ab22:	d302      	bcc.n	800ab2a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ab24:	2301      	movs	r3, #1
 800ab26:	61fb      	str	r3, [r7, #28]
 800ab28:	e015      	b.n	800ab56 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	697a      	ldr	r2, [r7, #20]
 800ab30:	429a      	cmp	r2, r3
 800ab32:	d20b      	bcs.n	800ab4c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ab34:	683b      	ldr	r3, [r7, #0]
 800ab36:	681a      	ldr	r2, [r3, #0]
 800ab38:	697b      	ldr	r3, [r7, #20]
 800ab3a:	1ad2      	subs	r2, r2, r3
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ab40:	6878      	ldr	r0, [r7, #4]
 800ab42:	f7ff ff9b 	bl	800aa7c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ab46:	2300      	movs	r3, #0
 800ab48:	61fb      	str	r3, [r7, #28]
 800ab4a:	e004      	b.n	800ab56 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	2200      	movs	r2, #0
 800ab50:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ab52:	2301      	movs	r3, #1
 800ab54:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ab56:	f000 fc6d 	bl	800b434 <vPortExitCritical>

	return xReturn;
 800ab5a:	69fb      	ldr	r3, [r7, #28]
}
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	3720      	adds	r7, #32
 800ab60:	46bd      	mov	sp, r7
 800ab62:	bd80      	pop	{r7, pc}
 800ab64:	20002704 	.word	0x20002704
 800ab68:	20002718 	.word	0x20002718

0800ab6c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ab6c:	b480      	push	{r7}
 800ab6e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ab70:	4b03      	ldr	r3, [pc, #12]	; (800ab80 <vTaskMissedYield+0x14>)
 800ab72:	2201      	movs	r2, #1
 800ab74:	601a      	str	r2, [r3, #0]
}
 800ab76:	bf00      	nop
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7e:	4770      	bx	lr
 800ab80:	20002714 	.word	0x20002714

0800ab84 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b082      	sub	sp, #8
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ab8c:	f000 f852 	bl	800ac34 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ab90:	4b06      	ldr	r3, [pc, #24]	; (800abac <prvIdleTask+0x28>)
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	2b01      	cmp	r3, #1
 800ab96:	d9f9      	bls.n	800ab8c <prvIdleTask+0x8>
			{
				taskYIELD();
 800ab98:	4b05      	ldr	r3, [pc, #20]	; (800abb0 <prvIdleTask+0x2c>)
 800ab9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab9e:	601a      	str	r2, [r3, #0]
 800aba0:	f3bf 8f4f 	dsb	sy
 800aba4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800aba8:	e7f0      	b.n	800ab8c <prvIdleTask+0x8>
 800abaa:	bf00      	nop
 800abac:	20002604 	.word	0x20002604
 800abb0:	e000ed04 	.word	0xe000ed04

0800abb4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b082      	sub	sp, #8
 800abb8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800abba:	2300      	movs	r3, #0
 800abbc:	607b      	str	r3, [r7, #4]
 800abbe:	e00c      	b.n	800abda <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800abc0:	687a      	ldr	r2, [r7, #4]
 800abc2:	4613      	mov	r3, r2
 800abc4:	009b      	lsls	r3, r3, #2
 800abc6:	4413      	add	r3, r2
 800abc8:	009b      	lsls	r3, r3, #2
 800abca:	4a12      	ldr	r2, [pc, #72]	; (800ac14 <prvInitialiseTaskLists+0x60>)
 800abcc:	4413      	add	r3, r2
 800abce:	4618      	mov	r0, r3
 800abd0:	f7fe fade 	bl	8009190 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	3301      	adds	r3, #1
 800abd8:	607b      	str	r3, [r7, #4]
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	2b06      	cmp	r3, #6
 800abde:	d9ef      	bls.n	800abc0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800abe0:	480d      	ldr	r0, [pc, #52]	; (800ac18 <prvInitialiseTaskLists+0x64>)
 800abe2:	f7fe fad5 	bl	8009190 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800abe6:	480d      	ldr	r0, [pc, #52]	; (800ac1c <prvInitialiseTaskLists+0x68>)
 800abe8:	f7fe fad2 	bl	8009190 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800abec:	480c      	ldr	r0, [pc, #48]	; (800ac20 <prvInitialiseTaskLists+0x6c>)
 800abee:	f7fe facf 	bl	8009190 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800abf2:	480c      	ldr	r0, [pc, #48]	; (800ac24 <prvInitialiseTaskLists+0x70>)
 800abf4:	f7fe facc 	bl	8009190 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800abf8:	480b      	ldr	r0, [pc, #44]	; (800ac28 <prvInitialiseTaskLists+0x74>)
 800abfa:	f7fe fac9 	bl	8009190 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800abfe:	4b0b      	ldr	r3, [pc, #44]	; (800ac2c <prvInitialiseTaskLists+0x78>)
 800ac00:	4a05      	ldr	r2, [pc, #20]	; (800ac18 <prvInitialiseTaskLists+0x64>)
 800ac02:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ac04:	4b0a      	ldr	r3, [pc, #40]	; (800ac30 <prvInitialiseTaskLists+0x7c>)
 800ac06:	4a05      	ldr	r2, [pc, #20]	; (800ac1c <prvInitialiseTaskLists+0x68>)
 800ac08:	601a      	str	r2, [r3, #0]
}
 800ac0a:	bf00      	nop
 800ac0c:	3708      	adds	r7, #8
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	bd80      	pop	{r7, pc}
 800ac12:	bf00      	nop
 800ac14:	20002604 	.word	0x20002604
 800ac18:	20002690 	.word	0x20002690
 800ac1c:	200026a4 	.word	0x200026a4
 800ac20:	200026c0 	.word	0x200026c0
 800ac24:	200026d4 	.word	0x200026d4
 800ac28:	200026ec 	.word	0x200026ec
 800ac2c:	200026b8 	.word	0x200026b8
 800ac30:	200026bc 	.word	0x200026bc

0800ac34 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ac34:	b580      	push	{r7, lr}
 800ac36:	b082      	sub	sp, #8
 800ac38:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ac3a:	e019      	b.n	800ac70 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ac3c:	f000 fbca 	bl	800b3d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac40:	4b10      	ldr	r3, [pc, #64]	; (800ac84 <prvCheckTasksWaitingTermination+0x50>)
 800ac42:	68db      	ldr	r3, [r3, #12]
 800ac44:	68db      	ldr	r3, [r3, #12]
 800ac46:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	3304      	adds	r3, #4
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	f7fe fb29 	bl	80092a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ac52:	4b0d      	ldr	r3, [pc, #52]	; (800ac88 <prvCheckTasksWaitingTermination+0x54>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	3b01      	subs	r3, #1
 800ac58:	4a0b      	ldr	r2, [pc, #44]	; (800ac88 <prvCheckTasksWaitingTermination+0x54>)
 800ac5a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ac5c:	4b0b      	ldr	r3, [pc, #44]	; (800ac8c <prvCheckTasksWaitingTermination+0x58>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	3b01      	subs	r3, #1
 800ac62:	4a0a      	ldr	r2, [pc, #40]	; (800ac8c <prvCheckTasksWaitingTermination+0x58>)
 800ac64:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ac66:	f000 fbe5 	bl	800b434 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ac6a:	6878      	ldr	r0, [r7, #4]
 800ac6c:	f000 f810 	bl	800ac90 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ac70:	4b06      	ldr	r3, [pc, #24]	; (800ac8c <prvCheckTasksWaitingTermination+0x58>)
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d1e1      	bne.n	800ac3c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ac78:	bf00      	nop
 800ac7a:	bf00      	nop
 800ac7c:	3708      	adds	r7, #8
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	bd80      	pop	{r7, pc}
 800ac82:	bf00      	nop
 800ac84:	200026d4 	.word	0x200026d4
 800ac88:	20002700 	.word	0x20002700
 800ac8c:	200026e8 	.word	0x200026e8

0800ac90 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b084      	sub	sp, #16
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	334c      	adds	r3, #76	; 0x4c
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	f000 ff7b 	bl	800bb98 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d108      	bne.n	800acbe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acb0:	4618      	mov	r0, r3
 800acb2:	f000 fd7d 	bl	800b7b0 <vPortFree>
				vPortFree( pxTCB );
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f000 fd7a 	bl	800b7b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800acbc:	e018      	b.n	800acf0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800acc4:	2b01      	cmp	r3, #1
 800acc6:	d103      	bne.n	800acd0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800acc8:	6878      	ldr	r0, [r7, #4]
 800acca:	f000 fd71 	bl	800b7b0 <vPortFree>
	}
 800acce:	e00f      	b.n	800acf0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800acd6:	2b02      	cmp	r3, #2
 800acd8:	d00a      	beq.n	800acf0 <prvDeleteTCB+0x60>
	__asm volatile
 800acda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acde:	f383 8811 	msr	BASEPRI, r3
 800ace2:	f3bf 8f6f 	isb	sy
 800ace6:	f3bf 8f4f 	dsb	sy
 800acea:	60fb      	str	r3, [r7, #12]
}
 800acec:	bf00      	nop
 800acee:	e7fe      	b.n	800acee <prvDeleteTCB+0x5e>
	}
 800acf0:	bf00      	nop
 800acf2:	3710      	adds	r7, #16
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd80      	pop	{r7, pc}

0800acf8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800acf8:	b480      	push	{r7}
 800acfa:	b083      	sub	sp, #12
 800acfc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800acfe:	4b0c      	ldr	r3, [pc, #48]	; (800ad30 <prvResetNextTaskUnblockTime+0x38>)
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d104      	bne.n	800ad12 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ad08:	4b0a      	ldr	r3, [pc, #40]	; (800ad34 <prvResetNextTaskUnblockTime+0x3c>)
 800ad0a:	f04f 32ff 	mov.w	r2, #4294967295
 800ad0e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ad10:	e008      	b.n	800ad24 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad12:	4b07      	ldr	r3, [pc, #28]	; (800ad30 <prvResetNextTaskUnblockTime+0x38>)
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	68db      	ldr	r3, [r3, #12]
 800ad18:	68db      	ldr	r3, [r3, #12]
 800ad1a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	685b      	ldr	r3, [r3, #4]
 800ad20:	4a04      	ldr	r2, [pc, #16]	; (800ad34 <prvResetNextTaskUnblockTime+0x3c>)
 800ad22:	6013      	str	r3, [r2, #0]
}
 800ad24:	bf00      	nop
 800ad26:	370c      	adds	r7, #12
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2e:	4770      	bx	lr
 800ad30:	200026b8 	.word	0x200026b8
 800ad34:	20002720 	.word	0x20002720

0800ad38 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ad38:	b480      	push	{r7}
 800ad3a:	b083      	sub	sp, #12
 800ad3c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ad3e:	4b0b      	ldr	r3, [pc, #44]	; (800ad6c <xTaskGetSchedulerState+0x34>)
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d102      	bne.n	800ad4c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ad46:	2301      	movs	r3, #1
 800ad48:	607b      	str	r3, [r7, #4]
 800ad4a:	e008      	b.n	800ad5e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad4c:	4b08      	ldr	r3, [pc, #32]	; (800ad70 <xTaskGetSchedulerState+0x38>)
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d102      	bne.n	800ad5a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ad54:	2302      	movs	r3, #2
 800ad56:	607b      	str	r3, [r7, #4]
 800ad58:	e001      	b.n	800ad5e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ad5e:	687b      	ldr	r3, [r7, #4]
	}
 800ad60:	4618      	mov	r0, r3
 800ad62:	370c      	adds	r7, #12
 800ad64:	46bd      	mov	sp, r7
 800ad66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6a:	4770      	bx	lr
 800ad6c:	2000270c 	.word	0x2000270c
 800ad70:	20002728 	.word	0x20002728

0800ad74 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b084      	sub	sp, #16
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ad80:	2300      	movs	r3, #0
 800ad82:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d05e      	beq.n	800ae48 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ad8a:	68bb      	ldr	r3, [r7, #8]
 800ad8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad8e:	4b31      	ldr	r3, [pc, #196]	; (800ae54 <xTaskPriorityInherit+0xe0>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad94:	429a      	cmp	r2, r3
 800ad96:	d24e      	bcs.n	800ae36 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ad98:	68bb      	ldr	r3, [r7, #8]
 800ad9a:	699b      	ldr	r3, [r3, #24]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	db06      	blt.n	800adae <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ada0:	4b2c      	ldr	r3, [pc, #176]	; (800ae54 <xTaskPriorityInherit+0xe0>)
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ada6:	f1c3 0207 	rsb	r2, r3, #7
 800adaa:	68bb      	ldr	r3, [r7, #8]
 800adac:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800adae:	68bb      	ldr	r3, [r7, #8]
 800adb0:	6959      	ldr	r1, [r3, #20]
 800adb2:	68bb      	ldr	r3, [r7, #8]
 800adb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adb6:	4613      	mov	r3, r2
 800adb8:	009b      	lsls	r3, r3, #2
 800adba:	4413      	add	r3, r2
 800adbc:	009b      	lsls	r3, r3, #2
 800adbe:	4a26      	ldr	r2, [pc, #152]	; (800ae58 <xTaskPriorityInherit+0xe4>)
 800adc0:	4413      	add	r3, r2
 800adc2:	4299      	cmp	r1, r3
 800adc4:	d12f      	bne.n	800ae26 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800adc6:	68bb      	ldr	r3, [r7, #8]
 800adc8:	3304      	adds	r3, #4
 800adca:	4618      	mov	r0, r3
 800adcc:	f7fe fa6a 	bl	80092a4 <uxListRemove>
 800add0:	4603      	mov	r3, r0
 800add2:	2b00      	cmp	r3, #0
 800add4:	d10a      	bne.n	800adec <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800add6:	68bb      	ldr	r3, [r7, #8]
 800add8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adda:	2201      	movs	r2, #1
 800addc:	fa02 f303 	lsl.w	r3, r2, r3
 800ade0:	43da      	mvns	r2, r3
 800ade2:	4b1e      	ldr	r3, [pc, #120]	; (800ae5c <xTaskPriorityInherit+0xe8>)
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	4013      	ands	r3, r2
 800ade8:	4a1c      	ldr	r2, [pc, #112]	; (800ae5c <xTaskPriorityInherit+0xe8>)
 800adea:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800adec:	4b19      	ldr	r3, [pc, #100]	; (800ae54 <xTaskPriorityInherit+0xe0>)
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adf2:	68bb      	ldr	r3, [r7, #8]
 800adf4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800adf6:	68bb      	ldr	r3, [r7, #8]
 800adf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adfa:	2201      	movs	r2, #1
 800adfc:	409a      	lsls	r2, r3
 800adfe:	4b17      	ldr	r3, [pc, #92]	; (800ae5c <xTaskPriorityInherit+0xe8>)
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	4313      	orrs	r3, r2
 800ae04:	4a15      	ldr	r2, [pc, #84]	; (800ae5c <xTaskPriorityInherit+0xe8>)
 800ae06:	6013      	str	r3, [r2, #0]
 800ae08:	68bb      	ldr	r3, [r7, #8]
 800ae0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae0c:	4613      	mov	r3, r2
 800ae0e:	009b      	lsls	r3, r3, #2
 800ae10:	4413      	add	r3, r2
 800ae12:	009b      	lsls	r3, r3, #2
 800ae14:	4a10      	ldr	r2, [pc, #64]	; (800ae58 <xTaskPriorityInherit+0xe4>)
 800ae16:	441a      	add	r2, r3
 800ae18:	68bb      	ldr	r3, [r7, #8]
 800ae1a:	3304      	adds	r3, #4
 800ae1c:	4619      	mov	r1, r3
 800ae1e:	4610      	mov	r0, r2
 800ae20:	f7fe f9e3 	bl	80091ea <vListInsertEnd>
 800ae24:	e004      	b.n	800ae30 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ae26:	4b0b      	ldr	r3, [pc, #44]	; (800ae54 <xTaskPriorityInherit+0xe0>)
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae2c:	68bb      	ldr	r3, [r7, #8]
 800ae2e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ae30:	2301      	movs	r3, #1
 800ae32:	60fb      	str	r3, [r7, #12]
 800ae34:	e008      	b.n	800ae48 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ae36:	68bb      	ldr	r3, [r7, #8]
 800ae38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ae3a:	4b06      	ldr	r3, [pc, #24]	; (800ae54 <xTaskPriorityInherit+0xe0>)
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae40:	429a      	cmp	r2, r3
 800ae42:	d201      	bcs.n	800ae48 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ae44:	2301      	movs	r3, #1
 800ae46:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ae48:	68fb      	ldr	r3, [r7, #12]
	}
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	3710      	adds	r7, #16
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	bd80      	pop	{r7, pc}
 800ae52:	bf00      	nop
 800ae54:	20002600 	.word	0x20002600
 800ae58:	20002604 	.word	0x20002604
 800ae5c:	20002708 	.word	0x20002708

0800ae60 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b086      	sub	sp, #24
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d06e      	beq.n	800af54 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ae76:	4b3a      	ldr	r3, [pc, #232]	; (800af60 <xTaskPriorityDisinherit+0x100>)
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	693a      	ldr	r2, [r7, #16]
 800ae7c:	429a      	cmp	r2, r3
 800ae7e:	d00a      	beq.n	800ae96 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ae80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae84:	f383 8811 	msr	BASEPRI, r3
 800ae88:	f3bf 8f6f 	isb	sy
 800ae8c:	f3bf 8f4f 	dsb	sy
 800ae90:	60fb      	str	r3, [r7, #12]
}
 800ae92:	bf00      	nop
 800ae94:	e7fe      	b.n	800ae94 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ae96:	693b      	ldr	r3, [r7, #16]
 800ae98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d10a      	bne.n	800aeb4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ae9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aea2:	f383 8811 	msr	BASEPRI, r3
 800aea6:	f3bf 8f6f 	isb	sy
 800aeaa:	f3bf 8f4f 	dsb	sy
 800aeae:	60bb      	str	r3, [r7, #8]
}
 800aeb0:	bf00      	nop
 800aeb2:	e7fe      	b.n	800aeb2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800aeb4:	693b      	ldr	r3, [r7, #16]
 800aeb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aeb8:	1e5a      	subs	r2, r3, #1
 800aeba:	693b      	ldr	r3, [r7, #16]
 800aebc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800aebe:	693b      	ldr	r3, [r7, #16]
 800aec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aec2:	693b      	ldr	r3, [r7, #16]
 800aec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aec6:	429a      	cmp	r2, r3
 800aec8:	d044      	beq.n	800af54 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800aeca:	693b      	ldr	r3, [r7, #16]
 800aecc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d140      	bne.n	800af54 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aed2:	693b      	ldr	r3, [r7, #16]
 800aed4:	3304      	adds	r3, #4
 800aed6:	4618      	mov	r0, r3
 800aed8:	f7fe f9e4 	bl	80092a4 <uxListRemove>
 800aedc:	4603      	mov	r3, r0
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d115      	bne.n	800af0e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800aee2:	693b      	ldr	r3, [r7, #16]
 800aee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aee6:	491f      	ldr	r1, [pc, #124]	; (800af64 <xTaskPriorityDisinherit+0x104>)
 800aee8:	4613      	mov	r3, r2
 800aeea:	009b      	lsls	r3, r3, #2
 800aeec:	4413      	add	r3, r2
 800aeee:	009b      	lsls	r3, r3, #2
 800aef0:	440b      	add	r3, r1
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d10a      	bne.n	800af0e <xTaskPriorityDisinherit+0xae>
 800aef8:	693b      	ldr	r3, [r7, #16]
 800aefa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aefc:	2201      	movs	r2, #1
 800aefe:	fa02 f303 	lsl.w	r3, r2, r3
 800af02:	43da      	mvns	r2, r3
 800af04:	4b18      	ldr	r3, [pc, #96]	; (800af68 <xTaskPriorityDisinherit+0x108>)
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	4013      	ands	r3, r2
 800af0a:	4a17      	ldr	r2, [pc, #92]	; (800af68 <xTaskPriorityDisinherit+0x108>)
 800af0c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800af0e:	693b      	ldr	r3, [r7, #16]
 800af10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800af12:	693b      	ldr	r3, [r7, #16]
 800af14:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af16:	693b      	ldr	r3, [r7, #16]
 800af18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af1a:	f1c3 0207 	rsb	r2, r3, #7
 800af1e:	693b      	ldr	r3, [r7, #16]
 800af20:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800af22:	693b      	ldr	r3, [r7, #16]
 800af24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af26:	2201      	movs	r2, #1
 800af28:	409a      	lsls	r2, r3
 800af2a:	4b0f      	ldr	r3, [pc, #60]	; (800af68 <xTaskPriorityDisinherit+0x108>)
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	4313      	orrs	r3, r2
 800af30:	4a0d      	ldr	r2, [pc, #52]	; (800af68 <xTaskPriorityDisinherit+0x108>)
 800af32:	6013      	str	r3, [r2, #0]
 800af34:	693b      	ldr	r3, [r7, #16]
 800af36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af38:	4613      	mov	r3, r2
 800af3a:	009b      	lsls	r3, r3, #2
 800af3c:	4413      	add	r3, r2
 800af3e:	009b      	lsls	r3, r3, #2
 800af40:	4a08      	ldr	r2, [pc, #32]	; (800af64 <xTaskPriorityDisinherit+0x104>)
 800af42:	441a      	add	r2, r3
 800af44:	693b      	ldr	r3, [r7, #16]
 800af46:	3304      	adds	r3, #4
 800af48:	4619      	mov	r1, r3
 800af4a:	4610      	mov	r0, r2
 800af4c:	f7fe f94d 	bl	80091ea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800af50:	2301      	movs	r3, #1
 800af52:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800af54:	697b      	ldr	r3, [r7, #20]
	}
 800af56:	4618      	mov	r0, r3
 800af58:	3718      	adds	r7, #24
 800af5a:	46bd      	mov	sp, r7
 800af5c:	bd80      	pop	{r7, pc}
 800af5e:	bf00      	nop
 800af60:	20002600 	.word	0x20002600
 800af64:	20002604 	.word	0x20002604
 800af68:	20002708 	.word	0x20002708

0800af6c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b088      	sub	sp, #32
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
 800af74:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800af7a:	2301      	movs	r3, #1
 800af7c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d077      	beq.n	800b074 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800af84:	69bb      	ldr	r3, [r7, #24]
 800af86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d10a      	bne.n	800afa2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800af8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af90:	f383 8811 	msr	BASEPRI, r3
 800af94:	f3bf 8f6f 	isb	sy
 800af98:	f3bf 8f4f 	dsb	sy
 800af9c:	60fb      	str	r3, [r7, #12]
}
 800af9e:	bf00      	nop
 800afa0:	e7fe      	b.n	800afa0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800afa2:	69bb      	ldr	r3, [r7, #24]
 800afa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afa6:	683a      	ldr	r2, [r7, #0]
 800afa8:	429a      	cmp	r2, r3
 800afaa:	d902      	bls.n	800afb2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800afac:	683b      	ldr	r3, [r7, #0]
 800afae:	61fb      	str	r3, [r7, #28]
 800afb0:	e002      	b.n	800afb8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800afb2:	69bb      	ldr	r3, [r7, #24]
 800afb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afb6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800afb8:	69bb      	ldr	r3, [r7, #24]
 800afba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afbc:	69fa      	ldr	r2, [r7, #28]
 800afbe:	429a      	cmp	r2, r3
 800afc0:	d058      	beq.n	800b074 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800afc2:	69bb      	ldr	r3, [r7, #24]
 800afc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800afc6:	697a      	ldr	r2, [r7, #20]
 800afc8:	429a      	cmp	r2, r3
 800afca:	d153      	bne.n	800b074 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800afcc:	4b2b      	ldr	r3, [pc, #172]	; (800b07c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	69ba      	ldr	r2, [r7, #24]
 800afd2:	429a      	cmp	r2, r3
 800afd4:	d10a      	bne.n	800afec <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800afd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afda:	f383 8811 	msr	BASEPRI, r3
 800afde:	f3bf 8f6f 	isb	sy
 800afe2:	f3bf 8f4f 	dsb	sy
 800afe6:	60bb      	str	r3, [r7, #8]
}
 800afe8:	bf00      	nop
 800afea:	e7fe      	b.n	800afea <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800afec:	69bb      	ldr	r3, [r7, #24]
 800afee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aff0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800aff2:	69bb      	ldr	r3, [r7, #24]
 800aff4:	69fa      	ldr	r2, [r7, #28]
 800aff6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800aff8:	69bb      	ldr	r3, [r7, #24]
 800affa:	699b      	ldr	r3, [r3, #24]
 800affc:	2b00      	cmp	r3, #0
 800affe:	db04      	blt.n	800b00a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b000:	69fb      	ldr	r3, [r7, #28]
 800b002:	f1c3 0207 	rsb	r2, r3, #7
 800b006:	69bb      	ldr	r3, [r7, #24]
 800b008:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b00a:	69bb      	ldr	r3, [r7, #24]
 800b00c:	6959      	ldr	r1, [r3, #20]
 800b00e:	693a      	ldr	r2, [r7, #16]
 800b010:	4613      	mov	r3, r2
 800b012:	009b      	lsls	r3, r3, #2
 800b014:	4413      	add	r3, r2
 800b016:	009b      	lsls	r3, r3, #2
 800b018:	4a19      	ldr	r2, [pc, #100]	; (800b080 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800b01a:	4413      	add	r3, r2
 800b01c:	4299      	cmp	r1, r3
 800b01e:	d129      	bne.n	800b074 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b020:	69bb      	ldr	r3, [r7, #24]
 800b022:	3304      	adds	r3, #4
 800b024:	4618      	mov	r0, r3
 800b026:	f7fe f93d 	bl	80092a4 <uxListRemove>
 800b02a:	4603      	mov	r3, r0
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d10a      	bne.n	800b046 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800b030:	69bb      	ldr	r3, [r7, #24]
 800b032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b034:	2201      	movs	r2, #1
 800b036:	fa02 f303 	lsl.w	r3, r2, r3
 800b03a:	43da      	mvns	r2, r3
 800b03c:	4b11      	ldr	r3, [pc, #68]	; (800b084 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	4013      	ands	r3, r2
 800b042:	4a10      	ldr	r2, [pc, #64]	; (800b084 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800b044:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b046:	69bb      	ldr	r3, [r7, #24]
 800b048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b04a:	2201      	movs	r2, #1
 800b04c:	409a      	lsls	r2, r3
 800b04e:	4b0d      	ldr	r3, [pc, #52]	; (800b084 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	4313      	orrs	r3, r2
 800b054:	4a0b      	ldr	r2, [pc, #44]	; (800b084 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800b056:	6013      	str	r3, [r2, #0]
 800b058:	69bb      	ldr	r3, [r7, #24]
 800b05a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b05c:	4613      	mov	r3, r2
 800b05e:	009b      	lsls	r3, r3, #2
 800b060:	4413      	add	r3, r2
 800b062:	009b      	lsls	r3, r3, #2
 800b064:	4a06      	ldr	r2, [pc, #24]	; (800b080 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800b066:	441a      	add	r2, r3
 800b068:	69bb      	ldr	r3, [r7, #24]
 800b06a:	3304      	adds	r3, #4
 800b06c:	4619      	mov	r1, r3
 800b06e:	4610      	mov	r0, r2
 800b070:	f7fe f8bb 	bl	80091ea <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b074:	bf00      	nop
 800b076:	3720      	adds	r7, #32
 800b078:	46bd      	mov	sp, r7
 800b07a:	bd80      	pop	{r7, pc}
 800b07c:	20002600 	.word	0x20002600
 800b080:	20002604 	.word	0x20002604
 800b084:	20002708 	.word	0x20002708

0800b088 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b088:	b480      	push	{r7}
 800b08a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b08c:	4b07      	ldr	r3, [pc, #28]	; (800b0ac <pvTaskIncrementMutexHeldCount+0x24>)
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d004      	beq.n	800b09e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b094:	4b05      	ldr	r3, [pc, #20]	; (800b0ac <pvTaskIncrementMutexHeldCount+0x24>)
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b09a:	3201      	adds	r2, #1
 800b09c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800b09e:	4b03      	ldr	r3, [pc, #12]	; (800b0ac <pvTaskIncrementMutexHeldCount+0x24>)
 800b0a0:	681b      	ldr	r3, [r3, #0]
	}
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0aa:	4770      	bx	lr
 800b0ac:	20002600 	.word	0x20002600

0800b0b0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b084      	sub	sp, #16
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
 800b0b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b0ba:	4b29      	ldr	r3, [pc, #164]	; (800b160 <prvAddCurrentTaskToDelayedList+0xb0>)
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b0c0:	4b28      	ldr	r3, [pc, #160]	; (800b164 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	3304      	adds	r3, #4
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	f7fe f8ec 	bl	80092a4 <uxListRemove>
 800b0cc:	4603      	mov	r3, r0
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d10b      	bne.n	800b0ea <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800b0d2:	4b24      	ldr	r3, [pc, #144]	; (800b164 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0d8:	2201      	movs	r2, #1
 800b0da:	fa02 f303 	lsl.w	r3, r2, r3
 800b0de:	43da      	mvns	r2, r3
 800b0e0:	4b21      	ldr	r3, [pc, #132]	; (800b168 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	4013      	ands	r3, r2
 800b0e6:	4a20      	ldr	r2, [pc, #128]	; (800b168 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b0e8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0f0:	d10a      	bne.n	800b108 <prvAddCurrentTaskToDelayedList+0x58>
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d007      	beq.n	800b108 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b0f8:	4b1a      	ldr	r3, [pc, #104]	; (800b164 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	3304      	adds	r3, #4
 800b0fe:	4619      	mov	r1, r3
 800b100:	481a      	ldr	r0, [pc, #104]	; (800b16c <prvAddCurrentTaskToDelayedList+0xbc>)
 800b102:	f7fe f872 	bl	80091ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b106:	e026      	b.n	800b156 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b108:	68fa      	ldr	r2, [r7, #12]
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	4413      	add	r3, r2
 800b10e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b110:	4b14      	ldr	r3, [pc, #80]	; (800b164 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	68ba      	ldr	r2, [r7, #8]
 800b116:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b118:	68ba      	ldr	r2, [r7, #8]
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	429a      	cmp	r2, r3
 800b11e:	d209      	bcs.n	800b134 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b120:	4b13      	ldr	r3, [pc, #76]	; (800b170 <prvAddCurrentTaskToDelayedList+0xc0>)
 800b122:	681a      	ldr	r2, [r3, #0]
 800b124:	4b0f      	ldr	r3, [pc, #60]	; (800b164 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	3304      	adds	r3, #4
 800b12a:	4619      	mov	r1, r3
 800b12c:	4610      	mov	r0, r2
 800b12e:	f7fe f880 	bl	8009232 <vListInsert>
}
 800b132:	e010      	b.n	800b156 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b134:	4b0f      	ldr	r3, [pc, #60]	; (800b174 <prvAddCurrentTaskToDelayedList+0xc4>)
 800b136:	681a      	ldr	r2, [r3, #0]
 800b138:	4b0a      	ldr	r3, [pc, #40]	; (800b164 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	3304      	adds	r3, #4
 800b13e:	4619      	mov	r1, r3
 800b140:	4610      	mov	r0, r2
 800b142:	f7fe f876 	bl	8009232 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b146:	4b0c      	ldr	r3, [pc, #48]	; (800b178 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	68ba      	ldr	r2, [r7, #8]
 800b14c:	429a      	cmp	r2, r3
 800b14e:	d202      	bcs.n	800b156 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b150:	4a09      	ldr	r2, [pc, #36]	; (800b178 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b152:	68bb      	ldr	r3, [r7, #8]
 800b154:	6013      	str	r3, [r2, #0]
}
 800b156:	bf00      	nop
 800b158:	3710      	adds	r7, #16
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bd80      	pop	{r7, pc}
 800b15e:	bf00      	nop
 800b160:	20002704 	.word	0x20002704
 800b164:	20002600 	.word	0x20002600
 800b168:	20002708 	.word	0x20002708
 800b16c:	200026ec 	.word	0x200026ec
 800b170:	200026bc 	.word	0x200026bc
 800b174:	200026b8 	.word	0x200026b8
 800b178:	20002720 	.word	0x20002720

0800b17c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b17c:	b480      	push	{r7}
 800b17e:	b085      	sub	sp, #20
 800b180:	af00      	add	r7, sp, #0
 800b182:	60f8      	str	r0, [r7, #12]
 800b184:	60b9      	str	r1, [r7, #8]
 800b186:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	3b04      	subs	r3, #4
 800b18c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b194:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	3b04      	subs	r3, #4
 800b19a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b19c:	68bb      	ldr	r3, [r7, #8]
 800b19e:	f023 0201 	bic.w	r2, r3, #1
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	3b04      	subs	r3, #4
 800b1aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b1ac:	4a0c      	ldr	r2, [pc, #48]	; (800b1e0 <pxPortInitialiseStack+0x64>)
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	3b14      	subs	r3, #20
 800b1b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b1b8:	687a      	ldr	r2, [r7, #4]
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	3b04      	subs	r3, #4
 800b1c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	f06f 0202 	mvn.w	r2, #2
 800b1ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	3b20      	subs	r3, #32
 800b1d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b1d2:	68fb      	ldr	r3, [r7, #12]
}
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	3714      	adds	r7, #20
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1de:	4770      	bx	lr
 800b1e0:	0800b1e5 	.word	0x0800b1e5

0800b1e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b1e4:	b480      	push	{r7}
 800b1e6:	b085      	sub	sp, #20
 800b1e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b1ee:	4b12      	ldr	r3, [pc, #72]	; (800b238 <prvTaskExitError+0x54>)
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1f6:	d00a      	beq.n	800b20e <prvTaskExitError+0x2a>
	__asm volatile
 800b1f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1fc:	f383 8811 	msr	BASEPRI, r3
 800b200:	f3bf 8f6f 	isb	sy
 800b204:	f3bf 8f4f 	dsb	sy
 800b208:	60fb      	str	r3, [r7, #12]
}
 800b20a:	bf00      	nop
 800b20c:	e7fe      	b.n	800b20c <prvTaskExitError+0x28>
	__asm volatile
 800b20e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b212:	f383 8811 	msr	BASEPRI, r3
 800b216:	f3bf 8f6f 	isb	sy
 800b21a:	f3bf 8f4f 	dsb	sy
 800b21e:	60bb      	str	r3, [r7, #8]
}
 800b220:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b222:	bf00      	nop
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d0fc      	beq.n	800b224 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b22a:	bf00      	nop
 800b22c:	bf00      	nop
 800b22e:	3714      	adds	r7, #20
 800b230:	46bd      	mov	sp, r7
 800b232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b236:	4770      	bx	lr
 800b238:	2000000c 	.word	0x2000000c
 800b23c:	00000000 	.word	0x00000000

0800b240 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b240:	4b07      	ldr	r3, [pc, #28]	; (800b260 <pxCurrentTCBConst2>)
 800b242:	6819      	ldr	r1, [r3, #0]
 800b244:	6808      	ldr	r0, [r1, #0]
 800b246:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b24a:	f380 8809 	msr	PSP, r0
 800b24e:	f3bf 8f6f 	isb	sy
 800b252:	f04f 0000 	mov.w	r0, #0
 800b256:	f380 8811 	msr	BASEPRI, r0
 800b25a:	4770      	bx	lr
 800b25c:	f3af 8000 	nop.w

0800b260 <pxCurrentTCBConst2>:
 800b260:	20002600 	.word	0x20002600
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b264:	bf00      	nop
 800b266:	bf00      	nop

0800b268 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b268:	4808      	ldr	r0, [pc, #32]	; (800b28c <prvPortStartFirstTask+0x24>)
 800b26a:	6800      	ldr	r0, [r0, #0]
 800b26c:	6800      	ldr	r0, [r0, #0]
 800b26e:	f380 8808 	msr	MSP, r0
 800b272:	f04f 0000 	mov.w	r0, #0
 800b276:	f380 8814 	msr	CONTROL, r0
 800b27a:	b662      	cpsie	i
 800b27c:	b661      	cpsie	f
 800b27e:	f3bf 8f4f 	dsb	sy
 800b282:	f3bf 8f6f 	isb	sy
 800b286:	df00      	svc	0
 800b288:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b28a:	bf00      	nop
 800b28c:	e000ed08 	.word	0xe000ed08

0800b290 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b086      	sub	sp, #24
 800b294:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b296:	4b46      	ldr	r3, [pc, #280]	; (800b3b0 <xPortStartScheduler+0x120>)
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	4a46      	ldr	r2, [pc, #280]	; (800b3b4 <xPortStartScheduler+0x124>)
 800b29c:	4293      	cmp	r3, r2
 800b29e:	d10a      	bne.n	800b2b6 <xPortStartScheduler+0x26>
	__asm volatile
 800b2a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2a4:	f383 8811 	msr	BASEPRI, r3
 800b2a8:	f3bf 8f6f 	isb	sy
 800b2ac:	f3bf 8f4f 	dsb	sy
 800b2b0:	613b      	str	r3, [r7, #16]
}
 800b2b2:	bf00      	nop
 800b2b4:	e7fe      	b.n	800b2b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b2b6:	4b3e      	ldr	r3, [pc, #248]	; (800b3b0 <xPortStartScheduler+0x120>)
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	4a3f      	ldr	r2, [pc, #252]	; (800b3b8 <xPortStartScheduler+0x128>)
 800b2bc:	4293      	cmp	r3, r2
 800b2be:	d10a      	bne.n	800b2d6 <xPortStartScheduler+0x46>
	__asm volatile
 800b2c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2c4:	f383 8811 	msr	BASEPRI, r3
 800b2c8:	f3bf 8f6f 	isb	sy
 800b2cc:	f3bf 8f4f 	dsb	sy
 800b2d0:	60fb      	str	r3, [r7, #12]
}
 800b2d2:	bf00      	nop
 800b2d4:	e7fe      	b.n	800b2d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b2d6:	4b39      	ldr	r3, [pc, #228]	; (800b3bc <xPortStartScheduler+0x12c>)
 800b2d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b2da:	697b      	ldr	r3, [r7, #20]
 800b2dc:	781b      	ldrb	r3, [r3, #0]
 800b2de:	b2db      	uxtb	r3, r3
 800b2e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b2e2:	697b      	ldr	r3, [r7, #20]
 800b2e4:	22ff      	movs	r2, #255	; 0xff
 800b2e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b2e8:	697b      	ldr	r3, [r7, #20]
 800b2ea:	781b      	ldrb	r3, [r3, #0]
 800b2ec:	b2db      	uxtb	r3, r3
 800b2ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b2f0:	78fb      	ldrb	r3, [r7, #3]
 800b2f2:	b2db      	uxtb	r3, r3
 800b2f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b2f8:	b2da      	uxtb	r2, r3
 800b2fa:	4b31      	ldr	r3, [pc, #196]	; (800b3c0 <xPortStartScheduler+0x130>)
 800b2fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b2fe:	4b31      	ldr	r3, [pc, #196]	; (800b3c4 <xPortStartScheduler+0x134>)
 800b300:	2207      	movs	r2, #7
 800b302:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b304:	e009      	b.n	800b31a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b306:	4b2f      	ldr	r3, [pc, #188]	; (800b3c4 <xPortStartScheduler+0x134>)
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	3b01      	subs	r3, #1
 800b30c:	4a2d      	ldr	r2, [pc, #180]	; (800b3c4 <xPortStartScheduler+0x134>)
 800b30e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b310:	78fb      	ldrb	r3, [r7, #3]
 800b312:	b2db      	uxtb	r3, r3
 800b314:	005b      	lsls	r3, r3, #1
 800b316:	b2db      	uxtb	r3, r3
 800b318:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b31a:	78fb      	ldrb	r3, [r7, #3]
 800b31c:	b2db      	uxtb	r3, r3
 800b31e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b322:	2b80      	cmp	r3, #128	; 0x80
 800b324:	d0ef      	beq.n	800b306 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b326:	4b27      	ldr	r3, [pc, #156]	; (800b3c4 <xPortStartScheduler+0x134>)
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	f1c3 0307 	rsb	r3, r3, #7
 800b32e:	2b04      	cmp	r3, #4
 800b330:	d00a      	beq.n	800b348 <xPortStartScheduler+0xb8>
	__asm volatile
 800b332:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b336:	f383 8811 	msr	BASEPRI, r3
 800b33a:	f3bf 8f6f 	isb	sy
 800b33e:	f3bf 8f4f 	dsb	sy
 800b342:	60bb      	str	r3, [r7, #8]
}
 800b344:	bf00      	nop
 800b346:	e7fe      	b.n	800b346 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b348:	4b1e      	ldr	r3, [pc, #120]	; (800b3c4 <xPortStartScheduler+0x134>)
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	021b      	lsls	r3, r3, #8
 800b34e:	4a1d      	ldr	r2, [pc, #116]	; (800b3c4 <xPortStartScheduler+0x134>)
 800b350:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b352:	4b1c      	ldr	r3, [pc, #112]	; (800b3c4 <xPortStartScheduler+0x134>)
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b35a:	4a1a      	ldr	r2, [pc, #104]	; (800b3c4 <xPortStartScheduler+0x134>)
 800b35c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	b2da      	uxtb	r2, r3
 800b362:	697b      	ldr	r3, [r7, #20]
 800b364:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b366:	4b18      	ldr	r3, [pc, #96]	; (800b3c8 <xPortStartScheduler+0x138>)
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	4a17      	ldr	r2, [pc, #92]	; (800b3c8 <xPortStartScheduler+0x138>)
 800b36c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b370:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b372:	4b15      	ldr	r3, [pc, #84]	; (800b3c8 <xPortStartScheduler+0x138>)
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	4a14      	ldr	r2, [pc, #80]	; (800b3c8 <xPortStartScheduler+0x138>)
 800b378:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b37c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b37e:	f000 f8dd 	bl	800b53c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b382:	4b12      	ldr	r3, [pc, #72]	; (800b3cc <xPortStartScheduler+0x13c>)
 800b384:	2200      	movs	r2, #0
 800b386:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b388:	f000 f8fc 	bl	800b584 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b38c:	4b10      	ldr	r3, [pc, #64]	; (800b3d0 <xPortStartScheduler+0x140>)
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	4a0f      	ldr	r2, [pc, #60]	; (800b3d0 <xPortStartScheduler+0x140>)
 800b392:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b396:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b398:	f7ff ff66 	bl	800b268 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b39c:	f7ff fa86 	bl	800a8ac <vTaskSwitchContext>
	prvTaskExitError();
 800b3a0:	f7ff ff20 	bl	800b1e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b3a4:	2300      	movs	r3, #0
}
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	3718      	adds	r7, #24
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	bd80      	pop	{r7, pc}
 800b3ae:	bf00      	nop
 800b3b0:	e000ed00 	.word	0xe000ed00
 800b3b4:	410fc271 	.word	0x410fc271
 800b3b8:	410fc270 	.word	0x410fc270
 800b3bc:	e000e400 	.word	0xe000e400
 800b3c0:	2000272c 	.word	0x2000272c
 800b3c4:	20002730 	.word	0x20002730
 800b3c8:	e000ed20 	.word	0xe000ed20
 800b3cc:	2000000c 	.word	0x2000000c
 800b3d0:	e000ef34 	.word	0xe000ef34

0800b3d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b3d4:	b480      	push	{r7}
 800b3d6:	b083      	sub	sp, #12
 800b3d8:	af00      	add	r7, sp, #0
	__asm volatile
 800b3da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3de:	f383 8811 	msr	BASEPRI, r3
 800b3e2:	f3bf 8f6f 	isb	sy
 800b3e6:	f3bf 8f4f 	dsb	sy
 800b3ea:	607b      	str	r3, [r7, #4]
}
 800b3ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b3ee:	4b0f      	ldr	r3, [pc, #60]	; (800b42c <vPortEnterCritical+0x58>)
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	3301      	adds	r3, #1
 800b3f4:	4a0d      	ldr	r2, [pc, #52]	; (800b42c <vPortEnterCritical+0x58>)
 800b3f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b3f8:	4b0c      	ldr	r3, [pc, #48]	; (800b42c <vPortEnterCritical+0x58>)
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	2b01      	cmp	r3, #1
 800b3fe:	d10f      	bne.n	800b420 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b400:	4b0b      	ldr	r3, [pc, #44]	; (800b430 <vPortEnterCritical+0x5c>)
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	b2db      	uxtb	r3, r3
 800b406:	2b00      	cmp	r3, #0
 800b408:	d00a      	beq.n	800b420 <vPortEnterCritical+0x4c>
	__asm volatile
 800b40a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b40e:	f383 8811 	msr	BASEPRI, r3
 800b412:	f3bf 8f6f 	isb	sy
 800b416:	f3bf 8f4f 	dsb	sy
 800b41a:	603b      	str	r3, [r7, #0]
}
 800b41c:	bf00      	nop
 800b41e:	e7fe      	b.n	800b41e <vPortEnterCritical+0x4a>
	}
}
 800b420:	bf00      	nop
 800b422:	370c      	adds	r7, #12
 800b424:	46bd      	mov	sp, r7
 800b426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42a:	4770      	bx	lr
 800b42c:	2000000c 	.word	0x2000000c
 800b430:	e000ed04 	.word	0xe000ed04

0800b434 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b434:	b480      	push	{r7}
 800b436:	b083      	sub	sp, #12
 800b438:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b43a:	4b12      	ldr	r3, [pc, #72]	; (800b484 <vPortExitCritical+0x50>)
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d10a      	bne.n	800b458 <vPortExitCritical+0x24>
	__asm volatile
 800b442:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b446:	f383 8811 	msr	BASEPRI, r3
 800b44a:	f3bf 8f6f 	isb	sy
 800b44e:	f3bf 8f4f 	dsb	sy
 800b452:	607b      	str	r3, [r7, #4]
}
 800b454:	bf00      	nop
 800b456:	e7fe      	b.n	800b456 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b458:	4b0a      	ldr	r3, [pc, #40]	; (800b484 <vPortExitCritical+0x50>)
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	3b01      	subs	r3, #1
 800b45e:	4a09      	ldr	r2, [pc, #36]	; (800b484 <vPortExitCritical+0x50>)
 800b460:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b462:	4b08      	ldr	r3, [pc, #32]	; (800b484 <vPortExitCritical+0x50>)
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d105      	bne.n	800b476 <vPortExitCritical+0x42>
 800b46a:	2300      	movs	r3, #0
 800b46c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	f383 8811 	msr	BASEPRI, r3
}
 800b474:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b476:	bf00      	nop
 800b478:	370c      	adds	r7, #12
 800b47a:	46bd      	mov	sp, r7
 800b47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b480:	4770      	bx	lr
 800b482:	bf00      	nop
 800b484:	2000000c 	.word	0x2000000c
	...

0800b490 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b490:	f3ef 8009 	mrs	r0, PSP
 800b494:	f3bf 8f6f 	isb	sy
 800b498:	4b15      	ldr	r3, [pc, #84]	; (800b4f0 <pxCurrentTCBConst>)
 800b49a:	681a      	ldr	r2, [r3, #0]
 800b49c:	f01e 0f10 	tst.w	lr, #16
 800b4a0:	bf08      	it	eq
 800b4a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b4a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4aa:	6010      	str	r0, [r2, #0]
 800b4ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b4b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b4b4:	f380 8811 	msr	BASEPRI, r0
 800b4b8:	f3bf 8f4f 	dsb	sy
 800b4bc:	f3bf 8f6f 	isb	sy
 800b4c0:	f7ff f9f4 	bl	800a8ac <vTaskSwitchContext>
 800b4c4:	f04f 0000 	mov.w	r0, #0
 800b4c8:	f380 8811 	msr	BASEPRI, r0
 800b4cc:	bc09      	pop	{r0, r3}
 800b4ce:	6819      	ldr	r1, [r3, #0]
 800b4d0:	6808      	ldr	r0, [r1, #0]
 800b4d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4d6:	f01e 0f10 	tst.w	lr, #16
 800b4da:	bf08      	it	eq
 800b4dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b4e0:	f380 8809 	msr	PSP, r0
 800b4e4:	f3bf 8f6f 	isb	sy
 800b4e8:	4770      	bx	lr
 800b4ea:	bf00      	nop
 800b4ec:	f3af 8000 	nop.w

0800b4f0 <pxCurrentTCBConst>:
 800b4f0:	20002600 	.word	0x20002600
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b4f4:	bf00      	nop
 800b4f6:	bf00      	nop

0800b4f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b082      	sub	sp, #8
 800b4fc:	af00      	add	r7, sp, #0
	__asm volatile
 800b4fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b502:	f383 8811 	msr	BASEPRI, r3
 800b506:	f3bf 8f6f 	isb	sy
 800b50a:	f3bf 8f4f 	dsb	sy
 800b50e:	607b      	str	r3, [r7, #4]
}
 800b510:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b512:	f7ff f913 	bl	800a73c <xTaskIncrementTick>
 800b516:	4603      	mov	r3, r0
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d003      	beq.n	800b524 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b51c:	4b06      	ldr	r3, [pc, #24]	; (800b538 <xPortSysTickHandler+0x40>)
 800b51e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b522:	601a      	str	r2, [r3, #0]
 800b524:	2300      	movs	r3, #0
 800b526:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b528:	683b      	ldr	r3, [r7, #0]
 800b52a:	f383 8811 	msr	BASEPRI, r3
}
 800b52e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b530:	bf00      	nop
 800b532:	3708      	adds	r7, #8
 800b534:	46bd      	mov	sp, r7
 800b536:	bd80      	pop	{r7, pc}
 800b538:	e000ed04 	.word	0xe000ed04

0800b53c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b53c:	b480      	push	{r7}
 800b53e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b540:	4b0b      	ldr	r3, [pc, #44]	; (800b570 <vPortSetupTimerInterrupt+0x34>)
 800b542:	2200      	movs	r2, #0
 800b544:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b546:	4b0b      	ldr	r3, [pc, #44]	; (800b574 <vPortSetupTimerInterrupt+0x38>)
 800b548:	2200      	movs	r2, #0
 800b54a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b54c:	4b0a      	ldr	r3, [pc, #40]	; (800b578 <vPortSetupTimerInterrupt+0x3c>)
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	4a0a      	ldr	r2, [pc, #40]	; (800b57c <vPortSetupTimerInterrupt+0x40>)
 800b552:	fba2 2303 	umull	r2, r3, r2, r3
 800b556:	099b      	lsrs	r3, r3, #6
 800b558:	4a09      	ldr	r2, [pc, #36]	; (800b580 <vPortSetupTimerInterrupt+0x44>)
 800b55a:	3b01      	subs	r3, #1
 800b55c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b55e:	4b04      	ldr	r3, [pc, #16]	; (800b570 <vPortSetupTimerInterrupt+0x34>)
 800b560:	2207      	movs	r2, #7
 800b562:	601a      	str	r2, [r3, #0]
}
 800b564:	bf00      	nop
 800b566:	46bd      	mov	sp, r7
 800b568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56c:	4770      	bx	lr
 800b56e:	bf00      	nop
 800b570:	e000e010 	.word	0xe000e010
 800b574:	e000e018 	.word	0xe000e018
 800b578:	20000000 	.word	0x20000000
 800b57c:	10624dd3 	.word	0x10624dd3
 800b580:	e000e014 	.word	0xe000e014

0800b584 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b584:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b594 <vPortEnableVFP+0x10>
 800b588:	6801      	ldr	r1, [r0, #0]
 800b58a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b58e:	6001      	str	r1, [r0, #0]
 800b590:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b592:	bf00      	nop
 800b594:	e000ed88 	.word	0xe000ed88

0800b598 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b598:	b480      	push	{r7}
 800b59a:	b085      	sub	sp, #20
 800b59c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b59e:	f3ef 8305 	mrs	r3, IPSR
 800b5a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	2b0f      	cmp	r3, #15
 800b5a8:	d914      	bls.n	800b5d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b5aa:	4a17      	ldr	r2, [pc, #92]	; (800b608 <vPortValidateInterruptPriority+0x70>)
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	4413      	add	r3, r2
 800b5b0:	781b      	ldrb	r3, [r3, #0]
 800b5b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b5b4:	4b15      	ldr	r3, [pc, #84]	; (800b60c <vPortValidateInterruptPriority+0x74>)
 800b5b6:	781b      	ldrb	r3, [r3, #0]
 800b5b8:	7afa      	ldrb	r2, [r7, #11]
 800b5ba:	429a      	cmp	r2, r3
 800b5bc:	d20a      	bcs.n	800b5d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b5be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5c2:	f383 8811 	msr	BASEPRI, r3
 800b5c6:	f3bf 8f6f 	isb	sy
 800b5ca:	f3bf 8f4f 	dsb	sy
 800b5ce:	607b      	str	r3, [r7, #4]
}
 800b5d0:	bf00      	nop
 800b5d2:	e7fe      	b.n	800b5d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b5d4:	4b0e      	ldr	r3, [pc, #56]	; (800b610 <vPortValidateInterruptPriority+0x78>)
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b5dc:	4b0d      	ldr	r3, [pc, #52]	; (800b614 <vPortValidateInterruptPriority+0x7c>)
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	429a      	cmp	r2, r3
 800b5e2:	d90a      	bls.n	800b5fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b5e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5e8:	f383 8811 	msr	BASEPRI, r3
 800b5ec:	f3bf 8f6f 	isb	sy
 800b5f0:	f3bf 8f4f 	dsb	sy
 800b5f4:	603b      	str	r3, [r7, #0]
}
 800b5f6:	bf00      	nop
 800b5f8:	e7fe      	b.n	800b5f8 <vPortValidateInterruptPriority+0x60>
	}
 800b5fa:	bf00      	nop
 800b5fc:	3714      	adds	r7, #20
 800b5fe:	46bd      	mov	sp, r7
 800b600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b604:	4770      	bx	lr
 800b606:	bf00      	nop
 800b608:	e000e3f0 	.word	0xe000e3f0
 800b60c:	2000272c 	.word	0x2000272c
 800b610:	e000ed0c 	.word	0xe000ed0c
 800b614:	20002730 	.word	0x20002730

0800b618 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b08a      	sub	sp, #40	; 0x28
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b620:	2300      	movs	r3, #0
 800b622:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b624:	f7fe ffbe 	bl	800a5a4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b628:	4b5b      	ldr	r3, [pc, #364]	; (800b798 <pvPortMalloc+0x180>)
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d101      	bne.n	800b634 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b630:	f000 f920 	bl	800b874 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b634:	4b59      	ldr	r3, [pc, #356]	; (800b79c <pvPortMalloc+0x184>)
 800b636:	681a      	ldr	r2, [r3, #0]
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	4013      	ands	r3, r2
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	f040 8093 	bne.w	800b768 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d01d      	beq.n	800b684 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b648:	2208      	movs	r2, #8
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	4413      	add	r3, r2
 800b64e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	f003 0307 	and.w	r3, r3, #7
 800b656:	2b00      	cmp	r3, #0
 800b658:	d014      	beq.n	800b684 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	f023 0307 	bic.w	r3, r3, #7
 800b660:	3308      	adds	r3, #8
 800b662:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	f003 0307 	and.w	r3, r3, #7
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d00a      	beq.n	800b684 <pvPortMalloc+0x6c>
	__asm volatile
 800b66e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b672:	f383 8811 	msr	BASEPRI, r3
 800b676:	f3bf 8f6f 	isb	sy
 800b67a:	f3bf 8f4f 	dsb	sy
 800b67e:	617b      	str	r3, [r7, #20]
}
 800b680:	bf00      	nop
 800b682:	e7fe      	b.n	800b682 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d06e      	beq.n	800b768 <pvPortMalloc+0x150>
 800b68a:	4b45      	ldr	r3, [pc, #276]	; (800b7a0 <pvPortMalloc+0x188>)
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	687a      	ldr	r2, [r7, #4]
 800b690:	429a      	cmp	r2, r3
 800b692:	d869      	bhi.n	800b768 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b694:	4b43      	ldr	r3, [pc, #268]	; (800b7a4 <pvPortMalloc+0x18c>)
 800b696:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b698:	4b42      	ldr	r3, [pc, #264]	; (800b7a4 <pvPortMalloc+0x18c>)
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b69e:	e004      	b.n	800b6aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b6a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ac:	685b      	ldr	r3, [r3, #4]
 800b6ae:	687a      	ldr	r2, [r7, #4]
 800b6b0:	429a      	cmp	r2, r3
 800b6b2:	d903      	bls.n	800b6bc <pvPortMalloc+0xa4>
 800b6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d1f1      	bne.n	800b6a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b6bc:	4b36      	ldr	r3, [pc, #216]	; (800b798 <pvPortMalloc+0x180>)
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6c2:	429a      	cmp	r2, r3
 800b6c4:	d050      	beq.n	800b768 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b6c6:	6a3b      	ldr	r3, [r7, #32]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	2208      	movs	r2, #8
 800b6cc:	4413      	add	r3, r2
 800b6ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6d2:	681a      	ldr	r2, [r3, #0]
 800b6d4:	6a3b      	ldr	r3, [r7, #32]
 800b6d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b6d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6da:	685a      	ldr	r2, [r3, #4]
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	1ad2      	subs	r2, r2, r3
 800b6e0:	2308      	movs	r3, #8
 800b6e2:	005b      	lsls	r3, r3, #1
 800b6e4:	429a      	cmp	r2, r3
 800b6e6:	d91f      	bls.n	800b728 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b6e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	4413      	add	r3, r2
 800b6ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b6f0:	69bb      	ldr	r3, [r7, #24]
 800b6f2:	f003 0307 	and.w	r3, r3, #7
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d00a      	beq.n	800b710 <pvPortMalloc+0xf8>
	__asm volatile
 800b6fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6fe:	f383 8811 	msr	BASEPRI, r3
 800b702:	f3bf 8f6f 	isb	sy
 800b706:	f3bf 8f4f 	dsb	sy
 800b70a:	613b      	str	r3, [r7, #16]
}
 800b70c:	bf00      	nop
 800b70e:	e7fe      	b.n	800b70e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b712:	685a      	ldr	r2, [r3, #4]
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	1ad2      	subs	r2, r2, r3
 800b718:	69bb      	ldr	r3, [r7, #24]
 800b71a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b71c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b71e:	687a      	ldr	r2, [r7, #4]
 800b720:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b722:	69b8      	ldr	r0, [r7, #24]
 800b724:	f000 f90a 	bl	800b93c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b728:	4b1d      	ldr	r3, [pc, #116]	; (800b7a0 <pvPortMalloc+0x188>)
 800b72a:	681a      	ldr	r2, [r3, #0]
 800b72c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b72e:	685b      	ldr	r3, [r3, #4]
 800b730:	1ad3      	subs	r3, r2, r3
 800b732:	4a1b      	ldr	r2, [pc, #108]	; (800b7a0 <pvPortMalloc+0x188>)
 800b734:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b736:	4b1a      	ldr	r3, [pc, #104]	; (800b7a0 <pvPortMalloc+0x188>)
 800b738:	681a      	ldr	r2, [r3, #0]
 800b73a:	4b1b      	ldr	r3, [pc, #108]	; (800b7a8 <pvPortMalloc+0x190>)
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	429a      	cmp	r2, r3
 800b740:	d203      	bcs.n	800b74a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b742:	4b17      	ldr	r3, [pc, #92]	; (800b7a0 <pvPortMalloc+0x188>)
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	4a18      	ldr	r2, [pc, #96]	; (800b7a8 <pvPortMalloc+0x190>)
 800b748:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b74a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b74c:	685a      	ldr	r2, [r3, #4]
 800b74e:	4b13      	ldr	r3, [pc, #76]	; (800b79c <pvPortMalloc+0x184>)
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	431a      	orrs	r2, r3
 800b754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b756:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b75a:	2200      	movs	r2, #0
 800b75c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b75e:	4b13      	ldr	r3, [pc, #76]	; (800b7ac <pvPortMalloc+0x194>)
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	3301      	adds	r3, #1
 800b764:	4a11      	ldr	r2, [pc, #68]	; (800b7ac <pvPortMalloc+0x194>)
 800b766:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b768:	f7fe ff2a 	bl	800a5c0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b76c:	69fb      	ldr	r3, [r7, #28]
 800b76e:	f003 0307 	and.w	r3, r3, #7
 800b772:	2b00      	cmp	r3, #0
 800b774:	d00a      	beq.n	800b78c <pvPortMalloc+0x174>
	__asm volatile
 800b776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b77a:	f383 8811 	msr	BASEPRI, r3
 800b77e:	f3bf 8f6f 	isb	sy
 800b782:	f3bf 8f4f 	dsb	sy
 800b786:	60fb      	str	r3, [r7, #12]
}
 800b788:	bf00      	nop
 800b78a:	e7fe      	b.n	800b78a <pvPortMalloc+0x172>
	return pvReturn;
 800b78c:	69fb      	ldr	r3, [r7, #28]
}
 800b78e:	4618      	mov	r0, r3
 800b790:	3728      	adds	r7, #40	; 0x28
 800b792:	46bd      	mov	sp, r7
 800b794:	bd80      	pop	{r7, pc}
 800b796:	bf00      	nop
 800b798:	2001addc 	.word	0x2001addc
 800b79c:	2001adf0 	.word	0x2001adf0
 800b7a0:	2001ade0 	.word	0x2001ade0
 800b7a4:	2001add4 	.word	0x2001add4
 800b7a8:	2001ade4 	.word	0x2001ade4
 800b7ac:	2001ade8 	.word	0x2001ade8

0800b7b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b086      	sub	sp, #24
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d04d      	beq.n	800b85e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b7c2:	2308      	movs	r3, #8
 800b7c4:	425b      	negs	r3, r3
 800b7c6:	697a      	ldr	r2, [r7, #20]
 800b7c8:	4413      	add	r3, r2
 800b7ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b7cc:	697b      	ldr	r3, [r7, #20]
 800b7ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b7d0:	693b      	ldr	r3, [r7, #16]
 800b7d2:	685a      	ldr	r2, [r3, #4]
 800b7d4:	4b24      	ldr	r3, [pc, #144]	; (800b868 <vPortFree+0xb8>)
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	4013      	ands	r3, r2
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d10a      	bne.n	800b7f4 <vPortFree+0x44>
	__asm volatile
 800b7de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7e2:	f383 8811 	msr	BASEPRI, r3
 800b7e6:	f3bf 8f6f 	isb	sy
 800b7ea:	f3bf 8f4f 	dsb	sy
 800b7ee:	60fb      	str	r3, [r7, #12]
}
 800b7f0:	bf00      	nop
 800b7f2:	e7fe      	b.n	800b7f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b7f4:	693b      	ldr	r3, [r7, #16]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d00a      	beq.n	800b812 <vPortFree+0x62>
	__asm volatile
 800b7fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b800:	f383 8811 	msr	BASEPRI, r3
 800b804:	f3bf 8f6f 	isb	sy
 800b808:	f3bf 8f4f 	dsb	sy
 800b80c:	60bb      	str	r3, [r7, #8]
}
 800b80e:	bf00      	nop
 800b810:	e7fe      	b.n	800b810 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b812:	693b      	ldr	r3, [r7, #16]
 800b814:	685a      	ldr	r2, [r3, #4]
 800b816:	4b14      	ldr	r3, [pc, #80]	; (800b868 <vPortFree+0xb8>)
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	4013      	ands	r3, r2
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d01e      	beq.n	800b85e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b820:	693b      	ldr	r3, [r7, #16]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d11a      	bne.n	800b85e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b828:	693b      	ldr	r3, [r7, #16]
 800b82a:	685a      	ldr	r2, [r3, #4]
 800b82c:	4b0e      	ldr	r3, [pc, #56]	; (800b868 <vPortFree+0xb8>)
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	43db      	mvns	r3, r3
 800b832:	401a      	ands	r2, r3
 800b834:	693b      	ldr	r3, [r7, #16]
 800b836:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b838:	f7fe feb4 	bl	800a5a4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b83c:	693b      	ldr	r3, [r7, #16]
 800b83e:	685a      	ldr	r2, [r3, #4]
 800b840:	4b0a      	ldr	r3, [pc, #40]	; (800b86c <vPortFree+0xbc>)
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	4413      	add	r3, r2
 800b846:	4a09      	ldr	r2, [pc, #36]	; (800b86c <vPortFree+0xbc>)
 800b848:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b84a:	6938      	ldr	r0, [r7, #16]
 800b84c:	f000 f876 	bl	800b93c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b850:	4b07      	ldr	r3, [pc, #28]	; (800b870 <vPortFree+0xc0>)
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	3301      	adds	r3, #1
 800b856:	4a06      	ldr	r2, [pc, #24]	; (800b870 <vPortFree+0xc0>)
 800b858:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b85a:	f7fe feb1 	bl	800a5c0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b85e:	bf00      	nop
 800b860:	3718      	adds	r7, #24
 800b862:	46bd      	mov	sp, r7
 800b864:	bd80      	pop	{r7, pc}
 800b866:	bf00      	nop
 800b868:	2001adf0 	.word	0x2001adf0
 800b86c:	2001ade0 	.word	0x2001ade0
 800b870:	2001adec 	.word	0x2001adec

0800b874 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b874:	b480      	push	{r7}
 800b876:	b085      	sub	sp, #20
 800b878:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b87a:	4b29      	ldr	r3, [pc, #164]	; (800b920 <prvHeapInit+0xac>)
 800b87c:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b87e:	4b29      	ldr	r3, [pc, #164]	; (800b924 <prvHeapInit+0xb0>)
 800b880:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	f003 0307 	and.w	r3, r3, #7
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d00c      	beq.n	800b8a6 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	3307      	adds	r3, #7
 800b890:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	f023 0307 	bic.w	r3, r3, #7
 800b898:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b89a:	68ba      	ldr	r2, [r7, #8]
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	1ad3      	subs	r3, r2, r3
 800b8a0:	4a20      	ldr	r2, [pc, #128]	; (800b924 <prvHeapInit+0xb0>)
 800b8a2:	4413      	add	r3, r2
 800b8a4:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b8aa:	4a1f      	ldr	r2, [pc, #124]	; (800b928 <prvHeapInit+0xb4>)
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b8b0:	4b1d      	ldr	r3, [pc, #116]	; (800b928 <prvHeapInit+0xb4>)
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	68ba      	ldr	r2, [r7, #8]
 800b8ba:	4413      	add	r3, r2
 800b8bc:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b8be:	2208      	movs	r2, #8
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	1a9b      	subs	r3, r3, r2
 800b8c4:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	f023 0307 	bic.w	r3, r3, #7
 800b8cc:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	4a16      	ldr	r2, [pc, #88]	; (800b92c <prvHeapInit+0xb8>)
 800b8d2:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b8d4:	4b15      	ldr	r3, [pc, #84]	; (800b92c <prvHeapInit+0xb8>)
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	2200      	movs	r2, #0
 800b8da:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b8dc:	4b13      	ldr	r3, [pc, #76]	; (800b92c <prvHeapInit+0xb8>)
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b8e8:	683b      	ldr	r3, [r7, #0]
 800b8ea:	68fa      	ldr	r2, [r7, #12]
 800b8ec:	1ad2      	subs	r2, r2, r3
 800b8ee:	683b      	ldr	r3, [r7, #0]
 800b8f0:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b8f2:	4b0e      	ldr	r3, [pc, #56]	; (800b92c <prvHeapInit+0xb8>)
 800b8f4:	681a      	ldr	r2, [r3, #0]
 800b8f6:	683b      	ldr	r3, [r7, #0]
 800b8f8:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	685b      	ldr	r3, [r3, #4]
 800b8fe:	4a0c      	ldr	r2, [pc, #48]	; (800b930 <prvHeapInit+0xbc>)
 800b900:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b902:	683b      	ldr	r3, [r7, #0]
 800b904:	685b      	ldr	r3, [r3, #4]
 800b906:	4a0b      	ldr	r2, [pc, #44]	; (800b934 <prvHeapInit+0xc0>)
 800b908:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b90a:	4b0b      	ldr	r3, [pc, #44]	; (800b938 <prvHeapInit+0xc4>)
 800b90c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b910:	601a      	str	r2, [r3, #0]
}
 800b912:	bf00      	nop
 800b914:	3714      	adds	r7, #20
 800b916:	46bd      	mov	sp, r7
 800b918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91c:	4770      	bx	lr
 800b91e:	bf00      	nop
 800b920:	000186a0 	.word	0x000186a0
 800b924:	20002734 	.word	0x20002734
 800b928:	2001add4 	.word	0x2001add4
 800b92c:	2001addc 	.word	0x2001addc
 800b930:	2001ade4 	.word	0x2001ade4
 800b934:	2001ade0 	.word	0x2001ade0
 800b938:	2001adf0 	.word	0x2001adf0

0800b93c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b93c:	b480      	push	{r7}
 800b93e:	b085      	sub	sp, #20
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b944:	4b28      	ldr	r3, [pc, #160]	; (800b9e8 <prvInsertBlockIntoFreeList+0xac>)
 800b946:	60fb      	str	r3, [r7, #12]
 800b948:	e002      	b.n	800b950 <prvInsertBlockIntoFreeList+0x14>
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	60fb      	str	r3, [r7, #12]
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	687a      	ldr	r2, [r7, #4]
 800b956:	429a      	cmp	r2, r3
 800b958:	d8f7      	bhi.n	800b94a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	685b      	ldr	r3, [r3, #4]
 800b962:	68ba      	ldr	r2, [r7, #8]
 800b964:	4413      	add	r3, r2
 800b966:	687a      	ldr	r2, [r7, #4]
 800b968:	429a      	cmp	r2, r3
 800b96a:	d108      	bne.n	800b97e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	685a      	ldr	r2, [r3, #4]
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	685b      	ldr	r3, [r3, #4]
 800b974:	441a      	add	r2, r3
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	685b      	ldr	r3, [r3, #4]
 800b986:	68ba      	ldr	r2, [r7, #8]
 800b988:	441a      	add	r2, r3
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	429a      	cmp	r2, r3
 800b990:	d118      	bne.n	800b9c4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	681a      	ldr	r2, [r3, #0]
 800b996:	4b15      	ldr	r3, [pc, #84]	; (800b9ec <prvInsertBlockIntoFreeList+0xb0>)
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	429a      	cmp	r2, r3
 800b99c:	d00d      	beq.n	800b9ba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	685a      	ldr	r2, [r3, #4]
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	685b      	ldr	r3, [r3, #4]
 800b9a8:	441a      	add	r2, r3
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	681a      	ldr	r2, [r3, #0]
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	601a      	str	r2, [r3, #0]
 800b9b8:	e008      	b.n	800b9cc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b9ba:	4b0c      	ldr	r3, [pc, #48]	; (800b9ec <prvInsertBlockIntoFreeList+0xb0>)
 800b9bc:	681a      	ldr	r2, [r3, #0]
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	601a      	str	r2, [r3, #0]
 800b9c2:	e003      	b.n	800b9cc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	681a      	ldr	r2, [r3, #0]
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b9cc:	68fa      	ldr	r2, [r7, #12]
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	429a      	cmp	r2, r3
 800b9d2:	d002      	beq.n	800b9da <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	687a      	ldr	r2, [r7, #4]
 800b9d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b9da:	bf00      	nop
 800b9dc:	3714      	adds	r7, #20
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e4:	4770      	bx	lr
 800b9e6:	bf00      	nop
 800b9e8:	2001add4 	.word	0x2001add4
 800b9ec:	2001addc 	.word	0x2001addc

0800b9f0 <sbrk_aligned>:
 800b9f0:	b570      	push	{r4, r5, r6, lr}
 800b9f2:	4e0e      	ldr	r6, [pc, #56]	; (800ba2c <sbrk_aligned+0x3c>)
 800b9f4:	460c      	mov	r4, r1
 800b9f6:	6831      	ldr	r1, [r6, #0]
 800b9f8:	4605      	mov	r5, r0
 800b9fa:	b911      	cbnz	r1, 800ba02 <sbrk_aligned+0x12>
 800b9fc:	f000 f922 	bl	800bc44 <_sbrk_r>
 800ba00:	6030      	str	r0, [r6, #0]
 800ba02:	4621      	mov	r1, r4
 800ba04:	4628      	mov	r0, r5
 800ba06:	f000 f91d 	bl	800bc44 <_sbrk_r>
 800ba0a:	1c43      	adds	r3, r0, #1
 800ba0c:	d00a      	beq.n	800ba24 <sbrk_aligned+0x34>
 800ba0e:	1cc4      	adds	r4, r0, #3
 800ba10:	f024 0403 	bic.w	r4, r4, #3
 800ba14:	42a0      	cmp	r0, r4
 800ba16:	d007      	beq.n	800ba28 <sbrk_aligned+0x38>
 800ba18:	1a21      	subs	r1, r4, r0
 800ba1a:	4628      	mov	r0, r5
 800ba1c:	f000 f912 	bl	800bc44 <_sbrk_r>
 800ba20:	3001      	adds	r0, #1
 800ba22:	d101      	bne.n	800ba28 <sbrk_aligned+0x38>
 800ba24:	f04f 34ff 	mov.w	r4, #4294967295
 800ba28:	4620      	mov	r0, r4
 800ba2a:	bd70      	pop	{r4, r5, r6, pc}
 800ba2c:	2001adf8 	.word	0x2001adf8

0800ba30 <_malloc_r>:
 800ba30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba34:	1ccd      	adds	r5, r1, #3
 800ba36:	f025 0503 	bic.w	r5, r5, #3
 800ba3a:	3508      	adds	r5, #8
 800ba3c:	2d0c      	cmp	r5, #12
 800ba3e:	bf38      	it	cc
 800ba40:	250c      	movcc	r5, #12
 800ba42:	2d00      	cmp	r5, #0
 800ba44:	4607      	mov	r7, r0
 800ba46:	db01      	blt.n	800ba4c <_malloc_r+0x1c>
 800ba48:	42a9      	cmp	r1, r5
 800ba4a:	d905      	bls.n	800ba58 <_malloc_r+0x28>
 800ba4c:	230c      	movs	r3, #12
 800ba4e:	603b      	str	r3, [r7, #0]
 800ba50:	2600      	movs	r6, #0
 800ba52:	4630      	mov	r0, r6
 800ba54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba58:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800bb2c <_malloc_r+0xfc>
 800ba5c:	f000 f868 	bl	800bb30 <__malloc_lock>
 800ba60:	f8d8 3000 	ldr.w	r3, [r8]
 800ba64:	461c      	mov	r4, r3
 800ba66:	bb5c      	cbnz	r4, 800bac0 <_malloc_r+0x90>
 800ba68:	4629      	mov	r1, r5
 800ba6a:	4638      	mov	r0, r7
 800ba6c:	f7ff ffc0 	bl	800b9f0 <sbrk_aligned>
 800ba70:	1c43      	adds	r3, r0, #1
 800ba72:	4604      	mov	r4, r0
 800ba74:	d155      	bne.n	800bb22 <_malloc_r+0xf2>
 800ba76:	f8d8 4000 	ldr.w	r4, [r8]
 800ba7a:	4626      	mov	r6, r4
 800ba7c:	2e00      	cmp	r6, #0
 800ba7e:	d145      	bne.n	800bb0c <_malloc_r+0xdc>
 800ba80:	2c00      	cmp	r4, #0
 800ba82:	d048      	beq.n	800bb16 <_malloc_r+0xe6>
 800ba84:	6823      	ldr	r3, [r4, #0]
 800ba86:	4631      	mov	r1, r6
 800ba88:	4638      	mov	r0, r7
 800ba8a:	eb04 0903 	add.w	r9, r4, r3
 800ba8e:	f000 f8d9 	bl	800bc44 <_sbrk_r>
 800ba92:	4581      	cmp	r9, r0
 800ba94:	d13f      	bne.n	800bb16 <_malloc_r+0xe6>
 800ba96:	6821      	ldr	r1, [r4, #0]
 800ba98:	1a6d      	subs	r5, r5, r1
 800ba9a:	4629      	mov	r1, r5
 800ba9c:	4638      	mov	r0, r7
 800ba9e:	f7ff ffa7 	bl	800b9f0 <sbrk_aligned>
 800baa2:	3001      	adds	r0, #1
 800baa4:	d037      	beq.n	800bb16 <_malloc_r+0xe6>
 800baa6:	6823      	ldr	r3, [r4, #0]
 800baa8:	442b      	add	r3, r5
 800baaa:	6023      	str	r3, [r4, #0]
 800baac:	f8d8 3000 	ldr.w	r3, [r8]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d038      	beq.n	800bb26 <_malloc_r+0xf6>
 800bab4:	685a      	ldr	r2, [r3, #4]
 800bab6:	42a2      	cmp	r2, r4
 800bab8:	d12b      	bne.n	800bb12 <_malloc_r+0xe2>
 800baba:	2200      	movs	r2, #0
 800babc:	605a      	str	r2, [r3, #4]
 800babe:	e00f      	b.n	800bae0 <_malloc_r+0xb0>
 800bac0:	6822      	ldr	r2, [r4, #0]
 800bac2:	1b52      	subs	r2, r2, r5
 800bac4:	d41f      	bmi.n	800bb06 <_malloc_r+0xd6>
 800bac6:	2a0b      	cmp	r2, #11
 800bac8:	d917      	bls.n	800bafa <_malloc_r+0xca>
 800baca:	1961      	adds	r1, r4, r5
 800bacc:	42a3      	cmp	r3, r4
 800bace:	6025      	str	r5, [r4, #0]
 800bad0:	bf18      	it	ne
 800bad2:	6059      	strne	r1, [r3, #4]
 800bad4:	6863      	ldr	r3, [r4, #4]
 800bad6:	bf08      	it	eq
 800bad8:	f8c8 1000 	streq.w	r1, [r8]
 800badc:	5162      	str	r2, [r4, r5]
 800bade:	604b      	str	r3, [r1, #4]
 800bae0:	4638      	mov	r0, r7
 800bae2:	f104 060b 	add.w	r6, r4, #11
 800bae6:	f000 f829 	bl	800bb3c <__malloc_unlock>
 800baea:	f026 0607 	bic.w	r6, r6, #7
 800baee:	1d23      	adds	r3, r4, #4
 800baf0:	1af2      	subs	r2, r6, r3
 800baf2:	d0ae      	beq.n	800ba52 <_malloc_r+0x22>
 800baf4:	1b9b      	subs	r3, r3, r6
 800baf6:	50a3      	str	r3, [r4, r2]
 800baf8:	e7ab      	b.n	800ba52 <_malloc_r+0x22>
 800bafa:	42a3      	cmp	r3, r4
 800bafc:	6862      	ldr	r2, [r4, #4]
 800bafe:	d1dd      	bne.n	800babc <_malloc_r+0x8c>
 800bb00:	f8c8 2000 	str.w	r2, [r8]
 800bb04:	e7ec      	b.n	800bae0 <_malloc_r+0xb0>
 800bb06:	4623      	mov	r3, r4
 800bb08:	6864      	ldr	r4, [r4, #4]
 800bb0a:	e7ac      	b.n	800ba66 <_malloc_r+0x36>
 800bb0c:	4634      	mov	r4, r6
 800bb0e:	6876      	ldr	r6, [r6, #4]
 800bb10:	e7b4      	b.n	800ba7c <_malloc_r+0x4c>
 800bb12:	4613      	mov	r3, r2
 800bb14:	e7cc      	b.n	800bab0 <_malloc_r+0x80>
 800bb16:	230c      	movs	r3, #12
 800bb18:	603b      	str	r3, [r7, #0]
 800bb1a:	4638      	mov	r0, r7
 800bb1c:	f000 f80e 	bl	800bb3c <__malloc_unlock>
 800bb20:	e797      	b.n	800ba52 <_malloc_r+0x22>
 800bb22:	6025      	str	r5, [r4, #0]
 800bb24:	e7dc      	b.n	800bae0 <_malloc_r+0xb0>
 800bb26:	605b      	str	r3, [r3, #4]
 800bb28:	deff      	udf	#255	; 0xff
 800bb2a:	bf00      	nop
 800bb2c:	2001adf4 	.word	0x2001adf4

0800bb30 <__malloc_lock>:
 800bb30:	4801      	ldr	r0, [pc, #4]	; (800bb38 <__malloc_lock+0x8>)
 800bb32:	f000 b8c1 	b.w	800bcb8 <__retarget_lock_acquire_recursive>
 800bb36:	bf00      	nop
 800bb38:	2001af38 	.word	0x2001af38

0800bb3c <__malloc_unlock>:
 800bb3c:	4801      	ldr	r0, [pc, #4]	; (800bb44 <__malloc_unlock+0x8>)
 800bb3e:	f000 b8bc 	b.w	800bcba <__retarget_lock_release_recursive>
 800bb42:	bf00      	nop
 800bb44:	2001af38 	.word	0x2001af38

0800bb48 <siprintf>:
 800bb48:	b40e      	push	{r1, r2, r3}
 800bb4a:	b500      	push	{lr}
 800bb4c:	b09c      	sub	sp, #112	; 0x70
 800bb4e:	ab1d      	add	r3, sp, #116	; 0x74
 800bb50:	9002      	str	r0, [sp, #8]
 800bb52:	9006      	str	r0, [sp, #24]
 800bb54:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bb58:	4809      	ldr	r0, [pc, #36]	; (800bb80 <siprintf+0x38>)
 800bb5a:	9107      	str	r1, [sp, #28]
 800bb5c:	9104      	str	r1, [sp, #16]
 800bb5e:	4909      	ldr	r1, [pc, #36]	; (800bb84 <siprintf+0x3c>)
 800bb60:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb64:	9105      	str	r1, [sp, #20]
 800bb66:	6800      	ldr	r0, [r0, #0]
 800bb68:	9301      	str	r3, [sp, #4]
 800bb6a:	a902      	add	r1, sp, #8
 800bb6c:	f000 f95a 	bl	800be24 <_svfiprintf_r>
 800bb70:	9b02      	ldr	r3, [sp, #8]
 800bb72:	2200      	movs	r2, #0
 800bb74:	701a      	strb	r2, [r3, #0]
 800bb76:	b01c      	add	sp, #112	; 0x70
 800bb78:	f85d eb04 	ldr.w	lr, [sp], #4
 800bb7c:	b003      	add	sp, #12
 800bb7e:	4770      	bx	lr
 800bb80:	2000005c 	.word	0x2000005c
 800bb84:	ffff0208 	.word	0xffff0208

0800bb88 <memset>:
 800bb88:	4402      	add	r2, r0
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	4293      	cmp	r3, r2
 800bb8e:	d100      	bne.n	800bb92 <memset+0xa>
 800bb90:	4770      	bx	lr
 800bb92:	f803 1b01 	strb.w	r1, [r3], #1
 800bb96:	e7f9      	b.n	800bb8c <memset+0x4>

0800bb98 <_reclaim_reent>:
 800bb98:	4b29      	ldr	r3, [pc, #164]	; (800bc40 <_reclaim_reent+0xa8>)
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	4283      	cmp	r3, r0
 800bb9e:	b570      	push	{r4, r5, r6, lr}
 800bba0:	4604      	mov	r4, r0
 800bba2:	d04b      	beq.n	800bc3c <_reclaim_reent+0xa4>
 800bba4:	69c3      	ldr	r3, [r0, #28]
 800bba6:	b143      	cbz	r3, 800bbba <_reclaim_reent+0x22>
 800bba8:	68db      	ldr	r3, [r3, #12]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d144      	bne.n	800bc38 <_reclaim_reent+0xa0>
 800bbae:	69e3      	ldr	r3, [r4, #28]
 800bbb0:	6819      	ldr	r1, [r3, #0]
 800bbb2:	b111      	cbz	r1, 800bbba <_reclaim_reent+0x22>
 800bbb4:	4620      	mov	r0, r4
 800bbb6:	f000 f88f 	bl	800bcd8 <_free_r>
 800bbba:	6961      	ldr	r1, [r4, #20]
 800bbbc:	b111      	cbz	r1, 800bbc4 <_reclaim_reent+0x2c>
 800bbbe:	4620      	mov	r0, r4
 800bbc0:	f000 f88a 	bl	800bcd8 <_free_r>
 800bbc4:	69e1      	ldr	r1, [r4, #28]
 800bbc6:	b111      	cbz	r1, 800bbce <_reclaim_reent+0x36>
 800bbc8:	4620      	mov	r0, r4
 800bbca:	f000 f885 	bl	800bcd8 <_free_r>
 800bbce:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800bbd0:	b111      	cbz	r1, 800bbd8 <_reclaim_reent+0x40>
 800bbd2:	4620      	mov	r0, r4
 800bbd4:	f000 f880 	bl	800bcd8 <_free_r>
 800bbd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bbda:	b111      	cbz	r1, 800bbe2 <_reclaim_reent+0x4a>
 800bbdc:	4620      	mov	r0, r4
 800bbde:	f000 f87b 	bl	800bcd8 <_free_r>
 800bbe2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800bbe4:	b111      	cbz	r1, 800bbec <_reclaim_reent+0x54>
 800bbe6:	4620      	mov	r0, r4
 800bbe8:	f000 f876 	bl	800bcd8 <_free_r>
 800bbec:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800bbee:	b111      	cbz	r1, 800bbf6 <_reclaim_reent+0x5e>
 800bbf0:	4620      	mov	r0, r4
 800bbf2:	f000 f871 	bl	800bcd8 <_free_r>
 800bbf6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800bbf8:	b111      	cbz	r1, 800bc00 <_reclaim_reent+0x68>
 800bbfa:	4620      	mov	r0, r4
 800bbfc:	f000 f86c 	bl	800bcd8 <_free_r>
 800bc00:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800bc02:	b111      	cbz	r1, 800bc0a <_reclaim_reent+0x72>
 800bc04:	4620      	mov	r0, r4
 800bc06:	f000 f867 	bl	800bcd8 <_free_r>
 800bc0a:	6a23      	ldr	r3, [r4, #32]
 800bc0c:	b1b3      	cbz	r3, 800bc3c <_reclaim_reent+0xa4>
 800bc0e:	4620      	mov	r0, r4
 800bc10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bc14:	4718      	bx	r3
 800bc16:	5949      	ldr	r1, [r1, r5]
 800bc18:	b941      	cbnz	r1, 800bc2c <_reclaim_reent+0x94>
 800bc1a:	3504      	adds	r5, #4
 800bc1c:	69e3      	ldr	r3, [r4, #28]
 800bc1e:	2d80      	cmp	r5, #128	; 0x80
 800bc20:	68d9      	ldr	r1, [r3, #12]
 800bc22:	d1f8      	bne.n	800bc16 <_reclaim_reent+0x7e>
 800bc24:	4620      	mov	r0, r4
 800bc26:	f000 f857 	bl	800bcd8 <_free_r>
 800bc2a:	e7c0      	b.n	800bbae <_reclaim_reent+0x16>
 800bc2c:	680e      	ldr	r6, [r1, #0]
 800bc2e:	4620      	mov	r0, r4
 800bc30:	f000 f852 	bl	800bcd8 <_free_r>
 800bc34:	4631      	mov	r1, r6
 800bc36:	e7ef      	b.n	800bc18 <_reclaim_reent+0x80>
 800bc38:	2500      	movs	r5, #0
 800bc3a:	e7ef      	b.n	800bc1c <_reclaim_reent+0x84>
 800bc3c:	bd70      	pop	{r4, r5, r6, pc}
 800bc3e:	bf00      	nop
 800bc40:	2000005c 	.word	0x2000005c

0800bc44 <_sbrk_r>:
 800bc44:	b538      	push	{r3, r4, r5, lr}
 800bc46:	4d06      	ldr	r5, [pc, #24]	; (800bc60 <_sbrk_r+0x1c>)
 800bc48:	2300      	movs	r3, #0
 800bc4a:	4604      	mov	r4, r0
 800bc4c:	4608      	mov	r0, r1
 800bc4e:	602b      	str	r3, [r5, #0]
 800bc50:	f7f5 fc00 	bl	8001454 <_sbrk>
 800bc54:	1c43      	adds	r3, r0, #1
 800bc56:	d102      	bne.n	800bc5e <_sbrk_r+0x1a>
 800bc58:	682b      	ldr	r3, [r5, #0]
 800bc5a:	b103      	cbz	r3, 800bc5e <_sbrk_r+0x1a>
 800bc5c:	6023      	str	r3, [r4, #0]
 800bc5e:	bd38      	pop	{r3, r4, r5, pc}
 800bc60:	2001af34 	.word	0x2001af34

0800bc64 <__errno>:
 800bc64:	4b01      	ldr	r3, [pc, #4]	; (800bc6c <__errno+0x8>)
 800bc66:	6818      	ldr	r0, [r3, #0]
 800bc68:	4770      	bx	lr
 800bc6a:	bf00      	nop
 800bc6c:	2000005c 	.word	0x2000005c

0800bc70 <__libc_init_array>:
 800bc70:	b570      	push	{r4, r5, r6, lr}
 800bc72:	4d0d      	ldr	r5, [pc, #52]	; (800bca8 <__libc_init_array+0x38>)
 800bc74:	4c0d      	ldr	r4, [pc, #52]	; (800bcac <__libc_init_array+0x3c>)
 800bc76:	1b64      	subs	r4, r4, r5
 800bc78:	10a4      	asrs	r4, r4, #2
 800bc7a:	2600      	movs	r6, #0
 800bc7c:	42a6      	cmp	r6, r4
 800bc7e:	d109      	bne.n	800bc94 <__libc_init_array+0x24>
 800bc80:	4d0b      	ldr	r5, [pc, #44]	; (800bcb0 <__libc_init_array+0x40>)
 800bc82:	4c0c      	ldr	r4, [pc, #48]	; (800bcb4 <__libc_init_array+0x44>)
 800bc84:	f000 fbae 	bl	800c3e4 <_init>
 800bc88:	1b64      	subs	r4, r4, r5
 800bc8a:	10a4      	asrs	r4, r4, #2
 800bc8c:	2600      	movs	r6, #0
 800bc8e:	42a6      	cmp	r6, r4
 800bc90:	d105      	bne.n	800bc9e <__libc_init_array+0x2e>
 800bc92:	bd70      	pop	{r4, r5, r6, pc}
 800bc94:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc98:	4798      	blx	r3
 800bc9a:	3601      	adds	r6, #1
 800bc9c:	e7ee      	b.n	800bc7c <__libc_init_array+0xc>
 800bc9e:	f855 3b04 	ldr.w	r3, [r5], #4
 800bca2:	4798      	blx	r3
 800bca4:	3601      	adds	r6, #1
 800bca6:	e7f2      	b.n	800bc8e <__libc_init_array+0x1e>
 800bca8:	0800ca3c 	.word	0x0800ca3c
 800bcac:	0800ca3c 	.word	0x0800ca3c
 800bcb0:	0800ca3c 	.word	0x0800ca3c
 800bcb4:	0800ca40 	.word	0x0800ca40

0800bcb8 <__retarget_lock_acquire_recursive>:
 800bcb8:	4770      	bx	lr

0800bcba <__retarget_lock_release_recursive>:
 800bcba:	4770      	bx	lr

0800bcbc <memcpy>:
 800bcbc:	440a      	add	r2, r1
 800bcbe:	4291      	cmp	r1, r2
 800bcc0:	f100 33ff 	add.w	r3, r0, #4294967295
 800bcc4:	d100      	bne.n	800bcc8 <memcpy+0xc>
 800bcc6:	4770      	bx	lr
 800bcc8:	b510      	push	{r4, lr}
 800bcca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bcce:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bcd2:	4291      	cmp	r1, r2
 800bcd4:	d1f9      	bne.n	800bcca <memcpy+0xe>
 800bcd6:	bd10      	pop	{r4, pc}

0800bcd8 <_free_r>:
 800bcd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bcda:	2900      	cmp	r1, #0
 800bcdc:	d044      	beq.n	800bd68 <_free_r+0x90>
 800bcde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bce2:	9001      	str	r0, [sp, #4]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	f1a1 0404 	sub.w	r4, r1, #4
 800bcea:	bfb8      	it	lt
 800bcec:	18e4      	addlt	r4, r4, r3
 800bcee:	f7ff ff1f 	bl	800bb30 <__malloc_lock>
 800bcf2:	4a1e      	ldr	r2, [pc, #120]	; (800bd6c <_free_r+0x94>)
 800bcf4:	9801      	ldr	r0, [sp, #4]
 800bcf6:	6813      	ldr	r3, [r2, #0]
 800bcf8:	b933      	cbnz	r3, 800bd08 <_free_r+0x30>
 800bcfa:	6063      	str	r3, [r4, #4]
 800bcfc:	6014      	str	r4, [r2, #0]
 800bcfe:	b003      	add	sp, #12
 800bd00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bd04:	f7ff bf1a 	b.w	800bb3c <__malloc_unlock>
 800bd08:	42a3      	cmp	r3, r4
 800bd0a:	d908      	bls.n	800bd1e <_free_r+0x46>
 800bd0c:	6825      	ldr	r5, [r4, #0]
 800bd0e:	1961      	adds	r1, r4, r5
 800bd10:	428b      	cmp	r3, r1
 800bd12:	bf01      	itttt	eq
 800bd14:	6819      	ldreq	r1, [r3, #0]
 800bd16:	685b      	ldreq	r3, [r3, #4]
 800bd18:	1949      	addeq	r1, r1, r5
 800bd1a:	6021      	streq	r1, [r4, #0]
 800bd1c:	e7ed      	b.n	800bcfa <_free_r+0x22>
 800bd1e:	461a      	mov	r2, r3
 800bd20:	685b      	ldr	r3, [r3, #4]
 800bd22:	b10b      	cbz	r3, 800bd28 <_free_r+0x50>
 800bd24:	42a3      	cmp	r3, r4
 800bd26:	d9fa      	bls.n	800bd1e <_free_r+0x46>
 800bd28:	6811      	ldr	r1, [r2, #0]
 800bd2a:	1855      	adds	r5, r2, r1
 800bd2c:	42a5      	cmp	r5, r4
 800bd2e:	d10b      	bne.n	800bd48 <_free_r+0x70>
 800bd30:	6824      	ldr	r4, [r4, #0]
 800bd32:	4421      	add	r1, r4
 800bd34:	1854      	adds	r4, r2, r1
 800bd36:	42a3      	cmp	r3, r4
 800bd38:	6011      	str	r1, [r2, #0]
 800bd3a:	d1e0      	bne.n	800bcfe <_free_r+0x26>
 800bd3c:	681c      	ldr	r4, [r3, #0]
 800bd3e:	685b      	ldr	r3, [r3, #4]
 800bd40:	6053      	str	r3, [r2, #4]
 800bd42:	440c      	add	r4, r1
 800bd44:	6014      	str	r4, [r2, #0]
 800bd46:	e7da      	b.n	800bcfe <_free_r+0x26>
 800bd48:	d902      	bls.n	800bd50 <_free_r+0x78>
 800bd4a:	230c      	movs	r3, #12
 800bd4c:	6003      	str	r3, [r0, #0]
 800bd4e:	e7d6      	b.n	800bcfe <_free_r+0x26>
 800bd50:	6825      	ldr	r5, [r4, #0]
 800bd52:	1961      	adds	r1, r4, r5
 800bd54:	428b      	cmp	r3, r1
 800bd56:	bf04      	itt	eq
 800bd58:	6819      	ldreq	r1, [r3, #0]
 800bd5a:	685b      	ldreq	r3, [r3, #4]
 800bd5c:	6063      	str	r3, [r4, #4]
 800bd5e:	bf04      	itt	eq
 800bd60:	1949      	addeq	r1, r1, r5
 800bd62:	6021      	streq	r1, [r4, #0]
 800bd64:	6054      	str	r4, [r2, #4]
 800bd66:	e7ca      	b.n	800bcfe <_free_r+0x26>
 800bd68:	b003      	add	sp, #12
 800bd6a:	bd30      	pop	{r4, r5, pc}
 800bd6c:	2001adf4 	.word	0x2001adf4

0800bd70 <__ssputs_r>:
 800bd70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd74:	688e      	ldr	r6, [r1, #8]
 800bd76:	461f      	mov	r7, r3
 800bd78:	42be      	cmp	r6, r7
 800bd7a:	680b      	ldr	r3, [r1, #0]
 800bd7c:	4682      	mov	sl, r0
 800bd7e:	460c      	mov	r4, r1
 800bd80:	4690      	mov	r8, r2
 800bd82:	d82c      	bhi.n	800bdde <__ssputs_r+0x6e>
 800bd84:	898a      	ldrh	r2, [r1, #12]
 800bd86:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bd8a:	d026      	beq.n	800bdda <__ssputs_r+0x6a>
 800bd8c:	6965      	ldr	r5, [r4, #20]
 800bd8e:	6909      	ldr	r1, [r1, #16]
 800bd90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bd94:	eba3 0901 	sub.w	r9, r3, r1
 800bd98:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bd9c:	1c7b      	adds	r3, r7, #1
 800bd9e:	444b      	add	r3, r9
 800bda0:	106d      	asrs	r5, r5, #1
 800bda2:	429d      	cmp	r5, r3
 800bda4:	bf38      	it	cc
 800bda6:	461d      	movcc	r5, r3
 800bda8:	0553      	lsls	r3, r2, #21
 800bdaa:	d527      	bpl.n	800bdfc <__ssputs_r+0x8c>
 800bdac:	4629      	mov	r1, r5
 800bdae:	f7ff fe3f 	bl	800ba30 <_malloc_r>
 800bdb2:	4606      	mov	r6, r0
 800bdb4:	b360      	cbz	r0, 800be10 <__ssputs_r+0xa0>
 800bdb6:	6921      	ldr	r1, [r4, #16]
 800bdb8:	464a      	mov	r2, r9
 800bdba:	f7ff ff7f 	bl	800bcbc <memcpy>
 800bdbe:	89a3      	ldrh	r3, [r4, #12]
 800bdc0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bdc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bdc8:	81a3      	strh	r3, [r4, #12]
 800bdca:	6126      	str	r6, [r4, #16]
 800bdcc:	6165      	str	r5, [r4, #20]
 800bdce:	444e      	add	r6, r9
 800bdd0:	eba5 0509 	sub.w	r5, r5, r9
 800bdd4:	6026      	str	r6, [r4, #0]
 800bdd6:	60a5      	str	r5, [r4, #8]
 800bdd8:	463e      	mov	r6, r7
 800bdda:	42be      	cmp	r6, r7
 800bddc:	d900      	bls.n	800bde0 <__ssputs_r+0x70>
 800bdde:	463e      	mov	r6, r7
 800bde0:	6820      	ldr	r0, [r4, #0]
 800bde2:	4632      	mov	r2, r6
 800bde4:	4641      	mov	r1, r8
 800bde6:	f000 faab 	bl	800c340 <memmove>
 800bdea:	68a3      	ldr	r3, [r4, #8]
 800bdec:	1b9b      	subs	r3, r3, r6
 800bdee:	60a3      	str	r3, [r4, #8]
 800bdf0:	6823      	ldr	r3, [r4, #0]
 800bdf2:	4433      	add	r3, r6
 800bdf4:	6023      	str	r3, [r4, #0]
 800bdf6:	2000      	movs	r0, #0
 800bdf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdfc:	462a      	mov	r2, r5
 800bdfe:	f000 fab9 	bl	800c374 <_realloc_r>
 800be02:	4606      	mov	r6, r0
 800be04:	2800      	cmp	r0, #0
 800be06:	d1e0      	bne.n	800bdca <__ssputs_r+0x5a>
 800be08:	6921      	ldr	r1, [r4, #16]
 800be0a:	4650      	mov	r0, sl
 800be0c:	f7ff ff64 	bl	800bcd8 <_free_r>
 800be10:	230c      	movs	r3, #12
 800be12:	f8ca 3000 	str.w	r3, [sl]
 800be16:	89a3      	ldrh	r3, [r4, #12]
 800be18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be1c:	81a3      	strh	r3, [r4, #12]
 800be1e:	f04f 30ff 	mov.w	r0, #4294967295
 800be22:	e7e9      	b.n	800bdf8 <__ssputs_r+0x88>

0800be24 <_svfiprintf_r>:
 800be24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be28:	4698      	mov	r8, r3
 800be2a:	898b      	ldrh	r3, [r1, #12]
 800be2c:	061b      	lsls	r3, r3, #24
 800be2e:	b09d      	sub	sp, #116	; 0x74
 800be30:	4607      	mov	r7, r0
 800be32:	460d      	mov	r5, r1
 800be34:	4614      	mov	r4, r2
 800be36:	d50e      	bpl.n	800be56 <_svfiprintf_r+0x32>
 800be38:	690b      	ldr	r3, [r1, #16]
 800be3a:	b963      	cbnz	r3, 800be56 <_svfiprintf_r+0x32>
 800be3c:	2140      	movs	r1, #64	; 0x40
 800be3e:	f7ff fdf7 	bl	800ba30 <_malloc_r>
 800be42:	6028      	str	r0, [r5, #0]
 800be44:	6128      	str	r0, [r5, #16]
 800be46:	b920      	cbnz	r0, 800be52 <_svfiprintf_r+0x2e>
 800be48:	230c      	movs	r3, #12
 800be4a:	603b      	str	r3, [r7, #0]
 800be4c:	f04f 30ff 	mov.w	r0, #4294967295
 800be50:	e0d0      	b.n	800bff4 <_svfiprintf_r+0x1d0>
 800be52:	2340      	movs	r3, #64	; 0x40
 800be54:	616b      	str	r3, [r5, #20]
 800be56:	2300      	movs	r3, #0
 800be58:	9309      	str	r3, [sp, #36]	; 0x24
 800be5a:	2320      	movs	r3, #32
 800be5c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800be60:	f8cd 800c 	str.w	r8, [sp, #12]
 800be64:	2330      	movs	r3, #48	; 0x30
 800be66:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c00c <_svfiprintf_r+0x1e8>
 800be6a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800be6e:	f04f 0901 	mov.w	r9, #1
 800be72:	4623      	mov	r3, r4
 800be74:	469a      	mov	sl, r3
 800be76:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be7a:	b10a      	cbz	r2, 800be80 <_svfiprintf_r+0x5c>
 800be7c:	2a25      	cmp	r2, #37	; 0x25
 800be7e:	d1f9      	bne.n	800be74 <_svfiprintf_r+0x50>
 800be80:	ebba 0b04 	subs.w	fp, sl, r4
 800be84:	d00b      	beq.n	800be9e <_svfiprintf_r+0x7a>
 800be86:	465b      	mov	r3, fp
 800be88:	4622      	mov	r2, r4
 800be8a:	4629      	mov	r1, r5
 800be8c:	4638      	mov	r0, r7
 800be8e:	f7ff ff6f 	bl	800bd70 <__ssputs_r>
 800be92:	3001      	adds	r0, #1
 800be94:	f000 80a9 	beq.w	800bfea <_svfiprintf_r+0x1c6>
 800be98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be9a:	445a      	add	r2, fp
 800be9c:	9209      	str	r2, [sp, #36]	; 0x24
 800be9e:	f89a 3000 	ldrb.w	r3, [sl]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	f000 80a1 	beq.w	800bfea <_svfiprintf_r+0x1c6>
 800bea8:	2300      	movs	r3, #0
 800beaa:	f04f 32ff 	mov.w	r2, #4294967295
 800beae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800beb2:	f10a 0a01 	add.w	sl, sl, #1
 800beb6:	9304      	str	r3, [sp, #16]
 800beb8:	9307      	str	r3, [sp, #28]
 800beba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bebe:	931a      	str	r3, [sp, #104]	; 0x68
 800bec0:	4654      	mov	r4, sl
 800bec2:	2205      	movs	r2, #5
 800bec4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bec8:	4850      	ldr	r0, [pc, #320]	; (800c00c <_svfiprintf_r+0x1e8>)
 800beca:	f7f4 f989 	bl	80001e0 <memchr>
 800bece:	9a04      	ldr	r2, [sp, #16]
 800bed0:	b9d8      	cbnz	r0, 800bf0a <_svfiprintf_r+0xe6>
 800bed2:	06d0      	lsls	r0, r2, #27
 800bed4:	bf44      	itt	mi
 800bed6:	2320      	movmi	r3, #32
 800bed8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bedc:	0711      	lsls	r1, r2, #28
 800bede:	bf44      	itt	mi
 800bee0:	232b      	movmi	r3, #43	; 0x2b
 800bee2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bee6:	f89a 3000 	ldrb.w	r3, [sl]
 800beea:	2b2a      	cmp	r3, #42	; 0x2a
 800beec:	d015      	beq.n	800bf1a <_svfiprintf_r+0xf6>
 800beee:	9a07      	ldr	r2, [sp, #28]
 800bef0:	4654      	mov	r4, sl
 800bef2:	2000      	movs	r0, #0
 800bef4:	f04f 0c0a 	mov.w	ip, #10
 800bef8:	4621      	mov	r1, r4
 800befa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800befe:	3b30      	subs	r3, #48	; 0x30
 800bf00:	2b09      	cmp	r3, #9
 800bf02:	d94d      	bls.n	800bfa0 <_svfiprintf_r+0x17c>
 800bf04:	b1b0      	cbz	r0, 800bf34 <_svfiprintf_r+0x110>
 800bf06:	9207      	str	r2, [sp, #28]
 800bf08:	e014      	b.n	800bf34 <_svfiprintf_r+0x110>
 800bf0a:	eba0 0308 	sub.w	r3, r0, r8
 800bf0e:	fa09 f303 	lsl.w	r3, r9, r3
 800bf12:	4313      	orrs	r3, r2
 800bf14:	9304      	str	r3, [sp, #16]
 800bf16:	46a2      	mov	sl, r4
 800bf18:	e7d2      	b.n	800bec0 <_svfiprintf_r+0x9c>
 800bf1a:	9b03      	ldr	r3, [sp, #12]
 800bf1c:	1d19      	adds	r1, r3, #4
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	9103      	str	r1, [sp, #12]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	bfbb      	ittet	lt
 800bf26:	425b      	neglt	r3, r3
 800bf28:	f042 0202 	orrlt.w	r2, r2, #2
 800bf2c:	9307      	strge	r3, [sp, #28]
 800bf2e:	9307      	strlt	r3, [sp, #28]
 800bf30:	bfb8      	it	lt
 800bf32:	9204      	strlt	r2, [sp, #16]
 800bf34:	7823      	ldrb	r3, [r4, #0]
 800bf36:	2b2e      	cmp	r3, #46	; 0x2e
 800bf38:	d10c      	bne.n	800bf54 <_svfiprintf_r+0x130>
 800bf3a:	7863      	ldrb	r3, [r4, #1]
 800bf3c:	2b2a      	cmp	r3, #42	; 0x2a
 800bf3e:	d134      	bne.n	800bfaa <_svfiprintf_r+0x186>
 800bf40:	9b03      	ldr	r3, [sp, #12]
 800bf42:	1d1a      	adds	r2, r3, #4
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	9203      	str	r2, [sp, #12]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	bfb8      	it	lt
 800bf4c:	f04f 33ff 	movlt.w	r3, #4294967295
 800bf50:	3402      	adds	r4, #2
 800bf52:	9305      	str	r3, [sp, #20]
 800bf54:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c01c <_svfiprintf_r+0x1f8>
 800bf58:	7821      	ldrb	r1, [r4, #0]
 800bf5a:	2203      	movs	r2, #3
 800bf5c:	4650      	mov	r0, sl
 800bf5e:	f7f4 f93f 	bl	80001e0 <memchr>
 800bf62:	b138      	cbz	r0, 800bf74 <_svfiprintf_r+0x150>
 800bf64:	9b04      	ldr	r3, [sp, #16]
 800bf66:	eba0 000a 	sub.w	r0, r0, sl
 800bf6a:	2240      	movs	r2, #64	; 0x40
 800bf6c:	4082      	lsls	r2, r0
 800bf6e:	4313      	orrs	r3, r2
 800bf70:	3401      	adds	r4, #1
 800bf72:	9304      	str	r3, [sp, #16]
 800bf74:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf78:	4825      	ldr	r0, [pc, #148]	; (800c010 <_svfiprintf_r+0x1ec>)
 800bf7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bf7e:	2206      	movs	r2, #6
 800bf80:	f7f4 f92e 	bl	80001e0 <memchr>
 800bf84:	2800      	cmp	r0, #0
 800bf86:	d038      	beq.n	800bffa <_svfiprintf_r+0x1d6>
 800bf88:	4b22      	ldr	r3, [pc, #136]	; (800c014 <_svfiprintf_r+0x1f0>)
 800bf8a:	bb1b      	cbnz	r3, 800bfd4 <_svfiprintf_r+0x1b0>
 800bf8c:	9b03      	ldr	r3, [sp, #12]
 800bf8e:	3307      	adds	r3, #7
 800bf90:	f023 0307 	bic.w	r3, r3, #7
 800bf94:	3308      	adds	r3, #8
 800bf96:	9303      	str	r3, [sp, #12]
 800bf98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf9a:	4433      	add	r3, r6
 800bf9c:	9309      	str	r3, [sp, #36]	; 0x24
 800bf9e:	e768      	b.n	800be72 <_svfiprintf_r+0x4e>
 800bfa0:	fb0c 3202 	mla	r2, ip, r2, r3
 800bfa4:	460c      	mov	r4, r1
 800bfa6:	2001      	movs	r0, #1
 800bfa8:	e7a6      	b.n	800bef8 <_svfiprintf_r+0xd4>
 800bfaa:	2300      	movs	r3, #0
 800bfac:	3401      	adds	r4, #1
 800bfae:	9305      	str	r3, [sp, #20]
 800bfb0:	4619      	mov	r1, r3
 800bfb2:	f04f 0c0a 	mov.w	ip, #10
 800bfb6:	4620      	mov	r0, r4
 800bfb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bfbc:	3a30      	subs	r2, #48	; 0x30
 800bfbe:	2a09      	cmp	r2, #9
 800bfc0:	d903      	bls.n	800bfca <_svfiprintf_r+0x1a6>
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d0c6      	beq.n	800bf54 <_svfiprintf_r+0x130>
 800bfc6:	9105      	str	r1, [sp, #20]
 800bfc8:	e7c4      	b.n	800bf54 <_svfiprintf_r+0x130>
 800bfca:	fb0c 2101 	mla	r1, ip, r1, r2
 800bfce:	4604      	mov	r4, r0
 800bfd0:	2301      	movs	r3, #1
 800bfd2:	e7f0      	b.n	800bfb6 <_svfiprintf_r+0x192>
 800bfd4:	ab03      	add	r3, sp, #12
 800bfd6:	9300      	str	r3, [sp, #0]
 800bfd8:	462a      	mov	r2, r5
 800bfda:	4b0f      	ldr	r3, [pc, #60]	; (800c018 <_svfiprintf_r+0x1f4>)
 800bfdc:	a904      	add	r1, sp, #16
 800bfde:	4638      	mov	r0, r7
 800bfe0:	f3af 8000 	nop.w
 800bfe4:	1c42      	adds	r2, r0, #1
 800bfe6:	4606      	mov	r6, r0
 800bfe8:	d1d6      	bne.n	800bf98 <_svfiprintf_r+0x174>
 800bfea:	89ab      	ldrh	r3, [r5, #12]
 800bfec:	065b      	lsls	r3, r3, #25
 800bfee:	f53f af2d 	bmi.w	800be4c <_svfiprintf_r+0x28>
 800bff2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bff4:	b01d      	add	sp, #116	; 0x74
 800bff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bffa:	ab03      	add	r3, sp, #12
 800bffc:	9300      	str	r3, [sp, #0]
 800bffe:	462a      	mov	r2, r5
 800c000:	4b05      	ldr	r3, [pc, #20]	; (800c018 <_svfiprintf_r+0x1f4>)
 800c002:	a904      	add	r1, sp, #16
 800c004:	4638      	mov	r0, r7
 800c006:	f000 f879 	bl	800c0fc <_printf_i>
 800c00a:	e7eb      	b.n	800bfe4 <_svfiprintf_r+0x1c0>
 800c00c:	0800ca00 	.word	0x0800ca00
 800c010:	0800ca0a 	.word	0x0800ca0a
 800c014:	00000000 	.word	0x00000000
 800c018:	0800bd71 	.word	0x0800bd71
 800c01c:	0800ca06 	.word	0x0800ca06

0800c020 <_printf_common>:
 800c020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c024:	4616      	mov	r6, r2
 800c026:	4699      	mov	r9, r3
 800c028:	688a      	ldr	r2, [r1, #8]
 800c02a:	690b      	ldr	r3, [r1, #16]
 800c02c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c030:	4293      	cmp	r3, r2
 800c032:	bfb8      	it	lt
 800c034:	4613      	movlt	r3, r2
 800c036:	6033      	str	r3, [r6, #0]
 800c038:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c03c:	4607      	mov	r7, r0
 800c03e:	460c      	mov	r4, r1
 800c040:	b10a      	cbz	r2, 800c046 <_printf_common+0x26>
 800c042:	3301      	adds	r3, #1
 800c044:	6033      	str	r3, [r6, #0]
 800c046:	6823      	ldr	r3, [r4, #0]
 800c048:	0699      	lsls	r1, r3, #26
 800c04a:	bf42      	ittt	mi
 800c04c:	6833      	ldrmi	r3, [r6, #0]
 800c04e:	3302      	addmi	r3, #2
 800c050:	6033      	strmi	r3, [r6, #0]
 800c052:	6825      	ldr	r5, [r4, #0]
 800c054:	f015 0506 	ands.w	r5, r5, #6
 800c058:	d106      	bne.n	800c068 <_printf_common+0x48>
 800c05a:	f104 0a19 	add.w	sl, r4, #25
 800c05e:	68e3      	ldr	r3, [r4, #12]
 800c060:	6832      	ldr	r2, [r6, #0]
 800c062:	1a9b      	subs	r3, r3, r2
 800c064:	42ab      	cmp	r3, r5
 800c066:	dc26      	bgt.n	800c0b6 <_printf_common+0x96>
 800c068:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c06c:	1e13      	subs	r3, r2, #0
 800c06e:	6822      	ldr	r2, [r4, #0]
 800c070:	bf18      	it	ne
 800c072:	2301      	movne	r3, #1
 800c074:	0692      	lsls	r2, r2, #26
 800c076:	d42b      	bmi.n	800c0d0 <_printf_common+0xb0>
 800c078:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c07c:	4649      	mov	r1, r9
 800c07e:	4638      	mov	r0, r7
 800c080:	47c0      	blx	r8
 800c082:	3001      	adds	r0, #1
 800c084:	d01e      	beq.n	800c0c4 <_printf_common+0xa4>
 800c086:	6823      	ldr	r3, [r4, #0]
 800c088:	6922      	ldr	r2, [r4, #16]
 800c08a:	f003 0306 	and.w	r3, r3, #6
 800c08e:	2b04      	cmp	r3, #4
 800c090:	bf02      	ittt	eq
 800c092:	68e5      	ldreq	r5, [r4, #12]
 800c094:	6833      	ldreq	r3, [r6, #0]
 800c096:	1aed      	subeq	r5, r5, r3
 800c098:	68a3      	ldr	r3, [r4, #8]
 800c09a:	bf0c      	ite	eq
 800c09c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c0a0:	2500      	movne	r5, #0
 800c0a2:	4293      	cmp	r3, r2
 800c0a4:	bfc4      	itt	gt
 800c0a6:	1a9b      	subgt	r3, r3, r2
 800c0a8:	18ed      	addgt	r5, r5, r3
 800c0aa:	2600      	movs	r6, #0
 800c0ac:	341a      	adds	r4, #26
 800c0ae:	42b5      	cmp	r5, r6
 800c0b0:	d11a      	bne.n	800c0e8 <_printf_common+0xc8>
 800c0b2:	2000      	movs	r0, #0
 800c0b4:	e008      	b.n	800c0c8 <_printf_common+0xa8>
 800c0b6:	2301      	movs	r3, #1
 800c0b8:	4652      	mov	r2, sl
 800c0ba:	4649      	mov	r1, r9
 800c0bc:	4638      	mov	r0, r7
 800c0be:	47c0      	blx	r8
 800c0c0:	3001      	adds	r0, #1
 800c0c2:	d103      	bne.n	800c0cc <_printf_common+0xac>
 800c0c4:	f04f 30ff 	mov.w	r0, #4294967295
 800c0c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0cc:	3501      	adds	r5, #1
 800c0ce:	e7c6      	b.n	800c05e <_printf_common+0x3e>
 800c0d0:	18e1      	adds	r1, r4, r3
 800c0d2:	1c5a      	adds	r2, r3, #1
 800c0d4:	2030      	movs	r0, #48	; 0x30
 800c0d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c0da:	4422      	add	r2, r4
 800c0dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c0e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c0e4:	3302      	adds	r3, #2
 800c0e6:	e7c7      	b.n	800c078 <_printf_common+0x58>
 800c0e8:	2301      	movs	r3, #1
 800c0ea:	4622      	mov	r2, r4
 800c0ec:	4649      	mov	r1, r9
 800c0ee:	4638      	mov	r0, r7
 800c0f0:	47c0      	blx	r8
 800c0f2:	3001      	adds	r0, #1
 800c0f4:	d0e6      	beq.n	800c0c4 <_printf_common+0xa4>
 800c0f6:	3601      	adds	r6, #1
 800c0f8:	e7d9      	b.n	800c0ae <_printf_common+0x8e>
	...

0800c0fc <_printf_i>:
 800c0fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c100:	7e0f      	ldrb	r7, [r1, #24]
 800c102:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c104:	2f78      	cmp	r7, #120	; 0x78
 800c106:	4691      	mov	r9, r2
 800c108:	4680      	mov	r8, r0
 800c10a:	460c      	mov	r4, r1
 800c10c:	469a      	mov	sl, r3
 800c10e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c112:	d807      	bhi.n	800c124 <_printf_i+0x28>
 800c114:	2f62      	cmp	r7, #98	; 0x62
 800c116:	d80a      	bhi.n	800c12e <_printf_i+0x32>
 800c118:	2f00      	cmp	r7, #0
 800c11a:	f000 80d4 	beq.w	800c2c6 <_printf_i+0x1ca>
 800c11e:	2f58      	cmp	r7, #88	; 0x58
 800c120:	f000 80c0 	beq.w	800c2a4 <_printf_i+0x1a8>
 800c124:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c128:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c12c:	e03a      	b.n	800c1a4 <_printf_i+0xa8>
 800c12e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c132:	2b15      	cmp	r3, #21
 800c134:	d8f6      	bhi.n	800c124 <_printf_i+0x28>
 800c136:	a101      	add	r1, pc, #4	; (adr r1, 800c13c <_printf_i+0x40>)
 800c138:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c13c:	0800c195 	.word	0x0800c195
 800c140:	0800c1a9 	.word	0x0800c1a9
 800c144:	0800c125 	.word	0x0800c125
 800c148:	0800c125 	.word	0x0800c125
 800c14c:	0800c125 	.word	0x0800c125
 800c150:	0800c125 	.word	0x0800c125
 800c154:	0800c1a9 	.word	0x0800c1a9
 800c158:	0800c125 	.word	0x0800c125
 800c15c:	0800c125 	.word	0x0800c125
 800c160:	0800c125 	.word	0x0800c125
 800c164:	0800c125 	.word	0x0800c125
 800c168:	0800c2ad 	.word	0x0800c2ad
 800c16c:	0800c1d5 	.word	0x0800c1d5
 800c170:	0800c267 	.word	0x0800c267
 800c174:	0800c125 	.word	0x0800c125
 800c178:	0800c125 	.word	0x0800c125
 800c17c:	0800c2cf 	.word	0x0800c2cf
 800c180:	0800c125 	.word	0x0800c125
 800c184:	0800c1d5 	.word	0x0800c1d5
 800c188:	0800c125 	.word	0x0800c125
 800c18c:	0800c125 	.word	0x0800c125
 800c190:	0800c26f 	.word	0x0800c26f
 800c194:	682b      	ldr	r3, [r5, #0]
 800c196:	1d1a      	adds	r2, r3, #4
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	602a      	str	r2, [r5, #0]
 800c19c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c1a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c1a4:	2301      	movs	r3, #1
 800c1a6:	e09f      	b.n	800c2e8 <_printf_i+0x1ec>
 800c1a8:	6820      	ldr	r0, [r4, #0]
 800c1aa:	682b      	ldr	r3, [r5, #0]
 800c1ac:	0607      	lsls	r7, r0, #24
 800c1ae:	f103 0104 	add.w	r1, r3, #4
 800c1b2:	6029      	str	r1, [r5, #0]
 800c1b4:	d501      	bpl.n	800c1ba <_printf_i+0xbe>
 800c1b6:	681e      	ldr	r6, [r3, #0]
 800c1b8:	e003      	b.n	800c1c2 <_printf_i+0xc6>
 800c1ba:	0646      	lsls	r6, r0, #25
 800c1bc:	d5fb      	bpl.n	800c1b6 <_printf_i+0xba>
 800c1be:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c1c2:	2e00      	cmp	r6, #0
 800c1c4:	da03      	bge.n	800c1ce <_printf_i+0xd2>
 800c1c6:	232d      	movs	r3, #45	; 0x2d
 800c1c8:	4276      	negs	r6, r6
 800c1ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c1ce:	485a      	ldr	r0, [pc, #360]	; (800c338 <_printf_i+0x23c>)
 800c1d0:	230a      	movs	r3, #10
 800c1d2:	e012      	b.n	800c1fa <_printf_i+0xfe>
 800c1d4:	682b      	ldr	r3, [r5, #0]
 800c1d6:	6820      	ldr	r0, [r4, #0]
 800c1d8:	1d19      	adds	r1, r3, #4
 800c1da:	6029      	str	r1, [r5, #0]
 800c1dc:	0605      	lsls	r5, r0, #24
 800c1de:	d501      	bpl.n	800c1e4 <_printf_i+0xe8>
 800c1e0:	681e      	ldr	r6, [r3, #0]
 800c1e2:	e002      	b.n	800c1ea <_printf_i+0xee>
 800c1e4:	0641      	lsls	r1, r0, #25
 800c1e6:	d5fb      	bpl.n	800c1e0 <_printf_i+0xe4>
 800c1e8:	881e      	ldrh	r6, [r3, #0]
 800c1ea:	4853      	ldr	r0, [pc, #332]	; (800c338 <_printf_i+0x23c>)
 800c1ec:	2f6f      	cmp	r7, #111	; 0x6f
 800c1ee:	bf0c      	ite	eq
 800c1f0:	2308      	moveq	r3, #8
 800c1f2:	230a      	movne	r3, #10
 800c1f4:	2100      	movs	r1, #0
 800c1f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c1fa:	6865      	ldr	r5, [r4, #4]
 800c1fc:	60a5      	str	r5, [r4, #8]
 800c1fe:	2d00      	cmp	r5, #0
 800c200:	bfa2      	ittt	ge
 800c202:	6821      	ldrge	r1, [r4, #0]
 800c204:	f021 0104 	bicge.w	r1, r1, #4
 800c208:	6021      	strge	r1, [r4, #0]
 800c20a:	b90e      	cbnz	r6, 800c210 <_printf_i+0x114>
 800c20c:	2d00      	cmp	r5, #0
 800c20e:	d04b      	beq.n	800c2a8 <_printf_i+0x1ac>
 800c210:	4615      	mov	r5, r2
 800c212:	fbb6 f1f3 	udiv	r1, r6, r3
 800c216:	fb03 6711 	mls	r7, r3, r1, r6
 800c21a:	5dc7      	ldrb	r7, [r0, r7]
 800c21c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c220:	4637      	mov	r7, r6
 800c222:	42bb      	cmp	r3, r7
 800c224:	460e      	mov	r6, r1
 800c226:	d9f4      	bls.n	800c212 <_printf_i+0x116>
 800c228:	2b08      	cmp	r3, #8
 800c22a:	d10b      	bne.n	800c244 <_printf_i+0x148>
 800c22c:	6823      	ldr	r3, [r4, #0]
 800c22e:	07de      	lsls	r6, r3, #31
 800c230:	d508      	bpl.n	800c244 <_printf_i+0x148>
 800c232:	6923      	ldr	r3, [r4, #16]
 800c234:	6861      	ldr	r1, [r4, #4]
 800c236:	4299      	cmp	r1, r3
 800c238:	bfde      	ittt	le
 800c23a:	2330      	movle	r3, #48	; 0x30
 800c23c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c240:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c244:	1b52      	subs	r2, r2, r5
 800c246:	6122      	str	r2, [r4, #16]
 800c248:	f8cd a000 	str.w	sl, [sp]
 800c24c:	464b      	mov	r3, r9
 800c24e:	aa03      	add	r2, sp, #12
 800c250:	4621      	mov	r1, r4
 800c252:	4640      	mov	r0, r8
 800c254:	f7ff fee4 	bl	800c020 <_printf_common>
 800c258:	3001      	adds	r0, #1
 800c25a:	d14a      	bne.n	800c2f2 <_printf_i+0x1f6>
 800c25c:	f04f 30ff 	mov.w	r0, #4294967295
 800c260:	b004      	add	sp, #16
 800c262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c266:	6823      	ldr	r3, [r4, #0]
 800c268:	f043 0320 	orr.w	r3, r3, #32
 800c26c:	6023      	str	r3, [r4, #0]
 800c26e:	4833      	ldr	r0, [pc, #204]	; (800c33c <_printf_i+0x240>)
 800c270:	2778      	movs	r7, #120	; 0x78
 800c272:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c276:	6823      	ldr	r3, [r4, #0]
 800c278:	6829      	ldr	r1, [r5, #0]
 800c27a:	061f      	lsls	r7, r3, #24
 800c27c:	f851 6b04 	ldr.w	r6, [r1], #4
 800c280:	d402      	bmi.n	800c288 <_printf_i+0x18c>
 800c282:	065f      	lsls	r7, r3, #25
 800c284:	bf48      	it	mi
 800c286:	b2b6      	uxthmi	r6, r6
 800c288:	07df      	lsls	r7, r3, #31
 800c28a:	bf48      	it	mi
 800c28c:	f043 0320 	orrmi.w	r3, r3, #32
 800c290:	6029      	str	r1, [r5, #0]
 800c292:	bf48      	it	mi
 800c294:	6023      	strmi	r3, [r4, #0]
 800c296:	b91e      	cbnz	r6, 800c2a0 <_printf_i+0x1a4>
 800c298:	6823      	ldr	r3, [r4, #0]
 800c29a:	f023 0320 	bic.w	r3, r3, #32
 800c29e:	6023      	str	r3, [r4, #0]
 800c2a0:	2310      	movs	r3, #16
 800c2a2:	e7a7      	b.n	800c1f4 <_printf_i+0xf8>
 800c2a4:	4824      	ldr	r0, [pc, #144]	; (800c338 <_printf_i+0x23c>)
 800c2a6:	e7e4      	b.n	800c272 <_printf_i+0x176>
 800c2a8:	4615      	mov	r5, r2
 800c2aa:	e7bd      	b.n	800c228 <_printf_i+0x12c>
 800c2ac:	682b      	ldr	r3, [r5, #0]
 800c2ae:	6826      	ldr	r6, [r4, #0]
 800c2b0:	6961      	ldr	r1, [r4, #20]
 800c2b2:	1d18      	adds	r0, r3, #4
 800c2b4:	6028      	str	r0, [r5, #0]
 800c2b6:	0635      	lsls	r5, r6, #24
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	d501      	bpl.n	800c2c0 <_printf_i+0x1c4>
 800c2bc:	6019      	str	r1, [r3, #0]
 800c2be:	e002      	b.n	800c2c6 <_printf_i+0x1ca>
 800c2c0:	0670      	lsls	r0, r6, #25
 800c2c2:	d5fb      	bpl.n	800c2bc <_printf_i+0x1c0>
 800c2c4:	8019      	strh	r1, [r3, #0]
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	6123      	str	r3, [r4, #16]
 800c2ca:	4615      	mov	r5, r2
 800c2cc:	e7bc      	b.n	800c248 <_printf_i+0x14c>
 800c2ce:	682b      	ldr	r3, [r5, #0]
 800c2d0:	1d1a      	adds	r2, r3, #4
 800c2d2:	602a      	str	r2, [r5, #0]
 800c2d4:	681d      	ldr	r5, [r3, #0]
 800c2d6:	6862      	ldr	r2, [r4, #4]
 800c2d8:	2100      	movs	r1, #0
 800c2da:	4628      	mov	r0, r5
 800c2dc:	f7f3 ff80 	bl	80001e0 <memchr>
 800c2e0:	b108      	cbz	r0, 800c2e6 <_printf_i+0x1ea>
 800c2e2:	1b40      	subs	r0, r0, r5
 800c2e4:	6060      	str	r0, [r4, #4]
 800c2e6:	6863      	ldr	r3, [r4, #4]
 800c2e8:	6123      	str	r3, [r4, #16]
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c2f0:	e7aa      	b.n	800c248 <_printf_i+0x14c>
 800c2f2:	6923      	ldr	r3, [r4, #16]
 800c2f4:	462a      	mov	r2, r5
 800c2f6:	4649      	mov	r1, r9
 800c2f8:	4640      	mov	r0, r8
 800c2fa:	47d0      	blx	sl
 800c2fc:	3001      	adds	r0, #1
 800c2fe:	d0ad      	beq.n	800c25c <_printf_i+0x160>
 800c300:	6823      	ldr	r3, [r4, #0]
 800c302:	079b      	lsls	r3, r3, #30
 800c304:	d413      	bmi.n	800c32e <_printf_i+0x232>
 800c306:	68e0      	ldr	r0, [r4, #12]
 800c308:	9b03      	ldr	r3, [sp, #12]
 800c30a:	4298      	cmp	r0, r3
 800c30c:	bfb8      	it	lt
 800c30e:	4618      	movlt	r0, r3
 800c310:	e7a6      	b.n	800c260 <_printf_i+0x164>
 800c312:	2301      	movs	r3, #1
 800c314:	4632      	mov	r2, r6
 800c316:	4649      	mov	r1, r9
 800c318:	4640      	mov	r0, r8
 800c31a:	47d0      	blx	sl
 800c31c:	3001      	adds	r0, #1
 800c31e:	d09d      	beq.n	800c25c <_printf_i+0x160>
 800c320:	3501      	adds	r5, #1
 800c322:	68e3      	ldr	r3, [r4, #12]
 800c324:	9903      	ldr	r1, [sp, #12]
 800c326:	1a5b      	subs	r3, r3, r1
 800c328:	42ab      	cmp	r3, r5
 800c32a:	dcf2      	bgt.n	800c312 <_printf_i+0x216>
 800c32c:	e7eb      	b.n	800c306 <_printf_i+0x20a>
 800c32e:	2500      	movs	r5, #0
 800c330:	f104 0619 	add.w	r6, r4, #25
 800c334:	e7f5      	b.n	800c322 <_printf_i+0x226>
 800c336:	bf00      	nop
 800c338:	0800ca11 	.word	0x0800ca11
 800c33c:	0800ca22 	.word	0x0800ca22

0800c340 <memmove>:
 800c340:	4288      	cmp	r0, r1
 800c342:	b510      	push	{r4, lr}
 800c344:	eb01 0402 	add.w	r4, r1, r2
 800c348:	d902      	bls.n	800c350 <memmove+0x10>
 800c34a:	4284      	cmp	r4, r0
 800c34c:	4623      	mov	r3, r4
 800c34e:	d807      	bhi.n	800c360 <memmove+0x20>
 800c350:	1e43      	subs	r3, r0, #1
 800c352:	42a1      	cmp	r1, r4
 800c354:	d008      	beq.n	800c368 <memmove+0x28>
 800c356:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c35a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c35e:	e7f8      	b.n	800c352 <memmove+0x12>
 800c360:	4402      	add	r2, r0
 800c362:	4601      	mov	r1, r0
 800c364:	428a      	cmp	r2, r1
 800c366:	d100      	bne.n	800c36a <memmove+0x2a>
 800c368:	bd10      	pop	{r4, pc}
 800c36a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c36e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c372:	e7f7      	b.n	800c364 <memmove+0x24>

0800c374 <_realloc_r>:
 800c374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c378:	4680      	mov	r8, r0
 800c37a:	4614      	mov	r4, r2
 800c37c:	460e      	mov	r6, r1
 800c37e:	b921      	cbnz	r1, 800c38a <_realloc_r+0x16>
 800c380:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c384:	4611      	mov	r1, r2
 800c386:	f7ff bb53 	b.w	800ba30 <_malloc_r>
 800c38a:	b92a      	cbnz	r2, 800c398 <_realloc_r+0x24>
 800c38c:	f7ff fca4 	bl	800bcd8 <_free_r>
 800c390:	4625      	mov	r5, r4
 800c392:	4628      	mov	r0, r5
 800c394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c398:	f000 f81b 	bl	800c3d2 <_malloc_usable_size_r>
 800c39c:	4284      	cmp	r4, r0
 800c39e:	4607      	mov	r7, r0
 800c3a0:	d802      	bhi.n	800c3a8 <_realloc_r+0x34>
 800c3a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c3a6:	d812      	bhi.n	800c3ce <_realloc_r+0x5a>
 800c3a8:	4621      	mov	r1, r4
 800c3aa:	4640      	mov	r0, r8
 800c3ac:	f7ff fb40 	bl	800ba30 <_malloc_r>
 800c3b0:	4605      	mov	r5, r0
 800c3b2:	2800      	cmp	r0, #0
 800c3b4:	d0ed      	beq.n	800c392 <_realloc_r+0x1e>
 800c3b6:	42bc      	cmp	r4, r7
 800c3b8:	4622      	mov	r2, r4
 800c3ba:	4631      	mov	r1, r6
 800c3bc:	bf28      	it	cs
 800c3be:	463a      	movcs	r2, r7
 800c3c0:	f7ff fc7c 	bl	800bcbc <memcpy>
 800c3c4:	4631      	mov	r1, r6
 800c3c6:	4640      	mov	r0, r8
 800c3c8:	f7ff fc86 	bl	800bcd8 <_free_r>
 800c3cc:	e7e1      	b.n	800c392 <_realloc_r+0x1e>
 800c3ce:	4635      	mov	r5, r6
 800c3d0:	e7df      	b.n	800c392 <_realloc_r+0x1e>

0800c3d2 <_malloc_usable_size_r>:
 800c3d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c3d6:	1f18      	subs	r0, r3, #4
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	bfbc      	itt	lt
 800c3dc:	580b      	ldrlt	r3, [r1, r0]
 800c3de:	18c0      	addlt	r0, r0, r3
 800c3e0:	4770      	bx	lr
	...

0800c3e4 <_init>:
 800c3e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3e6:	bf00      	nop
 800c3e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3ea:	bc08      	pop	{r3}
 800c3ec:	469e      	mov	lr, r3
 800c3ee:	4770      	bx	lr

0800c3f0 <_fini>:
 800c3f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3f2:	bf00      	nop
 800c3f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3f6:	bc08      	pop	{r3}
 800c3f8:	469e      	mov	lr, r3
 800c3fa:	4770      	bx	lr
