
SD_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf7c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000063c  0800c10c  0800c10c  0001c10c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c748  0800c748  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  0800c748  0800c748  0001c748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c750  0800c750  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c750  0800c750  0001c750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c754  0800c754  0001c754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800c758  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020060  2**0
                  CONTENTS
 10 .bss          000192d8  20000060  20000060  00020060  2**2
                  ALLOC
 11 ._user_heap_stack 00001e00  20019338  20019338  00020060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001b324  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004407  00000000  00000000  0003b3f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000015a0  00000000  00000000  0003f800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001099  00000000  00000000  00040da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002601a  00000000  00000000  00041e39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001c797  00000000  00000000  00067e53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d7a02  00000000  00000000  000845ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005d84  00000000  00000000  0015bfec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  00161d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c0f4 	.word	0x0800c0f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	0800c0f4 	.word	0x0800c0f4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <Send_Uart>:
DWORD fre_clust;
uint32_t total, free_space;


void Send_Uart (char *string)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
 8000584:	6878      	ldr	r0, [r7, #4]
 8000586:	f7ff fe23 	bl	80001d0 <strlen>
 800058a:	4603      	mov	r3, r0
 800058c:	b29a      	uxth	r2, r3
 800058e:	f04f 33ff 	mov.w	r3, #4294967295
 8000592:	6879      	ldr	r1, [r7, #4]
 8000594:	4803      	ldr	r0, [pc, #12]	; (80005a4 <Send_Uart+0x28>)
 8000596:	f004 fc23 	bl	8004de0 <HAL_UART_Transmit>
}
 800059a:	bf00      	nop
 800059c:	3708      	adds	r7, #8
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	2000090c 	.word	0x2000090c

080005a8 <Mount_SD>:



void Mount_SD (const TCHAR* path)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b09c      	sub	sp, #112	; 0x70
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 80005b0:	2201      	movs	r2, #1
 80005b2:	6879      	ldr	r1, [r7, #4]
 80005b4:	4810      	ldr	r0, [pc, #64]	; (80005f8 <Mount_SD+0x50>)
 80005b6:	f007 fcf5 	bl	8007fa4 <f_mount>
 80005ba:	4603      	mov	r3, r0
 80005bc:	461a      	mov	r2, r3
 80005be:	4b0f      	ldr	r3, [pc, #60]	; (80005fc <Mount_SD+0x54>)
 80005c0:	701a      	strb	r2, [r3, #0]

	if (fresult != FR_OK) {
 80005c2:	4b0e      	ldr	r3, [pc, #56]	; (80005fc <Mount_SD+0x54>)
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d00e      	beq.n	80005e8 <Mount_SD+0x40>
//		Send_Uart ("ERROR!!! in mounting SD CARD...\n\n");
		char buf[100];
		sprintf (buf, "Mounting Error: %d\n\n", (int) fresult);
 80005ca:	4b0c      	ldr	r3, [pc, #48]	; (80005fc <Mount_SD+0x54>)
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	461a      	mov	r2, r3
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	490a      	ldr	r1, [pc, #40]	; (8000600 <Mount_SD+0x58>)
 80005d6:	4618      	mov	r0, r3
 80005d8:	f00b f93e 	bl	800b858 <siprintf>
		Send_Uart (buf);
 80005dc:	f107 030c 	add.w	r3, r7, #12
 80005e0:	4618      	mov	r0, r3
 80005e2:	f7ff ffcb 	bl	800057c <Send_Uart>

	} else {
		Send_Uart("SD CARD mounted successfully...\n");
	}
}
 80005e6:	e002      	b.n	80005ee <Mount_SD+0x46>
		Send_Uart("SD CARD mounted successfully...\n");
 80005e8:	4806      	ldr	r0, [pc, #24]	; (8000604 <Mount_SD+0x5c>)
 80005ea:	f7ff ffc7 	bl	800057c <Send_Uart>
}
 80005ee:	bf00      	nop
 80005f0:	3770      	adds	r7, #112	; 0x70
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	2000007c 	.word	0x2000007c
 80005fc:	200004f8 	.word	0x200004f8
 8000600:	0800c10c 	.word	0x0800c10c
 8000604:	0800c124 	.word	0x0800c124

08000608 <Create_File>:
	}
}

// modified: changed return value if file exists
FRESULT Create_File (char *name)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b09c      	sub	sp, #112	; 0x70
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &fno);
 8000610:	4917      	ldr	r1, [pc, #92]	; (8000670 <Create_File+0x68>)
 8000612:	6878      	ldr	r0, [r7, #4]
 8000614:	f008 f91e 	bl	8008854 <f_stat>
 8000618:	4603      	mov	r3, r0
 800061a:	461a      	mov	r2, r3
 800061c:	4b15      	ldr	r3, [pc, #84]	; (8000674 <Create_File+0x6c>)
 800061e:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 8000620:	4b14      	ldr	r3, [pc, #80]	; (8000674 <Create_File+0x6c>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d101      	bne.n	800062c <Create_File+0x24>
	{
		return FR_INVALID_NAME; //modified from 0 to indicate an error instead
 8000628:	2306      	movs	r3, #6
 800062a:	e01d      	b.n	8000668 <Create_File+0x60>
	}
	else
	{
//		fresult = f_open(&fil, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS|FA_WRITE);
 800062c:	220a      	movs	r2, #10
 800062e:	6879      	ldr	r1, [r7, #4]
 8000630:	4811      	ldr	r0, [pc, #68]	; (8000678 <Create_File+0x70>)
 8000632:	f007 fd1b 	bl	800806c <f_open>
 8000636:	4603      	mov	r3, r0
 8000638:	461a      	mov	r2, r3
 800063a:	4b0e      	ldr	r3, [pc, #56]	; (8000674 <Create_File+0x6c>)
 800063c:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 800063e:	4b0d      	ldr	r3, [pc, #52]	; (8000674 <Create_File+0x6c>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d002      	beq.n	800064c <Create_File+0x44>
		{
			return fresult;
 8000646:	4b0b      	ldr	r3, [pc, #44]	; (8000674 <Create_File+0x6c>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	e00d      	b.n	8000668 <Create_File+0x60>
		}
		else
		{
			char buf[100];
			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	687a      	ldr	r2, [r7, #4]
 8000652:	490a      	ldr	r1, [pc, #40]	; (800067c <Create_File+0x74>)
 8000654:	4618      	mov	r0, r3
 8000656:	f00b f8ff 	bl	800b858 <siprintf>
			Send_Uart(buf);
 800065a:	f107 030c 	add.w	r3, r7, #12
 800065e:	4618      	mov	r0, r3
 8000660:	f7ff ff8c 	bl	800057c <Send_Uart>
//			char buf[100];
//			sprintf (buf, "File *%s* CLOSED successfully\n", name);
//			Send_Uart(buf);
//		}
	}
    return fresult;
 8000664:	4b03      	ldr	r3, [pc, #12]	; (8000674 <Create_File+0x6c>)
 8000666:	781b      	ldrb	r3, [r3, #0]
}
 8000668:	4618      	mov	r0, r3
 800066a:	3770      	adds	r7, #112	; 0x70
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	200004e0 	.word	0x200004e0
 8000674:	200004f8 	.word	0x200004f8
 8000678:	200002b0 	.word	0x200002b0
 800067c:	0800c338 	.word	0x0800c338

08000680 <Update_File>:


// this function was updated: removed logging to avoid console spam
FRESULT Update_File (char *name, char *data)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b09c      	sub	sp, #112	; 0x70
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
 8000688:	6039      	str	r1, [r7, #0]
////	        free(buf);
//	        return fresult;
//	    }

	    /* Writing text */
	    fresult = f_write(&fil, data, strlen (data), &bw);
 800068a:	6838      	ldr	r0, [r7, #0]
 800068c:	f7ff fda0 	bl	80001d0 <strlen>
 8000690:	4602      	mov	r2, r0
 8000692:	4b1d      	ldr	r3, [pc, #116]	; (8000708 <Update_File+0x88>)
 8000694:	6839      	ldr	r1, [r7, #0]
 8000696:	481d      	ldr	r0, [pc, #116]	; (800070c <Update_File+0x8c>)
 8000698:	f007 feae 	bl	80083f8 <f_write>
 800069c:	4603      	mov	r3, r0
 800069e:	461a      	mov	r2, r3
 80006a0:	4b1b      	ldr	r3, [pc, #108]	; (8000710 <Update_File+0x90>)
 80006a2:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 80006a4:	4b1a      	ldr	r3, [pc, #104]	; (8000710 <Update_File+0x90>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d00d      	beq.n	80006c8 <Update_File+0x48>
	    {
	    	char buf[100];
	    	sprintf (buf, "ERROR!!! No. %d in writing file *%s*\n\n", fresult, name);
 80006ac:	4b18      	ldr	r3, [pc, #96]	; (8000710 <Update_File+0x90>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	461a      	mov	r2, r3
 80006b2:	f107 000c 	add.w	r0, r7, #12
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	4916      	ldr	r1, [pc, #88]	; (8000714 <Update_File+0x94>)
 80006ba:	f00b f8cd 	bl	800b858 <siprintf>
	    	Send_Uart(buf);
 80006be:	f107 030c 	add.w	r3, r7, #12
 80006c2:	4618      	mov	r0, r3
 80006c4:	f7ff ff5a 	bl	800057c <Send_Uart>
//	    	Send_Uart(buf);
//	    	free(buf);
	    }

	    /* Close file */
	    fresult = f_sync(&fil);
 80006c8:	4810      	ldr	r0, [pc, #64]	; (800070c <Update_File+0x8c>)
 80006ca:	f008 f839 	bl	8008740 <f_sync>
 80006ce:	4603      	mov	r3, r0
 80006d0:	461a      	mov	r2, r3
 80006d2:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <Update_File+0x90>)
 80006d4:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 80006d6:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <Update_File+0x90>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d00d      	beq.n	80006fa <Update_File+0x7a>
	    {
	    	char buf[100];
	    	sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n\n", fresult, name);
 80006de:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <Update_File+0x90>)
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	461a      	mov	r2, r3
 80006e4:	f107 000c 	add.w	r0, r7, #12
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	490b      	ldr	r1, [pc, #44]	; (8000718 <Update_File+0x98>)
 80006ec:	f00b f8b4 	bl	800b858 <siprintf>
	    	Send_Uart(buf);
 80006f0:	f107 030c 	add.w	r3, r7, #12
 80006f4:	4618      	mov	r0, r3
 80006f6:	f7ff ff41 	bl	800057c <Send_Uart>
//	    	sprintf (buf, "File *%s* CLOSED successfully\n", name);
//	    	Send_Uart(buf);
//	    	free(buf);
//	     }
//	}
    return fresult;
 80006fa:	4b05      	ldr	r3, [pc, #20]	; (8000710 <Update_File+0x90>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
}
 80006fe:	4618      	mov	r0, r3
 8000700:	3770      	adds	r7, #112	; 0x70
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	200004fc 	.word	0x200004fc
 800070c:	200002b0 	.word	0x200002b0
 8000710:	200004f8 	.word	0x200004f8
 8000714:	0800c378 	.word	0x0800c378
 8000718:	0800c2f0 	.word	0x0800c2f0

0800071c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800071c:	b480      	push	{r7}
 800071e:	b085      	sub	sp, #20
 8000720:	af00      	add	r7, sp, #0
 8000722:	60f8      	str	r0, [r7, #12]
 8000724:	60b9      	str	r1, [r7, #8]
 8000726:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	4a07      	ldr	r2, [pc, #28]	; (8000748 <vApplicationGetIdleTaskMemory+0x2c>)
 800072c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800072e:	68bb      	ldr	r3, [r7, #8]
 8000730:	4a06      	ldr	r2, [pc, #24]	; (800074c <vApplicationGetIdleTaskMemory+0x30>)
 8000732:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	2280      	movs	r2, #128	; 0x80
 8000738:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800073a:	bf00      	nop
 800073c:	3714      	adds	r7, #20
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	20000500 	.word	0x20000500
 800074c:	200005a0 	.word	0x200005a0

08000750 <configCANFilters>:
} CanMsg;
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void configCANFilters(CAN_HandleTypeDef* canHandle){	//Without filtered any CAN msgs
 8000750:	b580      	push	{r7, lr}
 8000752:	b08c      	sub	sp, #48	; 0x30
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]

    CAN_FilterTypeDef sFilterConfig;

    // Configure the filter to accept all messages
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000758:	2300      	movs	r3, #0
 800075a:	623b      	str	r3, [r7, #32]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800075c:	2301      	movs	r3, #1
 800075e:	627b      	str	r3, [r7, #36]	; 0x24
    sFilterConfig.FilterIdHigh = 0x0000;
 8000760:	2300      	movs	r3, #0
 8000762:	60bb      	str	r3, [r7, #8]
    sFilterConfig.FilterIdLow = 0x0000;
 8000764:	2300      	movs	r3, #0
 8000766:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000768:	2300      	movs	r3, #0
 800076a:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterMaskIdLow = 0x0000;
 800076c:	2300      	movs	r3, #0
 800076e:	617b      	str	r3, [r7, #20]
    sFilterConfig.FilterFIFOAssignment = 0;
 8000770:	2300      	movs	r3, #0
 8000772:	61bb      	str	r3, [r7, #24]
    sFilterConfig.FilterActivation = ENABLE;
 8000774:	2301      	movs	r3, #1
 8000776:	62bb      	str	r3, [r7, #40]	; 0x28
    sFilterConfig.FilterBank = 0;  // Use filter bank 0
 8000778:	2300      	movs	r3, #0
 800077a:	61fb      	str	r3, [r7, #28]

    // From the reference manual, it seems that setting SlaveStartFilterBank to 0 means all filters are used for the enabled CAN peripheral
    // TODO: Verify this is the correct config
    sFilterConfig.SlaveStartFilterBank = 0;
 800077c:	2300      	movs	r3, #0
 800077e:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (HAL_CAN_ConfigFilter(canHandle, &sFilterConfig) != HAL_OK)
 8000780:	f107 0308 	add.w	r3, r7, #8
 8000784:	4619      	mov	r1, r3
 8000786:	6878      	ldr	r0, [r7, #4]
 8000788:	f001 f844 	bl	8001814 <HAL_CAN_ConfigFilter>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <configCANFilters+0x46>
    {
        Error_Handler();
 8000792:	f000 fbff 	bl	8000f94 <Error_Handler>
    }
}
 8000796:	bf00      	nop
 8000798:	3730      	adds	r7, #48	; 0x30
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
	...

080007a0 <HAL_CAN_RxFifo0MsgPendingCallback>:

QueueHandle_t CanMsgQueue;
CanMsg fifoTmp;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80007a0:	b5b0      	push	{r4, r5, r7, lr}
 80007a2:	b096      	sub	sp, #88	; 0x58
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef   RxHeader;
    uint8_t               RxData[8];

    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 80007a8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80007ac:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80007b0:	2100      	movs	r1, #0
 80007b2:	6878      	ldr	r0, [r7, #4]
 80007b4:	f001 f952 	bl	8001a5c <HAL_CAN_GetRxMessage>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d12d      	bne.n	800081a <HAL_CAN_RxFifo0MsgPendingCallback+0x7a>
    {
    	fifo0++;
 80007be:	4b22      	ldr	r3, [pc, #136]	; (8000848 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	3301      	adds	r3, #1
 80007c4:	4a20      	ldr	r2, [pc, #128]	; (8000848 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 80007c6:	6013      	str	r3, [r2, #0]
    	fifo1++;
 80007c8:	4b20      	ldr	r3, [pc, #128]	; (800084c <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	3301      	adds	r3, #1
 80007ce:	4a1f      	ldr	r2, [pc, #124]	; (800084c <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 80007d0:	6013      	str	r3, [r2, #0]
		fifoTmp.id = RxHeader.ExtId;
 80007d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80007d4:	4a1e      	ldr	r2, [pc, #120]	; (8000850 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 80007d6:	6013      	str	r3, [r2, #0]
		memcpy(fifoTmp.data, RxData, 8*sizeof(uint8_t));
 80007d8:	4b1d      	ldr	r3, [pc, #116]	; (8000850 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 80007da:	3304      	adds	r3, #4
 80007dc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80007e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007e4:	e883 0003 	stmia.w	r3, {r0, r1}
		if (xQueueSendToBackFromISR(CanMsgQueue, &fifoTmp, NULL) != pdTRUE)
 80007e8:	4b1a      	ldr	r3, [pc, #104]	; (8000854 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 80007ea:	6818      	ldr	r0, [r3, #0]
 80007ec:	2300      	movs	r3, #0
 80007ee:	2200      	movs	r2, #0
 80007f0:	4917      	ldr	r1, [pc, #92]	; (8000850 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 80007f2:	f008 fe41 	bl	8009478 <xQueueGenericSendFromISR>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b01      	cmp	r3, #1
 80007fa:	d021      	beq.n	8000840 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>
		{
			if (failed == 0)
 80007fc:	4b16      	ldr	r3, [pc, #88]	; (8000858 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d11d      	bne.n	8000840 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>
			{
				failed = xTaskGetTickCountFromISR();
 8000804:	f009 fe10 	bl	800a428 <xTaskGetTickCountFromISR>
 8000808:	4603      	mov	r3, r0
 800080a:	4a13      	ldr	r2, [pc, #76]	; (8000858 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 800080c:	6013      	str	r3, [r2, #0]
				failedNum =fifo0;
 800080e:	4b0e      	ldr	r3, [pc, #56]	; (8000848 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	461a      	mov	r2, r3
 8000814:	4b11      	ldr	r3, [pc, #68]	; (800085c <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 8000816:	601a      	str	r2, [r3, #0]
    // if (RxHeader.IDE == CAN_ID_EXT){  // Only parse data if it is an extended CAN frame
    //         // if (parseCANData(RxHeader.ExtId, RxData) != HAL_OK) {
    //         //     /*ERROR_PRINT_ISR("Failed to parse CAN message id 0x%lX", RxHeader.ExtId);*/
    //         // }
    // }
}
 8000818:	e012      	b.n	8000840 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>
        uint8_t msg[] = "Failed to receive CAN message from FIFO0\n";
 800081a:	4b11      	ldr	r3, [pc, #68]	; (8000860 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 800081c:	f107 0408 	add.w	r4, r7, #8
 8000820:	461d      	mov	r5, r3
 8000822:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000824:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000826:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000828:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800082a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800082e:	c403      	stmia	r4!, {r0, r1}
 8000830:	8022      	strh	r2, [r4, #0]
        HAL_UART_Transmit(&huart1, msg, sizeof(msg), 100);
 8000832:	f107 0108 	add.w	r1, r7, #8
 8000836:	2364      	movs	r3, #100	; 0x64
 8000838:	222a      	movs	r2, #42	; 0x2a
 800083a:	480a      	ldr	r0, [pc, #40]	; (8000864 <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 800083c:	f004 fad0 	bl	8004de0 <HAL_UART_Transmit>
}
 8000840:	bf00      	nop
 8000842:	3758      	adds	r7, #88	; 0x58
 8000844:	46bd      	mov	sp, r7
 8000846:	bdb0      	pop	{r4, r5, r7, pc}
 8000848:	20000954 	.word	0x20000954
 800084c:	20000958 	.word	0x20000958
 8000850:	20000968 	.word	0x20000968
 8000854:	20000964 	.word	0x20000964
 8000858:	2000095c 	.word	0x2000095c
 800085c:	20000960 	.word	0x20000960
 8000860:	0800c490 	.word	0x0800c490
 8000864:	2000090c 	.word	0x2000090c

08000868 <HAL_CAN_RxFifo1MsgPendingCallback>:

//Currently not used (we use FIFO0)
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000868:	b5b0      	push	{r4, r5, r7, lr}
 800086a:	b096      	sub	sp, #88	; 0x58
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
	fifo1++;
 8000870:	4b13      	ldr	r3, [pc, #76]	; (80008c0 <HAL_CAN_RxFifo1MsgPendingCallback+0x58>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	3301      	adds	r3, #1
 8000876:	4a12      	ldr	r2, [pc, #72]	; (80008c0 <HAL_CAN_RxFifo1MsgPendingCallback+0x58>)
 8000878:	6013      	str	r3, [r2, #0]
    CAN_RxHeaderTypeDef   RxHeader;
    uint8_t               RxData[8];

    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData) != HAL_OK)
 800087a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800087e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8000882:	2101      	movs	r1, #1
 8000884:	6878      	ldr	r0, [r7, #4]
 8000886:	f001 f8e9 	bl	8001a5c <HAL_CAN_GetRxMessage>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d012      	beq.n	80008b6 <HAL_CAN_RxFifo1MsgPendingCallback+0x4e>
    {
        uint8_t msg[] = "Failed to receive CAN message from FIFO1\n";
 8000890:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <HAL_CAN_RxFifo1MsgPendingCallback+0x5c>)
 8000892:	f107 0408 	add.w	r4, r7, #8
 8000896:	461d      	mov	r5, r3
 8000898:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800089a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800089c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800089e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008a4:	c403      	stmia	r4!, {r0, r1}
 80008a6:	8022      	strh	r2, [r4, #0]
        HAL_UART_Transmit(&huart1, msg, sizeof(msg), 100);
 80008a8:	f107 0108 	add.w	r1, r7, #8
 80008ac:	2364      	movs	r3, #100	; 0x64
 80008ae:	222a      	movs	r2, #42	; 0x2a
 80008b0:	4805      	ldr	r0, [pc, #20]	; (80008c8 <HAL_CAN_RxFifo1MsgPendingCallback+0x60>)
 80008b2:	f004 fa95 	bl	8004de0 <HAL_UART_Transmit>
    // if (RxHeader.IDE == CAN_ID_EXT){  // Only parse data if it is an extended CAN frame
    //         if (parseCANData(RxHeader.ExtId, RxData) != HAL_OK) {
    //             /*ERROR_PRINT_ISR("Failed to parse CAN message id 0x%lX", RxHeader.ExtId);*/
    //         }
    // }
}
 80008b6:	bf00      	nop
 80008b8:	3758      	adds	r7, #88	; 0x58
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bdb0      	pop	{r4, r5, r7, pc}
 80008be:	bf00      	nop
 80008c0:	20000958 	.word	0x20000958
 80008c4:	0800c4bc 	.word	0x0800c4bc
 80008c8:	2000090c 	.word	0x2000090c

080008cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008cc:	b5b0      	push	{r4, r5, r7, lr}
 80008ce:	b088      	sub	sp, #32
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008d2:	f000 fe0d 	bl	80014f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008d6:	f000 f82f 	bl	8000938 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008da:	f000 f94f 	bl	8000b7c <MX_GPIO_Init>
  MX_DMA_Init();
 80008de:	f000 f925 	bl	8000b2c <MX_DMA_Init>
  MX_CAN1_Init();
 80008e2:	f000 f893 	bl	8000a0c <MX_CAN1_Init>
  MX_SDIO_SD_Init();
 80008e6:	f000 f8c7 	bl	8000a78 <MX_SDIO_SD_Init>
  MX_USART1_UART_Init();
 80008ea:	f000 f8f5 	bl	8000ad8 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 80008ee:	f005 fb5f 	bl	8005fb0 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

//   CanMsgQueue = xQueueCreate(2500, sizeof(CanMsg)); // Good to 60%
  CanMsgQueue = xQueueCreate(7000, sizeof(CanMsg)); // Good to 72%
 80008f2:	2200      	movs	r2, #0
 80008f4:	210c      	movs	r1, #12
 80008f6:	f641 3058 	movw	r0, #7000	; 0x1b58
 80008fa:	f008 fc65 	bl	80091c8 <xQueueGenericCreate>
 80008fe:	4603      	mov	r3, r0
 8000900:	4a0a      	ldr	r2, [pc, #40]	; (800092c <main+0x60>)
 8000902:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityRealtime, 0, 1024);
 8000904:	4b0a      	ldr	r3, [pc, #40]	; (8000930 <main+0x64>)
 8000906:	1d3c      	adds	r4, r7, #4
 8000908:	461d      	mov	r5, r3
 800090a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800090c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800090e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000912:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000916:	1d3b      	adds	r3, r7, #4
 8000918:	2100      	movs	r1, #0
 800091a:	4618      	mov	r0, r3
 800091c:	f008 f8ce 	bl	8008abc <osThreadCreate>
 8000920:	4603      	mov	r3, r0
 8000922:	4a04      	ldr	r2, [pc, #16]	; (8000934 <main+0x68>)
 8000924:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000926:	f008 f8a6 	bl	8008a76 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 800092a:	e7fe      	b.n	800092a <main+0x5e>
 800092c:	20000964 	.word	0x20000964
 8000930:	0800c4f4 	.word	0x0800c4f4
 8000934:	20000950 	.word	0x20000950

08000938 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b094      	sub	sp, #80	; 0x50
 800093c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800093e:	f107 0320 	add.w	r3, r7, #32
 8000942:	2230      	movs	r2, #48	; 0x30
 8000944:	2100      	movs	r1, #0
 8000946:	4618      	mov	r0, r3
 8000948:	f00a ffa6 	bl	800b898 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800094c:	f107 030c 	add.w	r3, r7, #12
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]
 8000958:	60da      	str	r2, [r3, #12]
 800095a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800095c:	2300      	movs	r3, #0
 800095e:	60bb      	str	r3, [r7, #8]
 8000960:	4b28      	ldr	r3, [pc, #160]	; (8000a04 <SystemClock_Config+0xcc>)
 8000962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000964:	4a27      	ldr	r2, [pc, #156]	; (8000a04 <SystemClock_Config+0xcc>)
 8000966:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800096a:	6413      	str	r3, [r2, #64]	; 0x40
 800096c:	4b25      	ldr	r3, [pc, #148]	; (8000a04 <SystemClock_Config+0xcc>)
 800096e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000970:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000974:	60bb      	str	r3, [r7, #8]
 8000976:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000978:	2300      	movs	r3, #0
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	4b22      	ldr	r3, [pc, #136]	; (8000a08 <SystemClock_Config+0xd0>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a21      	ldr	r2, [pc, #132]	; (8000a08 <SystemClock_Config+0xd0>)
 8000982:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000986:	6013      	str	r3, [r2, #0]
 8000988:	4b1f      	ldr	r3, [pc, #124]	; (8000a08 <SystemClock_Config+0xd0>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000990:	607b      	str	r3, [r7, #4]
 8000992:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000994:	2301      	movs	r3, #1
 8000996:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000998:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800099e:	2302      	movs	r3, #2
 80009a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009a8:	2304      	movs	r3, #4
 80009aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 80009ac:	2350      	movs	r3, #80	; 0x50
 80009ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009b0:	2302      	movs	r3, #2
 80009b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009b4:	2304      	movs	r3, #4
 80009b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009b8:	f107 0320 	add.w	r3, r7, #32
 80009bc:	4618      	mov	r0, r3
 80009be:	f002 f9f7 	bl	8002db0 <HAL_RCC_OscConfig>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009c8:	f000 fae4 	bl	8000f94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009cc:	230f      	movs	r3, #15
 80009ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009d0:	2302      	movs	r3, #2
 80009d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009d4:	2300      	movs	r3, #0
 80009d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009d8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009e4:	f107 030c 	add.w	r3, r7, #12
 80009e8:	2102      	movs	r1, #2
 80009ea:	4618      	mov	r0, r3
 80009ec:	f002 fc58 	bl	80032a0 <HAL_RCC_ClockConfig>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80009f6:	f000 facd 	bl	8000f94 <Error_Handler>
  }
}
 80009fa:	bf00      	nop
 80009fc:	3750      	adds	r7, #80	; 0x50
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40023800 	.word	0x40023800
 8000a08:	40007000 	.word	0x40007000

08000a0c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000a10:	4b17      	ldr	r3, [pc, #92]	; (8000a70 <MX_CAN1_Init+0x64>)
 8000a12:	4a18      	ldr	r2, [pc, #96]	; (8000a74 <MX_CAN1_Init+0x68>)
 8000a14:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 8000a16:	4b16      	ldr	r3, [pc, #88]	; (8000a70 <MX_CAN1_Init+0x64>)
 8000a18:	2204      	movs	r2, #4
 8000a1a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000a1c:	4b14      	ldr	r3, [pc, #80]	; (8000a70 <MX_CAN1_Init+0x64>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a22:	4b13      	ldr	r3, [pc, #76]	; (8000a70 <MX_CAN1_Init+0x64>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 8000a28:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <MX_CAN1_Init+0x64>)
 8000a2a:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000a2e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000a30:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <MX_CAN1_Init+0x64>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000a36:	4b0e      	ldr	r3, [pc, #56]	; (8000a70 <MX_CAN1_Init+0x64>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000a3c:	4b0c      	ldr	r3, [pc, #48]	; (8000a70 <MX_CAN1_Init+0x64>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000a42:	4b0b      	ldr	r3, [pc, #44]	; (8000a70 <MX_CAN1_Init+0x64>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000a48:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <MX_CAN1_Init+0x64>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000a4e:	4b08      	ldr	r3, [pc, #32]	; (8000a70 <MX_CAN1_Init+0x64>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000a54:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <MX_CAN1_Init+0x64>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000a5a:	4805      	ldr	r0, [pc, #20]	; (8000a70 <MX_CAN1_Init+0x64>)
 8000a5c:	f000 fdde 	bl	800161c <HAL_CAN_Init>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000a66:	f000 fa95 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	200007a0 	.word	0x200007a0
 8000a74:	40006400 	.word	0x40006400

08000a78 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000a7c:	4b14      	ldr	r3, [pc, #80]	; (8000ad0 <MX_SDIO_SD_Init+0x58>)
 8000a7e:	4a15      	ldr	r2, [pc, #84]	; (8000ad4 <MX_SDIO_SD_Init+0x5c>)
 8000a80:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000a82:	4b13      	ldr	r3, [pc, #76]	; (8000ad0 <MX_SDIO_SD_Init+0x58>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000a88:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <MX_SDIO_SD_Init+0x58>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000a8e:	4b10      	ldr	r3, [pc, #64]	; (8000ad0 <MX_SDIO_SD_Init+0x58>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000a94:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <MX_SDIO_SD_Init+0x58>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000a9a:	4b0d      	ldr	r3, [pc, #52]	; (8000ad0 <MX_SDIO_SD_Init+0x58>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000aa0:	4b0b      	ldr	r3, [pc, #44]	; (8000ad0 <MX_SDIO_SD_Init+0x58>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */
  if (HAL_SD_Init(&hsd) != HAL_OK)
 8000aa6:	480a      	ldr	r0, [pc, #40]	; (8000ad0 <MX_SDIO_SD_Init+0x58>)
 8000aa8:	f002 fe1a 	bl	80036e0 <HAL_SD_Init>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_SDIO_SD_Init+0x3e>
  {
    Error_Handler();
 8000ab2:	f000 fa6f 	bl	8000f94 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8000ab6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000aba:	4805      	ldr	r0, [pc, #20]	; (8000ad0 <MX_SDIO_SD_Init+0x58>)
 8000abc:	f003 fbe8 	bl	8004290 <HAL_SD_ConfigWideBusOperation>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_SDIO_SD_Init+0x52>
  {
    Error_Handler();
 8000ac6:	f000 fa65 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE END SDIO_Init 2 */

}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	200007c8 	.word	0x200007c8
 8000ad4:	40012c00 	.word	0x40012c00

08000ad8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000adc:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <MX_USART1_UART_Init+0x4c>)
 8000ade:	4a12      	ldr	r2, [pc, #72]	; (8000b28 <MX_USART1_UART_Init+0x50>)
 8000ae0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 8000ae2:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <MX_USART1_UART_Init+0x4c>)
 8000ae4:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8000ae8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000aea:	4b0e      	ldr	r3, [pc, #56]	; (8000b24 <MX_USART1_UART_Init+0x4c>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000af0:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <MX_USART1_UART_Init+0x4c>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000af6:	4b0b      	ldr	r3, [pc, #44]	; (8000b24 <MX_USART1_UART_Init+0x4c>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000afc:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <MX_USART1_UART_Init+0x4c>)
 8000afe:	220c      	movs	r2, #12
 8000b00:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b02:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <MX_USART1_UART_Init+0x4c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b08:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <MX_USART1_UART_Init+0x4c>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b0e:	4805      	ldr	r0, [pc, #20]	; (8000b24 <MX_USART1_UART_Init+0x4c>)
 8000b10:	f004 f919 	bl	8004d46 <HAL_UART_Init>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b1a:	f000 fa3b 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	2000090c 	.word	0x2000090c
 8000b28:	40011000 	.word	0x40011000

08000b2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	607b      	str	r3, [r7, #4]
 8000b36:	4b10      	ldr	r3, [pc, #64]	; (8000b78 <MX_DMA_Init+0x4c>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	4a0f      	ldr	r2, [pc, #60]	; (8000b78 <MX_DMA_Init+0x4c>)
 8000b3c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b40:	6313      	str	r3, [r2, #48]	; 0x30
 8000b42:	4b0d      	ldr	r3, [pc, #52]	; (8000b78 <MX_DMA_Init+0x4c>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b4a:	607b      	str	r3, [r7, #4]
 8000b4c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2105      	movs	r1, #5
 8000b52:	203b      	movs	r0, #59	; 0x3b
 8000b54:	f001 fbbb 	bl	80022ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000b58:	203b      	movs	r0, #59	; 0x3b
 8000b5a:	f001 fbd4 	bl	8002306 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	2105      	movs	r1, #5
 8000b62:	2045      	movs	r0, #69	; 0x45
 8000b64:	f001 fbb3 	bl	80022ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000b68:	2045      	movs	r0, #69	; 0x45
 8000b6a:	f001 fbcc 	bl	8002306 <HAL_NVIC_EnableIRQ>

}
 8000b6e:	bf00      	nop
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40023800 	.word	0x40023800

08000b7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b085      	sub	sp, #20
 8000b80:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	60fb      	str	r3, [r7, #12]
 8000b86:	4b1e      	ldr	r3, [pc, #120]	; (8000c00 <MX_GPIO_Init+0x84>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	4a1d      	ldr	r2, [pc, #116]	; (8000c00 <MX_GPIO_Init+0x84>)
 8000b8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b90:	6313      	str	r3, [r2, #48]	; 0x30
 8000b92:	4b1b      	ldr	r3, [pc, #108]	; (8000c00 <MX_GPIO_Init+0x84>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60bb      	str	r3, [r7, #8]
 8000ba2:	4b17      	ldr	r3, [pc, #92]	; (8000c00 <MX_GPIO_Init+0x84>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	4a16      	ldr	r2, [pc, #88]	; (8000c00 <MX_GPIO_Init+0x84>)
 8000ba8:	f043 0304 	orr.w	r3, r3, #4
 8000bac:	6313      	str	r3, [r2, #48]	; 0x30
 8000bae:	4b14      	ldr	r3, [pc, #80]	; (8000c00 <MX_GPIO_Init+0x84>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	f003 0304 	and.w	r3, r3, #4
 8000bb6:	60bb      	str	r3, [r7, #8]
 8000bb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	607b      	str	r3, [r7, #4]
 8000bbe:	4b10      	ldr	r3, [pc, #64]	; (8000c00 <MX_GPIO_Init+0x84>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	4a0f      	ldr	r2, [pc, #60]	; (8000c00 <MX_GPIO_Init+0x84>)
 8000bc4:	f043 0301 	orr.w	r3, r3, #1
 8000bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bca:	4b0d      	ldr	r3, [pc, #52]	; (8000c00 <MX_GPIO_Init+0x84>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	603b      	str	r3, [r7, #0]
 8000bda:	4b09      	ldr	r3, [pc, #36]	; (8000c00 <MX_GPIO_Init+0x84>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	4a08      	ldr	r2, [pc, #32]	; (8000c00 <MX_GPIO_Init+0x84>)
 8000be0:	f043 0308 	orr.w	r3, r3, #8
 8000be4:	6313      	str	r3, [r2, #48]	; 0x30
 8000be6:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <MX_GPIO_Init+0x84>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	f003 0308 	and.w	r3, r3, #8
 8000bee:	603b      	str	r3, [r7, #0]
 8000bf0:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bf2:	bf00      	nop
 8000bf4:	3714      	adds	r7, #20
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	40023800 	.word	0x40023800

08000c04 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000c04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000c08:	b0d5      	sub	sp, #340	; 0x154
 8000c0a:	af08      	add	r7, sp, #32
 8000c0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000c10:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8000c14:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */
  // file names might be all caps even if not set to be so, see:
  // https://superuser.com/questions/1297658/folder-names-become-uppercase-when-syncing-to-fat32-drive
  if( CanMsgQueue == NULL )
 8000c16:	4ba7      	ldr	r3, [pc, #668]	; (8000eb4 <StartDefaultTask+0x2b0>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d112      	bne.n	8000c44 <StartDefaultTask+0x40>
  {
	  while(1)
	  {
		  uint8_t msg[] = "canmsgqueue failed\r\n";
 8000c1e:	4ba6      	ldr	r3, [pc, #664]	; (8000eb8 <StartDefaultTask+0x2b4>)
 8000c20:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000c24:	461d      	mov	r5, r3
 8000c26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c2a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000c2e:	6020      	str	r0, [r4, #0]
 8000c30:	3404      	adds	r4, #4
 8000c32:	7021      	strb	r1, [r4, #0]
		  HAL_UART_Transmit(&huart1, msg, sizeof(msg), 100);
 8000c34:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8000c38:	2364      	movs	r3, #100	; 0x64
 8000c3a:	2215      	movs	r2, #21
 8000c3c:	489f      	ldr	r0, [pc, #636]	; (8000ebc <StartDefaultTask+0x2b8>)
 8000c3e:	f004 f8cf 	bl	8004de0 <HAL_UART_Transmit>
	  {
 8000c42:	e7ec      	b.n	8000c1e <StartDefaultTask+0x1a>
	  }
  }
  else
  {
	  uint8_t msg1[] = "queue good\r\n";
 8000c44:	4b9e      	ldr	r3, [pc, #632]	; (8000ec0 <StartDefaultTask+0x2bc>)
 8000c46:	f107 0664 	add.w	r6, r7, #100	; 0x64
 8000c4a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c4c:	c607      	stmia	r6!, {r0, r1, r2}
 8000c4e:	7033      	strb	r3, [r6, #0]
	  HAL_UART_Transmit(&huart1, msg1, sizeof(msg1), 100);
 8000c50:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8000c54:	2364      	movs	r3, #100	; 0x64
 8000c56:	220d      	movs	r2, #13
 8000c58:	4898      	ldr	r0, [pc, #608]	; (8000ebc <StartDefaultTask+0x2b8>)
 8000c5a:	f004 f8c1 	bl	8004de0 <HAL_UART_Transmit>
  }

  uint8_t reminder[] = "Is SD card in?\n";
 8000c5e:	4b99      	ldr	r3, [pc, #612]	; (8000ec4 <StartDefaultTask+0x2c0>)
 8000c60:	f507 7686 	add.w	r6, r7, #268	; 0x10c
 8000c64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c66:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  HAL_UART_Transmit(&huart1, reminder, sizeof(reminder), 100);
 8000c6a:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 8000c6e:	2364      	movs	r3, #100	; 0x64
 8000c70:	2210      	movs	r2, #16
 8000c72:	4892      	ldr	r0, [pc, #584]	; (8000ebc <StartDefaultTask+0x2b8>)
 8000c74:	f004 f8b4 	bl	8004de0 <HAL_UART_Transmit>

  Mount_SD("/");
 8000c78:	4893      	ldr	r0, [pc, #588]	; (8000ec8 <StartDefaultTask+0x2c4>)
 8000c7a:	f7ff fc95 	bl	80005a8 <Mount_SD>

  // this loop avoids filename collisions
  FRESULT res = FR_INVALID_NAME;
 8000c7e:	2306      	movs	r3, #6
 8000c80:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  uint8_t fileidx = 0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  char filename[16];
  CanMsg rxMsg;
  const uint16_t buffSize = 3000; // 72% busload for 3.5 mins (520k messages, 2 repro), 68% busload for 4 mins, 87% busload for 2 mins (360k messages, 2 repro)
 8000c8a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000c8e:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
  uint8_t buffer[buffSize];
 8000c92:	f8b7 312a 	ldrh.w	r3, [r7, #298]	; 0x12a
 8000c96:	3b01      	subs	r3, #1
 8000c98:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8000c9c:	f8b7 312a 	ldrh.w	r3, [r7, #298]	; 0x12a
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	4698      	mov	r8, r3
 8000ca4:	4691      	mov	r9, r2
 8000ca6:	f04f 0200 	mov.w	r2, #0
 8000caa:	f04f 0300 	mov.w	r3, #0
 8000cae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000cb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000cb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000cba:	f8b7 312a 	ldrh.w	r3, [r7, #298]	; 0x12a
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	461c      	mov	r4, r3
 8000cc2:	4615      	mov	r5, r2
 8000cc4:	f04f 0200 	mov.w	r2, #0
 8000cc8:	f04f 0300 	mov.w	r3, #0
 8000ccc:	00eb      	lsls	r3, r5, #3
 8000cce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000cd2:	00e2      	lsls	r2, r4, #3
 8000cd4:	f8b7 312a 	ldrh.w	r3, [r7, #298]	; 0x12a
 8000cd8:	3307      	adds	r3, #7
 8000cda:	08db      	lsrs	r3, r3, #3
 8000cdc:	00db      	lsls	r3, r3, #3
 8000cde:	ebad 0d03 	sub.w	sp, sp, r3
 8000ce2:	ab08      	add	r3, sp, #32
 8000ce4:	3300      	adds	r3, #0
 8000ce6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  memset(buffer, 0, buffSize*sizeof(uint8_t));
 8000cea:	f8b7 312a 	ldrh.w	r3, [r7, #298]	; 0x12a
 8000cee:	461a      	mov	r2, r3
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8000cf6:	f00a fdcf 	bl	800b898 <memset>
  const uint8_t logging_line_len = 34;
 8000cfa:	2322      	movs	r3, #34	; 0x22
 8000cfc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

  while (res == FR_INVALID_NAME) {
 8000d00:	e014      	b.n	8000d2c <StartDefaultTask+0x128>
	  sprintf(filename, "LOGS%d.TXT", (int) fileidx);
 8000d02:	f897 212e 	ldrb.w	r2, [r7, #302]	; 0x12e
 8000d06:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000d0a:	4970      	ldr	r1, [pc, #448]	; (8000ecc <StartDefaultTask+0x2c8>)
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f00a fda3 	bl	800b858 <siprintf>
	  res = Create_File(filename);
 8000d12:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000d16:	4618      	mov	r0, r3
 8000d18:	f7ff fc76 	bl	8000608 <Create_File>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
	  fileidx++;
 8000d22:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8000d26:	3301      	adds	r3, #1
 8000d28:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  while (res == FR_INVALID_NAME) {
 8000d2c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8000d30:	2b06      	cmp	r3, #6
 8000d32:	d0e6      	beq.n	8000d02 <StartDefaultTask+0xfe>
  }

  HAL_UART_Transmit(&huart1, filename, sizeof(filename), 100);
 8000d34:	f107 01fc 	add.w	r1, r7, #252	; 0xfc
 8000d38:	2364      	movs	r3, #100	; 0x64
 8000d3a:	2210      	movs	r2, #16
 8000d3c:	485f      	ldr	r0, [pc, #380]	; (8000ebc <StartDefaultTask+0x2b8>)
 8000d3e:	f004 f84f 	bl	8004de0 <HAL_UART_Transmit>

  uint8_t debug[100];
  configCANFilters(&hcan1);
 8000d42:	4863      	ldr	r0, [pc, #396]	; (8000ed0 <StartDefaultTask+0x2cc>)
 8000d44:	f7ff fd04 	bl	8000750 <configCANFilters>
  if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 8000d48:	4861      	ldr	r0, [pc, #388]	; (8000ed0 <StartDefaultTask+0x2cc>)
 8000d4a:	f000 fe43 	bl	80019d4 <HAL_CAN_Start>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d012      	beq.n	8000d7a <StartDefaultTask+0x176>
	 uint8_t msg[] = "Failed to start CAN!\n";
 8000d54:	4b5f      	ldr	r3, [pc, #380]	; (8000ed4 <StartDefaultTask+0x2d0>)
 8000d56:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8000d5a:	461d      	mov	r5, r3
 8000d5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d60:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000d64:	6020      	str	r0, [r4, #0]
 8000d66:	3404      	adds	r4, #4
 8000d68:	8021      	strh	r1, [r4, #0]
	 HAL_UART_Transmit(&huart1, msg, sizeof(msg), 100);
 8000d6a:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8000d6e:	2364      	movs	r3, #100	; 0x64
 8000d70:	2216      	movs	r2, #22
 8000d72:	4852      	ldr	r0, [pc, #328]	; (8000ebc <StartDefaultTask+0x2b8>)
 8000d74:	f004 f834 	bl	8004de0 <HAL_UART_Transmit>
	 while (1);
 8000d78:	e7fe      	b.n	8000d78 <StartDefaultTask+0x174>
   }

   if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000d7a:	2102      	movs	r1, #2
 8000d7c:	4854      	ldr	r0, [pc, #336]	; (8000ed0 <StartDefaultTask+0x2cc>)
 8000d7e:	f000 ff7f 	bl	8001c80 <HAL_CAN_ActivateNotification>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d016      	beq.n	8000db6 <StartDefaultTask+0x1b2>
   {
	 uint8_t msg[] = "Error starting to listen for CAN msgs from FIFO0\n";
 8000d88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000d8c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000d90:	4a51      	ldr	r2, [pc, #324]	; (8000ed8 <StartDefaultTask+0x2d4>)
 8000d92:	461c      	mov	r4, r3
 8000d94:	4615      	mov	r5, r2
 8000d96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000da0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000da2:	682b      	ldr	r3, [r5, #0]
 8000da4:	8023      	strh	r3, [r4, #0]
	 HAL_UART_Transmit(&huart1, msg, sizeof(msg), 100);
 8000da6:	f107 0118 	add.w	r1, r7, #24
 8000daa:	2364      	movs	r3, #100	; 0x64
 8000dac:	2232      	movs	r2, #50	; 0x32
 8000dae:	4843      	ldr	r0, [pc, #268]	; (8000ebc <StartDefaultTask+0x2b8>)
 8000db0:	f004 f816 	bl	8004de0 <HAL_UART_Transmit>
	 while (1);
 8000db4:	e7fe      	b.n	8000db4 <StartDefaultTask+0x1b0>
   }

   if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK)
 8000db6:	2110      	movs	r1, #16
 8000db8:	4845      	ldr	r0, [pc, #276]	; (8000ed0 <StartDefaultTask+0x2cc>)
 8000dba:	f000 ff61 	bl	8001c80 <HAL_CAN_ActivateNotification>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d016      	beq.n	8000df2 <StartDefaultTask+0x1ee>
   {
	 uint8_t msg[] = "Error starting to listen for CAN msgs from FIFO0\n";
 8000dc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000dc8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000dcc:	4a42      	ldr	r2, [pc, #264]	; (8000ed8 <StartDefaultTask+0x2d4>)
 8000dce:	461c      	mov	r4, r3
 8000dd0:	4615      	mov	r5, r2
 8000dd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ddc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dde:	682b      	ldr	r3, [r5, #0]
 8000de0:	8023      	strh	r3, [r4, #0]
	 HAL_UART_Transmit(&huart1, msg, sizeof(msg), 100);
 8000de2:	f107 0118 	add.w	r1, r7, #24
 8000de6:	2364      	movs	r3, #100	; 0x64
 8000de8:	2232      	movs	r2, #50	; 0x32
 8000dea:	4834      	ldr	r0, [pc, #208]	; (8000ebc <StartDefaultTask+0x2b8>)
 8000dec:	f003 fff8 	bl	8004de0 <HAL_UART_Transmit>
	 while (1);
 8000df0:	e7fe      	b.n	8000df0 <StartDefaultTask+0x1ec>
   }

  /* Infinite loop */
  for(;;)
  {
	  for (uint16_t loop = 0; loop < buffSize/logging_line_len; loop++)
 8000df2:	2300      	movs	r3, #0
 8000df4:	f8a7 312c 	strh.w	r3, [r7, #300]	; 0x12c
 8000df8:	e07b      	b.n	8000ef2 <StartDefaultTask+0x2ee>
	  {
		  if (xQueueReceive(CanMsgQueue, &rxMsg, 100) == pdTRUE)
 8000dfa:	4b2e      	ldr	r3, [pc, #184]	; (8000eb4 <StartDefaultTask+0x2b0>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 8000e02:	2264      	movs	r2, #100	; 0x64
 8000e04:	4618      	mov	r0, r3
 8000e06:	f008 fc5f 	bl	80096c8 <xQueueReceive>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d13b      	bne.n	8000e88 <StartDefaultTask+0x284>
		  {
			  sprintf(&buffer[loop*logging_line_len], "%08lXx%08lX%02X%02X%02X%02X%02X%02X%02X%02X\n", xTaskGetTickCount(), rxMsg.id, rxMsg.data[0], rxMsg.data[1], rxMsg.data[2], rxMsg.data[3], rxMsg.data[4], rxMsg.data[5], rxMsg.data[6], rxMsg.data[7]);
 8000e10:	f8b7 312c 	ldrh.w	r3, [r7, #300]	; 0x12c
 8000e14:	f897 211f 	ldrb.w	r2, [r7, #287]	; 0x11f
 8000e18:	fb02 f303 	mul.w	r3, r2, r3
 8000e1c:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8000e20:	18d4      	adds	r4, r2, r3
 8000e22:	f009 faf1 	bl	800a408 <xTaskGetTickCount>
 8000e26:	4602      	mov	r2, r0
 8000e28:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8000e2c:	613b      	str	r3, [r7, #16]
 8000e2e:	f897 10f4 	ldrb.w	r1, [r7, #244]	; 0xf4
 8000e32:	f897 00f5 	ldrb.w	r0, [r7, #245]	; 0xf5
 8000e36:	f897 50f6 	ldrb.w	r5, [r7, #246]	; 0xf6
 8000e3a:	f897 60f7 	ldrb.w	r6, [r7, #247]	; 0xf7
 8000e3e:	f897 c0f8 	ldrb.w	ip, [r7, #248]	; 0xf8
 8000e42:	f8c7 c00c 	str.w	ip, [r7, #12]
 8000e46:	f897 c0f9 	ldrb.w	ip, [r7, #249]	; 0xf9
 8000e4a:	f8c7 c008 	str.w	ip, [r7, #8]
 8000e4e:	f897 c0fa 	ldrb.w	ip, [r7, #250]	; 0xfa
 8000e52:	f8c7 c004 	str.w	ip, [r7, #4]
 8000e56:	f897 c0fb 	ldrb.w	ip, [r7, #251]	; 0xfb
 8000e5a:	4663      	mov	r3, ip
 8000e5c:	9307      	str	r3, [sp, #28]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	9306      	str	r3, [sp, #24]
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	9305      	str	r3, [sp, #20]
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	9304      	str	r3, [sp, #16]
 8000e6a:	9603      	str	r6, [sp, #12]
 8000e6c:	9502      	str	r5, [sp, #8]
 8000e6e:	9001      	str	r0, [sp, #4]
 8000e70:	9100      	str	r1, [sp, #0]
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	4919      	ldr	r1, [pc, #100]	; (8000edc <StartDefaultTask+0x2d8>)
 8000e76:	4620      	mov	r0, r4
 8000e78:	f00a fcee 	bl	800b858 <siprintf>
			  fifo1--;
 8000e7c:	4b18      	ldr	r3, [pc, #96]	; (8000ee0 <StartDefaultTask+0x2dc>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	3b01      	subs	r3, #1
 8000e82:	4a17      	ldr	r2, [pc, #92]	; (8000ee0 <StartDefaultTask+0x2dc>)
 8000e84:	6013      	str	r3, [r2, #0]
 8000e86:	e02f      	b.n	8000ee8 <StartDefaultTask+0x2e4>
		  }
		  else
		  {
			  sprintf(debug, "Q Empty %u\n", loop);
 8000e88:	f8b7 212c 	ldrh.w	r2, [r7, #300]	; 0x12c
 8000e8c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000e90:	4914      	ldr	r1, [pc, #80]	; (8000ee4 <StartDefaultTask+0x2e0>)
 8000e92:	4618      	mov	r0, r3
 8000e94:	f00a fce0 	bl	800b858 <siprintf>
			  HAL_UART_Transmit(&huart1, debug, strlen(debug), 100);
 8000e98:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff f997 	bl	80001d0 <strlen>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	b29a      	uxth	r2, r3
 8000ea6:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8000eaa:	2364      	movs	r3, #100	; 0x64
 8000eac:	4803      	ldr	r0, [pc, #12]	; (8000ebc <StartDefaultTask+0x2b8>)
 8000eae:	f003 ff97 	bl	8004de0 <HAL_UART_Transmit>
			  break;
 8000eb2:	e029      	b.n	8000f08 <StartDefaultTask+0x304>
 8000eb4:	20000964 	.word	0x20000964
 8000eb8:	0800c580 	.word	0x0800c580
 8000ebc:	2000090c 	.word	0x2000090c
 8000ec0:	0800c598 	.word	0x0800c598
 8000ec4:	0800c5a8 	.word	0x0800c5a8
 8000ec8:	0800c510 	.word	0x0800c510
 8000ecc:	0800c514 	.word	0x0800c514
 8000ed0:	200007a0 	.word	0x200007a0
 8000ed4:	0800c5b8 	.word	0x0800c5b8
 8000ed8:	0800c5d0 	.word	0x0800c5d0
 8000edc:	0800c520 	.word	0x0800c520
 8000ee0:	20000958 	.word	0x20000958
 8000ee4:	0800c550 	.word	0x0800c550
	  for (uint16_t loop = 0; loop < buffSize/logging_line_len; loop++)
 8000ee8:	f8b7 312c 	ldrh.w	r3, [r7, #300]	; 0x12c
 8000eec:	3301      	adds	r3, #1
 8000eee:	f8a7 312c 	strh.w	r3, [r7, #300]	; 0x12c
 8000ef2:	f8b7 212c 	ldrh.w	r2, [r7, #300]	; 0x12c
 8000ef6:	f8b7 112a 	ldrh.w	r1, [r7, #298]	; 0x12a
 8000efa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8000efe:	fb91 f3f3 	sdiv	r3, r1, r3
 8000f02:	429a      	cmp	r2, r3
 8000f04:	f6ff af79 	blt.w	8000dfa <StartDefaultTask+0x1f6>
		  }
	  }
	  Update_File(filename, buffer);
 8000f08:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000f0c:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff fbb5 	bl	8000680 <Update_File>
	  if (failed != 0)
 8000f16:	4b18      	ldr	r3, [pc, #96]	; (8000f78 <StartDefaultTask+0x374>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d015      	beq.n	8000f4a <StartDefaultTask+0x346>
	  {
		  sprintf(debug, "failed: %lu %lu\r\n", failed, failedNum);
 8000f1e:	4b16      	ldr	r3, [pc, #88]	; (8000f78 <StartDefaultTask+0x374>)
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	4b16      	ldr	r3, [pc, #88]	; (8000f7c <StartDefaultTask+0x378>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 8000f2a:	4915      	ldr	r1, [pc, #84]	; (8000f80 <StartDefaultTask+0x37c>)
 8000f2c:	f00a fc94 	bl	800b858 <siprintf>
		  HAL_UART_Transmit(&huart1, debug, strlen(debug), 100);
 8000f30:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff f94b 	bl	80001d0 <strlen>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	b29a      	uxth	r2, r3
 8000f3e:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8000f42:	2364      	movs	r3, #100	; 0x64
 8000f44:	480f      	ldr	r0, [pc, #60]	; (8000f84 <StartDefaultTask+0x380>)
 8000f46:	f003 ff4b 	bl	8004de0 <HAL_UART_Transmit>
	  }
	  sprintf(debug, "can: %ld %ld\r\n", fifo0, fifo1);
 8000f4a:	4b0f      	ldr	r3, [pc, #60]	; (8000f88 <StartDefaultTask+0x384>)
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <StartDefaultTask+0x388>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 8000f56:	490e      	ldr	r1, [pc, #56]	; (8000f90 <StartDefaultTask+0x38c>)
 8000f58:	f00a fc7e 	bl	800b858 <siprintf>
	  HAL_UART_Transmit(&huart1, debug, strlen(debug), 100);
 8000f5c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff f935 	bl	80001d0 <strlen>
 8000f66:	4603      	mov	r3, r0
 8000f68:	b29a      	uxth	r2, r3
 8000f6a:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8000f6e:	2364      	movs	r3, #100	; 0x64
 8000f70:	4804      	ldr	r0, [pc, #16]	; (8000f84 <StartDefaultTask+0x380>)
 8000f72:	f003 ff35 	bl	8004de0 <HAL_UART_Transmit>
	  for (uint16_t loop = 0; loop < buffSize/logging_line_len; loop++)
 8000f76:	e73c      	b.n	8000df2 <StartDefaultTask+0x1ee>
 8000f78:	2000095c 	.word	0x2000095c
 8000f7c:	20000960 	.word	0x20000960
 8000f80:	0800c55c 	.word	0x0800c55c
 8000f84:	2000090c 	.word	0x2000090c
 8000f88:	20000954 	.word	0x20000954
 8000f8c:	20000958 	.word	0x20000958
 8000f90:	0800c570 	.word	0x0800c570

08000f94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f98:	b672      	cpsid	i
}
 8000f9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f9c:	e7fe      	b.n	8000f9c <Error_Handler+0x8>
	...

08000fa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	607b      	str	r3, [r7, #4]
 8000faa:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <HAL_MspInit+0x54>)
 8000fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fae:	4a11      	ldr	r2, [pc, #68]	; (8000ff4 <HAL_MspInit+0x54>)
 8000fb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fb6:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <HAL_MspInit+0x54>)
 8000fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fbe:	607b      	str	r3, [r7, #4]
 8000fc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	603b      	str	r3, [r7, #0]
 8000fc6:	4b0b      	ldr	r3, [pc, #44]	; (8000ff4 <HAL_MspInit+0x54>)
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fca:	4a0a      	ldr	r2, [pc, #40]	; (8000ff4 <HAL_MspInit+0x54>)
 8000fcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd2:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <HAL_MspInit+0x54>)
 8000fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fda:	603b      	str	r3, [r7, #0]
 8000fdc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	210f      	movs	r1, #15
 8000fe2:	f06f 0001 	mvn.w	r0, #1
 8000fe6:	f001 f972 	bl	80022ce <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40023800 	.word	0x40023800

08000ff8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08a      	sub	sp, #40	; 0x28
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001000:	f107 0314 	add.w	r3, r7, #20
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a29      	ldr	r2, [pc, #164]	; (80010bc <HAL_CAN_MspInit+0xc4>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d14b      	bne.n	80010b2 <HAL_CAN_MspInit+0xba>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	613b      	str	r3, [r7, #16]
 800101e:	4b28      	ldr	r3, [pc, #160]	; (80010c0 <HAL_CAN_MspInit+0xc8>)
 8001020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001022:	4a27      	ldr	r2, [pc, #156]	; (80010c0 <HAL_CAN_MspInit+0xc8>)
 8001024:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001028:	6413      	str	r3, [r2, #64]	; 0x40
 800102a:	4b25      	ldr	r3, [pc, #148]	; (80010c0 <HAL_CAN_MspInit+0xc8>)
 800102c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001032:	613b      	str	r3, [r7, #16]
 8001034:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	60fb      	str	r3, [r7, #12]
 800103a:	4b21      	ldr	r3, [pc, #132]	; (80010c0 <HAL_CAN_MspInit+0xc8>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	4a20      	ldr	r2, [pc, #128]	; (80010c0 <HAL_CAN_MspInit+0xc8>)
 8001040:	f043 0308 	orr.w	r3, r3, #8
 8001044:	6313      	str	r3, [r2, #48]	; 0x30
 8001046:	4b1e      	ldr	r3, [pc, #120]	; (80010c0 <HAL_CAN_MspInit+0xc8>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	f003 0308 	and.w	r3, r3, #8
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001052:	2303      	movs	r3, #3
 8001054:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001056:	2302      	movs	r3, #2
 8001058:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800105e:	2303      	movs	r3, #3
 8001060:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001062:	2309      	movs	r3, #9
 8001064:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001066:	f107 0314 	add.w	r3, r7, #20
 800106a:	4619      	mov	r1, r3
 800106c:	4815      	ldr	r0, [pc, #84]	; (80010c4 <HAL_CAN_MspInit+0xcc>)
 800106e:	f001 fd03 	bl	8002a78 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8001072:	2200      	movs	r2, #0
 8001074:	2105      	movs	r1, #5
 8001076:	2013      	movs	r0, #19
 8001078:	f001 f929 	bl	80022ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800107c:	2013      	movs	r0, #19
 800107e:	f001 f942 	bl	8002306 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001082:	2200      	movs	r2, #0
 8001084:	2105      	movs	r1, #5
 8001086:	2014      	movs	r0, #20
 8001088:	f001 f921 	bl	80022ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800108c:	2014      	movs	r0, #20
 800108e:	f001 f93a 	bl	8002306 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8001092:	2200      	movs	r2, #0
 8001094:	2105      	movs	r1, #5
 8001096:	2015      	movs	r0, #21
 8001098:	f001 f919 	bl	80022ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800109c:	2015      	movs	r0, #21
 800109e:	f001 f932 	bl	8002306 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 5, 0);
 80010a2:	2200      	movs	r2, #0
 80010a4:	2105      	movs	r1, #5
 80010a6:	2016      	movs	r0, #22
 80010a8:	f001 f911 	bl	80022ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 80010ac:	2016      	movs	r0, #22
 80010ae:	f001 f92a 	bl	8002306 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80010b2:	bf00      	nop
 80010b4:	3728      	adds	r7, #40	; 0x28
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40006400 	.word	0x40006400
 80010c0:	40023800 	.word	0x40023800
 80010c4:	40020c00 	.word	0x40020c00

080010c8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08a      	sub	sp, #40	; 0x28
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d0:	f107 0314 	add.w	r3, r7, #20
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a68      	ldr	r2, [pc, #416]	; (8001288 <HAL_SD_MspInit+0x1c0>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	f040 80c9 	bne.w	800127e <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80010ec:	2300      	movs	r3, #0
 80010ee:	613b      	str	r3, [r7, #16]
 80010f0:	4b66      	ldr	r3, [pc, #408]	; (800128c <HAL_SD_MspInit+0x1c4>)
 80010f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f4:	4a65      	ldr	r2, [pc, #404]	; (800128c <HAL_SD_MspInit+0x1c4>)
 80010f6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010fa:	6453      	str	r3, [r2, #68]	; 0x44
 80010fc:	4b63      	ldr	r3, [pc, #396]	; (800128c <HAL_SD_MspInit+0x1c4>)
 80010fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001100:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001104:	613b      	str	r3, [r7, #16]
 8001106:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001108:	2300      	movs	r3, #0
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	4b5f      	ldr	r3, [pc, #380]	; (800128c <HAL_SD_MspInit+0x1c4>)
 800110e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001110:	4a5e      	ldr	r2, [pc, #376]	; (800128c <HAL_SD_MspInit+0x1c4>)
 8001112:	f043 0304 	orr.w	r3, r3, #4
 8001116:	6313      	str	r3, [r2, #48]	; 0x30
 8001118:	4b5c      	ldr	r3, [pc, #368]	; (800128c <HAL_SD_MspInit+0x1c4>)
 800111a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111c:	f003 0304 	and.w	r3, r3, #4
 8001120:	60fb      	str	r3, [r7, #12]
 8001122:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001124:	2300      	movs	r3, #0
 8001126:	60bb      	str	r3, [r7, #8]
 8001128:	4b58      	ldr	r3, [pc, #352]	; (800128c <HAL_SD_MspInit+0x1c4>)
 800112a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112c:	4a57      	ldr	r2, [pc, #348]	; (800128c <HAL_SD_MspInit+0x1c4>)
 800112e:	f043 0308 	orr.w	r3, r3, #8
 8001132:	6313      	str	r3, [r2, #48]	; 0x30
 8001134:	4b55      	ldr	r3, [pc, #340]	; (800128c <HAL_SD_MspInit+0x1c4>)
 8001136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001138:	f003 0308 	and.w	r3, r3, #8
 800113c:	60bb      	str	r3, [r7, #8]
 800113e:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8001140:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8001144:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001146:	2302      	movs	r3, #2
 8001148:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800114e:	2303      	movs	r3, #3
 8001150:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001152:	230c      	movs	r3, #12
 8001154:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001156:	f107 0314 	add.w	r3, r7, #20
 800115a:	4619      	mov	r1, r3
 800115c:	484c      	ldr	r0, [pc, #304]	; (8001290 <HAL_SD_MspInit+0x1c8>)
 800115e:	f001 fc8b 	bl	8002a78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001162:	2304      	movs	r3, #4
 8001164:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001166:	2302      	movs	r3, #2
 8001168:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800116e:	2303      	movs	r3, #3
 8001170:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001172:	230c      	movs	r3, #12
 8001174:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001176:	f107 0314 	add.w	r3, r7, #20
 800117a:	4619      	mov	r1, r3
 800117c:	4845      	ldr	r0, [pc, #276]	; (8001294 <HAL_SD_MspInit+0x1cc>)
 800117e:	f001 fc7b 	bl	8002a78 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8001182:	4b45      	ldr	r3, [pc, #276]	; (8001298 <HAL_SD_MspInit+0x1d0>)
 8001184:	4a45      	ldr	r2, [pc, #276]	; (800129c <HAL_SD_MspInit+0x1d4>)
 8001186:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8001188:	4b43      	ldr	r3, [pc, #268]	; (8001298 <HAL_SD_MspInit+0x1d0>)
 800118a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800118e:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001190:	4b41      	ldr	r3, [pc, #260]	; (8001298 <HAL_SD_MspInit+0x1d0>)
 8001192:	2200      	movs	r2, #0
 8001194:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001196:	4b40      	ldr	r3, [pc, #256]	; (8001298 <HAL_SD_MspInit+0x1d0>)
 8001198:	2200      	movs	r2, #0
 800119a:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 800119c:	4b3e      	ldr	r3, [pc, #248]	; (8001298 <HAL_SD_MspInit+0x1d0>)
 800119e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011a2:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80011a4:	4b3c      	ldr	r3, [pc, #240]	; (8001298 <HAL_SD_MspInit+0x1d0>)
 80011a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011aa:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80011ac:	4b3a      	ldr	r3, [pc, #232]	; (8001298 <HAL_SD_MspInit+0x1d0>)
 80011ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011b2:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 80011b4:	4b38      	ldr	r3, [pc, #224]	; (8001298 <HAL_SD_MspInit+0x1d0>)
 80011b6:	2220      	movs	r2, #32
 80011b8:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 80011ba:	4b37      	ldr	r3, [pc, #220]	; (8001298 <HAL_SD_MspInit+0x1d0>)
 80011bc:	2200      	movs	r2, #0
 80011be:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80011c0:	4b35      	ldr	r3, [pc, #212]	; (8001298 <HAL_SD_MspInit+0x1d0>)
 80011c2:	2204      	movs	r2, #4
 80011c4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80011c6:	4b34      	ldr	r3, [pc, #208]	; (8001298 <HAL_SD_MspInit+0x1d0>)
 80011c8:	2203      	movs	r2, #3
 80011ca:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80011cc:	4b32      	ldr	r3, [pc, #200]	; (8001298 <HAL_SD_MspInit+0x1d0>)
 80011ce:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80011d2:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80011d4:	4b30      	ldr	r3, [pc, #192]	; (8001298 <HAL_SD_MspInit+0x1d0>)
 80011d6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80011da:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80011dc:	482e      	ldr	r0, [pc, #184]	; (8001298 <HAL_SD_MspInit+0x1d0>)
 80011de:	f001 f8ad 	bl	800233c <HAL_DMA_Init>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 80011e8:	f7ff fed4 	bl	8000f94 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	4a2a      	ldr	r2, [pc, #168]	; (8001298 <HAL_SD_MspInit+0x1d0>)
 80011f0:	641a      	str	r2, [r3, #64]	; 0x40
 80011f2:	4a29      	ldr	r2, [pc, #164]	; (8001298 <HAL_SD_MspInit+0x1d0>)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80011f8:	4b29      	ldr	r3, [pc, #164]	; (80012a0 <HAL_SD_MspInit+0x1d8>)
 80011fa:	4a2a      	ldr	r2, [pc, #168]	; (80012a4 <HAL_SD_MspInit+0x1dc>)
 80011fc:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80011fe:	4b28      	ldr	r3, [pc, #160]	; (80012a0 <HAL_SD_MspInit+0x1d8>)
 8001200:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001204:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001206:	4b26      	ldr	r3, [pc, #152]	; (80012a0 <HAL_SD_MspInit+0x1d8>)
 8001208:	2240      	movs	r2, #64	; 0x40
 800120a:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800120c:	4b24      	ldr	r3, [pc, #144]	; (80012a0 <HAL_SD_MspInit+0x1d8>)
 800120e:	2200      	movs	r2, #0
 8001210:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001212:	4b23      	ldr	r3, [pc, #140]	; (80012a0 <HAL_SD_MspInit+0x1d8>)
 8001214:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001218:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800121a:	4b21      	ldr	r3, [pc, #132]	; (80012a0 <HAL_SD_MspInit+0x1d8>)
 800121c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001220:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001222:	4b1f      	ldr	r3, [pc, #124]	; (80012a0 <HAL_SD_MspInit+0x1d8>)
 8001224:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001228:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 800122a:	4b1d      	ldr	r3, [pc, #116]	; (80012a0 <HAL_SD_MspInit+0x1d8>)
 800122c:	2220      	movs	r2, #32
 800122e:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001230:	4b1b      	ldr	r3, [pc, #108]	; (80012a0 <HAL_SD_MspInit+0x1d8>)
 8001232:	2200      	movs	r2, #0
 8001234:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001236:	4b1a      	ldr	r3, [pc, #104]	; (80012a0 <HAL_SD_MspInit+0x1d8>)
 8001238:	2204      	movs	r2, #4
 800123a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800123c:	4b18      	ldr	r3, [pc, #96]	; (80012a0 <HAL_SD_MspInit+0x1d8>)
 800123e:	2203      	movs	r2, #3
 8001240:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001242:	4b17      	ldr	r3, [pc, #92]	; (80012a0 <HAL_SD_MspInit+0x1d8>)
 8001244:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001248:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800124a:	4b15      	ldr	r3, [pc, #84]	; (80012a0 <HAL_SD_MspInit+0x1d8>)
 800124c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001250:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8001252:	4813      	ldr	r0, [pc, #76]	; (80012a0 <HAL_SD_MspInit+0x1d8>)
 8001254:	f001 f872 	bl	800233c <HAL_DMA_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 800125e:	f7ff fe99 	bl	8000f94 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a0e      	ldr	r2, [pc, #56]	; (80012a0 <HAL_SD_MspInit+0x1d8>)
 8001266:	63da      	str	r2, [r3, #60]	; 0x3c
 8001268:	4a0d      	ldr	r2, [pc, #52]	; (80012a0 <HAL_SD_MspInit+0x1d8>)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 800126e:	2200      	movs	r2, #0
 8001270:	2105      	movs	r1, #5
 8001272:	2031      	movs	r0, #49	; 0x31
 8001274:	f001 f82b 	bl	80022ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8001278:	2031      	movs	r0, #49	; 0x31
 800127a:	f001 f844 	bl	8002306 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800127e:	bf00      	nop
 8001280:	3728      	adds	r7, #40	; 0x28
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40012c00 	.word	0x40012c00
 800128c:	40023800 	.word	0x40023800
 8001290:	40020800 	.word	0x40020800
 8001294:	40020c00 	.word	0x40020c00
 8001298:	2000084c 	.word	0x2000084c
 800129c:	40026458 	.word	0x40026458
 80012a0:	200008ac 	.word	0x200008ac
 80012a4:	400264a0 	.word	0x400264a0

080012a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08a      	sub	sp, #40	; 0x28
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b0:	f107 0314 	add.w	r3, r7, #20
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a19      	ldr	r2, [pc, #100]	; (800132c <HAL_UART_MspInit+0x84>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d12c      	bne.n	8001324 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	613b      	str	r3, [r7, #16]
 80012ce:	4b18      	ldr	r3, [pc, #96]	; (8001330 <HAL_UART_MspInit+0x88>)
 80012d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d2:	4a17      	ldr	r2, [pc, #92]	; (8001330 <HAL_UART_MspInit+0x88>)
 80012d4:	f043 0310 	orr.w	r3, r3, #16
 80012d8:	6453      	str	r3, [r2, #68]	; 0x44
 80012da:	4b15      	ldr	r3, [pc, #84]	; (8001330 <HAL_UART_MspInit+0x88>)
 80012dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012de:	f003 0310 	and.w	r3, r3, #16
 80012e2:	613b      	str	r3, [r7, #16]
 80012e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	4b11      	ldr	r3, [pc, #68]	; (8001330 <HAL_UART_MspInit+0x88>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	4a10      	ldr	r2, [pc, #64]	; (8001330 <HAL_UART_MspInit+0x88>)
 80012f0:	f043 0301 	orr.w	r3, r3, #1
 80012f4:	6313      	str	r3, [r2, #48]	; 0x30
 80012f6:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <HAL_UART_MspInit+0x88>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001302:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001306:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001308:	2302      	movs	r3, #2
 800130a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001310:	2303      	movs	r3, #3
 8001312:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001314:	2307      	movs	r3, #7
 8001316:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001318:	f107 0314 	add.w	r3, r7, #20
 800131c:	4619      	mov	r1, r3
 800131e:	4805      	ldr	r0, [pc, #20]	; (8001334 <HAL_UART_MspInit+0x8c>)
 8001320:	f001 fbaa 	bl	8002a78 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001324:	bf00      	nop
 8001326:	3728      	adds	r7, #40	; 0x28
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40011000 	.word	0x40011000
 8001330:	40023800 	.word	0x40023800
 8001334:	40020000 	.word	0x40020000

08001338 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800133c:	e7fe      	b.n	800133c <NMI_Handler+0x4>

0800133e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800133e:	b480      	push	{r7}
 8001340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001342:	e7fe      	b.n	8001342 <HardFault_Handler+0x4>

08001344 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001348:	e7fe      	b.n	8001348 <MemManage_Handler+0x4>

0800134a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800134a:	b480      	push	{r7}
 800134c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800134e:	e7fe      	b.n	800134e <BusFault_Handler+0x4>

08001350 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001354:	e7fe      	b.n	8001354 <UsageFault_Handler+0x4>

08001356 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001356:	b480      	push	{r7}
 8001358:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800135a:	bf00      	nop
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001368:	f000 f914 	bl	8001594 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800136c:	f009 fb6c 	bl	800aa48 <xTaskGetSchedulerState>
 8001370:	4603      	mov	r3, r0
 8001372:	2b01      	cmp	r3, #1
 8001374:	d001      	beq.n	800137a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001376:	f009 ff47 	bl	800b208 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
	...

08001380 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001384:	4802      	ldr	r0, [pc, #8]	; (8001390 <CAN1_TX_IRQHandler+0x10>)
 8001386:	f000 fca1 	bl	8001ccc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	200007a0 	.word	0x200007a0

08001394 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001398:	4802      	ldr	r0, [pc, #8]	; (80013a4 <CAN1_RX0_IRQHandler+0x10>)
 800139a:	f000 fc97 	bl	8001ccc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	200007a0 	.word	0x200007a0

080013a8 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80013ac:	4802      	ldr	r0, [pc, #8]	; (80013b8 <CAN1_RX1_IRQHandler+0x10>)
 80013ae:	f000 fc8d 	bl	8001ccc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	200007a0 	.word	0x200007a0

080013bc <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80013c0:	4802      	ldr	r0, [pc, #8]	; (80013cc <CAN1_SCE_IRQHandler+0x10>)
 80013c2:	f000 fc83 	bl	8001ccc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	200007a0 	.word	0x200007a0

080013d0 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80013d4:	4802      	ldr	r0, [pc, #8]	; (80013e0 <SDIO_IRQHandler+0x10>)
 80013d6:	f002 fbfb 	bl	8003bd0 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	200007c8 	.word	0x200007c8

080013e4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80013e8:	4802      	ldr	r0, [pc, #8]	; (80013f4 <DMA2_Stream3_IRQHandler+0x10>)
 80013ea:	f001 f8cf 	bl	800258c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	2000084c 	.word	0x2000084c

080013f8 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80013fc:	4802      	ldr	r0, [pc, #8]	; (8001408 <DMA2_Stream6_IRQHandler+0x10>)
 80013fe:	f001 f8c5 	bl	800258c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	200008ac 	.word	0x200008ac

0800140c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b086      	sub	sp, #24
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001414:	4a14      	ldr	r2, [pc, #80]	; (8001468 <_sbrk+0x5c>)
 8001416:	4b15      	ldr	r3, [pc, #84]	; (800146c <_sbrk+0x60>)
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001420:	4b13      	ldr	r3, [pc, #76]	; (8001470 <_sbrk+0x64>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d102      	bne.n	800142e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001428:	4b11      	ldr	r3, [pc, #68]	; (8001470 <_sbrk+0x64>)
 800142a:	4a12      	ldr	r2, [pc, #72]	; (8001474 <_sbrk+0x68>)
 800142c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800142e:	4b10      	ldr	r3, [pc, #64]	; (8001470 <_sbrk+0x64>)
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4413      	add	r3, r2
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	429a      	cmp	r2, r3
 800143a:	d207      	bcs.n	800144c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800143c:	f00a fa9a 	bl	800b974 <__errno>
 8001440:	4603      	mov	r3, r0
 8001442:	220c      	movs	r2, #12
 8001444:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001446:	f04f 33ff 	mov.w	r3, #4294967295
 800144a:	e009      	b.n	8001460 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800144c:	4b08      	ldr	r3, [pc, #32]	; (8001470 <_sbrk+0x64>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001452:	4b07      	ldr	r3, [pc, #28]	; (8001470 <_sbrk+0x64>)
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4413      	add	r3, r2
 800145a:	4a05      	ldr	r2, [pc, #20]	; (8001470 <_sbrk+0x64>)
 800145c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800145e:	68fb      	ldr	r3, [r7, #12]
}
 8001460:	4618      	mov	r0, r3
 8001462:	3718      	adds	r7, #24
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	20020000 	.word	0x20020000
 800146c:	00000f00 	.word	0x00000f00
 8001470:	20000974 	.word	0x20000974
 8001474:	20019338 	.word	0x20019338

08001478 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800147c:	4b06      	ldr	r3, [pc, #24]	; (8001498 <SystemInit+0x20>)
 800147e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001482:	4a05      	ldr	r2, [pc, #20]	; (8001498 <SystemInit+0x20>)
 8001484:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001488:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800148c:	bf00      	nop
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	e000ed00 	.word	0xe000ed00

0800149c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800149c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014a0:	480d      	ldr	r0, [pc, #52]	; (80014d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014a2:	490e      	ldr	r1, [pc, #56]	; (80014dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014a4:	4a0e      	ldr	r2, [pc, #56]	; (80014e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014a8:	e002      	b.n	80014b0 <LoopCopyDataInit>

080014aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ae:	3304      	adds	r3, #4

080014b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014b4:	d3f9      	bcc.n	80014aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014b6:	4a0b      	ldr	r2, [pc, #44]	; (80014e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014b8:	4c0b      	ldr	r4, [pc, #44]	; (80014e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80014ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014bc:	e001      	b.n	80014c2 <LoopFillZerobss>

080014be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014c0:	3204      	adds	r2, #4

080014c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014c4:	d3fb      	bcc.n	80014be <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014c6:	f7ff ffd7 	bl	8001478 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014ca:	f00a fa59 	bl	800b980 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014ce:	f7ff f9fd 	bl	80008cc <main>
  bx  lr    
 80014d2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80014d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014dc:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80014e0:	0800c758 	.word	0x0800c758
  ldr r2, =_sbss
 80014e4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80014e8:	20019338 	.word	0x20019338

080014ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014ec:	e7fe      	b.n	80014ec <ADC_IRQHandler>
	...

080014f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014f4:	4b0e      	ldr	r3, [pc, #56]	; (8001530 <HAL_Init+0x40>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a0d      	ldr	r2, [pc, #52]	; (8001530 <HAL_Init+0x40>)
 80014fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001500:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <HAL_Init+0x40>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a0a      	ldr	r2, [pc, #40]	; (8001530 <HAL_Init+0x40>)
 8001506:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800150a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800150c:	4b08      	ldr	r3, [pc, #32]	; (8001530 <HAL_Init+0x40>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a07      	ldr	r2, [pc, #28]	; (8001530 <HAL_Init+0x40>)
 8001512:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001516:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001518:	2003      	movs	r0, #3
 800151a:	f000 fecd 	bl	80022b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800151e:	200f      	movs	r0, #15
 8001520:	f000 f808 	bl	8001534 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001524:	f7ff fd3c 	bl	8000fa0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40023c00 	.word	0x40023c00

08001534 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800153c:	4b12      	ldr	r3, [pc, #72]	; (8001588 <HAL_InitTick+0x54>)
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	4b12      	ldr	r3, [pc, #72]	; (800158c <HAL_InitTick+0x58>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	4619      	mov	r1, r3
 8001546:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800154a:	fbb3 f3f1 	udiv	r3, r3, r1
 800154e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001552:	4618      	mov	r0, r3
 8001554:	f000 fee5 	bl	8002322 <HAL_SYSTICK_Config>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e00e      	b.n	8001580 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2b0f      	cmp	r3, #15
 8001566:	d80a      	bhi.n	800157e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001568:	2200      	movs	r2, #0
 800156a:	6879      	ldr	r1, [r7, #4]
 800156c:	f04f 30ff 	mov.w	r0, #4294967295
 8001570:	f000 fead 	bl	80022ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001574:	4a06      	ldr	r2, [pc, #24]	; (8001590 <HAL_InitTick+0x5c>)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800157a:	2300      	movs	r3, #0
 800157c:	e000      	b.n	8001580 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
}
 8001580:	4618      	mov	r0, r3
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	20000000 	.word	0x20000000
 800158c:	20000008 	.word	0x20000008
 8001590:	20000004 	.word	0x20000004

08001594 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001598:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <HAL_IncTick+0x20>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	461a      	mov	r2, r3
 800159e:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <HAL_IncTick+0x24>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4413      	add	r3, r2
 80015a4:	4a04      	ldr	r2, [pc, #16]	; (80015b8 <HAL_IncTick+0x24>)
 80015a6:	6013      	str	r3, [r2, #0]
}
 80015a8:	bf00      	nop
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	20000008 	.word	0x20000008
 80015b8:	20000978 	.word	0x20000978

080015bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  return uwTick;
 80015c0:	4b03      	ldr	r3, [pc, #12]	; (80015d0 <HAL_GetTick+0x14>)
 80015c2:	681b      	ldr	r3, [r3, #0]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	20000978 	.word	0x20000978

080015d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015dc:	f7ff ffee 	bl	80015bc <HAL_GetTick>
 80015e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015ec:	d005      	beq.n	80015fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015ee:	4b0a      	ldr	r3, [pc, #40]	; (8001618 <HAL_Delay+0x44>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	461a      	mov	r2, r3
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	4413      	add	r3, r2
 80015f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015fa:	bf00      	nop
 80015fc:	f7ff ffde 	bl	80015bc <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	68fa      	ldr	r2, [r7, #12]
 8001608:	429a      	cmp	r2, r3
 800160a:	d8f7      	bhi.n	80015fc <HAL_Delay+0x28>
  {
  }
}
 800160c:	bf00      	nop
 800160e:	bf00      	nop
 8001610:	3710      	adds	r7, #16
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	20000008 	.word	0x20000008

0800161c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d101      	bne.n	800162e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e0ed      	b.n	800180a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001634:	b2db      	uxtb	r3, r3
 8001636:	2b00      	cmp	r3, #0
 8001638:	d102      	bne.n	8001640 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f7ff fcdc 	bl	8000ff8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f042 0201 	orr.w	r2, r2, #1
 800164e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001650:	f7ff ffb4 	bl	80015bc <HAL_GetTick>
 8001654:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001656:	e012      	b.n	800167e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001658:	f7ff ffb0 	bl	80015bc <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	2b0a      	cmp	r3, #10
 8001664:	d90b      	bls.n	800167e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2205      	movs	r2, #5
 8001676:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e0c5      	b.n	800180a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f003 0301 	and.w	r3, r3, #1
 8001688:	2b00      	cmp	r3, #0
 800168a:	d0e5      	beq.n	8001658 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f022 0202 	bic.w	r2, r2, #2
 800169a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800169c:	f7ff ff8e 	bl	80015bc <HAL_GetTick>
 80016a0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80016a2:	e012      	b.n	80016ca <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016a4:	f7ff ff8a 	bl	80015bc <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	2b0a      	cmp	r3, #10
 80016b0:	d90b      	bls.n	80016ca <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2205      	movs	r2, #5
 80016c2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e09f      	b.n	800180a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f003 0302 	and.w	r3, r3, #2
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d1e5      	bne.n	80016a4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	7e1b      	ldrb	r3, [r3, #24]
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d108      	bne.n	80016f2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	e007      	b.n	8001702 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001700:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	7e5b      	ldrb	r3, [r3, #25]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d108      	bne.n	800171c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	e007      	b.n	800172c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800172a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	7e9b      	ldrb	r3, [r3, #26]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d108      	bne.n	8001746 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f042 0220 	orr.w	r2, r2, #32
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	e007      	b.n	8001756 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f022 0220 	bic.w	r2, r2, #32
 8001754:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	7edb      	ldrb	r3, [r3, #27]
 800175a:	2b01      	cmp	r3, #1
 800175c:	d108      	bne.n	8001770 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f022 0210 	bic.w	r2, r2, #16
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	e007      	b.n	8001780 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f042 0210 	orr.w	r2, r2, #16
 800177e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	7f1b      	ldrb	r3, [r3, #28]
 8001784:	2b01      	cmp	r3, #1
 8001786:	d108      	bne.n	800179a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f042 0208 	orr.w	r2, r2, #8
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	e007      	b.n	80017aa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f022 0208 	bic.w	r2, r2, #8
 80017a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	7f5b      	ldrb	r3, [r3, #29]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d108      	bne.n	80017c4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f042 0204 	orr.w	r2, r2, #4
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	e007      	b.n	80017d4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f022 0204 	bic.w	r2, r2, #4
 80017d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	689a      	ldr	r2, [r3, #8]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	431a      	orrs	r2, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	691b      	ldr	r3, [r3, #16]
 80017e2:	431a      	orrs	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	695b      	ldr	r3, [r3, #20]
 80017e8:	ea42 0103 	orr.w	r1, r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	1e5a      	subs	r2, r3, #1
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	430a      	orrs	r2, r1
 80017f8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2201      	movs	r2, #1
 8001804:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	3710      	adds	r7, #16
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
	...

08001814 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001814:	b480      	push	{r7}
 8001816:	b087      	sub	sp, #28
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f893 3020 	ldrb.w	r3, [r3, #32]
 800182a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800182c:	7cfb      	ldrb	r3, [r7, #19]
 800182e:	2b01      	cmp	r3, #1
 8001830:	d003      	beq.n	800183a <HAL_CAN_ConfigFilter+0x26>
 8001832:	7cfb      	ldrb	r3, [r7, #19]
 8001834:	2b02      	cmp	r3, #2
 8001836:	f040 80be 	bne.w	80019b6 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800183a:	4b65      	ldr	r3, [pc, #404]	; (80019d0 <HAL_CAN_ConfigFilter+0x1bc>)
 800183c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001844:	f043 0201 	orr.w	r2, r3, #1
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001854:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001868:	021b      	lsls	r3, r3, #8
 800186a:	431a      	orrs	r2, r3
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	695b      	ldr	r3, [r3, #20]
 8001876:	f003 031f 	and.w	r3, r3, #31
 800187a:	2201      	movs	r2, #1
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	43db      	mvns	r3, r3
 800188c:	401a      	ands	r2, r3
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	69db      	ldr	r3, [r3, #28]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d123      	bne.n	80018e4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	43db      	mvns	r3, r3
 80018a6:	401a      	ands	r2, r3
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018ba:	683a      	ldr	r2, [r7, #0]
 80018bc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80018be:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	3248      	adds	r2, #72	; 0x48
 80018c4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018d8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018da:	6979      	ldr	r1, [r7, #20]
 80018dc:	3348      	adds	r3, #72	; 0x48
 80018de:	00db      	lsls	r3, r3, #3
 80018e0:	440b      	add	r3, r1
 80018e2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	69db      	ldr	r3, [r3, #28]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d122      	bne.n	8001932 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	431a      	orrs	r2, r3
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001908:	683a      	ldr	r2, [r7, #0]
 800190a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800190c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	3248      	adds	r2, #72	; 0x48
 8001912:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001926:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001928:	6979      	ldr	r1, [r7, #20]
 800192a:	3348      	adds	r3, #72	; 0x48
 800192c:	00db      	lsls	r3, r3, #3
 800192e:	440b      	add	r3, r1
 8001930:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	699b      	ldr	r3, [r3, #24]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d109      	bne.n	800194e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	43db      	mvns	r3, r3
 8001944:	401a      	ands	r2, r3
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800194c:	e007      	b.n	800195e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	431a      	orrs	r2, r3
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	691b      	ldr	r3, [r3, #16]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d109      	bne.n	800197a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	43db      	mvns	r3, r3
 8001970:	401a      	ands	r2, r3
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001978:	e007      	b.n	800198a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	431a      	orrs	r2, r3
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	6a1b      	ldr	r3, [r3, #32]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d107      	bne.n	80019a2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	431a      	orrs	r2, r3
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80019a8:	f023 0201 	bic.w	r2, r3, #1
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80019b2:	2300      	movs	r3, #0
 80019b4:	e006      	b.n	80019c4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ba:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
  }
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	371c      	adds	r7, #28
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	40006400 	.word	0x40006400

080019d4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d12e      	bne.n	8001a46 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2202      	movs	r2, #2
 80019ec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f022 0201 	bic.w	r2, r2, #1
 80019fe:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001a00:	f7ff fddc 	bl	80015bc <HAL_GetTick>
 8001a04:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a06:	e012      	b.n	8001a2e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a08:	f7ff fdd8 	bl	80015bc <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b0a      	cmp	r3, #10
 8001a14:	d90b      	bls.n	8001a2e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2205      	movs	r2, #5
 8001a26:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e012      	b.n	8001a54 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f003 0301 	and.w	r3, r3, #1
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d1e5      	bne.n	8001a08 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001a42:	2300      	movs	r3, #0
 8001a44:	e006      	b.n	8001a54 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
  }
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3710      	adds	r7, #16
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b087      	sub	sp, #28
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	607a      	str	r2, [r7, #4]
 8001a68:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a70:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a72:	7dfb      	ldrb	r3, [r7, #23]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d003      	beq.n	8001a80 <HAL_CAN_GetRxMessage+0x24>
 8001a78:	7dfb      	ldrb	r3, [r7, #23]
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	f040 80f3 	bne.w	8001c66 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d10e      	bne.n	8001aa4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	f003 0303 	and.w	r3, r3, #3
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d116      	bne.n	8001ac2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a98:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e0e7      	b.n	8001c74 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	691b      	ldr	r3, [r3, #16]
 8001aaa:	f003 0303 	and.w	r3, r3, #3
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d107      	bne.n	8001ac2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e0d8      	b.n	8001c74 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	331b      	adds	r3, #27
 8001aca:	011b      	lsls	r3, r3, #4
 8001acc:	4413      	add	r3, r2
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0204 	and.w	r2, r3, #4
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d10c      	bne.n	8001afa <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	331b      	adds	r3, #27
 8001ae8:	011b      	lsls	r3, r3, #4
 8001aea:	4413      	add	r3, r2
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	0d5b      	lsrs	r3, r3, #21
 8001af0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	e00b      	b.n	8001b12 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	331b      	adds	r3, #27
 8001b02:	011b      	lsls	r3, r3, #4
 8001b04:	4413      	add	r3, r2
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	08db      	lsrs	r3, r3, #3
 8001b0a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	331b      	adds	r3, #27
 8001b1a:	011b      	lsls	r3, r3, #4
 8001b1c:	4413      	add	r3, r2
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0202 	and.w	r2, r3, #2
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	331b      	adds	r3, #27
 8001b30:	011b      	lsls	r3, r3, #4
 8001b32:	4413      	add	r3, r2
 8001b34:	3304      	adds	r3, #4
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 020f 	and.w	r2, r3, #15
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	331b      	adds	r3, #27
 8001b48:	011b      	lsls	r3, r3, #4
 8001b4a:	4413      	add	r3, r2
 8001b4c:	3304      	adds	r3, #4
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	0a1b      	lsrs	r3, r3, #8
 8001b52:	b2da      	uxtb	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	331b      	adds	r3, #27
 8001b60:	011b      	lsls	r3, r3, #4
 8001b62:	4413      	add	r3, r2
 8001b64:	3304      	adds	r3, #4
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	0c1b      	lsrs	r3, r3, #16
 8001b6a:	b29a      	uxth	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	011b      	lsls	r3, r3, #4
 8001b78:	4413      	add	r3, r2
 8001b7a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	b2da      	uxtb	r2, r3
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	011b      	lsls	r3, r3, #4
 8001b8e:	4413      	add	r3, r2
 8001b90:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	0a1a      	lsrs	r2, r3, #8
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	b2d2      	uxtb	r2, r2
 8001b9e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	011b      	lsls	r3, r3, #4
 8001ba8:	4413      	add	r3, r2
 8001baa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	0c1a      	lsrs	r2, r3, #16
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	3302      	adds	r3, #2
 8001bb6:	b2d2      	uxtb	r2, r2
 8001bb8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	011b      	lsls	r3, r3, #4
 8001bc2:	4413      	add	r3, r2
 8001bc4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	0e1a      	lsrs	r2, r3, #24
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	3303      	adds	r3, #3
 8001bd0:	b2d2      	uxtb	r2, r2
 8001bd2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	011b      	lsls	r3, r3, #4
 8001bdc:	4413      	add	r3, r2
 8001bde:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	3304      	adds	r3, #4
 8001be8:	b2d2      	uxtb	r2, r2
 8001bea:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	011b      	lsls	r3, r3, #4
 8001bf4:	4413      	add	r3, r2
 8001bf6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	0a1a      	lsrs	r2, r3, #8
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	3305      	adds	r3, #5
 8001c02:	b2d2      	uxtb	r2, r2
 8001c04:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	011b      	lsls	r3, r3, #4
 8001c0e:	4413      	add	r3, r2
 8001c10:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	0c1a      	lsrs	r2, r3, #16
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	3306      	adds	r3, #6
 8001c1c:	b2d2      	uxtb	r2, r2
 8001c1e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	011b      	lsls	r3, r3, #4
 8001c28:	4413      	add	r3, r2
 8001c2a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	0e1a      	lsrs	r2, r3, #24
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	3307      	adds	r3, #7
 8001c36:	b2d2      	uxtb	r2, r2
 8001c38:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d108      	bne.n	8001c52 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	68da      	ldr	r2, [r3, #12]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f042 0220 	orr.w	r2, r2, #32
 8001c4e:	60da      	str	r2, [r3, #12]
 8001c50:	e007      	b.n	8001c62 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	691a      	ldr	r2, [r3, #16]
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f042 0220 	orr.w	r2, r2, #32
 8001c60:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001c62:	2300      	movs	r3, #0
 8001c64:	e006      	b.n	8001c74 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
  }
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	371c      	adds	r7, #28
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c90:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001c92:	7bfb      	ldrb	r3, [r7, #15]
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d002      	beq.n	8001c9e <HAL_CAN_ActivateNotification+0x1e>
 8001c98:	7bfb      	ldrb	r3, [r7, #15]
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d109      	bne.n	8001cb2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	6959      	ldr	r1, [r3, #20]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	683a      	ldr	r2, [r7, #0]
 8001caa:	430a      	orrs	r2, r1
 8001cac:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	e006      	b.n	8001cc0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
  }
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3714      	adds	r7, #20
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b08a      	sub	sp, #40	; 0x28
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	695b      	ldr	r3, [r3, #20]
 8001cde:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	691b      	ldr	r3, [r3, #16]
 8001cfe:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	699b      	ldr	r3, [r3, #24]
 8001d06:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001d08:	6a3b      	ldr	r3, [r7, #32]
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d07c      	beq.n	8001e0c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	f003 0301 	and.w	r3, r3, #1
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d023      	beq.n	8001d64 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2201      	movs	r2, #1
 8001d22:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d003      	beq.n	8001d36 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f000 f983 	bl	800203a <HAL_CAN_TxMailbox0CompleteCallback>
 8001d34:	e016      	b.n	8001d64 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	f003 0304 	and.w	r3, r3, #4
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d004      	beq.n	8001d4a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d42:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d46:	627b      	str	r3, [r7, #36]	; 0x24
 8001d48:	e00c      	b.n	8001d64 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	f003 0308 	and.w	r3, r3, #8
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d004      	beq.n	8001d5e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d56:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d5a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d5c:	e002      	b.n	8001d64 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f000 f989 	bl	8002076 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d024      	beq.n	8001db8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d76:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f000 f963 	bl	800204e <HAL_CAN_TxMailbox1CompleteCallback>
 8001d88:	e016      	b.n	8001db8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d004      	beq.n	8001d9e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d96:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d9a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d9c:	e00c      	b.n	8001db8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d004      	beq.n	8001db2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001daa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dae:	627b      	str	r3, [r7, #36]	; 0x24
 8001db0:	e002      	b.n	8001db8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 f969 	bl	800208a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d024      	beq.n	8001e0c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001dca:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d003      	beq.n	8001dde <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f000 f943 	bl	8002062 <HAL_CAN_TxMailbox2CompleteCallback>
 8001ddc:	e016      	b.n	8001e0c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d004      	beq.n	8001df2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dee:	627b      	str	r3, [r7, #36]	; 0x24
 8001df0:	e00c      	b.n	8001e0c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d004      	beq.n	8001e06 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e02:	627b      	str	r3, [r7, #36]	; 0x24
 8001e04:	e002      	b.n	8001e0c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 f949 	bl	800209e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001e0c:	6a3b      	ldr	r3, [r7, #32]
 8001e0e:	f003 0308 	and.w	r3, r3, #8
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d00c      	beq.n	8001e30 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	f003 0310 	and.w	r3, r3, #16
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d007      	beq.n	8001e30 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e26:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2210      	movs	r2, #16
 8001e2e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001e30:	6a3b      	ldr	r3, [r7, #32]
 8001e32:	f003 0304 	and.w	r3, r3, #4
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d00b      	beq.n	8001e52 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	f003 0308 	and.w	r3, r3, #8
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d006      	beq.n	8001e52 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2208      	movs	r2, #8
 8001e4a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f000 f930 	bl	80020b2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001e52:	6a3b      	ldr	r3, [r7, #32]
 8001e54:	f003 0302 	and.w	r3, r3, #2
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d009      	beq.n	8001e70 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	f003 0303 	and.w	r3, r3, #3
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d002      	beq.n	8001e70 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f7fe fc98 	bl	80007a0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001e70:	6a3b      	ldr	r3, [r7, #32]
 8001e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d00c      	beq.n	8001e94 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	f003 0310 	and.w	r3, r3, #16
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d007      	beq.n	8001e94 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e8a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2210      	movs	r2, #16
 8001e92:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001e94:	6a3b      	ldr	r3, [r7, #32]
 8001e96:	f003 0320 	and.w	r3, r3, #32
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d00b      	beq.n	8001eb6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	f003 0308 	and.w	r3, r3, #8
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d006      	beq.n	8001eb6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2208      	movs	r2, #8
 8001eae:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f000 f908 	bl	80020c6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001eb6:	6a3b      	ldr	r3, [r7, #32]
 8001eb8:	f003 0310 	and.w	r3, r3, #16
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d009      	beq.n	8001ed4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	f003 0303 	and.w	r3, r3, #3
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d002      	beq.n	8001ed4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f7fe fcca 	bl	8000868 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001ed4:	6a3b      	ldr	r3, [r7, #32]
 8001ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d00b      	beq.n	8001ef6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	f003 0310 	and.w	r3, r3, #16
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d006      	beq.n	8001ef6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2210      	movs	r2, #16
 8001eee:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f000 f8f2 	bl	80020da <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001ef6:	6a3b      	ldr	r3, [r7, #32]
 8001ef8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d00b      	beq.n	8001f18 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	f003 0308 	and.w	r3, r3, #8
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d006      	beq.n	8001f18 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2208      	movs	r2, #8
 8001f10:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 f8eb 	bl	80020ee <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001f18:	6a3b      	ldr	r3, [r7, #32]
 8001f1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d07b      	beq.n	800201a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	f003 0304 	and.w	r3, r3, #4
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d072      	beq.n	8002012 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001f2c:	6a3b      	ldr	r3, [r7, #32]
 8001f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d008      	beq.n	8001f48 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d003      	beq.n	8001f48 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f42:	f043 0301 	orr.w	r3, r3, #1
 8001f46:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001f48:	6a3b      	ldr	r3, [r7, #32]
 8001f4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d008      	beq.n	8001f64 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d003      	beq.n	8001f64 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5e:	f043 0302 	orr.w	r3, r3, #2
 8001f62:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001f64:	6a3b      	ldr	r3, [r7, #32]
 8001f66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d008      	beq.n	8001f80 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d003      	beq.n	8001f80 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7a:	f043 0304 	orr.w	r3, r3, #4
 8001f7e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001f80:	6a3b      	ldr	r3, [r7, #32]
 8001f82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d043      	beq.n	8002012 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d03e      	beq.n	8002012 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f9a:	2b60      	cmp	r3, #96	; 0x60
 8001f9c:	d02b      	beq.n	8001ff6 <HAL_CAN_IRQHandler+0x32a>
 8001f9e:	2b60      	cmp	r3, #96	; 0x60
 8001fa0:	d82e      	bhi.n	8002000 <HAL_CAN_IRQHandler+0x334>
 8001fa2:	2b50      	cmp	r3, #80	; 0x50
 8001fa4:	d022      	beq.n	8001fec <HAL_CAN_IRQHandler+0x320>
 8001fa6:	2b50      	cmp	r3, #80	; 0x50
 8001fa8:	d82a      	bhi.n	8002000 <HAL_CAN_IRQHandler+0x334>
 8001faa:	2b40      	cmp	r3, #64	; 0x40
 8001fac:	d019      	beq.n	8001fe2 <HAL_CAN_IRQHandler+0x316>
 8001fae:	2b40      	cmp	r3, #64	; 0x40
 8001fb0:	d826      	bhi.n	8002000 <HAL_CAN_IRQHandler+0x334>
 8001fb2:	2b30      	cmp	r3, #48	; 0x30
 8001fb4:	d010      	beq.n	8001fd8 <HAL_CAN_IRQHandler+0x30c>
 8001fb6:	2b30      	cmp	r3, #48	; 0x30
 8001fb8:	d822      	bhi.n	8002000 <HAL_CAN_IRQHandler+0x334>
 8001fba:	2b10      	cmp	r3, #16
 8001fbc:	d002      	beq.n	8001fc4 <HAL_CAN_IRQHandler+0x2f8>
 8001fbe:	2b20      	cmp	r3, #32
 8001fc0:	d005      	beq.n	8001fce <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001fc2:	e01d      	b.n	8002000 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc6:	f043 0308 	orr.w	r3, r3, #8
 8001fca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001fcc:	e019      	b.n	8002002 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd0:	f043 0310 	orr.w	r3, r3, #16
 8001fd4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001fd6:	e014      	b.n	8002002 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fda:	f043 0320 	orr.w	r3, r3, #32
 8001fde:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001fe0:	e00f      	b.n	8002002 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fe8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001fea:	e00a      	b.n	8002002 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ff2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ff4:	e005      	b.n	8002002 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ffc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ffe:	e000      	b.n	8002002 <HAL_CAN_IRQHandler+0x336>
            break;
 8002000:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	699a      	ldr	r2, [r3, #24]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002010:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2204      	movs	r2, #4
 8002018:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800201a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201c:	2b00      	cmp	r3, #0
 800201e:	d008      	beq.n	8002032 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002026:	431a      	orrs	r2, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f000 f868 	bl	8002102 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002032:	bf00      	nop
 8002034:	3728      	adds	r7, #40	; 0x28
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}

0800203a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800203a:	b480      	push	{r7}
 800203c:	b083      	sub	sp, #12
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002042:	bf00      	nop
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr

0800204e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800204e:	b480      	push	{r7}
 8002050:	b083      	sub	sp, #12
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002056:	bf00      	nop
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr

08002062 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002062:	b480      	push	{r7}
 8002064:	b083      	sub	sp, #12
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800206a:	bf00      	nop
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr

08002076 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002076:	b480      	push	{r7}
 8002078:	b083      	sub	sp, #12
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800207e:	bf00      	nop
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr

0800208a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800208a:	b480      	push	{r7}
 800208c:	b083      	sub	sp, #12
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002092:	bf00      	nop
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr

0800209e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800209e:	b480      	push	{r7}
 80020a0:	b083      	sub	sp, #12
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80020a6:	bf00      	nop
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr

080020b2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80020b2:	b480      	push	{r7}
 80020b4:	b083      	sub	sp, #12
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80020ba:	bf00      	nop
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr

080020c6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80020c6:	b480      	push	{r7}
 80020c8:	b083      	sub	sp, #12
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80020ce:	bf00      	nop
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80020da:	b480      	push	{r7}
 80020dc:	b083      	sub	sp, #12
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80020e2:	bf00      	nop
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr

080020ee <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80020ee:	b480      	push	{r7}
 80020f0:	b083      	sub	sp, #12
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80020f6:	bf00      	nop
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr

08002102 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002102:	b480      	push	{r7}
 8002104:	b083      	sub	sp, #12
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800210a:	bf00      	nop
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
	...

08002118 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002118:	b480      	push	{r7}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f003 0307 	and.w	r3, r3, #7
 8002126:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002128:	4b0c      	ldr	r3, [pc, #48]	; (800215c <__NVIC_SetPriorityGrouping+0x44>)
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800212e:	68ba      	ldr	r2, [r7, #8]
 8002130:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002134:	4013      	ands	r3, r2
 8002136:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002140:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002144:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002148:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800214a:	4a04      	ldr	r2, [pc, #16]	; (800215c <__NVIC_SetPriorityGrouping+0x44>)
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	60d3      	str	r3, [r2, #12]
}
 8002150:	bf00      	nop
 8002152:	3714      	adds	r7, #20
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr
 800215c:	e000ed00 	.word	0xe000ed00

08002160 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002164:	4b04      	ldr	r3, [pc, #16]	; (8002178 <__NVIC_GetPriorityGrouping+0x18>)
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	0a1b      	lsrs	r3, r3, #8
 800216a:	f003 0307 	and.w	r3, r3, #7
}
 800216e:	4618      	mov	r0, r3
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr
 8002178:	e000ed00 	.word	0xe000ed00

0800217c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	4603      	mov	r3, r0
 8002184:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218a:	2b00      	cmp	r3, #0
 800218c:	db0b      	blt.n	80021a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800218e:	79fb      	ldrb	r3, [r7, #7]
 8002190:	f003 021f 	and.w	r2, r3, #31
 8002194:	4907      	ldr	r1, [pc, #28]	; (80021b4 <__NVIC_EnableIRQ+0x38>)
 8002196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219a:	095b      	lsrs	r3, r3, #5
 800219c:	2001      	movs	r0, #1
 800219e:	fa00 f202 	lsl.w	r2, r0, r2
 80021a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021a6:	bf00      	nop
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	e000e100 	.word	0xe000e100

080021b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	4603      	mov	r3, r0
 80021c0:	6039      	str	r1, [r7, #0]
 80021c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	db0a      	blt.n	80021e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	b2da      	uxtb	r2, r3
 80021d0:	490c      	ldr	r1, [pc, #48]	; (8002204 <__NVIC_SetPriority+0x4c>)
 80021d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d6:	0112      	lsls	r2, r2, #4
 80021d8:	b2d2      	uxtb	r2, r2
 80021da:	440b      	add	r3, r1
 80021dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021e0:	e00a      	b.n	80021f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	b2da      	uxtb	r2, r3
 80021e6:	4908      	ldr	r1, [pc, #32]	; (8002208 <__NVIC_SetPriority+0x50>)
 80021e8:	79fb      	ldrb	r3, [r7, #7]
 80021ea:	f003 030f 	and.w	r3, r3, #15
 80021ee:	3b04      	subs	r3, #4
 80021f0:	0112      	lsls	r2, r2, #4
 80021f2:	b2d2      	uxtb	r2, r2
 80021f4:	440b      	add	r3, r1
 80021f6:	761a      	strb	r2, [r3, #24]
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr
 8002204:	e000e100 	.word	0xe000e100
 8002208:	e000ed00 	.word	0xe000ed00

0800220c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800220c:	b480      	push	{r7}
 800220e:	b089      	sub	sp, #36	; 0x24
 8002210:	af00      	add	r7, sp, #0
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f003 0307 	and.w	r3, r3, #7
 800221e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	f1c3 0307 	rsb	r3, r3, #7
 8002226:	2b04      	cmp	r3, #4
 8002228:	bf28      	it	cs
 800222a:	2304      	movcs	r3, #4
 800222c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	3304      	adds	r3, #4
 8002232:	2b06      	cmp	r3, #6
 8002234:	d902      	bls.n	800223c <NVIC_EncodePriority+0x30>
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	3b03      	subs	r3, #3
 800223a:	e000      	b.n	800223e <NVIC_EncodePriority+0x32>
 800223c:	2300      	movs	r3, #0
 800223e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002240:	f04f 32ff 	mov.w	r2, #4294967295
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	43da      	mvns	r2, r3
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	401a      	ands	r2, r3
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002254:	f04f 31ff 	mov.w	r1, #4294967295
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	fa01 f303 	lsl.w	r3, r1, r3
 800225e:	43d9      	mvns	r1, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002264:	4313      	orrs	r3, r2
         );
}
 8002266:	4618      	mov	r0, r3
 8002268:	3724      	adds	r7, #36	; 0x24
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
	...

08002274 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	3b01      	subs	r3, #1
 8002280:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002284:	d301      	bcc.n	800228a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002286:	2301      	movs	r3, #1
 8002288:	e00f      	b.n	80022aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800228a:	4a0a      	ldr	r2, [pc, #40]	; (80022b4 <SysTick_Config+0x40>)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	3b01      	subs	r3, #1
 8002290:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002292:	210f      	movs	r1, #15
 8002294:	f04f 30ff 	mov.w	r0, #4294967295
 8002298:	f7ff ff8e 	bl	80021b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800229c:	4b05      	ldr	r3, [pc, #20]	; (80022b4 <SysTick_Config+0x40>)
 800229e:	2200      	movs	r2, #0
 80022a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022a2:	4b04      	ldr	r3, [pc, #16]	; (80022b4 <SysTick_Config+0x40>)
 80022a4:	2207      	movs	r2, #7
 80022a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	e000e010 	.word	0xe000e010

080022b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f7ff ff29 	bl	8002118 <__NVIC_SetPriorityGrouping>
}
 80022c6:	bf00      	nop
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b086      	sub	sp, #24
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	4603      	mov	r3, r0
 80022d6:	60b9      	str	r1, [r7, #8]
 80022d8:	607a      	str	r2, [r7, #4]
 80022da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022dc:	2300      	movs	r3, #0
 80022de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022e0:	f7ff ff3e 	bl	8002160 <__NVIC_GetPriorityGrouping>
 80022e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	68b9      	ldr	r1, [r7, #8]
 80022ea:	6978      	ldr	r0, [r7, #20]
 80022ec:	f7ff ff8e 	bl	800220c <NVIC_EncodePriority>
 80022f0:	4602      	mov	r2, r0
 80022f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022f6:	4611      	mov	r1, r2
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff ff5d 	bl	80021b8 <__NVIC_SetPriority>
}
 80022fe:	bf00      	nop
 8002300:	3718      	adds	r7, #24
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002306:	b580      	push	{r7, lr}
 8002308:	b082      	sub	sp, #8
 800230a:	af00      	add	r7, sp, #0
 800230c:	4603      	mov	r3, r0
 800230e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002314:	4618      	mov	r0, r3
 8002316:	f7ff ff31 	bl	800217c <__NVIC_EnableIRQ>
}
 800231a:	bf00      	nop
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}

08002322 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002322:	b580      	push	{r7, lr}
 8002324:	b082      	sub	sp, #8
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f7ff ffa2 	bl	8002274 <SysTick_Config>
 8002330:	4603      	mov	r3, r0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
	...

0800233c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b086      	sub	sp, #24
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002344:	2300      	movs	r3, #0
 8002346:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002348:	f7ff f938 	bl	80015bc <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d101      	bne.n	8002358 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e099      	b.n	800248c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2202      	movs	r2, #2
 800235c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f022 0201 	bic.w	r2, r2, #1
 8002376:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002378:	e00f      	b.n	800239a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800237a:	f7ff f91f 	bl	80015bc <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	2b05      	cmp	r3, #5
 8002386:	d908      	bls.n	800239a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2220      	movs	r2, #32
 800238c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2203      	movs	r2, #3
 8002392:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e078      	b.n	800248c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d1e8      	bne.n	800237a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80023b0:	697a      	ldr	r2, [r7, #20]
 80023b2:	4b38      	ldr	r3, [pc, #224]	; (8002494 <HAL_DMA_Init+0x158>)
 80023b4:	4013      	ands	r3, r2
 80023b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685a      	ldr	r2, [r3, #4]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	691b      	ldr	r3, [r3, #16]
 80023cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	699b      	ldr	r3, [r3, #24]
 80023d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a1b      	ldr	r3, [r3, #32]
 80023e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023e6:	697a      	ldr	r2, [r7, #20]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f0:	2b04      	cmp	r3, #4
 80023f2:	d107      	bne.n	8002404 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fc:	4313      	orrs	r3, r2
 80023fe:	697a      	ldr	r2, [r7, #20]
 8002400:	4313      	orrs	r3, r2
 8002402:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	697a      	ldr	r2, [r7, #20]
 800240a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	f023 0307 	bic.w	r3, r3, #7
 800241a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002420:	697a      	ldr	r2, [r7, #20]
 8002422:	4313      	orrs	r3, r2
 8002424:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242a:	2b04      	cmp	r3, #4
 800242c:	d117      	bne.n	800245e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002432:	697a      	ldr	r2, [r7, #20]
 8002434:	4313      	orrs	r3, r2
 8002436:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800243c:	2b00      	cmp	r3, #0
 800243e:	d00e      	beq.n	800245e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f000 fa9d 	bl	8002980 <DMA_CheckFifoParam>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d008      	beq.n	800245e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2240      	movs	r2, #64	; 0x40
 8002450:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2201      	movs	r2, #1
 8002456:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800245a:	2301      	movs	r3, #1
 800245c:	e016      	b.n	800248c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	697a      	ldr	r2, [r7, #20]
 8002464:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f000 fa54 	bl	8002914 <DMA_CalcBaseAndBitshift>
 800246c:	4603      	mov	r3, r0
 800246e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002474:	223f      	movs	r2, #63	; 0x3f
 8002476:	409a      	lsls	r2, r3
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2201      	movs	r2, #1
 8002486:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800248a:	2300      	movs	r3, #0
}
 800248c:	4618      	mov	r0, r3
 800248e:	3718      	adds	r7, #24
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	f010803f 	.word	0xf010803f

08002498 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
 80024a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024a6:	2300      	movs	r3, #0
 80024a8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d101      	bne.n	80024be <HAL_DMA_Start_IT+0x26>
 80024ba:	2302      	movs	r3, #2
 80024bc:	e040      	b.n	8002540 <HAL_DMA_Start_IT+0xa8>
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2201      	movs	r2, #1
 80024c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d12f      	bne.n	8002532 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2202      	movs	r2, #2
 80024d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2200      	movs	r2, #0
 80024de:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	68b9      	ldr	r1, [r7, #8]
 80024e6:	68f8      	ldr	r0, [r7, #12]
 80024e8:	f000 f9e6 	bl	80028b8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f0:	223f      	movs	r2, #63	; 0x3f
 80024f2:	409a      	lsls	r2, r3
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f042 0216 	orr.w	r2, r2, #22
 8002506:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250c:	2b00      	cmp	r3, #0
 800250e:	d007      	beq.n	8002520 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f042 0208 	orr.w	r2, r2, #8
 800251e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f042 0201 	orr.w	r2, r2, #1
 800252e:	601a      	str	r2, [r3, #0]
 8002530:	e005      	b.n	800253e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800253a:	2302      	movs	r3, #2
 800253c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800253e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002540:	4618      	mov	r0, r3
 8002542:	3718      	adds	r7, #24
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002556:	b2db      	uxtb	r3, r3
 8002558:	2b02      	cmp	r3, #2
 800255a:	d004      	beq.n	8002566 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2280      	movs	r2, #128	; 0x80
 8002560:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e00c      	b.n	8002580 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2205      	movs	r2, #5
 800256a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f022 0201 	bic.w	r2, r2, #1
 800257c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800257e:	2300      	movs	r3, #0
}
 8002580:	4618      	mov	r0, r3
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002594:	2300      	movs	r3, #0
 8002596:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002598:	4b8e      	ldr	r3, [pc, #568]	; (80027d4 <HAL_DMA_IRQHandler+0x248>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a8e      	ldr	r2, [pc, #568]	; (80027d8 <HAL_DMA_IRQHandler+0x24c>)
 800259e:	fba2 2303 	umull	r2, r3, r2, r3
 80025a2:	0a9b      	lsrs	r3, r3, #10
 80025a4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025aa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025b6:	2208      	movs	r2, #8
 80025b8:	409a      	lsls	r2, r3
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	4013      	ands	r3, r2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d01a      	beq.n	80025f8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0304 	and.w	r3, r3, #4
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d013      	beq.n	80025f8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f022 0204 	bic.w	r2, r2, #4
 80025de:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e4:	2208      	movs	r2, #8
 80025e6:	409a      	lsls	r2, r3
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025f0:	f043 0201 	orr.w	r2, r3, #1
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025fc:	2201      	movs	r2, #1
 80025fe:	409a      	lsls	r2, r3
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	4013      	ands	r3, r2
 8002604:	2b00      	cmp	r3, #0
 8002606:	d012      	beq.n	800262e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	695b      	ldr	r3, [r3, #20]
 800260e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002612:	2b00      	cmp	r3, #0
 8002614:	d00b      	beq.n	800262e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800261a:	2201      	movs	r2, #1
 800261c:	409a      	lsls	r2, r3
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002626:	f043 0202 	orr.w	r2, r3, #2
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002632:	2204      	movs	r2, #4
 8002634:	409a      	lsls	r2, r3
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	4013      	ands	r3, r2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d012      	beq.n	8002664 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0302 	and.w	r3, r3, #2
 8002648:	2b00      	cmp	r3, #0
 800264a:	d00b      	beq.n	8002664 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002650:	2204      	movs	r2, #4
 8002652:	409a      	lsls	r2, r3
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800265c:	f043 0204 	orr.w	r2, r3, #4
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002668:	2210      	movs	r2, #16
 800266a:	409a      	lsls	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	4013      	ands	r3, r2
 8002670:	2b00      	cmp	r3, #0
 8002672:	d043      	beq.n	80026fc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0308 	and.w	r3, r3, #8
 800267e:	2b00      	cmp	r3, #0
 8002680:	d03c      	beq.n	80026fc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002686:	2210      	movs	r2, #16
 8002688:	409a      	lsls	r2, r3
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d018      	beq.n	80026ce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d108      	bne.n	80026bc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d024      	beq.n	80026fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	4798      	blx	r3
 80026ba:	e01f      	b.n	80026fc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d01b      	beq.n	80026fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	4798      	blx	r3
 80026cc:	e016      	b.n	80026fc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d107      	bne.n	80026ec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 0208 	bic.w	r2, r2, #8
 80026ea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d003      	beq.n	80026fc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002700:	2220      	movs	r2, #32
 8002702:	409a      	lsls	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	4013      	ands	r3, r2
 8002708:	2b00      	cmp	r3, #0
 800270a:	f000 808f 	beq.w	800282c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0310 	and.w	r3, r3, #16
 8002718:	2b00      	cmp	r3, #0
 800271a:	f000 8087 	beq.w	800282c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002722:	2220      	movs	r2, #32
 8002724:	409a      	lsls	r2, r3
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002730:	b2db      	uxtb	r3, r3
 8002732:	2b05      	cmp	r3, #5
 8002734:	d136      	bne.n	80027a4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f022 0216 	bic.w	r2, r2, #22
 8002744:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	695a      	ldr	r2, [r3, #20]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002754:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275a:	2b00      	cmp	r3, #0
 800275c:	d103      	bne.n	8002766 <HAL_DMA_IRQHandler+0x1da>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002762:	2b00      	cmp	r3, #0
 8002764:	d007      	beq.n	8002776 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f022 0208 	bic.w	r2, r2, #8
 8002774:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800277a:	223f      	movs	r2, #63	; 0x3f
 800277c:	409a      	lsls	r2, r3
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2201      	movs	r2, #1
 8002786:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002796:	2b00      	cmp	r3, #0
 8002798:	d07e      	beq.n	8002898 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	4798      	blx	r3
        }
        return;
 80027a2:	e079      	b.n	8002898 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d01d      	beq.n	80027ee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d10d      	bne.n	80027dc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d031      	beq.n	800282c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	4798      	blx	r3
 80027d0:	e02c      	b.n	800282c <HAL_DMA_IRQHandler+0x2a0>
 80027d2:	bf00      	nop
 80027d4:	20000000 	.word	0x20000000
 80027d8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d023      	beq.n	800282c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	4798      	blx	r3
 80027ec:	e01e      	b.n	800282c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d10f      	bne.n	800281c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f022 0210 	bic.w	r2, r2, #16
 800280a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002820:	2b00      	cmp	r3, #0
 8002822:	d003      	beq.n	800282c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002830:	2b00      	cmp	r3, #0
 8002832:	d032      	beq.n	800289a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002838:	f003 0301 	and.w	r3, r3, #1
 800283c:	2b00      	cmp	r3, #0
 800283e:	d022      	beq.n	8002886 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2205      	movs	r2, #5
 8002844:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f022 0201 	bic.w	r2, r2, #1
 8002856:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	3301      	adds	r3, #1
 800285c:	60bb      	str	r3, [r7, #8]
 800285e:	697a      	ldr	r2, [r7, #20]
 8002860:	429a      	cmp	r2, r3
 8002862:	d307      	bcc.n	8002874 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	2b00      	cmp	r3, #0
 8002870:	d1f2      	bne.n	8002858 <HAL_DMA_IRQHandler+0x2cc>
 8002872:	e000      	b.n	8002876 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002874:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2201      	movs	r2, #1
 800287a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800288a:	2b00      	cmp	r3, #0
 800288c:	d005      	beq.n	800289a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	4798      	blx	r3
 8002896:	e000      	b.n	800289a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002898:	bf00      	nop
    }
  }
}
 800289a:	3718      	adds	r7, #24
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}

080028a0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b085      	sub	sp, #20
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	607a      	str	r2, [r7, #4]
 80028c4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80028d4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	683a      	ldr	r2, [r7, #0]
 80028dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	2b40      	cmp	r3, #64	; 0x40
 80028e4:	d108      	bne.n	80028f8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68ba      	ldr	r2, [r7, #8]
 80028f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80028f6:	e007      	b.n	8002908 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68ba      	ldr	r2, [r7, #8]
 80028fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	60da      	str	r2, [r3, #12]
}
 8002908:	bf00      	nop
 800290a:	3714      	adds	r7, #20
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	b2db      	uxtb	r3, r3
 8002922:	3b10      	subs	r3, #16
 8002924:	4a14      	ldr	r2, [pc, #80]	; (8002978 <DMA_CalcBaseAndBitshift+0x64>)
 8002926:	fba2 2303 	umull	r2, r3, r2, r3
 800292a:	091b      	lsrs	r3, r3, #4
 800292c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800292e:	4a13      	ldr	r2, [pc, #76]	; (800297c <DMA_CalcBaseAndBitshift+0x68>)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	4413      	add	r3, r2
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	461a      	mov	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2b03      	cmp	r3, #3
 8002940:	d909      	bls.n	8002956 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800294a:	f023 0303 	bic.w	r3, r3, #3
 800294e:	1d1a      	adds	r2, r3, #4
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	659a      	str	r2, [r3, #88]	; 0x58
 8002954:	e007      	b.n	8002966 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800295e:	f023 0303 	bic.w	r3, r3, #3
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800296a:	4618      	mov	r0, r3
 800296c:	3714      	adds	r7, #20
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	aaaaaaab 	.word	0xaaaaaaab
 800297c:	0800c678 	.word	0x0800c678

08002980 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002988:	2300      	movs	r3, #0
 800298a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002990:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d11f      	bne.n	80029da <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	2b03      	cmp	r3, #3
 800299e:	d856      	bhi.n	8002a4e <DMA_CheckFifoParam+0xce>
 80029a0:	a201      	add	r2, pc, #4	; (adr r2, 80029a8 <DMA_CheckFifoParam+0x28>)
 80029a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029a6:	bf00      	nop
 80029a8:	080029b9 	.word	0x080029b9
 80029ac:	080029cb 	.word	0x080029cb
 80029b0:	080029b9 	.word	0x080029b9
 80029b4:	08002a4f 	.word	0x08002a4f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d046      	beq.n	8002a52 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029c8:	e043      	b.n	8002a52 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80029d2:	d140      	bne.n	8002a56 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029d8:	e03d      	b.n	8002a56 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	699b      	ldr	r3, [r3, #24]
 80029de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029e2:	d121      	bne.n	8002a28 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	2b03      	cmp	r3, #3
 80029e8:	d837      	bhi.n	8002a5a <DMA_CheckFifoParam+0xda>
 80029ea:	a201      	add	r2, pc, #4	; (adr r2, 80029f0 <DMA_CheckFifoParam+0x70>)
 80029ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029f0:	08002a01 	.word	0x08002a01
 80029f4:	08002a07 	.word	0x08002a07
 80029f8:	08002a01 	.word	0x08002a01
 80029fc:	08002a19 	.word	0x08002a19
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	73fb      	strb	r3, [r7, #15]
      break;
 8002a04:	e030      	b.n	8002a68 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d025      	beq.n	8002a5e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a16:	e022      	b.n	8002a5e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a20:	d11f      	bne.n	8002a62 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a26:	e01c      	b.n	8002a62 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d903      	bls.n	8002a36 <DMA_CheckFifoParam+0xb6>
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	2b03      	cmp	r3, #3
 8002a32:	d003      	beq.n	8002a3c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a34:	e018      	b.n	8002a68 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	73fb      	strb	r3, [r7, #15]
      break;
 8002a3a:	e015      	b.n	8002a68 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d00e      	beq.n	8002a66 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a4c:	e00b      	b.n	8002a66 <DMA_CheckFifoParam+0xe6>
      break;
 8002a4e:	bf00      	nop
 8002a50:	e00a      	b.n	8002a68 <DMA_CheckFifoParam+0xe8>
      break;
 8002a52:	bf00      	nop
 8002a54:	e008      	b.n	8002a68 <DMA_CheckFifoParam+0xe8>
      break;
 8002a56:	bf00      	nop
 8002a58:	e006      	b.n	8002a68 <DMA_CheckFifoParam+0xe8>
      break;
 8002a5a:	bf00      	nop
 8002a5c:	e004      	b.n	8002a68 <DMA_CheckFifoParam+0xe8>
      break;
 8002a5e:	bf00      	nop
 8002a60:	e002      	b.n	8002a68 <DMA_CheckFifoParam+0xe8>
      break;   
 8002a62:	bf00      	nop
 8002a64:	e000      	b.n	8002a68 <DMA_CheckFifoParam+0xe8>
      break;
 8002a66:	bf00      	nop
    }
  } 
  
  return status; 
 8002a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3714      	adds	r7, #20
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop

08002a78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b089      	sub	sp, #36	; 0x24
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a82:	2300      	movs	r3, #0
 8002a84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a86:	2300      	movs	r3, #0
 8002a88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a8e:	2300      	movs	r3, #0
 8002a90:	61fb      	str	r3, [r7, #28]
 8002a92:	e16b      	b.n	8002d6c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a94:	2201      	movs	r2, #1
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	697a      	ldr	r2, [r7, #20]
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	f040 815a 	bne.w	8002d66 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f003 0303 	and.w	r3, r3, #3
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d005      	beq.n	8002aca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d130      	bne.n	8002b2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	005b      	lsls	r3, r3, #1
 8002ad4:	2203      	movs	r2, #3
 8002ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ada:	43db      	mvns	r3, r3
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	4013      	ands	r3, r2
 8002ae0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	68da      	ldr	r2, [r3, #12]
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	fa02 f303 	lsl.w	r3, r2, r3
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	69ba      	ldr	r2, [r7, #24]
 8002af8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b00:	2201      	movs	r2, #1
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	fa02 f303 	lsl.w	r3, r2, r3
 8002b08:	43db      	mvns	r3, r3
 8002b0a:	69ba      	ldr	r2, [r7, #24]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	091b      	lsrs	r3, r3, #4
 8002b16:	f003 0201 	and.w	r2, r3, #1
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f003 0303 	and.w	r3, r3, #3
 8002b34:	2b03      	cmp	r3, #3
 8002b36:	d017      	beq.n	8002b68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	2203      	movs	r2, #3
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	689a      	ldr	r2, [r3, #8]
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f003 0303 	and.w	r3, r3, #3
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d123      	bne.n	8002bbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	08da      	lsrs	r2, r3, #3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	3208      	adds	r2, #8
 8002b7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	f003 0307 	and.w	r3, r3, #7
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	220f      	movs	r2, #15
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	43db      	mvns	r3, r3
 8002b92:	69ba      	ldr	r2, [r7, #24]
 8002b94:	4013      	ands	r3, r2
 8002b96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	691a      	ldr	r2, [r3, #16]
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	f003 0307 	and.w	r3, r3, #7
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	08da      	lsrs	r2, r3, #3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	3208      	adds	r2, #8
 8002bb6:	69b9      	ldr	r1, [r7, #24]
 8002bb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	2203      	movs	r2, #3
 8002bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bcc:	43db      	mvns	r3, r3
 8002bce:	69ba      	ldr	r2, [r7, #24]
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f003 0203 	and.w	r2, r3, #3
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	f000 80b4 	beq.w	8002d66 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bfe:	2300      	movs	r3, #0
 8002c00:	60fb      	str	r3, [r7, #12]
 8002c02:	4b60      	ldr	r3, [pc, #384]	; (8002d84 <HAL_GPIO_Init+0x30c>)
 8002c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c06:	4a5f      	ldr	r2, [pc, #380]	; (8002d84 <HAL_GPIO_Init+0x30c>)
 8002c08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c0c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c0e:	4b5d      	ldr	r3, [pc, #372]	; (8002d84 <HAL_GPIO_Init+0x30c>)
 8002c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c16:	60fb      	str	r3, [r7, #12]
 8002c18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c1a:	4a5b      	ldr	r2, [pc, #364]	; (8002d88 <HAL_GPIO_Init+0x310>)
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	089b      	lsrs	r3, r3, #2
 8002c20:	3302      	adds	r3, #2
 8002c22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	f003 0303 	and.w	r3, r3, #3
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	220f      	movs	r2, #15
 8002c32:	fa02 f303 	lsl.w	r3, r2, r3
 8002c36:	43db      	mvns	r3, r3
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a52      	ldr	r2, [pc, #328]	; (8002d8c <HAL_GPIO_Init+0x314>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d02b      	beq.n	8002c9e <HAL_GPIO_Init+0x226>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a51      	ldr	r2, [pc, #324]	; (8002d90 <HAL_GPIO_Init+0x318>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d025      	beq.n	8002c9a <HAL_GPIO_Init+0x222>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a50      	ldr	r2, [pc, #320]	; (8002d94 <HAL_GPIO_Init+0x31c>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d01f      	beq.n	8002c96 <HAL_GPIO_Init+0x21e>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a4f      	ldr	r2, [pc, #316]	; (8002d98 <HAL_GPIO_Init+0x320>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d019      	beq.n	8002c92 <HAL_GPIO_Init+0x21a>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a4e      	ldr	r2, [pc, #312]	; (8002d9c <HAL_GPIO_Init+0x324>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d013      	beq.n	8002c8e <HAL_GPIO_Init+0x216>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a4d      	ldr	r2, [pc, #308]	; (8002da0 <HAL_GPIO_Init+0x328>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d00d      	beq.n	8002c8a <HAL_GPIO_Init+0x212>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a4c      	ldr	r2, [pc, #304]	; (8002da4 <HAL_GPIO_Init+0x32c>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d007      	beq.n	8002c86 <HAL_GPIO_Init+0x20e>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a4b      	ldr	r2, [pc, #300]	; (8002da8 <HAL_GPIO_Init+0x330>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d101      	bne.n	8002c82 <HAL_GPIO_Init+0x20a>
 8002c7e:	2307      	movs	r3, #7
 8002c80:	e00e      	b.n	8002ca0 <HAL_GPIO_Init+0x228>
 8002c82:	2308      	movs	r3, #8
 8002c84:	e00c      	b.n	8002ca0 <HAL_GPIO_Init+0x228>
 8002c86:	2306      	movs	r3, #6
 8002c88:	e00a      	b.n	8002ca0 <HAL_GPIO_Init+0x228>
 8002c8a:	2305      	movs	r3, #5
 8002c8c:	e008      	b.n	8002ca0 <HAL_GPIO_Init+0x228>
 8002c8e:	2304      	movs	r3, #4
 8002c90:	e006      	b.n	8002ca0 <HAL_GPIO_Init+0x228>
 8002c92:	2303      	movs	r3, #3
 8002c94:	e004      	b.n	8002ca0 <HAL_GPIO_Init+0x228>
 8002c96:	2302      	movs	r3, #2
 8002c98:	e002      	b.n	8002ca0 <HAL_GPIO_Init+0x228>
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e000      	b.n	8002ca0 <HAL_GPIO_Init+0x228>
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	69fa      	ldr	r2, [r7, #28]
 8002ca2:	f002 0203 	and.w	r2, r2, #3
 8002ca6:	0092      	lsls	r2, r2, #2
 8002ca8:	4093      	lsls	r3, r2
 8002caa:	69ba      	ldr	r2, [r7, #24]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cb0:	4935      	ldr	r1, [pc, #212]	; (8002d88 <HAL_GPIO_Init+0x310>)
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	089b      	lsrs	r3, r3, #2
 8002cb6:	3302      	adds	r3, #2
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cbe:	4b3b      	ldr	r3, [pc, #236]	; (8002dac <HAL_GPIO_Init+0x334>)
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	43db      	mvns	r3, r3
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	4013      	ands	r3, r2
 8002ccc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d003      	beq.n	8002ce2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002cda:	69ba      	ldr	r2, [r7, #24]
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ce2:	4a32      	ldr	r2, [pc, #200]	; (8002dac <HAL_GPIO_Init+0x334>)
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ce8:	4b30      	ldr	r3, [pc, #192]	; (8002dac <HAL_GPIO_Init+0x334>)
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	43db      	mvns	r3, r3
 8002cf2:	69ba      	ldr	r2, [r7, #24]
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d003      	beq.n	8002d0c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002d04:	69ba      	ldr	r2, [r7, #24]
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d0c:	4a27      	ldr	r2, [pc, #156]	; (8002dac <HAL_GPIO_Init+0x334>)
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d12:	4b26      	ldr	r3, [pc, #152]	; (8002dac <HAL_GPIO_Init+0x334>)
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	43db      	mvns	r3, r3
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	4013      	ands	r3, r2
 8002d20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d003      	beq.n	8002d36 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002d2e:	69ba      	ldr	r2, [r7, #24]
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d36:	4a1d      	ldr	r2, [pc, #116]	; (8002dac <HAL_GPIO_Init+0x334>)
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d3c:	4b1b      	ldr	r3, [pc, #108]	; (8002dac <HAL_GPIO_Init+0x334>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	43db      	mvns	r3, r3
 8002d46:	69ba      	ldr	r2, [r7, #24]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d003      	beq.n	8002d60 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002d58:	69ba      	ldr	r2, [r7, #24]
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d60:	4a12      	ldr	r2, [pc, #72]	; (8002dac <HAL_GPIO_Init+0x334>)
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	3301      	adds	r3, #1
 8002d6a:	61fb      	str	r3, [r7, #28]
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	2b0f      	cmp	r3, #15
 8002d70:	f67f ae90 	bls.w	8002a94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d74:	bf00      	nop
 8002d76:	bf00      	nop
 8002d78:	3724      	adds	r7, #36	; 0x24
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	40023800 	.word	0x40023800
 8002d88:	40013800 	.word	0x40013800
 8002d8c:	40020000 	.word	0x40020000
 8002d90:	40020400 	.word	0x40020400
 8002d94:	40020800 	.word	0x40020800
 8002d98:	40020c00 	.word	0x40020c00
 8002d9c:	40021000 	.word	0x40021000
 8002da0:	40021400 	.word	0x40021400
 8002da4:	40021800 	.word	0x40021800
 8002da8:	40021c00 	.word	0x40021c00
 8002dac:	40013c00 	.word	0x40013c00

08002db0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b086      	sub	sp, #24
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d101      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e267      	b.n	8003292 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0301 	and.w	r3, r3, #1
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d075      	beq.n	8002eba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002dce:	4b88      	ldr	r3, [pc, #544]	; (8002ff0 <HAL_RCC_OscConfig+0x240>)
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f003 030c 	and.w	r3, r3, #12
 8002dd6:	2b04      	cmp	r3, #4
 8002dd8:	d00c      	beq.n	8002df4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dda:	4b85      	ldr	r3, [pc, #532]	; (8002ff0 <HAL_RCC_OscConfig+0x240>)
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002de2:	2b08      	cmp	r3, #8
 8002de4:	d112      	bne.n	8002e0c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002de6:	4b82      	ldr	r3, [pc, #520]	; (8002ff0 <HAL_RCC_OscConfig+0x240>)
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002df2:	d10b      	bne.n	8002e0c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002df4:	4b7e      	ldr	r3, [pc, #504]	; (8002ff0 <HAL_RCC_OscConfig+0x240>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d05b      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x108>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d157      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e242      	b.n	8003292 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e14:	d106      	bne.n	8002e24 <HAL_RCC_OscConfig+0x74>
 8002e16:	4b76      	ldr	r3, [pc, #472]	; (8002ff0 <HAL_RCC_OscConfig+0x240>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a75      	ldr	r2, [pc, #468]	; (8002ff0 <HAL_RCC_OscConfig+0x240>)
 8002e1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e20:	6013      	str	r3, [r2, #0]
 8002e22:	e01d      	b.n	8002e60 <HAL_RCC_OscConfig+0xb0>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e2c:	d10c      	bne.n	8002e48 <HAL_RCC_OscConfig+0x98>
 8002e2e:	4b70      	ldr	r3, [pc, #448]	; (8002ff0 <HAL_RCC_OscConfig+0x240>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a6f      	ldr	r2, [pc, #444]	; (8002ff0 <HAL_RCC_OscConfig+0x240>)
 8002e34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e38:	6013      	str	r3, [r2, #0]
 8002e3a:	4b6d      	ldr	r3, [pc, #436]	; (8002ff0 <HAL_RCC_OscConfig+0x240>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a6c      	ldr	r2, [pc, #432]	; (8002ff0 <HAL_RCC_OscConfig+0x240>)
 8002e40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e44:	6013      	str	r3, [r2, #0]
 8002e46:	e00b      	b.n	8002e60 <HAL_RCC_OscConfig+0xb0>
 8002e48:	4b69      	ldr	r3, [pc, #420]	; (8002ff0 <HAL_RCC_OscConfig+0x240>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a68      	ldr	r2, [pc, #416]	; (8002ff0 <HAL_RCC_OscConfig+0x240>)
 8002e4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e52:	6013      	str	r3, [r2, #0]
 8002e54:	4b66      	ldr	r3, [pc, #408]	; (8002ff0 <HAL_RCC_OscConfig+0x240>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a65      	ldr	r2, [pc, #404]	; (8002ff0 <HAL_RCC_OscConfig+0x240>)
 8002e5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d013      	beq.n	8002e90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e68:	f7fe fba8 	bl	80015bc <HAL_GetTick>
 8002e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e6e:	e008      	b.n	8002e82 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e70:	f7fe fba4 	bl	80015bc <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b64      	cmp	r3, #100	; 0x64
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e207      	b.n	8003292 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e82:	4b5b      	ldr	r3, [pc, #364]	; (8002ff0 <HAL_RCC_OscConfig+0x240>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d0f0      	beq.n	8002e70 <HAL_RCC_OscConfig+0xc0>
 8002e8e:	e014      	b.n	8002eba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e90:	f7fe fb94 	bl	80015bc <HAL_GetTick>
 8002e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e96:	e008      	b.n	8002eaa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e98:	f7fe fb90 	bl	80015bc <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b64      	cmp	r3, #100	; 0x64
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e1f3      	b.n	8003292 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eaa:	4b51      	ldr	r3, [pc, #324]	; (8002ff0 <HAL_RCC_OscConfig+0x240>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d1f0      	bne.n	8002e98 <HAL_RCC_OscConfig+0xe8>
 8002eb6:	e000      	b.n	8002eba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d063      	beq.n	8002f8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ec6:	4b4a      	ldr	r3, [pc, #296]	; (8002ff0 <HAL_RCC_OscConfig+0x240>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f003 030c 	and.w	r3, r3, #12
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00b      	beq.n	8002eea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ed2:	4b47      	ldr	r3, [pc, #284]	; (8002ff0 <HAL_RCC_OscConfig+0x240>)
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002eda:	2b08      	cmp	r3, #8
 8002edc:	d11c      	bne.n	8002f18 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ede:	4b44      	ldr	r3, [pc, #272]	; (8002ff0 <HAL_RCC_OscConfig+0x240>)
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d116      	bne.n	8002f18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eea:	4b41      	ldr	r3, [pc, #260]	; (8002ff0 <HAL_RCC_OscConfig+0x240>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0302 	and.w	r3, r3, #2
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d005      	beq.n	8002f02 <HAL_RCC_OscConfig+0x152>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d001      	beq.n	8002f02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e1c7      	b.n	8003292 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f02:	4b3b      	ldr	r3, [pc, #236]	; (8002ff0 <HAL_RCC_OscConfig+0x240>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	00db      	lsls	r3, r3, #3
 8002f10:	4937      	ldr	r1, [pc, #220]	; (8002ff0 <HAL_RCC_OscConfig+0x240>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f16:	e03a      	b.n	8002f8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d020      	beq.n	8002f62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f20:	4b34      	ldr	r3, [pc, #208]	; (8002ff4 <HAL_RCC_OscConfig+0x244>)
 8002f22:	2201      	movs	r2, #1
 8002f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f26:	f7fe fb49 	bl	80015bc <HAL_GetTick>
 8002f2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f2c:	e008      	b.n	8002f40 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f2e:	f7fe fb45 	bl	80015bc <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d901      	bls.n	8002f40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e1a8      	b.n	8003292 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f40:	4b2b      	ldr	r3, [pc, #172]	; (8002ff0 <HAL_RCC_OscConfig+0x240>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0302 	and.w	r3, r3, #2
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d0f0      	beq.n	8002f2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f4c:	4b28      	ldr	r3, [pc, #160]	; (8002ff0 <HAL_RCC_OscConfig+0x240>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	691b      	ldr	r3, [r3, #16]
 8002f58:	00db      	lsls	r3, r3, #3
 8002f5a:	4925      	ldr	r1, [pc, #148]	; (8002ff0 <HAL_RCC_OscConfig+0x240>)
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	600b      	str	r3, [r1, #0]
 8002f60:	e015      	b.n	8002f8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f62:	4b24      	ldr	r3, [pc, #144]	; (8002ff4 <HAL_RCC_OscConfig+0x244>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f68:	f7fe fb28 	bl	80015bc <HAL_GetTick>
 8002f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f6e:	e008      	b.n	8002f82 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f70:	f7fe fb24 	bl	80015bc <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d901      	bls.n	8002f82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e187      	b.n	8003292 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f82:	4b1b      	ldr	r3, [pc, #108]	; (8002ff0 <HAL_RCC_OscConfig+0x240>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d1f0      	bne.n	8002f70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0308 	and.w	r3, r3, #8
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d036      	beq.n	8003008 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d016      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fa2:	4b15      	ldr	r3, [pc, #84]	; (8002ff8 <HAL_RCC_OscConfig+0x248>)
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fa8:	f7fe fb08 	bl	80015bc <HAL_GetTick>
 8002fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fae:	e008      	b.n	8002fc2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fb0:	f7fe fb04 	bl	80015bc <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e167      	b.n	8003292 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fc2:	4b0b      	ldr	r3, [pc, #44]	; (8002ff0 <HAL_RCC_OscConfig+0x240>)
 8002fc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d0f0      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x200>
 8002fce:	e01b      	b.n	8003008 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fd0:	4b09      	ldr	r3, [pc, #36]	; (8002ff8 <HAL_RCC_OscConfig+0x248>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fd6:	f7fe faf1 	bl	80015bc <HAL_GetTick>
 8002fda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fdc:	e00e      	b.n	8002ffc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fde:	f7fe faed 	bl	80015bc <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d907      	bls.n	8002ffc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	e150      	b.n	8003292 <HAL_RCC_OscConfig+0x4e2>
 8002ff0:	40023800 	.word	0x40023800
 8002ff4:	42470000 	.word	0x42470000
 8002ff8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ffc:	4b88      	ldr	r3, [pc, #544]	; (8003220 <HAL_RCC_OscConfig+0x470>)
 8002ffe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003000:	f003 0302 	and.w	r3, r3, #2
 8003004:	2b00      	cmp	r3, #0
 8003006:	d1ea      	bne.n	8002fde <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0304 	and.w	r3, r3, #4
 8003010:	2b00      	cmp	r3, #0
 8003012:	f000 8097 	beq.w	8003144 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003016:	2300      	movs	r3, #0
 8003018:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800301a:	4b81      	ldr	r3, [pc, #516]	; (8003220 <HAL_RCC_OscConfig+0x470>)
 800301c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d10f      	bne.n	8003046 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003026:	2300      	movs	r3, #0
 8003028:	60bb      	str	r3, [r7, #8]
 800302a:	4b7d      	ldr	r3, [pc, #500]	; (8003220 <HAL_RCC_OscConfig+0x470>)
 800302c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302e:	4a7c      	ldr	r2, [pc, #496]	; (8003220 <HAL_RCC_OscConfig+0x470>)
 8003030:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003034:	6413      	str	r3, [r2, #64]	; 0x40
 8003036:	4b7a      	ldr	r3, [pc, #488]	; (8003220 <HAL_RCC_OscConfig+0x470>)
 8003038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800303e:	60bb      	str	r3, [r7, #8]
 8003040:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003042:	2301      	movs	r3, #1
 8003044:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003046:	4b77      	ldr	r3, [pc, #476]	; (8003224 <HAL_RCC_OscConfig+0x474>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800304e:	2b00      	cmp	r3, #0
 8003050:	d118      	bne.n	8003084 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003052:	4b74      	ldr	r3, [pc, #464]	; (8003224 <HAL_RCC_OscConfig+0x474>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a73      	ldr	r2, [pc, #460]	; (8003224 <HAL_RCC_OscConfig+0x474>)
 8003058:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800305c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800305e:	f7fe faad 	bl	80015bc <HAL_GetTick>
 8003062:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003064:	e008      	b.n	8003078 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003066:	f7fe faa9 	bl	80015bc <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	2b02      	cmp	r3, #2
 8003072:	d901      	bls.n	8003078 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	e10c      	b.n	8003292 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003078:	4b6a      	ldr	r3, [pc, #424]	; (8003224 <HAL_RCC_OscConfig+0x474>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003080:	2b00      	cmp	r3, #0
 8003082:	d0f0      	beq.n	8003066 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	2b01      	cmp	r3, #1
 800308a:	d106      	bne.n	800309a <HAL_RCC_OscConfig+0x2ea>
 800308c:	4b64      	ldr	r3, [pc, #400]	; (8003220 <HAL_RCC_OscConfig+0x470>)
 800308e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003090:	4a63      	ldr	r2, [pc, #396]	; (8003220 <HAL_RCC_OscConfig+0x470>)
 8003092:	f043 0301 	orr.w	r3, r3, #1
 8003096:	6713      	str	r3, [r2, #112]	; 0x70
 8003098:	e01c      	b.n	80030d4 <HAL_RCC_OscConfig+0x324>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	2b05      	cmp	r3, #5
 80030a0:	d10c      	bne.n	80030bc <HAL_RCC_OscConfig+0x30c>
 80030a2:	4b5f      	ldr	r3, [pc, #380]	; (8003220 <HAL_RCC_OscConfig+0x470>)
 80030a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a6:	4a5e      	ldr	r2, [pc, #376]	; (8003220 <HAL_RCC_OscConfig+0x470>)
 80030a8:	f043 0304 	orr.w	r3, r3, #4
 80030ac:	6713      	str	r3, [r2, #112]	; 0x70
 80030ae:	4b5c      	ldr	r3, [pc, #368]	; (8003220 <HAL_RCC_OscConfig+0x470>)
 80030b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030b2:	4a5b      	ldr	r2, [pc, #364]	; (8003220 <HAL_RCC_OscConfig+0x470>)
 80030b4:	f043 0301 	orr.w	r3, r3, #1
 80030b8:	6713      	str	r3, [r2, #112]	; 0x70
 80030ba:	e00b      	b.n	80030d4 <HAL_RCC_OscConfig+0x324>
 80030bc:	4b58      	ldr	r3, [pc, #352]	; (8003220 <HAL_RCC_OscConfig+0x470>)
 80030be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030c0:	4a57      	ldr	r2, [pc, #348]	; (8003220 <HAL_RCC_OscConfig+0x470>)
 80030c2:	f023 0301 	bic.w	r3, r3, #1
 80030c6:	6713      	str	r3, [r2, #112]	; 0x70
 80030c8:	4b55      	ldr	r3, [pc, #340]	; (8003220 <HAL_RCC_OscConfig+0x470>)
 80030ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030cc:	4a54      	ldr	r2, [pc, #336]	; (8003220 <HAL_RCC_OscConfig+0x470>)
 80030ce:	f023 0304 	bic.w	r3, r3, #4
 80030d2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d015      	beq.n	8003108 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030dc:	f7fe fa6e 	bl	80015bc <HAL_GetTick>
 80030e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030e2:	e00a      	b.n	80030fa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030e4:	f7fe fa6a 	bl	80015bc <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e0cb      	b.n	8003292 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030fa:	4b49      	ldr	r3, [pc, #292]	; (8003220 <HAL_RCC_OscConfig+0x470>)
 80030fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d0ee      	beq.n	80030e4 <HAL_RCC_OscConfig+0x334>
 8003106:	e014      	b.n	8003132 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003108:	f7fe fa58 	bl	80015bc <HAL_GetTick>
 800310c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800310e:	e00a      	b.n	8003126 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003110:	f7fe fa54 	bl	80015bc <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	f241 3288 	movw	r2, #5000	; 0x1388
 800311e:	4293      	cmp	r3, r2
 8003120:	d901      	bls.n	8003126 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e0b5      	b.n	8003292 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003126:	4b3e      	ldr	r3, [pc, #248]	; (8003220 <HAL_RCC_OscConfig+0x470>)
 8003128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800312a:	f003 0302 	and.w	r3, r3, #2
 800312e:	2b00      	cmp	r3, #0
 8003130:	d1ee      	bne.n	8003110 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003132:	7dfb      	ldrb	r3, [r7, #23]
 8003134:	2b01      	cmp	r3, #1
 8003136:	d105      	bne.n	8003144 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003138:	4b39      	ldr	r3, [pc, #228]	; (8003220 <HAL_RCC_OscConfig+0x470>)
 800313a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313c:	4a38      	ldr	r2, [pc, #224]	; (8003220 <HAL_RCC_OscConfig+0x470>)
 800313e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003142:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	2b00      	cmp	r3, #0
 800314a:	f000 80a1 	beq.w	8003290 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800314e:	4b34      	ldr	r3, [pc, #208]	; (8003220 <HAL_RCC_OscConfig+0x470>)
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f003 030c 	and.w	r3, r3, #12
 8003156:	2b08      	cmp	r3, #8
 8003158:	d05c      	beq.n	8003214 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	2b02      	cmp	r3, #2
 8003160:	d141      	bne.n	80031e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003162:	4b31      	ldr	r3, [pc, #196]	; (8003228 <HAL_RCC_OscConfig+0x478>)
 8003164:	2200      	movs	r2, #0
 8003166:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003168:	f7fe fa28 	bl	80015bc <HAL_GetTick>
 800316c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800316e:	e008      	b.n	8003182 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003170:	f7fe fa24 	bl	80015bc <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b02      	cmp	r3, #2
 800317c:	d901      	bls.n	8003182 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e087      	b.n	8003292 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003182:	4b27      	ldr	r3, [pc, #156]	; (8003220 <HAL_RCC_OscConfig+0x470>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1f0      	bne.n	8003170 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	69da      	ldr	r2, [r3, #28]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a1b      	ldr	r3, [r3, #32]
 8003196:	431a      	orrs	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319c:	019b      	lsls	r3, r3, #6
 800319e:	431a      	orrs	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a4:	085b      	lsrs	r3, r3, #1
 80031a6:	3b01      	subs	r3, #1
 80031a8:	041b      	lsls	r3, r3, #16
 80031aa:	431a      	orrs	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b0:	061b      	lsls	r3, r3, #24
 80031b2:	491b      	ldr	r1, [pc, #108]	; (8003220 <HAL_RCC_OscConfig+0x470>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031b8:	4b1b      	ldr	r3, [pc, #108]	; (8003228 <HAL_RCC_OscConfig+0x478>)
 80031ba:	2201      	movs	r2, #1
 80031bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031be:	f7fe f9fd 	bl	80015bc <HAL_GetTick>
 80031c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031c4:	e008      	b.n	80031d8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031c6:	f7fe f9f9 	bl	80015bc <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d901      	bls.n	80031d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	e05c      	b.n	8003292 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031d8:	4b11      	ldr	r3, [pc, #68]	; (8003220 <HAL_RCC_OscConfig+0x470>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d0f0      	beq.n	80031c6 <HAL_RCC_OscConfig+0x416>
 80031e4:	e054      	b.n	8003290 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031e6:	4b10      	ldr	r3, [pc, #64]	; (8003228 <HAL_RCC_OscConfig+0x478>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ec:	f7fe f9e6 	bl	80015bc <HAL_GetTick>
 80031f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031f2:	e008      	b.n	8003206 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031f4:	f7fe f9e2 	bl	80015bc <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e045      	b.n	8003292 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003206:	4b06      	ldr	r3, [pc, #24]	; (8003220 <HAL_RCC_OscConfig+0x470>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1f0      	bne.n	80031f4 <HAL_RCC_OscConfig+0x444>
 8003212:	e03d      	b.n	8003290 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	699b      	ldr	r3, [r3, #24]
 8003218:	2b01      	cmp	r3, #1
 800321a:	d107      	bne.n	800322c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e038      	b.n	8003292 <HAL_RCC_OscConfig+0x4e2>
 8003220:	40023800 	.word	0x40023800
 8003224:	40007000 	.word	0x40007000
 8003228:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800322c:	4b1b      	ldr	r3, [pc, #108]	; (800329c <HAL_RCC_OscConfig+0x4ec>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	2b01      	cmp	r3, #1
 8003238:	d028      	beq.n	800328c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003244:	429a      	cmp	r2, r3
 8003246:	d121      	bne.n	800328c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003252:	429a      	cmp	r2, r3
 8003254:	d11a      	bne.n	800328c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800325c:	4013      	ands	r3, r2
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003262:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003264:	4293      	cmp	r3, r2
 8003266:	d111      	bne.n	800328c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003272:	085b      	lsrs	r3, r3, #1
 8003274:	3b01      	subs	r3, #1
 8003276:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003278:	429a      	cmp	r2, r3
 800327a:	d107      	bne.n	800328c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003286:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003288:	429a      	cmp	r2, r3
 800328a:	d001      	beq.n	8003290 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e000      	b.n	8003292 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	3718      	adds	r7, #24
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	40023800 	.word	0x40023800

080032a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d101      	bne.n	80032b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e0cc      	b.n	800344e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032b4:	4b68      	ldr	r3, [pc, #416]	; (8003458 <HAL_RCC_ClockConfig+0x1b8>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0307 	and.w	r3, r3, #7
 80032bc:	683a      	ldr	r2, [r7, #0]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d90c      	bls.n	80032dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032c2:	4b65      	ldr	r3, [pc, #404]	; (8003458 <HAL_RCC_ClockConfig+0x1b8>)
 80032c4:	683a      	ldr	r2, [r7, #0]
 80032c6:	b2d2      	uxtb	r2, r2
 80032c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ca:	4b63      	ldr	r3, [pc, #396]	; (8003458 <HAL_RCC_ClockConfig+0x1b8>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0307 	and.w	r3, r3, #7
 80032d2:	683a      	ldr	r2, [r7, #0]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d001      	beq.n	80032dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e0b8      	b.n	800344e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0302 	and.w	r3, r3, #2
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d020      	beq.n	800332a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0304 	and.w	r3, r3, #4
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d005      	beq.n	8003300 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032f4:	4b59      	ldr	r3, [pc, #356]	; (800345c <HAL_RCC_ClockConfig+0x1bc>)
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	4a58      	ldr	r2, [pc, #352]	; (800345c <HAL_RCC_ClockConfig+0x1bc>)
 80032fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0308 	and.w	r3, r3, #8
 8003308:	2b00      	cmp	r3, #0
 800330a:	d005      	beq.n	8003318 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800330c:	4b53      	ldr	r3, [pc, #332]	; (800345c <HAL_RCC_ClockConfig+0x1bc>)
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	4a52      	ldr	r2, [pc, #328]	; (800345c <HAL_RCC_ClockConfig+0x1bc>)
 8003312:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003316:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003318:	4b50      	ldr	r3, [pc, #320]	; (800345c <HAL_RCC_ClockConfig+0x1bc>)
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	494d      	ldr	r1, [pc, #308]	; (800345c <HAL_RCC_ClockConfig+0x1bc>)
 8003326:	4313      	orrs	r3, r2
 8003328:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	2b00      	cmp	r3, #0
 8003334:	d044      	beq.n	80033c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	2b01      	cmp	r3, #1
 800333c:	d107      	bne.n	800334e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800333e:	4b47      	ldr	r3, [pc, #284]	; (800345c <HAL_RCC_ClockConfig+0x1bc>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d119      	bne.n	800337e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e07f      	b.n	800344e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	2b02      	cmp	r3, #2
 8003354:	d003      	beq.n	800335e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800335a:	2b03      	cmp	r3, #3
 800335c:	d107      	bne.n	800336e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800335e:	4b3f      	ldr	r3, [pc, #252]	; (800345c <HAL_RCC_ClockConfig+0x1bc>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d109      	bne.n	800337e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e06f      	b.n	800344e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800336e:	4b3b      	ldr	r3, [pc, #236]	; (800345c <HAL_RCC_ClockConfig+0x1bc>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d101      	bne.n	800337e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e067      	b.n	800344e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800337e:	4b37      	ldr	r3, [pc, #220]	; (800345c <HAL_RCC_ClockConfig+0x1bc>)
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f023 0203 	bic.w	r2, r3, #3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	4934      	ldr	r1, [pc, #208]	; (800345c <HAL_RCC_ClockConfig+0x1bc>)
 800338c:	4313      	orrs	r3, r2
 800338e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003390:	f7fe f914 	bl	80015bc <HAL_GetTick>
 8003394:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003396:	e00a      	b.n	80033ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003398:	f7fe f910 	bl	80015bc <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e04f      	b.n	800344e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ae:	4b2b      	ldr	r3, [pc, #172]	; (800345c <HAL_RCC_ClockConfig+0x1bc>)
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f003 020c 	and.w	r2, r3, #12
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	429a      	cmp	r2, r3
 80033be:	d1eb      	bne.n	8003398 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033c0:	4b25      	ldr	r3, [pc, #148]	; (8003458 <HAL_RCC_ClockConfig+0x1b8>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0307 	and.w	r3, r3, #7
 80033c8:	683a      	ldr	r2, [r7, #0]
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d20c      	bcs.n	80033e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ce:	4b22      	ldr	r3, [pc, #136]	; (8003458 <HAL_RCC_ClockConfig+0x1b8>)
 80033d0:	683a      	ldr	r2, [r7, #0]
 80033d2:	b2d2      	uxtb	r2, r2
 80033d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033d6:	4b20      	ldr	r3, [pc, #128]	; (8003458 <HAL_RCC_ClockConfig+0x1b8>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0307 	and.w	r3, r3, #7
 80033de:	683a      	ldr	r2, [r7, #0]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d001      	beq.n	80033e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e032      	b.n	800344e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0304 	and.w	r3, r3, #4
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d008      	beq.n	8003406 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033f4:	4b19      	ldr	r3, [pc, #100]	; (800345c <HAL_RCC_ClockConfig+0x1bc>)
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	4916      	ldr	r1, [pc, #88]	; (800345c <HAL_RCC_ClockConfig+0x1bc>)
 8003402:	4313      	orrs	r3, r2
 8003404:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0308 	and.w	r3, r3, #8
 800340e:	2b00      	cmp	r3, #0
 8003410:	d009      	beq.n	8003426 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003412:	4b12      	ldr	r3, [pc, #72]	; (800345c <HAL_RCC_ClockConfig+0x1bc>)
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	00db      	lsls	r3, r3, #3
 8003420:	490e      	ldr	r1, [pc, #56]	; (800345c <HAL_RCC_ClockConfig+0x1bc>)
 8003422:	4313      	orrs	r3, r2
 8003424:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003426:	f000 f821 	bl	800346c <HAL_RCC_GetSysClockFreq>
 800342a:	4602      	mov	r2, r0
 800342c:	4b0b      	ldr	r3, [pc, #44]	; (800345c <HAL_RCC_ClockConfig+0x1bc>)
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	091b      	lsrs	r3, r3, #4
 8003432:	f003 030f 	and.w	r3, r3, #15
 8003436:	490a      	ldr	r1, [pc, #40]	; (8003460 <HAL_RCC_ClockConfig+0x1c0>)
 8003438:	5ccb      	ldrb	r3, [r1, r3]
 800343a:	fa22 f303 	lsr.w	r3, r2, r3
 800343e:	4a09      	ldr	r2, [pc, #36]	; (8003464 <HAL_RCC_ClockConfig+0x1c4>)
 8003440:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003442:	4b09      	ldr	r3, [pc, #36]	; (8003468 <HAL_RCC_ClockConfig+0x1c8>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4618      	mov	r0, r3
 8003448:	f7fe f874 	bl	8001534 <HAL_InitTick>

  return HAL_OK;
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	3710      	adds	r7, #16
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	40023c00 	.word	0x40023c00
 800345c:	40023800 	.word	0x40023800
 8003460:	0800c660 	.word	0x0800c660
 8003464:	20000000 	.word	0x20000000
 8003468:	20000004 	.word	0x20000004

0800346c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800346c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003470:	b094      	sub	sp, #80	; 0x50
 8003472:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003474:	2300      	movs	r3, #0
 8003476:	647b      	str	r3, [r7, #68]	; 0x44
 8003478:	2300      	movs	r3, #0
 800347a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800347c:	2300      	movs	r3, #0
 800347e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003480:	2300      	movs	r3, #0
 8003482:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003484:	4b79      	ldr	r3, [pc, #484]	; (800366c <HAL_RCC_GetSysClockFreq+0x200>)
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f003 030c 	and.w	r3, r3, #12
 800348c:	2b08      	cmp	r3, #8
 800348e:	d00d      	beq.n	80034ac <HAL_RCC_GetSysClockFreq+0x40>
 8003490:	2b08      	cmp	r3, #8
 8003492:	f200 80e1 	bhi.w	8003658 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003496:	2b00      	cmp	r3, #0
 8003498:	d002      	beq.n	80034a0 <HAL_RCC_GetSysClockFreq+0x34>
 800349a:	2b04      	cmp	r3, #4
 800349c:	d003      	beq.n	80034a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800349e:	e0db      	b.n	8003658 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034a0:	4b73      	ldr	r3, [pc, #460]	; (8003670 <HAL_RCC_GetSysClockFreq+0x204>)
 80034a2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80034a4:	e0db      	b.n	800365e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034a6:	4b73      	ldr	r3, [pc, #460]	; (8003674 <HAL_RCC_GetSysClockFreq+0x208>)
 80034a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80034aa:	e0d8      	b.n	800365e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034ac:	4b6f      	ldr	r3, [pc, #444]	; (800366c <HAL_RCC_GetSysClockFreq+0x200>)
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034b4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034b6:	4b6d      	ldr	r3, [pc, #436]	; (800366c <HAL_RCC_GetSysClockFreq+0x200>)
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d063      	beq.n	800358a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034c2:	4b6a      	ldr	r3, [pc, #424]	; (800366c <HAL_RCC_GetSysClockFreq+0x200>)
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	099b      	lsrs	r3, r3, #6
 80034c8:	2200      	movs	r2, #0
 80034ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80034cc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80034ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034d4:	633b      	str	r3, [r7, #48]	; 0x30
 80034d6:	2300      	movs	r3, #0
 80034d8:	637b      	str	r3, [r7, #52]	; 0x34
 80034da:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80034de:	4622      	mov	r2, r4
 80034e0:	462b      	mov	r3, r5
 80034e2:	f04f 0000 	mov.w	r0, #0
 80034e6:	f04f 0100 	mov.w	r1, #0
 80034ea:	0159      	lsls	r1, r3, #5
 80034ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034f0:	0150      	lsls	r0, r2, #5
 80034f2:	4602      	mov	r2, r0
 80034f4:	460b      	mov	r3, r1
 80034f6:	4621      	mov	r1, r4
 80034f8:	1a51      	subs	r1, r2, r1
 80034fa:	6139      	str	r1, [r7, #16]
 80034fc:	4629      	mov	r1, r5
 80034fe:	eb63 0301 	sbc.w	r3, r3, r1
 8003502:	617b      	str	r3, [r7, #20]
 8003504:	f04f 0200 	mov.w	r2, #0
 8003508:	f04f 0300 	mov.w	r3, #0
 800350c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003510:	4659      	mov	r1, fp
 8003512:	018b      	lsls	r3, r1, #6
 8003514:	4651      	mov	r1, sl
 8003516:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800351a:	4651      	mov	r1, sl
 800351c:	018a      	lsls	r2, r1, #6
 800351e:	4651      	mov	r1, sl
 8003520:	ebb2 0801 	subs.w	r8, r2, r1
 8003524:	4659      	mov	r1, fp
 8003526:	eb63 0901 	sbc.w	r9, r3, r1
 800352a:	f04f 0200 	mov.w	r2, #0
 800352e:	f04f 0300 	mov.w	r3, #0
 8003532:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003536:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800353a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800353e:	4690      	mov	r8, r2
 8003540:	4699      	mov	r9, r3
 8003542:	4623      	mov	r3, r4
 8003544:	eb18 0303 	adds.w	r3, r8, r3
 8003548:	60bb      	str	r3, [r7, #8]
 800354a:	462b      	mov	r3, r5
 800354c:	eb49 0303 	adc.w	r3, r9, r3
 8003550:	60fb      	str	r3, [r7, #12]
 8003552:	f04f 0200 	mov.w	r2, #0
 8003556:	f04f 0300 	mov.w	r3, #0
 800355a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800355e:	4629      	mov	r1, r5
 8003560:	024b      	lsls	r3, r1, #9
 8003562:	4621      	mov	r1, r4
 8003564:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003568:	4621      	mov	r1, r4
 800356a:	024a      	lsls	r2, r1, #9
 800356c:	4610      	mov	r0, r2
 800356e:	4619      	mov	r1, r3
 8003570:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003572:	2200      	movs	r2, #0
 8003574:	62bb      	str	r3, [r7, #40]	; 0x28
 8003576:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003578:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800357c:	f7fc fe80 	bl	8000280 <__aeabi_uldivmod>
 8003580:	4602      	mov	r2, r0
 8003582:	460b      	mov	r3, r1
 8003584:	4613      	mov	r3, r2
 8003586:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003588:	e058      	b.n	800363c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800358a:	4b38      	ldr	r3, [pc, #224]	; (800366c <HAL_RCC_GetSysClockFreq+0x200>)
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	099b      	lsrs	r3, r3, #6
 8003590:	2200      	movs	r2, #0
 8003592:	4618      	mov	r0, r3
 8003594:	4611      	mov	r1, r2
 8003596:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800359a:	623b      	str	r3, [r7, #32]
 800359c:	2300      	movs	r3, #0
 800359e:	627b      	str	r3, [r7, #36]	; 0x24
 80035a0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80035a4:	4642      	mov	r2, r8
 80035a6:	464b      	mov	r3, r9
 80035a8:	f04f 0000 	mov.w	r0, #0
 80035ac:	f04f 0100 	mov.w	r1, #0
 80035b0:	0159      	lsls	r1, r3, #5
 80035b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035b6:	0150      	lsls	r0, r2, #5
 80035b8:	4602      	mov	r2, r0
 80035ba:	460b      	mov	r3, r1
 80035bc:	4641      	mov	r1, r8
 80035be:	ebb2 0a01 	subs.w	sl, r2, r1
 80035c2:	4649      	mov	r1, r9
 80035c4:	eb63 0b01 	sbc.w	fp, r3, r1
 80035c8:	f04f 0200 	mov.w	r2, #0
 80035cc:	f04f 0300 	mov.w	r3, #0
 80035d0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80035d4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80035d8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80035dc:	ebb2 040a 	subs.w	r4, r2, sl
 80035e0:	eb63 050b 	sbc.w	r5, r3, fp
 80035e4:	f04f 0200 	mov.w	r2, #0
 80035e8:	f04f 0300 	mov.w	r3, #0
 80035ec:	00eb      	lsls	r3, r5, #3
 80035ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035f2:	00e2      	lsls	r2, r4, #3
 80035f4:	4614      	mov	r4, r2
 80035f6:	461d      	mov	r5, r3
 80035f8:	4643      	mov	r3, r8
 80035fa:	18e3      	adds	r3, r4, r3
 80035fc:	603b      	str	r3, [r7, #0]
 80035fe:	464b      	mov	r3, r9
 8003600:	eb45 0303 	adc.w	r3, r5, r3
 8003604:	607b      	str	r3, [r7, #4]
 8003606:	f04f 0200 	mov.w	r2, #0
 800360a:	f04f 0300 	mov.w	r3, #0
 800360e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003612:	4629      	mov	r1, r5
 8003614:	028b      	lsls	r3, r1, #10
 8003616:	4621      	mov	r1, r4
 8003618:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800361c:	4621      	mov	r1, r4
 800361e:	028a      	lsls	r2, r1, #10
 8003620:	4610      	mov	r0, r2
 8003622:	4619      	mov	r1, r3
 8003624:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003626:	2200      	movs	r2, #0
 8003628:	61bb      	str	r3, [r7, #24]
 800362a:	61fa      	str	r2, [r7, #28]
 800362c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003630:	f7fc fe26 	bl	8000280 <__aeabi_uldivmod>
 8003634:	4602      	mov	r2, r0
 8003636:	460b      	mov	r3, r1
 8003638:	4613      	mov	r3, r2
 800363a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800363c:	4b0b      	ldr	r3, [pc, #44]	; (800366c <HAL_RCC_GetSysClockFreq+0x200>)
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	0c1b      	lsrs	r3, r3, #16
 8003642:	f003 0303 	and.w	r3, r3, #3
 8003646:	3301      	adds	r3, #1
 8003648:	005b      	lsls	r3, r3, #1
 800364a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800364c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800364e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003650:	fbb2 f3f3 	udiv	r3, r2, r3
 8003654:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003656:	e002      	b.n	800365e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003658:	4b05      	ldr	r3, [pc, #20]	; (8003670 <HAL_RCC_GetSysClockFreq+0x204>)
 800365a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800365c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800365e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003660:	4618      	mov	r0, r3
 8003662:	3750      	adds	r7, #80	; 0x50
 8003664:	46bd      	mov	sp, r7
 8003666:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800366a:	bf00      	nop
 800366c:	40023800 	.word	0x40023800
 8003670:	00f42400 	.word	0x00f42400
 8003674:	007a1200 	.word	0x007a1200

08003678 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003678:	b480      	push	{r7}
 800367a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800367c:	4b03      	ldr	r3, [pc, #12]	; (800368c <HAL_RCC_GetHCLKFreq+0x14>)
 800367e:	681b      	ldr	r3, [r3, #0]
}
 8003680:	4618      	mov	r0, r3
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr
 800368a:	bf00      	nop
 800368c:	20000000 	.word	0x20000000

08003690 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003694:	f7ff fff0 	bl	8003678 <HAL_RCC_GetHCLKFreq>
 8003698:	4602      	mov	r2, r0
 800369a:	4b05      	ldr	r3, [pc, #20]	; (80036b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	0a9b      	lsrs	r3, r3, #10
 80036a0:	f003 0307 	and.w	r3, r3, #7
 80036a4:	4903      	ldr	r1, [pc, #12]	; (80036b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036a6:	5ccb      	ldrb	r3, [r1, r3]
 80036a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	40023800 	.word	0x40023800
 80036b4:	0800c670 	.word	0x0800c670

080036b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80036bc:	f7ff ffdc 	bl	8003678 <HAL_RCC_GetHCLKFreq>
 80036c0:	4602      	mov	r2, r0
 80036c2:	4b05      	ldr	r3, [pc, #20]	; (80036d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	0b5b      	lsrs	r3, r3, #13
 80036c8:	f003 0307 	and.w	r3, r3, #7
 80036cc:	4903      	ldr	r1, [pc, #12]	; (80036dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80036ce:	5ccb      	ldrb	r3, [r1, r3]
 80036d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	40023800 	.word	0x40023800
 80036dc:	0800c670 	.word	0x0800c670

080036e0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d101      	bne.n	80036f2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e022      	b.n	8003738 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d105      	bne.n	800370a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f7fd fcdf 	bl	80010c8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2203      	movs	r2, #3
 800370e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f000 f814 	bl	8003740 <HAL_SD_InitCard>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d001      	beq.n	8003722 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e00a      	b.n	8003738 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2201      	movs	r2, #1
 8003732:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003736:	2300      	movs	r3, #0
}
 8003738:	4618      	mov	r0, r3
 800373a:	3708      	adds	r7, #8
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003740:	b5b0      	push	{r4, r5, r7, lr}
 8003742:	b08e      	sub	sp, #56	; 0x38
 8003744:	af04      	add	r7, sp, #16
 8003746:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8003748:	2300      	movs	r3, #0
 800374a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800374c:	2300      	movs	r3, #0
 800374e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003750:	2300      	movs	r3, #0
 8003752:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8003754:	2300      	movs	r3, #0
 8003756:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003758:	2300      	movs	r3, #0
 800375a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800375c:	2376      	movs	r3, #118	; 0x76
 800375e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681d      	ldr	r5, [r3, #0]
 8003764:	466c      	mov	r4, sp
 8003766:	f107 0314 	add.w	r3, r7, #20
 800376a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800376e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003772:	f107 0308 	add.w	r3, r7, #8
 8003776:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003778:	4628      	mov	r0, r5
 800377a:	f001 fea5 	bl	80054c8 <SDIO_Init>
 800377e:	4603      	mov	r3, r0
 8003780:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8003784:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003788:	2b00      	cmp	r3, #0
 800378a:	d001      	beq.n	8003790 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e04f      	b.n	8003830 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8003790:	4b29      	ldr	r3, [pc, #164]	; (8003838 <HAL_SD_InitCard+0xf8>)
 8003792:	2200      	movs	r2, #0
 8003794:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4618      	mov	r0, r3
 800379c:	f001 fedd 	bl	800555a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80037a0:	4b25      	ldr	r3, [pc, #148]	; (8003838 <HAL_SD_InitCard+0xf8>)
 80037a2:	2201      	movs	r2, #1
 80037a4:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80037a6:	2002      	movs	r0, #2
 80037a8:	f7fd ff14 	bl	80015d4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f001 f805 	bl	80047bc <SD_PowerON>
 80037b2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80037b4:	6a3b      	ldr	r3, [r7, #32]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00b      	beq.n	80037d2 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2201      	movs	r2, #1
 80037be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037c6:	6a3b      	ldr	r3, [r7, #32]
 80037c8:	431a      	orrs	r2, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e02e      	b.n	8003830 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 ff24 	bl	8004620 <SD_InitCard>
 80037d8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80037da:	6a3b      	ldr	r3, [r7, #32]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00b      	beq.n	80037f8 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037ec:	6a3b      	ldr	r3, [r7, #32]
 80037ee:	431a      	orrs	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e01b      	b.n	8003830 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003800:	4618      	mov	r0, r3
 8003802:	f001 ff3c 	bl	800567e <SDMMC_CmdBlockLength>
 8003806:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003808:	6a3b      	ldr	r3, [r7, #32]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d00f      	beq.n	800382e <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a0a      	ldr	r2, [pc, #40]	; (800383c <HAL_SD_InitCard+0xfc>)
 8003814:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800381a:	6a3b      	ldr	r3, [r7, #32]
 800381c:	431a      	orrs	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2201      	movs	r2, #1
 8003826:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e000      	b.n	8003830 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800382e:	2300      	movs	r3, #0
}
 8003830:	4618      	mov	r0, r3
 8003832:	3728      	adds	r7, #40	; 0x28
 8003834:	46bd      	mov	sp, r7
 8003836:	bdb0      	pop	{r4, r5, r7, pc}
 8003838:	422580a0 	.word	0x422580a0
 800383c:	004005ff 	.word	0x004005ff

08003840 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b08c      	sub	sp, #48	; 0x30
 8003844:	af00      	add	r7, sp, #0
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	607a      	str	r2, [r7, #4]
 800384c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d107      	bne.n	8003868 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800385c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e0c0      	b.n	80039ea <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800386e:	b2db      	uxtb	r3, r3
 8003870:	2b01      	cmp	r3, #1
 8003872:	f040 80b9 	bne.w	80039e8 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2200      	movs	r2, #0
 800387a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800387c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	441a      	add	r2, r3
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003886:	429a      	cmp	r2, r3
 8003888:	d907      	bls.n	800389a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800388e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e0a7      	b.n	80039ea <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2203      	movs	r2, #3
 800389e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2200      	movs	r2, #0
 80038a8:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038b0:	68fa      	ldr	r2, [r7, #12]
 80038b2:	6812      	ldr	r2, [r2, #0]
 80038b4:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 80038b8:	f043 0302 	orr.w	r3, r3, #2
 80038bc:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c2:	4a4c      	ldr	r2, [pc, #304]	; (80039f4 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 80038c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ca:	4a4b      	ldr	r2, [pc, #300]	; (80039f8 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80038cc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d2:	2200      	movs	r2, #0
 80038d4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038da:	2200      	movs	r2, #0
 80038dc:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ee:	689a      	ldr	r2, [r3, #8]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	430a      	orrs	r2, r1
 80038f8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	3380      	adds	r3, #128	; 0x80
 8003904:	4619      	mov	r1, r3
 8003906:	68ba      	ldr	r2, [r7, #8]
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	025b      	lsls	r3, r3, #9
 800390c:	089b      	lsrs	r3, r3, #2
 800390e:	f7fe fdc3 	bl	8002498 <HAL_DMA_Start_IT>
 8003912:	4603      	mov	r3, r0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d017      	beq.n	8003948 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8003926:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a33      	ldr	r2, [pc, #204]	; (80039fc <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800392e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003934:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e050      	b.n	80039ea <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8003948:	4b2d      	ldr	r3, [pc, #180]	; (8003a00 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800394a:	2201      	movs	r2, #1
 800394c:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003952:	2b01      	cmp	r3, #1
 8003954:	d002      	beq.n	800395c <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8003956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003958:	025b      	lsls	r3, r3, #9
 800395a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800395c:	f04f 33ff 	mov.w	r3, #4294967295
 8003960:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	025b      	lsls	r3, r3, #9
 8003966:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003968:	2390      	movs	r3, #144	; 0x90
 800396a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800396c:	2302      	movs	r3, #2
 800396e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003970:	2300      	movs	r3, #0
 8003972:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8003974:	2301      	movs	r3, #1
 8003976:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f107 0210 	add.w	r2, r7, #16
 8003980:	4611      	mov	r1, r2
 8003982:	4618      	mov	r0, r3
 8003984:	f001 fe4f 	bl	8005626 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	2b01      	cmp	r3, #1
 800398c:	d90a      	bls.n	80039a4 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2282      	movs	r2, #130	; 0x82
 8003992:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800399a:	4618      	mov	r0, r3
 800399c:	f001 feb3 	bl	8005706 <SDMMC_CmdReadMultiBlock>
 80039a0:	62f8      	str	r0, [r7, #44]	; 0x2c
 80039a2:	e009      	b.n	80039b8 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2281      	movs	r2, #129	; 0x81
 80039a8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80039b0:	4618      	mov	r0, r3
 80039b2:	f001 fe86 	bl	80056c2 <SDMMC_CmdReadSingleBlock>
 80039b6:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80039b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d012      	beq.n	80039e4 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a0e      	ldr	r2, [pc, #56]	; (80039fc <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80039c4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039cc:	431a      	orrs	r2, r3
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2201      	movs	r2, #1
 80039d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2200      	movs	r2, #0
 80039de:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e002      	b.n	80039ea <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 80039e4:	2300      	movs	r3, #0
 80039e6:	e000      	b.n	80039ea <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 80039e8:	2302      	movs	r3, #2
  }
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3730      	adds	r7, #48	; 0x30
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	0800442f 	.word	0x0800442f
 80039f8:	080044a1 	.word	0x080044a1
 80039fc:	004005ff 	.word	0x004005ff
 8003a00:	4225858c 	.word	0x4225858c

08003a04 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b08c      	sub	sp, #48	; 0x30
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	607a      	str	r2, [r7, #4]
 8003a10:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d107      	bne.n	8003a2c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a20:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e0c5      	b.n	8003bb8 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	f040 80be 	bne.w	8003bb6 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003a40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	441a      	add	r2, r3
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d907      	bls.n	8003a5e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a52:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e0ac      	b.n	8003bb8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2203      	movs	r2, #3
 8003a62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a74:	68fa      	ldr	r2, [r7, #12]
 8003a76:	6812      	ldr	r2, [r2, #0]
 8003a78:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8003a7c:	f043 0302 	orr.w	r3, r3, #2
 8003a80:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a86:	4a4e      	ldr	r2, [pc, #312]	; (8003bc0 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8003a88:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a8e:	4a4d      	ldr	r2, [pc, #308]	; (8003bc4 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8003a90:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a96:	2200      	movs	r2, #0
 8003a98:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d002      	beq.n	8003aa8 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8003aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa4:	025b      	lsls	r3, r3, #9
 8003aa6:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d90a      	bls.n	8003ac4 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	22a0      	movs	r2, #160	; 0xa0
 8003ab2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003aba:	4618      	mov	r0, r3
 8003abc:	f001 fe67 	bl	800578e <SDMMC_CmdWriteMultiBlock>
 8003ac0:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003ac2:	e009      	b.n	8003ad8 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2290      	movs	r2, #144	; 0x90
 8003ac8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f001 fe3a 	bl	800574a <SDMMC_CmdWriteSingleBlock>
 8003ad6:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d012      	beq.n	8003b04 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a39      	ldr	r2, [pc, #228]	; (8003bc8 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8003ae4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aec:	431a      	orrs	r2, r3
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2201      	movs	r2, #1
 8003af6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2200      	movs	r2, #0
 8003afe:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e059      	b.n	8003bb8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8003b04:	4b31      	ldr	r3, [pc, #196]	; (8003bcc <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8003b06:	2201      	movs	r2, #1
 8003b08:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b0e:	2240      	movs	r2, #64	; 0x40
 8003b10:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b22:	689a      	ldr	r2, [r3, #8]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	430a      	orrs	r2, r1
 8003b2c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003b32:	68b9      	ldr	r1, [r7, #8]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	3380      	adds	r3, #128	; 0x80
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	025b      	lsls	r3, r3, #9
 8003b40:	089b      	lsrs	r3, r3, #2
 8003b42:	f7fe fca9 	bl	8002498 <HAL_DMA_Start_IT>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d01c      	beq.n	8003b86 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b52:	68fa      	ldr	r2, [r7, #12]
 8003b54:	6812      	ldr	r2, [r2, #0]
 8003b56:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8003b5a:	f023 0302 	bic.w	r3, r3, #2
 8003b5e:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a18      	ldr	r2, [pc, #96]	; (8003bc8 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8003b66:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b6c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e018      	b.n	8003bb8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003b86:	f04f 33ff 	mov.w	r3, #4294967295
 8003b8a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	025b      	lsls	r3, r3, #9
 8003b90:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003b92:	2390      	movs	r3, #144	; 0x90
 8003b94:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8003b96:	2300      	movs	r3, #0
 8003b98:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f107 0210 	add.w	r2, r7, #16
 8003baa:	4611      	mov	r1, r2
 8003bac:	4618      	mov	r0, r3
 8003bae:	f001 fd3a 	bl	8005626 <SDIO_ConfigData>

      return HAL_OK;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	e000      	b.n	8003bb8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8003bb6:	2302      	movs	r3, #2
  }
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3730      	adds	r7, #48	; 0x30
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	08004405 	.word	0x08004405
 8003bc4:	080044a1 	.word	0x080044a1
 8003bc8:	004005ff 	.word	0x004005ff
 8003bcc:	4225858c 	.word	0x4225858c

08003bd0 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bdc:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003be4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d008      	beq.n	8003bfe <HAL_SD_IRQHandler+0x2e>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f003 0308 	and.w	r3, r3, #8
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d003      	beq.n	8003bfe <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 ffff 	bl	8004bfa <SD_Read_IT>
 8003bfc:	e165      	b.n	8003eca <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	f000 808f 	beq.w	8003d2c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c16:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	6812      	ldr	r2, [r2, #0]
 8003c22:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8003c26:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8003c2a:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f022 0201 	bic.w	r2, r2, #1
 8003c3a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f003 0308 	and.w	r3, r3, #8
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d039      	beq.n	8003cba <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f003 0302 	and.w	r3, r3, #2
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d104      	bne.n	8003c5a <HAL_SD_IRQHandler+0x8a>
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f003 0320 	and.w	r3, r3, #32
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d011      	beq.n	8003c7e <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f001 fdb8 	bl	80057d4 <SDMMC_CmdStopTransfer>
 8003c64:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d008      	beq.n	8003c7e <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	431a      	orrs	r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f000 f92f 	bl	8003edc <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f240 523a 	movw	r2, #1338	; 0x53a
 8003c86:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f003 0301 	and.w	r3, r3, #1
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d104      	bne.n	8003caa <HAL_SD_IRQHandler+0xda>
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d003      	beq.n	8003cb2 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f002 fa10 	bl	80060d0 <HAL_SD_RxCpltCallback>
 8003cb0:	e10b      	b.n	8003eca <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f002 fa02 	bl	80060bc <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003cb8:	e107      	b.n	8003eca <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	f000 8102 	beq.w	8003eca <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	f003 0320 	and.w	r3, r3, #32
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d011      	beq.n	8003cf4 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f001 fd7d 	bl	80057d4 <SDMMC_CmdStopTransfer>
 8003cda:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d008      	beq.n	8003cf4 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	431a      	orrs	r2, r3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 f8f4 	bl	8003edc <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f003 0301 	and.w	r3, r3, #1
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	f040 80e5 	bne.w	8003eca <HAL_SD_IRQHandler+0x2fa>
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	f040 80df 	bne.w	8003eca <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f022 0208 	bic.w	r2, r2, #8
 8003d1a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f002 f9c9 	bl	80060bc <HAL_SD_TxCpltCallback>
}
 8003d2a:	e0ce      	b.n	8003eca <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d008      	beq.n	8003d4c <HAL_SD_IRQHandler+0x17c>
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f003 0308 	and.w	r3, r3, #8
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d003      	beq.n	8003d4c <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f000 ffa9 	bl	8004c9c <SD_Write_IT>
 8003d4a:	e0be      	b.n	8003eca <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d52:	f240 233a 	movw	r3, #570	; 0x23a
 8003d56:	4013      	ands	r3, r2
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	f000 80b6 	beq.w	8003eca <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d64:	f003 0302 	and.w	r3, r3, #2
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d005      	beq.n	8003d78 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d70:	f043 0202 	orr.w	r2, r3, #2
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d7e:	f003 0308 	and.w	r3, r3, #8
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d005      	beq.n	8003d92 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d8a:	f043 0208 	orr.w	r2, r3, #8
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d98:	f003 0320 	and.w	r3, r3, #32
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d005      	beq.n	8003dac <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da4:	f043 0220 	orr.w	r2, r3, #32
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003db2:	f003 0310 	and.w	r3, r3, #16
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d005      	beq.n	8003dc6 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dbe:	f043 0210 	orr.w	r2, r3, #16
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d005      	beq.n	8003de0 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd8:	f043 0208 	orr.w	r2, r3, #8
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f240 723a 	movw	r2, #1850	; 0x73a
 8003de8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	6812      	ldr	r2, [r2, #0]
 8003df4:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8003df8:	f023 0302 	bic.w	r3, r3, #2
 8003dfc:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4618      	mov	r0, r3
 8003e04:	f001 fce6 	bl	80057d4 <SDMMC_CmdStopTransfer>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e0e:	431a      	orrs	r2, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f003 0308 	and.w	r3, r3, #8
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00a      	beq.n	8003e34 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2201      	movs	r2, #1
 8003e22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f000 f855 	bl	8003edc <HAL_SD_ErrorCallback>
}
 8003e32:	e04a      	b.n	8003eca <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d045      	beq.n	8003eca <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f003 0310 	and.w	r3, r3, #16
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d104      	bne.n	8003e52 <HAL_SD_IRQHandler+0x282>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f003 0320 	and.w	r3, r3, #32
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d011      	beq.n	8003e76 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e56:	4a1f      	ldr	r2, [pc, #124]	; (8003ed4 <HAL_SD_IRQHandler+0x304>)
 8003e58:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7fe fb72 	bl	8002548 <HAL_DMA_Abort_IT>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d02f      	beq.n	8003eca <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f000 fb68 	bl	8004544 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003e74:	e029      	b.n	8003eca <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f003 0301 	and.w	r3, r3, #1
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d104      	bne.n	8003e8a <HAL_SD_IRQHandler+0x2ba>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f003 0302 	and.w	r3, r3, #2
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d011      	beq.n	8003eae <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8e:	4a12      	ldr	r2, [pc, #72]	; (8003ed8 <HAL_SD_IRQHandler+0x308>)
 8003e90:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7fe fb56 	bl	8002548 <HAL_DMA_Abort_IT>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d013      	beq.n	8003eca <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f000 fb83 	bl	80045b2 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003eac:	e00d      	b.n	8003eca <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f002 f8f0 	bl	80060a8 <HAL_SD_AbortCallback>
}
 8003ec8:	e7ff      	b.n	8003eca <HAL_SD_IRQHandler+0x2fa>
 8003eca:	bf00      	nop
 8003ecc:	3710      	adds	r7, #16
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	08004545 	.word	0x08004545
 8003ed8:	080045b3 	.word	0x080045b3

08003edc <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8003ee4:	bf00      	nop
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003efe:	0f9b      	lsrs	r3, r3, #30
 8003f00:	b2da      	uxtb	r2, r3
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f0a:	0e9b      	lsrs	r3, r3, #26
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	f003 030f 	and.w	r3, r3, #15
 8003f12:	b2da      	uxtb	r2, r3
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f1c:	0e1b      	lsrs	r3, r3, #24
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	f003 0303 	and.w	r3, r3, #3
 8003f24:	b2da      	uxtb	r2, r3
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f2e:	0c1b      	lsrs	r3, r3, #16
 8003f30:	b2da      	uxtb	r2, r3
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f3a:	0a1b      	lsrs	r3, r3, #8
 8003f3c:	b2da      	uxtb	r2, r3
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f46:	b2da      	uxtb	r2, r3
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f50:	0d1b      	lsrs	r3, r3, #20
 8003f52:	b29a      	uxth	r2, r3
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f5c:	0c1b      	lsrs	r3, r3, #16
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	f003 030f 	and.w	r3, r3, #15
 8003f64:	b2da      	uxtb	r2, r3
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f6e:	0bdb      	lsrs	r3, r3, #15
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	f003 0301 	and.w	r3, r3, #1
 8003f76:	b2da      	uxtb	r2, r3
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f80:	0b9b      	lsrs	r3, r3, #14
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	f003 0301 	and.w	r3, r3, #1
 8003f88:	b2da      	uxtb	r2, r3
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f92:	0b5b      	lsrs	r3, r3, #13
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	f003 0301 	and.w	r3, r3, #1
 8003f9a:	b2da      	uxtb	r2, r3
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fa4:	0b1b      	lsrs	r3, r3, #12
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	f003 0301 	and.w	r3, r3, #1
 8003fac:	b2da      	uxtb	r2, r3
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d163      	bne.n	8004088 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fc4:	009a      	lsls	r2, r3, #2
 8003fc6:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003fca:	4013      	ands	r3, r2
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003fd0:	0f92      	lsrs	r2, r2, #30
 8003fd2:	431a      	orrs	r2, r3
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fdc:	0edb      	lsrs	r3, r3, #27
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	f003 0307 	and.w	r3, r3, #7
 8003fe4:	b2da      	uxtb	r2, r3
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fee:	0e1b      	lsrs	r3, r3, #24
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	f003 0307 	and.w	r3, r3, #7
 8003ff6:	b2da      	uxtb	r2, r3
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004000:	0d5b      	lsrs	r3, r3, #21
 8004002:	b2db      	uxtb	r3, r3
 8004004:	f003 0307 	and.w	r3, r3, #7
 8004008:	b2da      	uxtb	r2, r3
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004012:	0c9b      	lsrs	r3, r3, #18
 8004014:	b2db      	uxtb	r3, r3
 8004016:	f003 0307 	and.w	r3, r3, #7
 800401a:	b2da      	uxtb	r2, r3
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004024:	0bdb      	lsrs	r3, r3, #15
 8004026:	b2db      	uxtb	r3, r3
 8004028:	f003 0307 	and.w	r3, r3, #7
 800402c:	b2da      	uxtb	r2, r3
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	1c5a      	adds	r2, r3, #1
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	7e1b      	ldrb	r3, [r3, #24]
 8004040:	b2db      	uxtb	r3, r3
 8004042:	f003 0307 	and.w	r3, r3, #7
 8004046:	3302      	adds	r3, #2
 8004048:	2201      	movs	r2, #1
 800404a:	fa02 f303 	lsl.w	r3, r2, r3
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004052:	fb03 f202 	mul.w	r2, r3, r2
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	7a1b      	ldrb	r3, [r3, #8]
 800405e:	b2db      	uxtb	r3, r3
 8004060:	f003 030f 	and.w	r3, r3, #15
 8004064:	2201      	movs	r2, #1
 8004066:	409a      	lsls	r2, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004074:	0a52      	lsrs	r2, r2, #9
 8004076:	fb03 f202 	mul.w	r2, r3, r2
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004084:	661a      	str	r2, [r3, #96]	; 0x60
 8004086:	e031      	b.n	80040ec <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800408c:	2b01      	cmp	r3, #1
 800408e:	d11d      	bne.n	80040cc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004094:	041b      	lsls	r3, r3, #16
 8004096:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800409e:	0c1b      	lsrs	r3, r3, #16
 80040a0:	431a      	orrs	r2, r3
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	3301      	adds	r3, #1
 80040ac:	029a      	lsls	r2, r3, #10
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040c0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	661a      	str	r2, [r3, #96]	; 0x60
 80040ca:	e00f      	b.n	80040ec <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a58      	ldr	r2, [pc, #352]	; (8004234 <HAL_SD_GetCardCSD+0x344>)
 80040d2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e09d      	b.n	8004228 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040f0:	0b9b      	lsrs	r3, r3, #14
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	f003 0301 	and.w	r3, r3, #1
 80040f8:	b2da      	uxtb	r2, r3
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004102:	09db      	lsrs	r3, r3, #7
 8004104:	b2db      	uxtb	r3, r3
 8004106:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800410a:	b2da      	uxtb	r2, r3
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004114:	b2db      	uxtb	r3, r3
 8004116:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800411a:	b2da      	uxtb	r2, r3
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004124:	0fdb      	lsrs	r3, r3, #31
 8004126:	b2da      	uxtb	r2, r3
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004130:	0f5b      	lsrs	r3, r3, #29
 8004132:	b2db      	uxtb	r3, r3
 8004134:	f003 0303 	and.w	r3, r3, #3
 8004138:	b2da      	uxtb	r2, r3
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004142:	0e9b      	lsrs	r3, r3, #26
 8004144:	b2db      	uxtb	r3, r3
 8004146:	f003 0307 	and.w	r3, r3, #7
 800414a:	b2da      	uxtb	r2, r3
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004154:	0d9b      	lsrs	r3, r3, #22
 8004156:	b2db      	uxtb	r3, r3
 8004158:	f003 030f 	and.w	r3, r3, #15
 800415c:	b2da      	uxtb	r2, r3
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004166:	0d5b      	lsrs	r3, r3, #21
 8004168:	b2db      	uxtb	r3, r3
 800416a:	f003 0301 	and.w	r3, r3, #1
 800416e:	b2da      	uxtb	r2, r3
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	2200      	movs	r2, #0
 800417a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004182:	0c1b      	lsrs	r3, r3, #16
 8004184:	b2db      	uxtb	r3, r3
 8004186:	f003 0301 	and.w	r3, r3, #1
 800418a:	b2da      	uxtb	r2, r3
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004196:	0bdb      	lsrs	r3, r3, #15
 8004198:	b2db      	uxtb	r3, r3
 800419a:	f003 0301 	and.w	r3, r3, #1
 800419e:	b2da      	uxtb	r2, r3
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041aa:	0b9b      	lsrs	r3, r3, #14
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	f003 0301 	and.w	r3, r3, #1
 80041b2:	b2da      	uxtb	r2, r3
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041be:	0b5b      	lsrs	r3, r3, #13
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	f003 0301 	and.w	r3, r3, #1
 80041c6:	b2da      	uxtb	r2, r3
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041d2:	0b1b      	lsrs	r3, r3, #12
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	f003 0301 	and.w	r3, r3, #1
 80041da:	b2da      	uxtb	r2, r3
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e6:	0a9b      	lsrs	r3, r3, #10
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	f003 0303 	and.w	r3, r3, #3
 80041ee:	b2da      	uxtb	r2, r3
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041fa:	0a1b      	lsrs	r3, r3, #8
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	f003 0303 	and.w	r3, r3, #3
 8004202:	b2da      	uxtb	r2, r3
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800420e:	085b      	lsrs	r3, r3, #1
 8004210:	b2db      	uxtb	r3, r3
 8004212:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004216:	b2da      	uxtb	r2, r3
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	2201      	movs	r2, #1
 8004222:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8004226:	2300      	movs	r3, #0
}
 8004228:	4618      	mov	r0, r3
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr
 8004234:	004005ff 	.word	0x004005ff

08004238 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8004282:	2300      	movs	r3, #0
}
 8004284:	4618      	mov	r0, r3
 8004286:	370c      	adds	r7, #12
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8004290:	b5b0      	push	{r4, r5, r7, lr}
 8004292:	b08e      	sub	sp, #56	; 0x38
 8004294:	af04      	add	r7, sp, #16
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800429a:	2300      	movs	r3, #0
 800429c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2203      	movs	r2, #3
 80042a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ac:	2b03      	cmp	r3, #3
 80042ae:	d02e      	beq.n	800430e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042b6:	d106      	bne.n	80042c6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042bc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	639a      	str	r2, [r3, #56]	; 0x38
 80042c4:	e029      	b.n	800431a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042cc:	d10a      	bne.n	80042e4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 fb2a 	bl	8004928 <SD_WideBus_Enable>
 80042d4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042da:	6a3b      	ldr	r3, [r7, #32]
 80042dc:	431a      	orrs	r2, r3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	639a      	str	r2, [r3, #56]	; 0x38
 80042e2:	e01a      	b.n	800431a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d10a      	bne.n	8004300 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 fb67 	bl	80049be <SD_WideBus_Disable>
 80042f0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042f6:	6a3b      	ldr	r3, [r7, #32]
 80042f8:	431a      	orrs	r2, r3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	639a      	str	r2, [r3, #56]	; 0x38
 80042fe:	e00c      	b.n	800431a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004304:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	639a      	str	r2, [r3, #56]	; 0x38
 800430c:	e005      	b.n	800431a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004312:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800431e:	2b00      	cmp	r3, #0
 8004320:	d00b      	beq.n	800433a <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a26      	ldr	r2, [pc, #152]	; (80043c0 <HAL_SD_ConfigWideBusOperation+0x130>)
 8004328:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2201      	movs	r2, #1
 800432e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004338:	e01f      	b.n	800437a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	695b      	ldr	r3, [r3, #20]
 8004354:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681d      	ldr	r5, [r3, #0]
 8004360:	466c      	mov	r4, sp
 8004362:	f107 0314 	add.w	r3, r7, #20
 8004366:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800436a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800436e:	f107 0308 	add.w	r3, r7, #8
 8004372:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004374:	4628      	mov	r0, r5
 8004376:	f001 f8a7 	bl	80054c8 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004382:	4618      	mov	r0, r3
 8004384:	f001 f97b 	bl	800567e <SDMMC_CmdBlockLength>
 8004388:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800438a:	6a3b      	ldr	r3, [r7, #32]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d00c      	beq.n	80043aa <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a0a      	ldr	r2, [pc, #40]	; (80043c0 <HAL_SD_ConfigWideBusOperation+0x130>)
 8004396:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800439c:	6a3b      	ldr	r3, [r7, #32]
 800439e:	431a      	orrs	r2, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2201      	movs	r2, #1
 80043ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80043b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3728      	adds	r7, #40	; 0x28
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bdb0      	pop	{r4, r5, r7, pc}
 80043be:	bf00      	nop
 80043c0:	004005ff 	.word	0x004005ff

080043c4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b086      	sub	sp, #24
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80043cc:	2300      	movs	r3, #0
 80043ce:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80043d0:	f107 030c 	add.w	r3, r7, #12
 80043d4:	4619      	mov	r1, r3
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 fa7e 	bl	80048d8 <SD_SendStatus>
 80043dc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d005      	beq.n	80043f0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	431a      	orrs	r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	0a5b      	lsrs	r3, r3, #9
 80043f4:	f003 030f 	and.w	r3, r3, #15
 80043f8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80043fa:	693b      	ldr	r3, [r7, #16]
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3718      	adds	r7, #24
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004404:	b480      	push	{r7}
 8004406:	b085      	sub	sp, #20
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004410:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004420:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004422:	bf00      	nop
 8004424:	3714      	adds	r7, #20
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr

0800442e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800442e:	b580      	push	{r7, lr}
 8004430:	b084      	sub	sp, #16
 8004432:	af00      	add	r7, sp, #0
 8004434:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800443a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004440:	2b82      	cmp	r3, #130	; 0x82
 8004442:	d111      	bne.n	8004468 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4618      	mov	r0, r3
 800444a:	f001 f9c3 	bl	80057d4 <SDMMC_CmdStopTransfer>
 800444e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d008      	beq.n	8004468 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	431a      	orrs	r2, r3
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8004462:	68f8      	ldr	r0, [r7, #12]
 8004464:	f7ff fd3a 	bl	8003edc <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f022 0208 	bic.w	r2, r2, #8
 8004476:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f240 523a 	movw	r2, #1338	; 0x53a
 8004480:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2201      	movs	r2, #1
 8004486:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2200      	movs	r2, #0
 800448e:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8004490:	68f8      	ldr	r0, [r7, #12]
 8004492:	f001 fe1d 	bl	80060d0 <HAL_SD_RxCpltCallback>
#endif
}
 8004496:	bf00      	nop
 8004498:	3710      	adds	r7, #16
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
	...

080044a0 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b086      	sub	sp, #24
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ac:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f7fe f9f6 	bl	80028a0 <HAL_DMA_GetError>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d03e      	beq.n	8004538 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044c0:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044c8:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d002      	beq.n	80044d6 <SD_DMAError+0x36>
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d12d      	bne.n	8004532 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a19      	ldr	r2, [pc, #100]	; (8004540 <SD_DMAError+0xa0>)
 80044dc:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80044ec:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80044fa:	6978      	ldr	r0, [r7, #20]
 80044fc:	f7ff ff62 	bl	80043c4 <HAL_SD_GetCardState>
 8004500:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	2b06      	cmp	r3, #6
 8004506:	d002      	beq.n	800450e <SD_DMAError+0x6e>
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	2b05      	cmp	r3, #5
 800450c:	d10a      	bne.n	8004524 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4618      	mov	r0, r3
 8004514:	f001 f95e 	bl	80057d4 <SDMMC_CmdStopTransfer>
 8004518:	4602      	mov	r2, r0
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800451e:	431a      	orrs	r2, r3
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	2200      	movs	r2, #0
 8004530:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8004532:	6978      	ldr	r0, [r7, #20]
 8004534:	f7ff fcd2 	bl	8003edc <HAL_SD_ErrorCallback>
#endif
  }
}
 8004538:	bf00      	nop
 800453a:	3718      	adds	r7, #24
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}
 8004540:	004005ff 	.word	0x004005ff

08004544 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004550:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f240 523a 	movw	r2, #1338	; 0x53a
 800455a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800455c:	68f8      	ldr	r0, [r7, #12]
 800455e:	f7ff ff31 	bl	80043c4 <HAL_SD_GetCardState>
 8004562:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2200      	movs	r2, #0
 8004570:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	2b06      	cmp	r3, #6
 8004576:	d002      	beq.n	800457e <SD_DMATxAbort+0x3a>
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	2b05      	cmp	r3, #5
 800457c:	d10a      	bne.n	8004594 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4618      	mov	r0, r3
 8004584:	f001 f926 	bl	80057d4 <SDMMC_CmdStopTransfer>
 8004588:	4602      	mov	r2, r0
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800458e:	431a      	orrs	r2, r3
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004598:	2b00      	cmp	r3, #0
 800459a:	d103      	bne.n	80045a4 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800459c:	68f8      	ldr	r0, [r7, #12]
 800459e:	f001 fd83 	bl	80060a8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80045a2:	e002      	b.n	80045aa <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80045a4:	68f8      	ldr	r0, [r7, #12]
 80045a6:	f7ff fc99 	bl	8003edc <HAL_SD_ErrorCallback>
}
 80045aa:	bf00      	nop
 80045ac:	3710      	adds	r7, #16
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}

080045b2 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80045b2:	b580      	push	{r7, lr}
 80045b4:	b084      	sub	sp, #16
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045be:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f240 523a 	movw	r2, #1338	; 0x53a
 80045c8:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80045ca:	68f8      	ldr	r0, [r7, #12]
 80045cc:	f7ff fefa 	bl	80043c4 <HAL_SD_GetCardState>
 80045d0:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2201      	movs	r2, #1
 80045d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2200      	movs	r2, #0
 80045de:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	2b06      	cmp	r3, #6
 80045e4:	d002      	beq.n	80045ec <SD_DMARxAbort+0x3a>
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	2b05      	cmp	r3, #5
 80045ea:	d10a      	bne.n	8004602 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4618      	mov	r0, r3
 80045f2:	f001 f8ef 	bl	80057d4 <SDMMC_CmdStopTransfer>
 80045f6:	4602      	mov	r2, r0
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045fc:	431a      	orrs	r2, r3
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004606:	2b00      	cmp	r3, #0
 8004608:	d103      	bne.n	8004612 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800460a:	68f8      	ldr	r0, [r7, #12]
 800460c:	f001 fd4c 	bl	80060a8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004610:	e002      	b.n	8004618 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	f7ff fc62 	bl	8003edc <HAL_SD_ErrorCallback>
}
 8004618:	bf00      	nop
 800461a:	3710      	adds	r7, #16
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}

08004620 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004620:	b5b0      	push	{r4, r5, r7, lr}
 8004622:	b094      	sub	sp, #80	; 0x50
 8004624:	af04      	add	r7, sp, #16
 8004626:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004628:	2301      	movs	r3, #1
 800462a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4618      	mov	r0, r3
 8004632:	f000 ffa0 	bl	8005576 <SDIO_GetPowerState>
 8004636:	4603      	mov	r3, r0
 8004638:	2b00      	cmp	r3, #0
 800463a:	d102      	bne.n	8004642 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800463c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004640:	e0b8      	b.n	80047b4 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004646:	2b03      	cmp	r3, #3
 8004648:	d02f      	beq.n	80046aa <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4618      	mov	r0, r3
 8004650:	f001 f9ca 	bl	80059e8 <SDMMC_CmdSendCID>
 8004654:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004658:	2b00      	cmp	r3, #0
 800465a:	d001      	beq.n	8004660 <SD_InitCard+0x40>
    {
      return errorstate;
 800465c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800465e:	e0a9      	b.n	80047b4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2100      	movs	r1, #0
 8004666:	4618      	mov	r0, r3
 8004668:	f000 ffca 	bl	8005600 <SDIO_GetResponse>
 800466c:	4602      	mov	r2, r0
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	2104      	movs	r1, #4
 8004678:	4618      	mov	r0, r3
 800467a:	f000 ffc1 	bl	8005600 <SDIO_GetResponse>
 800467e:	4602      	mov	r2, r0
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2108      	movs	r1, #8
 800468a:	4618      	mov	r0, r3
 800468c:	f000 ffb8 	bl	8005600 <SDIO_GetResponse>
 8004690:	4602      	mov	r2, r0
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	210c      	movs	r1, #12
 800469c:	4618      	mov	r0, r3
 800469e:	f000 ffaf 	bl	8005600 <SDIO_GetResponse>
 80046a2:	4602      	mov	r2, r0
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ae:	2b03      	cmp	r3, #3
 80046b0:	d00d      	beq.n	80046ce <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f107 020e 	add.w	r2, r7, #14
 80046ba:	4611      	mov	r1, r2
 80046bc:	4618      	mov	r0, r3
 80046be:	f001 f9d0 	bl	8005a62 <SDMMC_CmdSetRelAdd>
 80046c2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80046c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d001      	beq.n	80046ce <SD_InitCard+0xae>
    {
      return errorstate;
 80046ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046cc:	e072      	b.n	80047b4 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046d2:	2b03      	cmp	r3, #3
 80046d4:	d036      	beq.n	8004744 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80046d6:	89fb      	ldrh	r3, [r7, #14]
 80046d8:	461a      	mov	r2, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046e6:	041b      	lsls	r3, r3, #16
 80046e8:	4619      	mov	r1, r3
 80046ea:	4610      	mov	r0, r2
 80046ec:	f001 f99a 	bl	8005a24 <SDMMC_CmdSendCSD>
 80046f0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80046f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d001      	beq.n	80046fc <SD_InitCard+0xdc>
    {
      return errorstate;
 80046f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046fa:	e05b      	b.n	80047b4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2100      	movs	r1, #0
 8004702:	4618      	mov	r0, r3
 8004704:	f000 ff7c 	bl	8005600 <SDIO_GetResponse>
 8004708:	4602      	mov	r2, r0
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	2104      	movs	r1, #4
 8004714:	4618      	mov	r0, r3
 8004716:	f000 ff73 	bl	8005600 <SDIO_GetResponse>
 800471a:	4602      	mov	r2, r0
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	2108      	movs	r1, #8
 8004726:	4618      	mov	r0, r3
 8004728:	f000 ff6a 	bl	8005600 <SDIO_GetResponse>
 800472c:	4602      	mov	r2, r0
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	210c      	movs	r1, #12
 8004738:	4618      	mov	r0, r3
 800473a:	f000 ff61 	bl	8005600 <SDIO_GetResponse>
 800473e:	4602      	mov	r2, r0
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2104      	movs	r1, #4
 800474a:	4618      	mov	r0, r3
 800474c:	f000 ff58 	bl	8005600 <SDIO_GetResponse>
 8004750:	4603      	mov	r3, r0
 8004752:	0d1a      	lsrs	r2, r3, #20
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004758:	f107 0310 	add.w	r3, r7, #16
 800475c:	4619      	mov	r1, r3
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f7ff fbc6 	bl	8003ef0 <HAL_SD_GetCardCSD>
 8004764:	4603      	mov	r3, r0
 8004766:	2b00      	cmp	r3, #0
 8004768:	d002      	beq.n	8004770 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800476a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800476e:	e021      	b.n	80047b4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6819      	ldr	r1, [r3, #0]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004778:	041b      	lsls	r3, r3, #16
 800477a:	2200      	movs	r2, #0
 800477c:	461c      	mov	r4, r3
 800477e:	4615      	mov	r5, r2
 8004780:	4622      	mov	r2, r4
 8004782:	462b      	mov	r3, r5
 8004784:	4608      	mov	r0, r1
 8004786:	f001 f847 	bl	8005818 <SDMMC_CmdSelDesel>
 800478a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800478c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800478e:	2b00      	cmp	r3, #0
 8004790:	d001      	beq.n	8004796 <SD_InitCard+0x176>
  {
    return errorstate;
 8004792:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004794:	e00e      	b.n	80047b4 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681d      	ldr	r5, [r3, #0]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	466c      	mov	r4, sp
 800479e:	f103 0210 	add.w	r2, r3, #16
 80047a2:	ca07      	ldmia	r2, {r0, r1, r2}
 80047a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80047a8:	3304      	adds	r3, #4
 80047aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80047ac:	4628      	mov	r0, r5
 80047ae:	f000 fe8b 	bl	80054c8 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3740      	adds	r7, #64	; 0x40
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bdb0      	pop	{r4, r5, r7, pc}

080047bc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b086      	sub	sp, #24
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80047c4:	2300      	movs	r3, #0
 80047c6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80047c8:	2300      	movs	r3, #0
 80047ca:	617b      	str	r3, [r7, #20]
 80047cc:	2300      	movs	r3, #0
 80047ce:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4618      	mov	r0, r3
 80047d6:	f001 f842 	bl	800585e <SDMMC_CmdGoIdleState>
 80047da:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d001      	beq.n	80047e6 <SD_PowerON+0x2a>
  {
    return errorstate;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	e072      	b.n	80048cc <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4618      	mov	r0, r3
 80047ec:	f001 f855 	bl	800589a <SDMMC_CmdOperCond>
 80047f0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d00d      	beq.n	8004814 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4618      	mov	r0, r3
 8004804:	f001 f82b 	bl	800585e <SDMMC_CmdGoIdleState>
 8004808:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d004      	beq.n	800481a <SD_PowerON+0x5e>
    {
      return errorstate;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	e05b      	b.n	80048cc <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800481e:	2b01      	cmp	r3, #1
 8004820:	d137      	bne.n	8004892 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	2100      	movs	r1, #0
 8004828:	4618      	mov	r0, r3
 800482a:	f001 f855 	bl	80058d8 <SDMMC_CmdAppCommand>
 800482e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d02d      	beq.n	8004892 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004836:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800483a:	e047      	b.n	80048cc <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2100      	movs	r1, #0
 8004842:	4618      	mov	r0, r3
 8004844:	f001 f848 	bl	80058d8 <SDMMC_CmdAppCommand>
 8004848:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d001      	beq.n	8004854 <SD_PowerON+0x98>
    {
      return errorstate;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	e03b      	b.n	80048cc <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	491e      	ldr	r1, [pc, #120]	; (80048d4 <SD_PowerON+0x118>)
 800485a:	4618      	mov	r0, r3
 800485c:	f001 f85e 	bl	800591c <SDMMC_CmdAppOperCommand>
 8004860:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d002      	beq.n	800486e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004868:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800486c:	e02e      	b.n	80048cc <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2100      	movs	r1, #0
 8004874:	4618      	mov	r0, r3
 8004876:	f000 fec3 	bl	8005600 <SDIO_GetResponse>
 800487a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	0fdb      	lsrs	r3, r3, #31
 8004880:	2b01      	cmp	r3, #1
 8004882:	d101      	bne.n	8004888 <SD_PowerON+0xcc>
 8004884:	2301      	movs	r3, #1
 8004886:	e000      	b.n	800488a <SD_PowerON+0xce>
 8004888:	2300      	movs	r3, #0
 800488a:	613b      	str	r3, [r7, #16]

    count++;
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	3301      	adds	r3, #1
 8004890:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004898:	4293      	cmp	r3, r2
 800489a:	d802      	bhi.n	80048a2 <SD_PowerON+0xe6>
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d0cc      	beq.n	800483c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d902      	bls.n	80048b2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80048ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80048b0:	e00c      	b.n	80048cc <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d003      	beq.n	80048c4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	645a      	str	r2, [r3, #68]	; 0x44
 80048c2:	e002      	b.n	80048ca <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80048ca:	2300      	movs	r3, #0
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3718      	adds	r7, #24
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	c1100000 	.word	0xc1100000

080048d8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d102      	bne.n	80048ee <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80048e8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80048ec:	e018      	b.n	8004920 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048f6:	041b      	lsls	r3, r3, #16
 80048f8:	4619      	mov	r1, r3
 80048fa:	4610      	mov	r0, r2
 80048fc:	f001 f8d2 	bl	8005aa4 <SDMMC_CmdSendStatus>
 8004900:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d001      	beq.n	800490c <SD_SendStatus+0x34>
  {
    return errorstate;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	e009      	b.n	8004920 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2100      	movs	r1, #0
 8004912:	4618      	mov	r0, r3
 8004914:	f000 fe74 	bl	8005600 <SDIO_GetResponse>
 8004918:	4602      	mov	r2, r0
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800491e:	2300      	movs	r3, #0
}
 8004920:	4618      	mov	r0, r3
 8004922:	3710      	adds	r7, #16
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b086      	sub	sp, #24
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004930:	2300      	movs	r3, #0
 8004932:	60fb      	str	r3, [r7, #12]
 8004934:	2300      	movs	r3, #0
 8004936:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2100      	movs	r1, #0
 800493e:	4618      	mov	r0, r3
 8004940:	f000 fe5e 	bl	8005600 <SDIO_GetResponse>
 8004944:	4603      	mov	r3, r0
 8004946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800494a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800494e:	d102      	bne.n	8004956 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004950:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004954:	e02f      	b.n	80049b6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004956:	f107 030c 	add.w	r3, r7, #12
 800495a:	4619      	mov	r1, r3
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f000 f879 	bl	8004a54 <SD_FindSCR>
 8004962:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d001      	beq.n	800496e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	e023      	b.n	80049b6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004974:	2b00      	cmp	r3, #0
 8004976:	d01c      	beq.n	80049b2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004980:	041b      	lsls	r3, r3, #16
 8004982:	4619      	mov	r1, r3
 8004984:	4610      	mov	r0, r2
 8004986:	f000 ffa7 	bl	80058d8 <SDMMC_CmdAppCommand>
 800498a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d001      	beq.n	8004996 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	e00f      	b.n	80049b6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2102      	movs	r1, #2
 800499c:	4618      	mov	r0, r3
 800499e:	f000 ffe0 	bl	8005962 <SDMMC_CmdBusWidth>
 80049a2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d001      	beq.n	80049ae <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	e003      	b.n	80049b6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80049ae:	2300      	movs	r3, #0
 80049b0:	e001      	b.n	80049b6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80049b2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3718      	adds	r7, #24
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}

080049be <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80049be:	b580      	push	{r7, lr}
 80049c0:	b086      	sub	sp, #24
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80049c6:	2300      	movs	r3, #0
 80049c8:	60fb      	str	r3, [r7, #12]
 80049ca:	2300      	movs	r3, #0
 80049cc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2100      	movs	r1, #0
 80049d4:	4618      	mov	r0, r3
 80049d6:	f000 fe13 	bl	8005600 <SDIO_GetResponse>
 80049da:	4603      	mov	r3, r0
 80049dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80049e4:	d102      	bne.n	80049ec <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80049e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80049ea:	e02f      	b.n	8004a4c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80049ec:	f107 030c 	add.w	r3, r7, #12
 80049f0:	4619      	mov	r1, r3
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 f82e 	bl	8004a54 <SD_FindSCR>
 80049f8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d001      	beq.n	8004a04 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	e023      	b.n	8004a4c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d01c      	beq.n	8004a48 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a16:	041b      	lsls	r3, r3, #16
 8004a18:	4619      	mov	r1, r3
 8004a1a:	4610      	mov	r0, r2
 8004a1c:	f000 ff5c 	bl	80058d8 <SDMMC_CmdAppCommand>
 8004a20:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d001      	beq.n	8004a2c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	e00f      	b.n	8004a4c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2100      	movs	r1, #0
 8004a32:	4618      	mov	r0, r3
 8004a34:	f000 ff95 	bl	8005962 <SDMMC_CmdBusWidth>
 8004a38:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d001      	beq.n	8004a44 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	e003      	b.n	8004a4c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004a44:	2300      	movs	r3, #0
 8004a46:	e001      	b.n	8004a4c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004a48:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3718      	adds	r7, #24
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}

08004a54 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004a54:	b590      	push	{r4, r7, lr}
 8004a56:	b08f      	sub	sp, #60	; 0x3c
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004a5e:	f7fc fdad 	bl	80015bc <HAL_GetTick>
 8004a62:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8004a64:	2300      	movs	r3, #0
 8004a66:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8004a68:	2300      	movs	r3, #0
 8004a6a:	60bb      	str	r3, [r7, #8]
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2108      	movs	r1, #8
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f000 fdff 	bl	800567e <SDMMC_CmdBlockLength>
 8004a80:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d001      	beq.n	8004a8c <SD_FindSCR+0x38>
  {
    return errorstate;
 8004a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8a:	e0b2      	b.n	8004bf2 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a94:	041b      	lsls	r3, r3, #16
 8004a96:	4619      	mov	r1, r3
 8004a98:	4610      	mov	r0, r2
 8004a9a:	f000 ff1d 	bl	80058d8 <SDMMC_CmdAppCommand>
 8004a9e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d001      	beq.n	8004aaa <SD_FindSCR+0x56>
  {
    return errorstate;
 8004aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa8:	e0a3      	b.n	8004bf2 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8004aae:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8004ab0:	2308      	movs	r3, #8
 8004ab2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8004ab4:	2330      	movs	r3, #48	; 0x30
 8004ab6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004ab8:	2302      	movs	r3, #2
 8004aba:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004abc:	2300      	movs	r3, #0
 8004abe:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f107 0210 	add.w	r2, r7, #16
 8004acc:	4611      	mov	r1, r2
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f000 fda9 	bl	8005626 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f000 ff64 	bl	80059a6 <SDMMC_CmdSendSCR>
 8004ade:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d02a      	beq.n	8004b3c <SD_FindSCR+0xe8>
  {
    return errorstate;
 8004ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae8:	e083      	b.n	8004bf2 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004af0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d00f      	beq.n	8004b18 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6819      	ldr	r1, [r3, #0]
 8004afc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	f107 0208 	add.w	r2, r7, #8
 8004b04:	18d4      	adds	r4, r2, r3
 8004b06:	4608      	mov	r0, r1
 8004b08:	f000 fd09 	bl	800551e <SDIO_ReadFIFO>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	6023      	str	r3, [r4, #0]
      index++;
 8004b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b12:	3301      	adds	r3, #1
 8004b14:	637b      	str	r3, [r7, #52]	; 0x34
 8004b16:	e006      	b.n	8004b26 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d012      	beq.n	8004b4c <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004b26:	f7fc fd49 	bl	80015bc <HAL_GetTick>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b34:	d102      	bne.n	8004b3c <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8004b36:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004b3a:	e05a      	b.n	8004bf2 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b42:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d0cf      	beq.n	8004aea <SD_FindSCR+0x96>
 8004b4a:	e000      	b.n	8004b4e <SD_FindSCR+0xfa>
      break;
 8004b4c:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b54:	f003 0308 	and.w	r3, r3, #8
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d005      	beq.n	8004b68 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	2208      	movs	r2, #8
 8004b62:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004b64:	2308      	movs	r3, #8
 8004b66:	e044      	b.n	8004bf2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b6e:	f003 0302 	and.w	r3, r3, #2
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d005      	beq.n	8004b82 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	2202      	movs	r2, #2
 8004b7c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004b7e:	2302      	movs	r3, #2
 8004b80:	e037      	b.n	8004bf2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b88:	f003 0320 	and.w	r3, r3, #32
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d005      	beq.n	8004b9c <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	2220      	movs	r2, #32
 8004b96:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8004b98:	2320      	movs	r3, #32
 8004b9a:	e02a      	b.n	8004bf2 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f240 523a 	movw	r2, #1338	; 0x53a
 8004ba4:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	061a      	lsls	r2, r3, #24
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	021b      	lsls	r3, r3, #8
 8004bae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004bb2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	0a1b      	lsrs	r3, r3, #8
 8004bb8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004bbc:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	0e1b      	lsrs	r3, r3, #24
 8004bc2:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc6:	601a      	str	r2, [r3, #0]
    scr++;
 8004bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bca:	3304      	adds	r3, #4
 8004bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	061a      	lsls	r2, r3, #24
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	021b      	lsls	r3, r3, #8
 8004bd6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004bda:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	0a1b      	lsrs	r3, r3, #8
 8004be0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004be4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	0e1b      	lsrs	r3, r3, #24
 8004bea:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bee:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8004bf0:	2300      	movs	r3, #0
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	373c      	adds	r7, #60	; 0x3c
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd90      	pop	{r4, r7, pc}

08004bfa <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8004bfa:	b580      	push	{r7, lr}
 8004bfc:	b086      	sub	sp, #24
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c06:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c0c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d03f      	beq.n	8004c94 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8004c14:	2300      	movs	r3, #0
 8004c16:	617b      	str	r3, [r7, #20]
 8004c18:	e033      	b.n	8004c82 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f000 fc7d 	bl	800551e <SDIO_ReadFIFO>
 8004c24:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	b2da      	uxtb	r2, r3
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	3301      	adds	r3, #1
 8004c32:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	3b01      	subs	r3, #1
 8004c38:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	0a1b      	lsrs	r3, r3, #8
 8004c3e:	b2da      	uxtb	r2, r3
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	3301      	adds	r3, #1
 8004c48:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	3b01      	subs	r3, #1
 8004c4e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	0c1b      	lsrs	r3, r3, #16
 8004c54:	b2da      	uxtb	r2, r3
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	3301      	adds	r3, #1
 8004c5e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	3b01      	subs	r3, #1
 8004c64:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	0e1b      	lsrs	r3, r3, #24
 8004c6a:	b2da      	uxtb	r2, r3
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	3301      	adds	r3, #1
 8004c74:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	3b01      	subs	r3, #1
 8004c7a:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	3301      	adds	r3, #1
 8004c80:	617b      	str	r3, [r7, #20]
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	2b07      	cmp	r3, #7
 8004c86:	d9c8      	bls.n	8004c1a <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	68fa      	ldr	r2, [r7, #12]
 8004c8c:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	693a      	ldr	r2, [r7, #16]
 8004c92:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8004c94:	bf00      	nop
 8004c96:	3718      	adds	r7, #24
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b086      	sub	sp, #24
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6a1b      	ldr	r3, [r3, #32]
 8004ca8:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cae:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d043      	beq.n	8004d3e <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	617b      	str	r3, [r7, #20]
 8004cba:	e037      	b.n	8004d2c <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	3301      	adds	r3, #1
 8004cc6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	021a      	lsls	r2, r3, #8
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	3301      	adds	r3, #1
 8004cde:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	041a      	lsls	r2, r3, #16
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	3301      	adds	r3, #1
 8004cf6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	3b01      	subs	r3, #1
 8004cfc:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	061a      	lsls	r2, r3, #24
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	3301      	adds	r3, #1
 8004d0e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	3b01      	subs	r3, #1
 8004d14:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f107 0208 	add.w	r2, r7, #8
 8004d1e:	4611      	mov	r1, r2
 8004d20:	4618      	mov	r0, r3
 8004d22:	f000 fc09 	bl	8005538 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	3301      	adds	r3, #1
 8004d2a:	617b      	str	r3, [r7, #20]
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	2b07      	cmp	r3, #7
 8004d30:	d9c4      	bls.n	8004cbc <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	68fa      	ldr	r2, [r7, #12]
 8004d36:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	693a      	ldr	r2, [r7, #16]
 8004d3c:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8004d3e:	bf00      	nop
 8004d40:	3718      	adds	r7, #24
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}

08004d46 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d46:	b580      	push	{r7, lr}
 8004d48:	b082      	sub	sp, #8
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d101      	bne.n	8004d58 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e03f      	b.n	8004dd8 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d106      	bne.n	8004d72 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f7fc fa9b 	bl	80012a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2224      	movs	r2, #36	; 0x24
 8004d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	68da      	ldr	r2, [r3, #12]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d88:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f000 f928 	bl	8004fe0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	691a      	ldr	r2, [r3, #16]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d9e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	695a      	ldr	r2, [r3, #20]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004dae:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	68da      	ldr	r2, [r3, #12]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004dbe:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2220      	movs	r2, #32
 8004dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2220      	movs	r2, #32
 8004dd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004dd6:	2300      	movs	r3, #0
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3708      	adds	r7, #8
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b08a      	sub	sp, #40	; 0x28
 8004de4:	af02      	add	r7, sp, #8
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	603b      	str	r3, [r7, #0]
 8004dec:	4613      	mov	r3, r2
 8004dee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004df0:	2300      	movs	r3, #0
 8004df2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	2b20      	cmp	r3, #32
 8004dfe:	d17c      	bne.n	8004efa <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d002      	beq.n	8004e0c <HAL_UART_Transmit+0x2c>
 8004e06:	88fb      	ldrh	r3, [r7, #6]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d101      	bne.n	8004e10 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e075      	b.n	8004efc <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d101      	bne.n	8004e1e <HAL_UART_Transmit+0x3e>
 8004e1a:	2302      	movs	r3, #2
 8004e1c:	e06e      	b.n	8004efc <HAL_UART_Transmit+0x11c>
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2201      	movs	r2, #1
 8004e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2221      	movs	r2, #33	; 0x21
 8004e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e34:	f7fc fbc2 	bl	80015bc <HAL_GetTick>
 8004e38:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	88fa      	ldrh	r2, [r7, #6]
 8004e3e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	88fa      	ldrh	r2, [r7, #6]
 8004e44:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e4e:	d108      	bne.n	8004e62 <HAL_UART_Transmit+0x82>
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	691b      	ldr	r3, [r3, #16]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d104      	bne.n	8004e62 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	61bb      	str	r3, [r7, #24]
 8004e60:	e003      	b.n	8004e6a <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e66:	2300      	movs	r3, #0
 8004e68:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004e72:	e02a      	b.n	8004eca <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	9300      	str	r3, [sp, #0]
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	2180      	movs	r1, #128	; 0x80
 8004e7e:	68f8      	ldr	r0, [r7, #12]
 8004e80:	f000 f840 	bl	8004f04 <UART_WaitOnFlagUntilTimeout>
 8004e84:	4603      	mov	r3, r0
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d001      	beq.n	8004e8e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e036      	b.n	8004efc <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d10b      	bne.n	8004eac <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	881b      	ldrh	r3, [r3, #0]
 8004e98:	461a      	mov	r2, r3
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ea2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	3302      	adds	r3, #2
 8004ea8:	61bb      	str	r3, [r7, #24]
 8004eaa:	e007      	b.n	8004ebc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	781a      	ldrb	r2, [r3, #0]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	3301      	adds	r3, #1
 8004eba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	3b01      	subs	r3, #1
 8004ec4:	b29a      	uxth	r2, r3
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d1cf      	bne.n	8004e74 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	9300      	str	r3, [sp, #0]
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	2200      	movs	r2, #0
 8004edc:	2140      	movs	r1, #64	; 0x40
 8004ede:	68f8      	ldr	r0, [r7, #12]
 8004ee0:	f000 f810 	bl	8004f04 <UART_WaitOnFlagUntilTimeout>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d001      	beq.n	8004eee <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e006      	b.n	8004efc <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2220      	movs	r2, #32
 8004ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	e000      	b.n	8004efc <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004efa:	2302      	movs	r3, #2
  }
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3720      	adds	r7, #32
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}

08004f04 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b090      	sub	sp, #64	; 0x40
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	603b      	str	r3, [r7, #0]
 8004f10:	4613      	mov	r3, r2
 8004f12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f14:	e050      	b.n	8004fb8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f1c:	d04c      	beq.n	8004fb8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004f1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d007      	beq.n	8004f34 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f24:	f7fc fb4a 	bl	80015bc <HAL_GetTick>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d241      	bcs.n	8004fb8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	330c      	adds	r3, #12
 8004f3a:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f3e:	e853 3f00 	ldrex	r3, [r3]
 8004f42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f46:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	330c      	adds	r3, #12
 8004f52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004f54:	637a      	str	r2, [r7, #52]	; 0x34
 8004f56:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f5c:	e841 2300 	strex	r3, r2, [r1]
 8004f60:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d1e5      	bne.n	8004f34 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	3314      	adds	r3, #20
 8004f6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	e853 3f00 	ldrex	r3, [r3]
 8004f76:	613b      	str	r3, [r7, #16]
   return(result);
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	f023 0301 	bic.w	r3, r3, #1
 8004f7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	3314      	adds	r3, #20
 8004f86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f88:	623a      	str	r2, [r7, #32]
 8004f8a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f8c:	69f9      	ldr	r1, [r7, #28]
 8004f8e:	6a3a      	ldr	r2, [r7, #32]
 8004f90:	e841 2300 	strex	r3, r2, [r1]
 8004f94:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d1e5      	bne.n	8004f68 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2220      	movs	r2, #32
 8004fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2220      	movs	r2, #32
 8004fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	e00f      	b.n	8004fd8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	68ba      	ldr	r2, [r7, #8]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	bf0c      	ite	eq
 8004fc8:	2301      	moveq	r3, #1
 8004fca:	2300      	movne	r3, #0
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	461a      	mov	r2, r3
 8004fd0:	79fb      	ldrb	r3, [r7, #7]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d09f      	beq.n	8004f16 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004fd6:	2300      	movs	r3, #0
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3740      	adds	r7, #64	; 0x40
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fe0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fe4:	b0c0      	sub	sp, #256	; 0x100
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	691b      	ldr	r3, [r3, #16]
 8004ff4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ffc:	68d9      	ldr	r1, [r3, #12]
 8004ffe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	ea40 0301 	orr.w	r3, r0, r1
 8005008:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800500a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800500e:	689a      	ldr	r2, [r3, #8]
 8005010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	431a      	orrs	r2, r3
 8005018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800501c:	695b      	ldr	r3, [r3, #20]
 800501e:	431a      	orrs	r2, r3
 8005020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005024:	69db      	ldr	r3, [r3, #28]
 8005026:	4313      	orrs	r3, r2
 8005028:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800502c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005038:	f021 010c 	bic.w	r1, r1, #12
 800503c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005046:	430b      	orrs	r3, r1
 8005048:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800504a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	695b      	ldr	r3, [r3, #20]
 8005052:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800505a:	6999      	ldr	r1, [r3, #24]
 800505c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	ea40 0301 	orr.w	r3, r0, r1
 8005066:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	4b8f      	ldr	r3, [pc, #572]	; (80052ac <UART_SetConfig+0x2cc>)
 8005070:	429a      	cmp	r2, r3
 8005072:	d005      	beq.n	8005080 <UART_SetConfig+0xa0>
 8005074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	4b8d      	ldr	r3, [pc, #564]	; (80052b0 <UART_SetConfig+0x2d0>)
 800507c:	429a      	cmp	r2, r3
 800507e:	d104      	bne.n	800508a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005080:	f7fe fb1a 	bl	80036b8 <HAL_RCC_GetPCLK2Freq>
 8005084:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005088:	e003      	b.n	8005092 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800508a:	f7fe fb01 	bl	8003690 <HAL_RCC_GetPCLK1Freq>
 800508e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005096:	69db      	ldr	r3, [r3, #28]
 8005098:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800509c:	f040 810c 	bne.w	80052b8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80050a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050a4:	2200      	movs	r2, #0
 80050a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80050aa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80050ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80050b2:	4622      	mov	r2, r4
 80050b4:	462b      	mov	r3, r5
 80050b6:	1891      	adds	r1, r2, r2
 80050b8:	65b9      	str	r1, [r7, #88]	; 0x58
 80050ba:	415b      	adcs	r3, r3
 80050bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80050c2:	4621      	mov	r1, r4
 80050c4:	eb12 0801 	adds.w	r8, r2, r1
 80050c8:	4629      	mov	r1, r5
 80050ca:	eb43 0901 	adc.w	r9, r3, r1
 80050ce:	f04f 0200 	mov.w	r2, #0
 80050d2:	f04f 0300 	mov.w	r3, #0
 80050d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80050da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80050de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80050e2:	4690      	mov	r8, r2
 80050e4:	4699      	mov	r9, r3
 80050e6:	4623      	mov	r3, r4
 80050e8:	eb18 0303 	adds.w	r3, r8, r3
 80050ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80050f0:	462b      	mov	r3, r5
 80050f2:	eb49 0303 	adc.w	r3, r9, r3
 80050f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80050fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005106:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800510a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800510e:	460b      	mov	r3, r1
 8005110:	18db      	adds	r3, r3, r3
 8005112:	653b      	str	r3, [r7, #80]	; 0x50
 8005114:	4613      	mov	r3, r2
 8005116:	eb42 0303 	adc.w	r3, r2, r3
 800511a:	657b      	str	r3, [r7, #84]	; 0x54
 800511c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005120:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005124:	f7fb f8ac 	bl	8000280 <__aeabi_uldivmod>
 8005128:	4602      	mov	r2, r0
 800512a:	460b      	mov	r3, r1
 800512c:	4b61      	ldr	r3, [pc, #388]	; (80052b4 <UART_SetConfig+0x2d4>)
 800512e:	fba3 2302 	umull	r2, r3, r3, r2
 8005132:	095b      	lsrs	r3, r3, #5
 8005134:	011c      	lsls	r4, r3, #4
 8005136:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800513a:	2200      	movs	r2, #0
 800513c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005140:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005144:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005148:	4642      	mov	r2, r8
 800514a:	464b      	mov	r3, r9
 800514c:	1891      	adds	r1, r2, r2
 800514e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005150:	415b      	adcs	r3, r3
 8005152:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005154:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005158:	4641      	mov	r1, r8
 800515a:	eb12 0a01 	adds.w	sl, r2, r1
 800515e:	4649      	mov	r1, r9
 8005160:	eb43 0b01 	adc.w	fp, r3, r1
 8005164:	f04f 0200 	mov.w	r2, #0
 8005168:	f04f 0300 	mov.w	r3, #0
 800516c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005170:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005174:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005178:	4692      	mov	sl, r2
 800517a:	469b      	mov	fp, r3
 800517c:	4643      	mov	r3, r8
 800517e:	eb1a 0303 	adds.w	r3, sl, r3
 8005182:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005186:	464b      	mov	r3, r9
 8005188:	eb4b 0303 	adc.w	r3, fp, r3
 800518c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800519c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80051a0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80051a4:	460b      	mov	r3, r1
 80051a6:	18db      	adds	r3, r3, r3
 80051a8:	643b      	str	r3, [r7, #64]	; 0x40
 80051aa:	4613      	mov	r3, r2
 80051ac:	eb42 0303 	adc.w	r3, r2, r3
 80051b0:	647b      	str	r3, [r7, #68]	; 0x44
 80051b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80051b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80051ba:	f7fb f861 	bl	8000280 <__aeabi_uldivmod>
 80051be:	4602      	mov	r2, r0
 80051c0:	460b      	mov	r3, r1
 80051c2:	4611      	mov	r1, r2
 80051c4:	4b3b      	ldr	r3, [pc, #236]	; (80052b4 <UART_SetConfig+0x2d4>)
 80051c6:	fba3 2301 	umull	r2, r3, r3, r1
 80051ca:	095b      	lsrs	r3, r3, #5
 80051cc:	2264      	movs	r2, #100	; 0x64
 80051ce:	fb02 f303 	mul.w	r3, r2, r3
 80051d2:	1acb      	subs	r3, r1, r3
 80051d4:	00db      	lsls	r3, r3, #3
 80051d6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80051da:	4b36      	ldr	r3, [pc, #216]	; (80052b4 <UART_SetConfig+0x2d4>)
 80051dc:	fba3 2302 	umull	r2, r3, r3, r2
 80051e0:	095b      	lsrs	r3, r3, #5
 80051e2:	005b      	lsls	r3, r3, #1
 80051e4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80051e8:	441c      	add	r4, r3
 80051ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051ee:	2200      	movs	r2, #0
 80051f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80051f4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80051f8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80051fc:	4642      	mov	r2, r8
 80051fe:	464b      	mov	r3, r9
 8005200:	1891      	adds	r1, r2, r2
 8005202:	63b9      	str	r1, [r7, #56]	; 0x38
 8005204:	415b      	adcs	r3, r3
 8005206:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005208:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800520c:	4641      	mov	r1, r8
 800520e:	1851      	adds	r1, r2, r1
 8005210:	6339      	str	r1, [r7, #48]	; 0x30
 8005212:	4649      	mov	r1, r9
 8005214:	414b      	adcs	r3, r1
 8005216:	637b      	str	r3, [r7, #52]	; 0x34
 8005218:	f04f 0200 	mov.w	r2, #0
 800521c:	f04f 0300 	mov.w	r3, #0
 8005220:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005224:	4659      	mov	r1, fp
 8005226:	00cb      	lsls	r3, r1, #3
 8005228:	4651      	mov	r1, sl
 800522a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800522e:	4651      	mov	r1, sl
 8005230:	00ca      	lsls	r2, r1, #3
 8005232:	4610      	mov	r0, r2
 8005234:	4619      	mov	r1, r3
 8005236:	4603      	mov	r3, r0
 8005238:	4642      	mov	r2, r8
 800523a:	189b      	adds	r3, r3, r2
 800523c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005240:	464b      	mov	r3, r9
 8005242:	460a      	mov	r2, r1
 8005244:	eb42 0303 	adc.w	r3, r2, r3
 8005248:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800524c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005258:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800525c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005260:	460b      	mov	r3, r1
 8005262:	18db      	adds	r3, r3, r3
 8005264:	62bb      	str	r3, [r7, #40]	; 0x28
 8005266:	4613      	mov	r3, r2
 8005268:	eb42 0303 	adc.w	r3, r2, r3
 800526c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800526e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005272:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005276:	f7fb f803 	bl	8000280 <__aeabi_uldivmod>
 800527a:	4602      	mov	r2, r0
 800527c:	460b      	mov	r3, r1
 800527e:	4b0d      	ldr	r3, [pc, #52]	; (80052b4 <UART_SetConfig+0x2d4>)
 8005280:	fba3 1302 	umull	r1, r3, r3, r2
 8005284:	095b      	lsrs	r3, r3, #5
 8005286:	2164      	movs	r1, #100	; 0x64
 8005288:	fb01 f303 	mul.w	r3, r1, r3
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	00db      	lsls	r3, r3, #3
 8005290:	3332      	adds	r3, #50	; 0x32
 8005292:	4a08      	ldr	r2, [pc, #32]	; (80052b4 <UART_SetConfig+0x2d4>)
 8005294:	fba2 2303 	umull	r2, r3, r2, r3
 8005298:	095b      	lsrs	r3, r3, #5
 800529a:	f003 0207 	and.w	r2, r3, #7
 800529e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4422      	add	r2, r4
 80052a6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80052a8:	e106      	b.n	80054b8 <UART_SetConfig+0x4d8>
 80052aa:	bf00      	nop
 80052ac:	40011000 	.word	0x40011000
 80052b0:	40011400 	.word	0x40011400
 80052b4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052bc:	2200      	movs	r2, #0
 80052be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80052c2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80052c6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80052ca:	4642      	mov	r2, r8
 80052cc:	464b      	mov	r3, r9
 80052ce:	1891      	adds	r1, r2, r2
 80052d0:	6239      	str	r1, [r7, #32]
 80052d2:	415b      	adcs	r3, r3
 80052d4:	627b      	str	r3, [r7, #36]	; 0x24
 80052d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80052da:	4641      	mov	r1, r8
 80052dc:	1854      	adds	r4, r2, r1
 80052de:	4649      	mov	r1, r9
 80052e0:	eb43 0501 	adc.w	r5, r3, r1
 80052e4:	f04f 0200 	mov.w	r2, #0
 80052e8:	f04f 0300 	mov.w	r3, #0
 80052ec:	00eb      	lsls	r3, r5, #3
 80052ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80052f2:	00e2      	lsls	r2, r4, #3
 80052f4:	4614      	mov	r4, r2
 80052f6:	461d      	mov	r5, r3
 80052f8:	4643      	mov	r3, r8
 80052fa:	18e3      	adds	r3, r4, r3
 80052fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005300:	464b      	mov	r3, r9
 8005302:	eb45 0303 	adc.w	r3, r5, r3
 8005306:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800530a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005316:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800531a:	f04f 0200 	mov.w	r2, #0
 800531e:	f04f 0300 	mov.w	r3, #0
 8005322:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005326:	4629      	mov	r1, r5
 8005328:	008b      	lsls	r3, r1, #2
 800532a:	4621      	mov	r1, r4
 800532c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005330:	4621      	mov	r1, r4
 8005332:	008a      	lsls	r2, r1, #2
 8005334:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005338:	f7fa ffa2 	bl	8000280 <__aeabi_uldivmod>
 800533c:	4602      	mov	r2, r0
 800533e:	460b      	mov	r3, r1
 8005340:	4b60      	ldr	r3, [pc, #384]	; (80054c4 <UART_SetConfig+0x4e4>)
 8005342:	fba3 2302 	umull	r2, r3, r3, r2
 8005346:	095b      	lsrs	r3, r3, #5
 8005348:	011c      	lsls	r4, r3, #4
 800534a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800534e:	2200      	movs	r2, #0
 8005350:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005354:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005358:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800535c:	4642      	mov	r2, r8
 800535e:	464b      	mov	r3, r9
 8005360:	1891      	adds	r1, r2, r2
 8005362:	61b9      	str	r1, [r7, #24]
 8005364:	415b      	adcs	r3, r3
 8005366:	61fb      	str	r3, [r7, #28]
 8005368:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800536c:	4641      	mov	r1, r8
 800536e:	1851      	adds	r1, r2, r1
 8005370:	6139      	str	r1, [r7, #16]
 8005372:	4649      	mov	r1, r9
 8005374:	414b      	adcs	r3, r1
 8005376:	617b      	str	r3, [r7, #20]
 8005378:	f04f 0200 	mov.w	r2, #0
 800537c:	f04f 0300 	mov.w	r3, #0
 8005380:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005384:	4659      	mov	r1, fp
 8005386:	00cb      	lsls	r3, r1, #3
 8005388:	4651      	mov	r1, sl
 800538a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800538e:	4651      	mov	r1, sl
 8005390:	00ca      	lsls	r2, r1, #3
 8005392:	4610      	mov	r0, r2
 8005394:	4619      	mov	r1, r3
 8005396:	4603      	mov	r3, r0
 8005398:	4642      	mov	r2, r8
 800539a:	189b      	adds	r3, r3, r2
 800539c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80053a0:	464b      	mov	r3, r9
 80053a2:	460a      	mov	r2, r1
 80053a4:	eb42 0303 	adc.w	r3, r2, r3
 80053a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80053ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80053b6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80053b8:	f04f 0200 	mov.w	r2, #0
 80053bc:	f04f 0300 	mov.w	r3, #0
 80053c0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80053c4:	4649      	mov	r1, r9
 80053c6:	008b      	lsls	r3, r1, #2
 80053c8:	4641      	mov	r1, r8
 80053ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053ce:	4641      	mov	r1, r8
 80053d0:	008a      	lsls	r2, r1, #2
 80053d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80053d6:	f7fa ff53 	bl	8000280 <__aeabi_uldivmod>
 80053da:	4602      	mov	r2, r0
 80053dc:	460b      	mov	r3, r1
 80053de:	4611      	mov	r1, r2
 80053e0:	4b38      	ldr	r3, [pc, #224]	; (80054c4 <UART_SetConfig+0x4e4>)
 80053e2:	fba3 2301 	umull	r2, r3, r3, r1
 80053e6:	095b      	lsrs	r3, r3, #5
 80053e8:	2264      	movs	r2, #100	; 0x64
 80053ea:	fb02 f303 	mul.w	r3, r2, r3
 80053ee:	1acb      	subs	r3, r1, r3
 80053f0:	011b      	lsls	r3, r3, #4
 80053f2:	3332      	adds	r3, #50	; 0x32
 80053f4:	4a33      	ldr	r2, [pc, #204]	; (80054c4 <UART_SetConfig+0x4e4>)
 80053f6:	fba2 2303 	umull	r2, r3, r2, r3
 80053fa:	095b      	lsrs	r3, r3, #5
 80053fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005400:	441c      	add	r4, r3
 8005402:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005406:	2200      	movs	r2, #0
 8005408:	673b      	str	r3, [r7, #112]	; 0x70
 800540a:	677a      	str	r2, [r7, #116]	; 0x74
 800540c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005410:	4642      	mov	r2, r8
 8005412:	464b      	mov	r3, r9
 8005414:	1891      	adds	r1, r2, r2
 8005416:	60b9      	str	r1, [r7, #8]
 8005418:	415b      	adcs	r3, r3
 800541a:	60fb      	str	r3, [r7, #12]
 800541c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005420:	4641      	mov	r1, r8
 8005422:	1851      	adds	r1, r2, r1
 8005424:	6039      	str	r1, [r7, #0]
 8005426:	4649      	mov	r1, r9
 8005428:	414b      	adcs	r3, r1
 800542a:	607b      	str	r3, [r7, #4]
 800542c:	f04f 0200 	mov.w	r2, #0
 8005430:	f04f 0300 	mov.w	r3, #0
 8005434:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005438:	4659      	mov	r1, fp
 800543a:	00cb      	lsls	r3, r1, #3
 800543c:	4651      	mov	r1, sl
 800543e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005442:	4651      	mov	r1, sl
 8005444:	00ca      	lsls	r2, r1, #3
 8005446:	4610      	mov	r0, r2
 8005448:	4619      	mov	r1, r3
 800544a:	4603      	mov	r3, r0
 800544c:	4642      	mov	r2, r8
 800544e:	189b      	adds	r3, r3, r2
 8005450:	66bb      	str	r3, [r7, #104]	; 0x68
 8005452:	464b      	mov	r3, r9
 8005454:	460a      	mov	r2, r1
 8005456:	eb42 0303 	adc.w	r3, r2, r3
 800545a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800545c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	663b      	str	r3, [r7, #96]	; 0x60
 8005466:	667a      	str	r2, [r7, #100]	; 0x64
 8005468:	f04f 0200 	mov.w	r2, #0
 800546c:	f04f 0300 	mov.w	r3, #0
 8005470:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005474:	4649      	mov	r1, r9
 8005476:	008b      	lsls	r3, r1, #2
 8005478:	4641      	mov	r1, r8
 800547a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800547e:	4641      	mov	r1, r8
 8005480:	008a      	lsls	r2, r1, #2
 8005482:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005486:	f7fa fefb 	bl	8000280 <__aeabi_uldivmod>
 800548a:	4602      	mov	r2, r0
 800548c:	460b      	mov	r3, r1
 800548e:	4b0d      	ldr	r3, [pc, #52]	; (80054c4 <UART_SetConfig+0x4e4>)
 8005490:	fba3 1302 	umull	r1, r3, r3, r2
 8005494:	095b      	lsrs	r3, r3, #5
 8005496:	2164      	movs	r1, #100	; 0x64
 8005498:	fb01 f303 	mul.w	r3, r1, r3
 800549c:	1ad3      	subs	r3, r2, r3
 800549e:	011b      	lsls	r3, r3, #4
 80054a0:	3332      	adds	r3, #50	; 0x32
 80054a2:	4a08      	ldr	r2, [pc, #32]	; (80054c4 <UART_SetConfig+0x4e4>)
 80054a4:	fba2 2303 	umull	r2, r3, r2, r3
 80054a8:	095b      	lsrs	r3, r3, #5
 80054aa:	f003 020f 	and.w	r2, r3, #15
 80054ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4422      	add	r2, r4
 80054b6:	609a      	str	r2, [r3, #8]
}
 80054b8:	bf00      	nop
 80054ba:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80054be:	46bd      	mov	sp, r7
 80054c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054c4:	51eb851f 	.word	0x51eb851f

080054c8 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80054c8:	b084      	sub	sp, #16
 80054ca:	b480      	push	{r7}
 80054cc:	b085      	sub	sp, #20
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	6078      	str	r0, [r7, #4]
 80054d2:	f107 001c 	add.w	r0, r7, #28
 80054d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80054da:	2300      	movs	r3, #0
 80054dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80054de:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80054e0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80054e2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80054e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80054e6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80054e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80054ea:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80054ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80054ee:	431a      	orrs	r2, r3
             Init.ClockDiv
 80054f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80054f2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80054f4:	68fa      	ldr	r2, [r7, #12]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8005502:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005506:	68fa      	ldr	r2, [r7, #12]
 8005508:	431a      	orrs	r2, r3
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800550e:	2300      	movs	r3, #0
}
 8005510:	4618      	mov	r0, r3
 8005512:	3714      	adds	r7, #20
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	b004      	add	sp, #16
 800551c:	4770      	bx	lr

0800551e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800551e:	b480      	push	{r7}
 8005520:	b083      	sub	sp, #12
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800552c:	4618      	mov	r0, r3
 800552e:	370c      	adds	r7, #12
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr

08005538 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	370c      	adds	r7, #12
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr

0800555a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800555a:	b480      	push	{r7}
 800555c:	b083      	sub	sp, #12
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2203      	movs	r2, #3
 8005566:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005568:	2300      	movs	r3, #0
}
 800556a:	4618      	mov	r0, r3
 800556c:	370c      	adds	r7, #12
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr

08005576 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8005576:	b480      	push	{r7}
 8005578:	b083      	sub	sp, #12
 800557a:	af00      	add	r7, sp, #0
 800557c:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 0303 	and.w	r3, r3, #3
}
 8005586:	4618      	mov	r0, r3
 8005588:	370c      	adds	r7, #12
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr

08005592 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8005592:	b480      	push	{r7}
 8005594:	b085      	sub	sp, #20
 8005596:	af00      	add	r7, sp, #0
 8005598:	6078      	str	r0, [r7, #4]
 800559a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800559c:	2300      	movs	r3, #0
 800559e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80055b0:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80055b6:	431a      	orrs	r2, r3
                       Command->CPSM);
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80055bc:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80055be:	68fa      	ldr	r2, [r7, #12]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80055cc:	f023 030f 	bic.w	r3, r3, #15
 80055d0:	68fa      	ldr	r2, [r7, #12]
 80055d2:	431a      	orrs	r2, r3
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80055d8:	2300      	movs	r3, #0
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3714      	adds	r7, #20
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr

080055e6 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80055e6:	b480      	push	{r7}
 80055e8:	b083      	sub	sp, #12
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	b2db      	uxtb	r3, r3
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	370c      	adds	r7, #12
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8005600:	b480      	push	{r7}
 8005602:	b085      	sub	sp, #20
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	3314      	adds	r3, #20
 800560e:	461a      	mov	r2, r3
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	4413      	add	r3, r2
 8005614:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
}  
 800561a:	4618      	mov	r0, r3
 800561c:	3714      	adds	r7, #20
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr

08005626 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8005626:	b480      	push	{r7}
 8005628:	b085      	sub	sp, #20
 800562a:	af00      	add	r7, sp, #0
 800562c:	6078      	str	r0, [r7, #4]
 800562e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005630:	2300      	movs	r3, #0
 8005632:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	685a      	ldr	r2, [r3, #4]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800564c:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005652:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8005658:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800565a:	68fa      	ldr	r2, [r7, #12]
 800565c:	4313      	orrs	r3, r2
 800565e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005664:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	431a      	orrs	r2, r3
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005670:	2300      	movs	r3, #0

}
 8005672:	4618      	mov	r0, r3
 8005674:	3714      	adds	r7, #20
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr

0800567e <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800567e:	b580      	push	{r7, lr}
 8005680:	b088      	sub	sp, #32
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
 8005686:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800568c:	2310      	movs	r3, #16
 800568e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005690:	2340      	movs	r3, #64	; 0x40
 8005692:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005694:	2300      	movs	r3, #0
 8005696:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005698:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800569c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800569e:	f107 0308 	add.w	r3, r7, #8
 80056a2:	4619      	mov	r1, r3
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f7ff ff74 	bl	8005592 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80056aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80056ae:	2110      	movs	r1, #16
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f000 fa19 	bl	8005ae8 <SDMMC_GetCmdResp1>
 80056b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80056b8:	69fb      	ldr	r3, [r7, #28]
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3720      	adds	r7, #32
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}

080056c2 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80056c2:	b580      	push	{r7, lr}
 80056c4:	b088      	sub	sp, #32
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]
 80056ca:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80056d0:	2311      	movs	r3, #17
 80056d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80056d4:	2340      	movs	r3, #64	; 0x40
 80056d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80056d8:	2300      	movs	r3, #0
 80056da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80056dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056e0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80056e2:	f107 0308 	add.w	r3, r7, #8
 80056e6:	4619      	mov	r1, r3
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f7ff ff52 	bl	8005592 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80056ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80056f2:	2111      	movs	r1, #17
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f000 f9f7 	bl	8005ae8 <SDMMC_GetCmdResp1>
 80056fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80056fc:	69fb      	ldr	r3, [r7, #28]
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3720      	adds	r7, #32
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}

08005706 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005706:	b580      	push	{r7, lr}
 8005708:	b088      	sub	sp, #32
 800570a:	af00      	add	r7, sp, #0
 800570c:	6078      	str	r0, [r7, #4]
 800570e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8005714:	2312      	movs	r3, #18
 8005716:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005718:	2340      	movs	r3, #64	; 0x40
 800571a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800571c:	2300      	movs	r3, #0
 800571e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005720:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005724:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005726:	f107 0308 	add.w	r3, r7, #8
 800572a:	4619      	mov	r1, r3
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f7ff ff30 	bl	8005592 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005732:	f241 3288 	movw	r2, #5000	; 0x1388
 8005736:	2112      	movs	r1, #18
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f000 f9d5 	bl	8005ae8 <SDMMC_GetCmdResp1>
 800573e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005740:	69fb      	ldr	r3, [r7, #28]
}
 8005742:	4618      	mov	r0, r3
 8005744:	3720      	adds	r7, #32
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}

0800574a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800574a:	b580      	push	{r7, lr}
 800574c:	b088      	sub	sp, #32
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
 8005752:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8005758:	2318      	movs	r3, #24
 800575a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800575c:	2340      	movs	r3, #64	; 0x40
 800575e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005760:	2300      	movs	r3, #0
 8005762:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005764:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005768:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800576a:	f107 0308 	add.w	r3, r7, #8
 800576e:	4619      	mov	r1, r3
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f7ff ff0e 	bl	8005592 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005776:	f241 3288 	movw	r2, #5000	; 0x1388
 800577a:	2118      	movs	r1, #24
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f000 f9b3 	bl	8005ae8 <SDMMC_GetCmdResp1>
 8005782:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005784:	69fb      	ldr	r3, [r7, #28]
}
 8005786:	4618      	mov	r0, r3
 8005788:	3720      	adds	r7, #32
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}

0800578e <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800578e:	b580      	push	{r7, lr}
 8005790:	b088      	sub	sp, #32
 8005792:	af00      	add	r7, sp, #0
 8005794:	6078      	str	r0, [r7, #4]
 8005796:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800579c:	2319      	movs	r3, #25
 800579e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80057a0:	2340      	movs	r3, #64	; 0x40
 80057a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80057a4:	2300      	movs	r3, #0
 80057a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80057a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057ac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80057ae:	f107 0308 	add.w	r3, r7, #8
 80057b2:	4619      	mov	r1, r3
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f7ff feec 	bl	8005592 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80057ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80057be:	2119      	movs	r1, #25
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f000 f991 	bl	8005ae8 <SDMMC_GetCmdResp1>
 80057c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80057c8:	69fb      	ldr	r3, [r7, #28]
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3720      	adds	r7, #32
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
	...

080057d4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b088      	sub	sp, #32
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80057dc:	2300      	movs	r3, #0
 80057de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80057e0:	230c      	movs	r3, #12
 80057e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80057e4:	2340      	movs	r3, #64	; 0x40
 80057e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80057e8:	2300      	movs	r3, #0
 80057ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80057ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057f0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80057f2:	f107 0308 	add.w	r3, r7, #8
 80057f6:	4619      	mov	r1, r3
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f7ff feca 	bl	8005592 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80057fe:	4a05      	ldr	r2, [pc, #20]	; (8005814 <SDMMC_CmdStopTransfer+0x40>)
 8005800:	210c      	movs	r1, #12
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 f970 	bl	8005ae8 <SDMMC_GetCmdResp1>
 8005808:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800580a:	69fb      	ldr	r3, [r7, #28]
}
 800580c:	4618      	mov	r0, r3
 800580e:	3720      	adds	r7, #32
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}
 8005814:	05f5e100 	.word	0x05f5e100

08005818 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b08a      	sub	sp, #40	; 0x28
 800581c:	af00      	add	r7, sp, #0
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005828:	2307      	movs	r3, #7
 800582a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800582c:	2340      	movs	r3, #64	; 0x40
 800582e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005830:	2300      	movs	r3, #0
 8005832:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005834:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005838:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800583a:	f107 0310 	add.w	r3, r7, #16
 800583e:	4619      	mov	r1, r3
 8005840:	68f8      	ldr	r0, [r7, #12]
 8005842:	f7ff fea6 	bl	8005592 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8005846:	f241 3288 	movw	r2, #5000	; 0x1388
 800584a:	2107      	movs	r1, #7
 800584c:	68f8      	ldr	r0, [r7, #12]
 800584e:	f000 f94b 	bl	8005ae8 <SDMMC_GetCmdResp1>
 8005852:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8005854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005856:	4618      	mov	r0, r3
 8005858:	3728      	adds	r7, #40	; 0x28
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}

0800585e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800585e:	b580      	push	{r7, lr}
 8005860:	b088      	sub	sp, #32
 8005862:	af00      	add	r7, sp, #0
 8005864:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8005866:	2300      	movs	r3, #0
 8005868:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800586a:	2300      	movs	r3, #0
 800586c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800586e:	2300      	movs	r3, #0
 8005870:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005872:	2300      	movs	r3, #0
 8005874:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005876:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800587a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800587c:	f107 0308 	add.w	r3, r7, #8
 8005880:	4619      	mov	r1, r3
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f7ff fe85 	bl	8005592 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f000 fb65 	bl	8005f58 <SDMMC_GetCmdError>
 800588e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005890:	69fb      	ldr	r3, [r7, #28]
}
 8005892:	4618      	mov	r0, r3
 8005894:	3720      	adds	r7, #32
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}

0800589a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800589a:	b580      	push	{r7, lr}
 800589c:	b088      	sub	sp, #32
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80058a2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80058a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80058a8:	2308      	movs	r3, #8
 80058aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80058ac:	2340      	movs	r3, #64	; 0x40
 80058ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80058b0:	2300      	movs	r3, #0
 80058b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80058b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058b8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80058ba:	f107 0308 	add.w	r3, r7, #8
 80058be:	4619      	mov	r1, r3
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f7ff fe66 	bl	8005592 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 faf8 	bl	8005ebc <SDMMC_GetCmdResp7>
 80058cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80058ce:	69fb      	ldr	r3, [r7, #28]
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3720      	adds	r7, #32
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}

080058d8 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b088      	sub	sp, #32
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80058e6:	2337      	movs	r3, #55	; 0x37
 80058e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80058ea:	2340      	movs	r3, #64	; 0x40
 80058ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80058ee:	2300      	movs	r3, #0
 80058f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80058f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058f6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80058f8:	f107 0308 	add.w	r3, r7, #8
 80058fc:	4619      	mov	r1, r3
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f7ff fe47 	bl	8005592 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8005904:	f241 3288 	movw	r2, #5000	; 0x1388
 8005908:	2137      	movs	r1, #55	; 0x37
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f000 f8ec 	bl	8005ae8 <SDMMC_GetCmdResp1>
 8005910:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005912:	69fb      	ldr	r3, [r7, #28]
}
 8005914:	4618      	mov	r0, r3
 8005916:	3720      	adds	r7, #32
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}

0800591c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b088      	sub	sp, #32
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800592c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005930:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8005932:	2329      	movs	r3, #41	; 0x29
 8005934:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005936:	2340      	movs	r3, #64	; 0x40
 8005938:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800593a:	2300      	movs	r3, #0
 800593c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800593e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005942:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005944:	f107 0308 	add.w	r3, r7, #8
 8005948:	4619      	mov	r1, r3
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f7ff fe21 	bl	8005592 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f000 f9ff 	bl	8005d54 <SDMMC_GetCmdResp3>
 8005956:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005958:	69fb      	ldr	r3, [r7, #28]
}
 800595a:	4618      	mov	r0, r3
 800595c:	3720      	adds	r7, #32
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}

08005962 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8005962:	b580      	push	{r7, lr}
 8005964:	b088      	sub	sp, #32
 8005966:	af00      	add	r7, sp, #0
 8005968:	6078      	str	r0, [r7, #4]
 800596a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8005970:	2306      	movs	r3, #6
 8005972:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005974:	2340      	movs	r3, #64	; 0x40
 8005976:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005978:	2300      	movs	r3, #0
 800597a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800597c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005980:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005982:	f107 0308 	add.w	r3, r7, #8
 8005986:	4619      	mov	r1, r3
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f7ff fe02 	bl	8005592 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800598e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005992:	2106      	movs	r1, #6
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f000 f8a7 	bl	8005ae8 <SDMMC_GetCmdResp1>
 800599a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800599c:	69fb      	ldr	r3, [r7, #28]
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3720      	adds	r7, #32
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}

080059a6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80059a6:	b580      	push	{r7, lr}
 80059a8:	b088      	sub	sp, #32
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80059ae:	2300      	movs	r3, #0
 80059b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80059b2:	2333      	movs	r3, #51	; 0x33
 80059b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80059b6:	2340      	movs	r3, #64	; 0x40
 80059b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80059ba:	2300      	movs	r3, #0
 80059bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80059be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059c2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80059c4:	f107 0308 	add.w	r3, r7, #8
 80059c8:	4619      	mov	r1, r3
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f7ff fde1 	bl	8005592 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80059d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80059d4:	2133      	movs	r1, #51	; 0x33
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 f886 	bl	8005ae8 <SDMMC_GetCmdResp1>
 80059dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80059de:	69fb      	ldr	r3, [r7, #28]
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3720      	adds	r7, #32
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b088      	sub	sp, #32
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80059f0:	2300      	movs	r3, #0
 80059f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80059f4:	2302      	movs	r3, #2
 80059f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80059f8:	23c0      	movs	r3, #192	; 0xc0
 80059fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80059fc:	2300      	movs	r3, #0
 80059fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005a00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a04:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005a06:	f107 0308 	add.w	r3, r7, #8
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f7ff fdc0 	bl	8005592 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 f956 	bl	8005cc4 <SDMMC_GetCmdResp2>
 8005a18:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005a1a:	69fb      	ldr	r3, [r7, #28]
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3720      	adds	r7, #32
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}

08005a24 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b088      	sub	sp, #32
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005a32:	2309      	movs	r3, #9
 8005a34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005a36:	23c0      	movs	r3, #192	; 0xc0
 8005a38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005a3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a42:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005a44:	f107 0308 	add.w	r3, r7, #8
 8005a48:	4619      	mov	r1, r3
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f7ff fda1 	bl	8005592 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f000 f937 	bl	8005cc4 <SDMMC_GetCmdResp2>
 8005a56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005a58:	69fb      	ldr	r3, [r7, #28]
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3720      	adds	r7, #32
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}

08005a62 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8005a62:	b580      	push	{r7, lr}
 8005a64:	b088      	sub	sp, #32
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	6078      	str	r0, [r7, #4]
 8005a6a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005a70:	2303      	movs	r3, #3
 8005a72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005a74:	2340      	movs	r3, #64	; 0x40
 8005a76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005a7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a80:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005a82:	f107 0308 	add.w	r3, r7, #8
 8005a86:	4619      	mov	r1, r3
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f7ff fd82 	bl	8005592 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005a8e:	683a      	ldr	r2, [r7, #0]
 8005a90:	2103      	movs	r1, #3
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f000 f99c 	bl	8005dd0 <SDMMC_GetCmdResp6>
 8005a98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005a9a:	69fb      	ldr	r3, [r7, #28]
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3720      	adds	r7, #32
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b088      	sub	sp, #32
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8005ab2:	230d      	movs	r3, #13
 8005ab4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005ab6:	2340      	movs	r3, #64	; 0x40
 8005ab8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005aba:	2300      	movs	r3, #0
 8005abc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005abe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ac2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005ac4:	f107 0308 	add.w	r3, r7, #8
 8005ac8:	4619      	mov	r1, r3
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f7ff fd61 	bl	8005592 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8005ad0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ad4:	210d      	movs	r1, #13
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 f806 	bl	8005ae8 <SDMMC_GetCmdResp1>
 8005adc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005ade:	69fb      	ldr	r3, [r7, #28]
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3720      	adds	r7, #32
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b088      	sub	sp, #32
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	60f8      	str	r0, [r7, #12]
 8005af0:	460b      	mov	r3, r1
 8005af2:	607a      	str	r2, [r7, #4]
 8005af4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005af6:	4b70      	ldr	r3, [pc, #448]	; (8005cb8 <SDMMC_GetCmdResp1+0x1d0>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a70      	ldr	r2, [pc, #448]	; (8005cbc <SDMMC_GetCmdResp1+0x1d4>)
 8005afc:	fba2 2303 	umull	r2, r3, r2, r3
 8005b00:	0a5a      	lsrs	r2, r3, #9
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	fb02 f303 	mul.w	r3, r2, r3
 8005b08:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	1e5a      	subs	r2, r3, #1
 8005b0e:	61fa      	str	r2, [r7, #28]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d102      	bne.n	8005b1a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005b14:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005b18:	e0c9      	b.n	8005cae <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b1e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005b20:	69bb      	ldr	r3, [r7, #24]
 8005b22:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d0ef      	beq.n	8005b0a <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005b2a:	69bb      	ldr	r3, [r7, #24]
 8005b2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d1ea      	bne.n	8005b0a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b38:	f003 0304 	and.w	r3, r3, #4
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d004      	beq.n	8005b4a <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2204      	movs	r2, #4
 8005b44:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005b46:	2304      	movs	r3, #4
 8005b48:	e0b1      	b.n	8005cae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b4e:	f003 0301 	and.w	r3, r3, #1
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d004      	beq.n	8005b60 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2201      	movs	r2, #1
 8005b5a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	e0a6      	b.n	8005cae <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	22c5      	movs	r2, #197	; 0xc5
 8005b64:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005b66:	68f8      	ldr	r0, [r7, #12]
 8005b68:	f7ff fd3d 	bl	80055e6 <SDIO_GetCommandResponse>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	461a      	mov	r2, r3
 8005b70:	7afb      	ldrb	r3, [r7, #11]
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d001      	beq.n	8005b7a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e099      	b.n	8005cae <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005b7a:	2100      	movs	r1, #0
 8005b7c:	68f8      	ldr	r0, [r7, #12]
 8005b7e:	f7ff fd3f 	bl	8005600 <SDIO_GetResponse>
 8005b82:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005b84:	697a      	ldr	r2, [r7, #20]
 8005b86:	4b4e      	ldr	r3, [pc, #312]	; (8005cc0 <SDMMC_GetCmdResp1+0x1d8>)
 8005b88:	4013      	ands	r3, r2
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d101      	bne.n	8005b92 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	e08d      	b.n	8005cae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	da02      	bge.n	8005b9e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005b98:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b9c:	e087      	b.n	8005cae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d001      	beq.n	8005bac <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005ba8:	2340      	movs	r3, #64	; 0x40
 8005baa:	e080      	b.n	8005cae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d001      	beq.n	8005bba <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005bb6:	2380      	movs	r3, #128	; 0x80
 8005bb8:	e079      	b.n	8005cae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d002      	beq.n	8005bca <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005bc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005bc8:	e071      	b.n	8005cae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d002      	beq.n	8005bda <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005bd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005bd8:	e069      	b.n	8005cae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d002      	beq.n	8005bea <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005be4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005be8:	e061      	b.n	8005cae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d002      	beq.n	8005bfa <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005bf4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005bf8:	e059      	b.n	8005cae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d002      	beq.n	8005c0a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005c04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c08:	e051      	b.n	8005cae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d002      	beq.n	8005c1a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005c14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005c18:	e049      	b.n	8005cae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d002      	beq.n	8005c2a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005c24:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005c28:	e041      	b.n	8005cae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d002      	beq.n	8005c3a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8005c34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c38:	e039      	b.n	8005cae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d002      	beq.n	8005c4a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005c44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005c48:	e031      	b.n	8005cae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d002      	beq.n	8005c5a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005c54:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005c58:	e029      	b.n	8005cae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d002      	beq.n	8005c6a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005c64:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005c68:	e021      	b.n	8005cae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d002      	beq.n	8005c7a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005c74:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005c78:	e019      	b.n	8005cae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d002      	beq.n	8005c8a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005c84:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005c88:	e011      	b.n	8005cae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d002      	beq.n	8005c9a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005c94:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005c98:	e009      	b.n	8005cae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	f003 0308 	and.w	r3, r3, #8
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d002      	beq.n	8005caa <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005ca4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005ca8:	e001      	b.n	8005cae <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005caa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3720      	adds	r7, #32
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	bf00      	nop
 8005cb8:	20000000 	.word	0x20000000
 8005cbc:	10624dd3 	.word	0x10624dd3
 8005cc0:	fdffe008 	.word	0xfdffe008

08005cc4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b085      	sub	sp, #20
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005ccc:	4b1f      	ldr	r3, [pc, #124]	; (8005d4c <SDMMC_GetCmdResp2+0x88>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a1f      	ldr	r2, [pc, #124]	; (8005d50 <SDMMC_GetCmdResp2+0x8c>)
 8005cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8005cd6:	0a5b      	lsrs	r3, r3, #9
 8005cd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cdc:	fb02 f303 	mul.w	r3, r2, r3
 8005ce0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	1e5a      	subs	r2, r3, #1
 8005ce6:	60fa      	str	r2, [r7, #12]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d102      	bne.n	8005cf2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005cec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005cf0:	e026      	b.n	8005d40 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cf6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d0ef      	beq.n	8005ce2 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d1ea      	bne.n	8005ce2 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d10:	f003 0304 	and.w	r3, r3, #4
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d004      	beq.n	8005d22 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2204      	movs	r2, #4
 8005d1c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005d1e:	2304      	movs	r3, #4
 8005d20:	e00e      	b.n	8005d40 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d26:	f003 0301 	and.w	r3, r3, #1
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d004      	beq.n	8005d38 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2201      	movs	r2, #1
 8005d32:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005d34:	2301      	movs	r3, #1
 8005d36:	e003      	b.n	8005d40 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	22c5      	movs	r2, #197	; 0xc5
 8005d3c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8005d3e:	2300      	movs	r3, #0
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3714      	adds	r7, #20
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr
 8005d4c:	20000000 	.word	0x20000000
 8005d50:	10624dd3 	.word	0x10624dd3

08005d54 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b085      	sub	sp, #20
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005d5c:	4b1a      	ldr	r3, [pc, #104]	; (8005dc8 <SDMMC_GetCmdResp3+0x74>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a1a      	ldr	r2, [pc, #104]	; (8005dcc <SDMMC_GetCmdResp3+0x78>)
 8005d62:	fba2 2303 	umull	r2, r3, r2, r3
 8005d66:	0a5b      	lsrs	r3, r3, #9
 8005d68:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d6c:	fb02 f303 	mul.w	r3, r2, r3
 8005d70:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	1e5a      	subs	r2, r3, #1
 8005d76:	60fa      	str	r2, [r7, #12]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d102      	bne.n	8005d82 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005d7c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005d80:	e01b      	b.n	8005dba <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d86:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d0ef      	beq.n	8005d72 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d1ea      	bne.n	8005d72 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005da0:	f003 0304 	and.w	r3, r3, #4
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d004      	beq.n	8005db2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2204      	movs	r2, #4
 8005dac:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005dae:	2304      	movs	r3, #4
 8005db0:	e003      	b.n	8005dba <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	22c5      	movs	r2, #197	; 0xc5
 8005db6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005db8:	2300      	movs	r3, #0
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3714      	adds	r7, #20
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr
 8005dc6:	bf00      	nop
 8005dc8:	20000000 	.word	0x20000000
 8005dcc:	10624dd3 	.word	0x10624dd3

08005dd0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b088      	sub	sp, #32
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	460b      	mov	r3, r1
 8005dda:	607a      	str	r2, [r7, #4]
 8005ddc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005dde:	4b35      	ldr	r3, [pc, #212]	; (8005eb4 <SDMMC_GetCmdResp6+0xe4>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a35      	ldr	r2, [pc, #212]	; (8005eb8 <SDMMC_GetCmdResp6+0xe8>)
 8005de4:	fba2 2303 	umull	r2, r3, r2, r3
 8005de8:	0a5b      	lsrs	r3, r3, #9
 8005dea:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dee:	fb02 f303 	mul.w	r3, r2, r3
 8005df2:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005df4:	69fb      	ldr	r3, [r7, #28]
 8005df6:	1e5a      	subs	r2, r3, #1
 8005df8:	61fa      	str	r2, [r7, #28]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d102      	bne.n	8005e04 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005dfe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005e02:	e052      	b.n	8005eaa <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e08:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d0ef      	beq.n	8005df4 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d1ea      	bne.n	8005df4 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e22:	f003 0304 	and.w	r3, r3, #4
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d004      	beq.n	8005e34 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2204      	movs	r2, #4
 8005e2e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005e30:	2304      	movs	r3, #4
 8005e32:	e03a      	b.n	8005eaa <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e38:	f003 0301 	and.w	r3, r3, #1
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d004      	beq.n	8005e4a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2201      	movs	r2, #1
 8005e44:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005e46:	2301      	movs	r3, #1
 8005e48:	e02f      	b.n	8005eaa <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005e4a:	68f8      	ldr	r0, [r7, #12]
 8005e4c:	f7ff fbcb 	bl	80055e6 <SDIO_GetCommandResponse>
 8005e50:	4603      	mov	r3, r0
 8005e52:	461a      	mov	r2, r3
 8005e54:	7afb      	ldrb	r3, [r7, #11]
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d001      	beq.n	8005e5e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e025      	b.n	8005eaa <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	22c5      	movs	r2, #197	; 0xc5
 8005e62:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005e64:	2100      	movs	r1, #0
 8005e66:	68f8      	ldr	r0, [r7, #12]
 8005e68:	f7ff fbca 	bl	8005600 <SDIO_GetResponse>
 8005e6c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d106      	bne.n	8005e86 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	0c1b      	lsrs	r3, r3, #16
 8005e7c:	b29a      	uxth	r2, r3
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8005e82:	2300      	movs	r3, #0
 8005e84:	e011      	b.n	8005eaa <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d002      	beq.n	8005e96 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005e90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005e94:	e009      	b.n	8005eaa <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d002      	beq.n	8005ea6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005ea0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ea4:	e001      	b.n	8005eaa <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005ea6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3720      	adds	r7, #32
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}
 8005eb2:	bf00      	nop
 8005eb4:	20000000 	.word	0x20000000
 8005eb8:	10624dd3 	.word	0x10624dd3

08005ebc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b085      	sub	sp, #20
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005ec4:	4b22      	ldr	r3, [pc, #136]	; (8005f50 <SDMMC_GetCmdResp7+0x94>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a22      	ldr	r2, [pc, #136]	; (8005f54 <SDMMC_GetCmdResp7+0x98>)
 8005eca:	fba2 2303 	umull	r2, r3, r2, r3
 8005ece:	0a5b      	lsrs	r3, r3, #9
 8005ed0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ed4:	fb02 f303 	mul.w	r3, r2, r3
 8005ed8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	1e5a      	subs	r2, r3, #1
 8005ede:	60fa      	str	r2, [r7, #12]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d102      	bne.n	8005eea <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005ee4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005ee8:	e02c      	b.n	8005f44 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eee:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d0ef      	beq.n	8005eda <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d1ea      	bne.n	8005eda <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f08:	f003 0304 	and.w	r3, r3, #4
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d004      	beq.n	8005f1a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2204      	movs	r2, #4
 8005f14:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005f16:	2304      	movs	r3, #4
 8005f18:	e014      	b.n	8005f44 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f1e:	f003 0301 	and.w	r3, r3, #1
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d004      	beq.n	8005f30 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2201      	movs	r2, #1
 8005f2a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	e009      	b.n	8005f44 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d002      	beq.n	8005f42 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2240      	movs	r2, #64	; 0x40
 8005f40:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005f42:	2300      	movs	r3, #0
  
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3714      	adds	r7, #20
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr
 8005f50:	20000000 	.word	0x20000000
 8005f54:	10624dd3 	.word	0x10624dd3

08005f58 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b085      	sub	sp, #20
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005f60:	4b11      	ldr	r3, [pc, #68]	; (8005fa8 <SDMMC_GetCmdError+0x50>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a11      	ldr	r2, [pc, #68]	; (8005fac <SDMMC_GetCmdError+0x54>)
 8005f66:	fba2 2303 	umull	r2, r3, r2, r3
 8005f6a:	0a5b      	lsrs	r3, r3, #9
 8005f6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f70:	fb02 f303 	mul.w	r3, r2, r3
 8005f74:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	1e5a      	subs	r2, r3, #1
 8005f7a:	60fa      	str	r2, [r7, #12]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d102      	bne.n	8005f86 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005f80:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005f84:	e009      	b.n	8005f9a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d0f1      	beq.n	8005f76 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	22c5      	movs	r2, #197	; 0xc5
 8005f96:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8005f98:	2300      	movs	r3, #0
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3714      	adds	r7, #20
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr
 8005fa6:	bf00      	nop
 8005fa8:	20000000 	.word	0x20000000
 8005fac:	10624dd3 	.word	0x10624dd3

08005fb0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005fb4:	4904      	ldr	r1, [pc, #16]	; (8005fc8 <MX_FATFS_Init+0x18>)
 8005fb6:	4805      	ldr	r0, [pc, #20]	; (8005fcc <MX_FATFS_Init+0x1c>)
 8005fb8:	f002 fcd8 	bl	800896c <FATFS_LinkDriver>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	4b03      	ldr	r3, [pc, #12]	; (8005fd0 <MX_FATFS_Init+0x20>)
 8005fc2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005fc4:	bf00      	nop
 8005fc6:	bd80      	pop	{r7, pc}
 8005fc8:	20000980 	.word	0x20000980
 8005fcc:	0800c680 	.word	0x0800c680
 8005fd0:	2000097c 	.word	0x2000097c

08005fd4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b082      	sub	sp, #8
 8005fd8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005fde:	f000 f888 	bl	80060f2 <BSP_SD_IsDetected>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d001      	beq.n	8005fec <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	e005      	b.n	8005ff8 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8005fec:	4804      	ldr	r0, [pc, #16]	; (8006000 <BSP_SD_Init+0x2c>)
 8005fee:	f7fd fb77 	bl	80036e0 <HAL_SD_Init>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8005ff6:	79fb      	ldrb	r3, [r7, #7]
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3708      	adds	r7, #8
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	200007c8 	.word	0x200007c8

08006004 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b086      	sub	sp, #24
 8006008:	af00      	add	r7, sp, #0
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	60b9      	str	r1, [r7, #8]
 800600e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8006010:	2300      	movs	r3, #0
 8006012:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	68ba      	ldr	r2, [r7, #8]
 8006018:	68f9      	ldr	r1, [r7, #12]
 800601a:	4806      	ldr	r0, [pc, #24]	; (8006034 <BSP_SD_ReadBlocks_DMA+0x30>)
 800601c:	f7fd fc10 	bl	8003840 <HAL_SD_ReadBlocks_DMA>
 8006020:	4603      	mov	r3, r0
 8006022:	2b00      	cmp	r3, #0
 8006024:	d001      	beq.n	800602a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800602a:	7dfb      	ldrb	r3, [r7, #23]
}
 800602c:	4618      	mov	r0, r3
 800602e:	3718      	adds	r7, #24
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}
 8006034:	200007c8 	.word	0x200007c8

08006038 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b086      	sub	sp, #24
 800603c:	af00      	add	r7, sp, #0
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	60b9      	str	r1, [r7, #8]
 8006042:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8006044:	2300      	movs	r3, #0
 8006046:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	68ba      	ldr	r2, [r7, #8]
 800604c:	68f9      	ldr	r1, [r7, #12]
 800604e:	4806      	ldr	r0, [pc, #24]	; (8006068 <BSP_SD_WriteBlocks_DMA+0x30>)
 8006050:	f7fd fcd8 	bl	8003a04 <HAL_SD_WriteBlocks_DMA>
 8006054:	4603      	mov	r3, r0
 8006056:	2b00      	cmp	r3, #0
 8006058:	d001      	beq.n	800605e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800605e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006060:	4618      	mov	r0, r3
 8006062:	3718      	adds	r7, #24
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}
 8006068:	200007c8 	.word	0x200007c8

0800606c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8006070:	4805      	ldr	r0, [pc, #20]	; (8006088 <BSP_SD_GetCardState+0x1c>)
 8006072:	f7fe f9a7 	bl	80043c4 <HAL_SD_GetCardState>
 8006076:	4603      	mov	r3, r0
 8006078:	2b04      	cmp	r3, #4
 800607a:	bf14      	ite	ne
 800607c:	2301      	movne	r3, #1
 800607e:	2300      	moveq	r3, #0
 8006080:	b2db      	uxtb	r3, r3
}
 8006082:	4618      	mov	r0, r3
 8006084:	bd80      	pop	{r7, pc}
 8006086:	bf00      	nop
 8006088:	200007c8 	.word	0x200007c8

0800608c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b082      	sub	sp, #8
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8006094:	6879      	ldr	r1, [r7, #4]
 8006096:	4803      	ldr	r0, [pc, #12]	; (80060a4 <BSP_SD_GetCardInfo+0x18>)
 8006098:	f7fe f8ce 	bl	8004238 <HAL_SD_GetCardInfo>
}
 800609c:	bf00      	nop
 800609e:	3708      	adds	r7, #8
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}
 80060a4:	200007c8 	.word	0x200007c8

080060a8 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b082      	sub	sp, #8
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80060b0:	f000 f818 	bl	80060e4 <BSP_SD_AbortCallback>
}
 80060b4:	bf00      	nop
 80060b6:	3708      	adds	r7, #8
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}

080060bc <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b082      	sub	sp, #8
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80060c4:	f000 f9a8 	bl	8006418 <BSP_SD_WriteCpltCallback>
}
 80060c8:	bf00      	nop
 80060ca:	3708      	adds	r7, #8
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}

080060d0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b082      	sub	sp, #8
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80060d8:	f000 f9ac 	bl	8006434 <BSP_SD_ReadCpltCallback>
}
 80060dc:	bf00      	nop
 80060de:	3708      	adds	r7, #8
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}

080060e4 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 80060e4:	b480      	push	{r7}
 80060e6:	af00      	add	r7, sp, #0

}
 80060e8:	bf00      	nop
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr

080060f2 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80060f2:	b480      	push	{r7}
 80060f4:	b083      	sub	sp, #12
 80060f6:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80060f8:	2301      	movs	r3, #1
 80060fa:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 80060fc:	79fb      	ldrb	r3, [r7, #7]
 80060fe:	b2db      	uxtb	r3, r3
}
 8006100:	4618      	mov	r0, r3
 8006102:	370c      	adds	r7, #12
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr

0800610c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b084      	sub	sp, #16
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 8006114:	f002 fcc2 	bl	8008a9c <osKernelSysTick>
 8006118:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800611a:	e006      	b.n	800612a <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800611c:	f7ff ffa6 	bl	800606c <BSP_SD_GetCardState>
 8006120:	4603      	mov	r3, r0
 8006122:	2b00      	cmp	r3, #0
 8006124:	d101      	bne.n	800612a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8006126:	2300      	movs	r3, #0
 8006128:	e009      	b.n	800613e <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800612a:	f002 fcb7 	bl	8008a9c <osKernelSysTick>
 800612e:	4602      	mov	r2, r0
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	1ad3      	subs	r3, r2, r3
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	429a      	cmp	r2, r3
 8006138:	d8f0      	bhi.n	800611c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800613a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800613e:	4618      	mov	r0, r3
 8006140:	3710      	adds	r7, #16
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}
	...

08006148 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b082      	sub	sp, #8
 800614c:	af00      	add	r7, sp, #0
 800614e:	4603      	mov	r3, r0
 8006150:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8006152:	4b0b      	ldr	r3, [pc, #44]	; (8006180 <SD_CheckStatus+0x38>)
 8006154:	2201      	movs	r2, #1
 8006156:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006158:	f7ff ff88 	bl	800606c <BSP_SD_GetCardState>
 800615c:	4603      	mov	r3, r0
 800615e:	2b00      	cmp	r3, #0
 8006160:	d107      	bne.n	8006172 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8006162:	4b07      	ldr	r3, [pc, #28]	; (8006180 <SD_CheckStatus+0x38>)
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	b2db      	uxtb	r3, r3
 8006168:	f023 0301 	bic.w	r3, r3, #1
 800616c:	b2da      	uxtb	r2, r3
 800616e:	4b04      	ldr	r3, [pc, #16]	; (8006180 <SD_CheckStatus+0x38>)
 8006170:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8006172:	4b03      	ldr	r3, [pc, #12]	; (8006180 <SD_CheckStatus+0x38>)
 8006174:	781b      	ldrb	r3, [r3, #0]
 8006176:	b2db      	uxtb	r3, r3
}
 8006178:	4618      	mov	r0, r3
 800617a:	3708      	adds	r7, #8
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}
 8006180:	20000009 	.word	0x20000009

08006184 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8006184:	b590      	push	{r4, r7, lr}
 8006186:	b087      	sub	sp, #28
 8006188:	af00      	add	r7, sp, #0
 800618a:	4603      	mov	r3, r0
 800618c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800618e:	4b20      	ldr	r3, [pc, #128]	; (8006210 <SD_initialize+0x8c>)
 8006190:	2201      	movs	r2, #1
 8006192:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 8006194:	f002 fc76 	bl	8008a84 <osKernelRunning>
 8006198:	4603      	mov	r3, r0
 800619a:	2b00      	cmp	r3, #0
 800619c:	d030      	beq.n	8006200 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800619e:	f7ff ff19 	bl	8005fd4 <BSP_SD_Init>
 80061a2:	4603      	mov	r3, r0
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d107      	bne.n	80061b8 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 80061a8:	79fb      	ldrb	r3, [r7, #7]
 80061aa:	4618      	mov	r0, r3
 80061ac:	f7ff ffcc 	bl	8006148 <SD_CheckStatus>
 80061b0:	4603      	mov	r3, r0
 80061b2:	461a      	mov	r2, r3
 80061b4:	4b16      	ldr	r3, [pc, #88]	; (8006210 <SD_initialize+0x8c>)
 80061b6:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 80061b8:	4b15      	ldr	r3, [pc, #84]	; (8006210 <SD_initialize+0x8c>)
 80061ba:	781b      	ldrb	r3, [r3, #0]
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d01e      	beq.n	8006200 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 80061c2:	4b14      	ldr	r3, [pc, #80]	; (8006214 <SD_initialize+0x90>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d10e      	bne.n	80061e8 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 80061ca:	4b13      	ldr	r3, [pc, #76]	; (8006218 <SD_initialize+0x94>)
 80061cc:	f107 0408 	add.w	r4, r7, #8
 80061d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80061d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 80061d6:	f107 0308 	add.w	r3, r7, #8
 80061da:	2100      	movs	r1, #0
 80061dc:	4618      	mov	r0, r3
 80061de:	f002 fd82 	bl	8008ce6 <osMessageCreate>
 80061e2:	4603      	mov	r3, r0
 80061e4:	4a0b      	ldr	r2, [pc, #44]	; (8006214 <SD_initialize+0x90>)
 80061e6:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 80061e8:	4b0a      	ldr	r3, [pc, #40]	; (8006214 <SD_initialize+0x90>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d107      	bne.n	8006200 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 80061f0:	4b07      	ldr	r3, [pc, #28]	; (8006210 <SD_initialize+0x8c>)
 80061f2:	781b      	ldrb	r3, [r3, #0]
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	f043 0301 	orr.w	r3, r3, #1
 80061fa:	b2da      	uxtb	r2, r3
 80061fc:	4b04      	ldr	r3, [pc, #16]	; (8006210 <SD_initialize+0x8c>)
 80061fe:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8006200:	4b03      	ldr	r3, [pc, #12]	; (8006210 <SD_initialize+0x8c>)
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	b2db      	uxtb	r3, r3
}
 8006206:	4618      	mov	r0, r3
 8006208:	371c      	adds	r7, #28
 800620a:	46bd      	mov	sp, r7
 800620c:	bd90      	pop	{r4, r7, pc}
 800620e:	bf00      	nop
 8006210:	20000009 	.word	0x20000009
 8006214:	20000984 	.word	0x20000984
 8006218:	0800c604 	.word	0x0800c604

0800621c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b082      	sub	sp, #8
 8006220:	af00      	add	r7, sp, #0
 8006222:	4603      	mov	r3, r0
 8006224:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8006226:	79fb      	ldrb	r3, [r7, #7]
 8006228:	4618      	mov	r0, r3
 800622a:	f7ff ff8d 	bl	8006148 <SD_CheckStatus>
 800622e:	4603      	mov	r3, r0
}
 8006230:	4618      	mov	r0, r3
 8006232:	3708      	adds	r7, #8
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}

08006238 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b08a      	sub	sp, #40	; 0x28
 800623c:	af00      	add	r7, sp, #0
 800623e:	60b9      	str	r1, [r7, #8]
 8006240:	607a      	str	r2, [r7, #4]
 8006242:	603b      	str	r3, [r7, #0]
 8006244:	4603      	mov	r3, r0
 8006246:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 8006248:	2301      	movs	r3, #1
 800624a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800624e:	f247 5030 	movw	r0, #30000	; 0x7530
 8006252:	f7ff ff5b 	bl	800610c <SD_CheckStatusWithTimeout>
 8006256:	4603      	mov	r3, r0
 8006258:	2b00      	cmp	r3, #0
 800625a:	da02      	bge.n	8006262 <SD_read+0x2a>
  {
    return res;
 800625c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006260:	e032      	b.n	80062c8 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8006262:	683a      	ldr	r2, [r7, #0]
 8006264:	6879      	ldr	r1, [r7, #4]
 8006266:	68b8      	ldr	r0, [r7, #8]
 8006268:	f7ff fecc 	bl	8006004 <BSP_SD_ReadBlocks_DMA>
 800626c:	4603      	mov	r3, r0
 800626e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 8006272:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006276:	2b00      	cmp	r3, #0
 8006278:	d124      	bne.n	80062c4 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800627a:	4b15      	ldr	r3, [pc, #84]	; (80062d0 <SD_read+0x98>)
 800627c:	6819      	ldr	r1, [r3, #0]
 800627e:	f107 0314 	add.w	r3, r7, #20
 8006282:	f247 5230 	movw	r2, #30000	; 0x7530
 8006286:	4618      	mov	r0, r3
 8006288:	f002 fd96 	bl	8008db8 <osMessageGet>

    if (event.status == osEventMessage)
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	2b10      	cmp	r3, #16
 8006290:	d118      	bne.n	80062c4 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 8006292:	69bb      	ldr	r3, [r7, #24]
 8006294:	2b01      	cmp	r3, #1
 8006296:	d115      	bne.n	80062c4 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 8006298:	f002 fc00 	bl	8008a9c <osKernelSysTick>
 800629c:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800629e:	e008      	b.n	80062b2 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80062a0:	f7ff fee4 	bl	800606c <BSP_SD_GetCardState>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d103      	bne.n	80062b2 <SD_read+0x7a>
              {
                res = RES_OK;
 80062aa:	2300      	movs	r3, #0
 80062ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 80062b0:	e008      	b.n	80062c4 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 80062b2:	f002 fbf3 	bl	8008a9c <osKernelSysTick>
 80062b6:	4602      	mov	r2, r0
 80062b8:	6a3b      	ldr	r3, [r7, #32]
 80062ba:	1ad3      	subs	r3, r2, r3
 80062bc:	f247 522f 	movw	r2, #29999	; 0x752f
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d9ed      	bls.n	80062a0 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 80062c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3728      	adds	r7, #40	; 0x28
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}
 80062d0:	20000984 	.word	0x20000984

080062d4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b08a      	sub	sp, #40	; 0x28
 80062d8:	af00      	add	r7, sp, #0
 80062da:	60b9      	str	r1, [r7, #8]
 80062dc:	607a      	str	r2, [r7, #4]
 80062de:	603b      	str	r3, [r7, #0]
 80062e0:	4603      	mov	r3, r0
 80062e2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80062e4:	2301      	movs	r3, #1
 80062e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80062ea:	f247 5030 	movw	r0, #30000	; 0x7530
 80062ee:	f7ff ff0d 	bl	800610c <SD_CheckStatusWithTimeout>
 80062f2:	4603      	mov	r3, r0
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	da02      	bge.n	80062fe <SD_write+0x2a>
  {
    return res;
 80062f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80062fc:	e02e      	b.n	800635c <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80062fe:	683a      	ldr	r2, [r7, #0]
 8006300:	6879      	ldr	r1, [r7, #4]
 8006302:	68b8      	ldr	r0, [r7, #8]
 8006304:	f7ff fe98 	bl	8006038 <BSP_SD_WriteBlocks_DMA>
 8006308:	4603      	mov	r3, r0
 800630a:	2b00      	cmp	r3, #0
 800630c:	d124      	bne.n	8006358 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800630e:	4b15      	ldr	r3, [pc, #84]	; (8006364 <SD_write+0x90>)
 8006310:	6819      	ldr	r1, [r3, #0]
 8006312:	f107 0314 	add.w	r3, r7, #20
 8006316:	f247 5230 	movw	r2, #30000	; 0x7530
 800631a:	4618      	mov	r0, r3
 800631c:	f002 fd4c 	bl	8008db8 <osMessageGet>

    if (event.status == osEventMessage)
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	2b10      	cmp	r3, #16
 8006324:	d118      	bne.n	8006358 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 8006326:	69bb      	ldr	r3, [r7, #24]
 8006328:	2b02      	cmp	r3, #2
 800632a:	d115      	bne.n	8006358 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800632c:	f002 fbb6 	bl	8008a9c <osKernelSysTick>
 8006330:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8006332:	e008      	b.n	8006346 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006334:	f7ff fe9a 	bl	800606c <BSP_SD_GetCardState>
 8006338:	4603      	mov	r3, r0
 800633a:	2b00      	cmp	r3, #0
 800633c:	d103      	bne.n	8006346 <SD_write+0x72>
          {
            res = RES_OK;
 800633e:	2300      	movs	r3, #0
 8006340:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8006344:	e008      	b.n	8006358 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8006346:	f002 fba9 	bl	8008a9c <osKernelSysTick>
 800634a:	4602      	mov	r2, r0
 800634c:	6a3b      	ldr	r3, [r7, #32]
 800634e:	1ad3      	subs	r3, r2, r3
 8006350:	f247 522f 	movw	r2, #29999	; 0x752f
 8006354:	4293      	cmp	r3, r2
 8006356:	d9ed      	bls.n	8006334 <SD_write+0x60>
    }

  }
#endif

  return res;
 8006358:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800635c:	4618      	mov	r0, r3
 800635e:	3728      	adds	r7, #40	; 0x28
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}
 8006364:	20000984 	.word	0x20000984

08006368 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b08c      	sub	sp, #48	; 0x30
 800636c:	af00      	add	r7, sp, #0
 800636e:	4603      	mov	r3, r0
 8006370:	603a      	str	r2, [r7, #0]
 8006372:	71fb      	strb	r3, [r7, #7]
 8006374:	460b      	mov	r3, r1
 8006376:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8006378:	2301      	movs	r3, #1
 800637a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800637e:	4b25      	ldr	r3, [pc, #148]	; (8006414 <SD_ioctl+0xac>)
 8006380:	781b      	ldrb	r3, [r3, #0]
 8006382:	b2db      	uxtb	r3, r3
 8006384:	f003 0301 	and.w	r3, r3, #1
 8006388:	2b00      	cmp	r3, #0
 800638a:	d001      	beq.n	8006390 <SD_ioctl+0x28>
 800638c:	2303      	movs	r3, #3
 800638e:	e03c      	b.n	800640a <SD_ioctl+0xa2>

  switch (cmd)
 8006390:	79bb      	ldrb	r3, [r7, #6]
 8006392:	2b03      	cmp	r3, #3
 8006394:	d834      	bhi.n	8006400 <SD_ioctl+0x98>
 8006396:	a201      	add	r2, pc, #4	; (adr r2, 800639c <SD_ioctl+0x34>)
 8006398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800639c:	080063ad 	.word	0x080063ad
 80063a0:	080063b5 	.word	0x080063b5
 80063a4:	080063cd 	.word	0x080063cd
 80063a8:	080063e7 	.word	0x080063e7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80063ac:	2300      	movs	r3, #0
 80063ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80063b2:	e028      	b.n	8006406 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80063b4:	f107 030c 	add.w	r3, r7, #12
 80063b8:	4618      	mov	r0, r3
 80063ba:	f7ff fe67 	bl	800608c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80063be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80063c4:	2300      	movs	r3, #0
 80063c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80063ca:	e01c      	b.n	8006406 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80063cc:	f107 030c 	add.w	r3, r7, #12
 80063d0:	4618      	mov	r0, r3
 80063d2:	f7ff fe5b 	bl	800608c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80063d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d8:	b29a      	uxth	r2, r3
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80063de:	2300      	movs	r3, #0
 80063e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80063e4:	e00f      	b.n	8006406 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80063e6:	f107 030c 	add.w	r3, r7, #12
 80063ea:	4618      	mov	r0, r3
 80063ec:	f7ff fe4e 	bl	800608c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80063f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f2:	0a5a      	lsrs	r2, r3, #9
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80063f8:	2300      	movs	r3, #0
 80063fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80063fe:	e002      	b.n	8006406 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8006400:	2304      	movs	r3, #4
 8006402:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8006406:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800640a:	4618      	mov	r0, r3
 800640c:	3730      	adds	r7, #48	; 0x30
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
 8006412:	bf00      	nop
 8006414:	20000009 	.word	0x20000009

08006418 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
 800641c:	4b04      	ldr	r3, [pc, #16]	; (8006430 <BSP_SD_WriteCpltCallback+0x18>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2200      	movs	r2, #0
 8006422:	2102      	movs	r1, #2
 8006424:	4618      	mov	r0, r3
 8006426:	f002 fc87 	bl	8008d38 <osMessagePut>
#else
   const uint16_t msg = WRITE_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800642a:	bf00      	nop
 800642c:	bd80      	pop	{r7, pc}
 800642e:	bf00      	nop
 8006430:	20000984 	.word	0x20000984

08006434 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 8006438:	4b04      	ldr	r3, [pc, #16]	; (800644c <BSP_SD_ReadCpltCallback+0x18>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	2200      	movs	r2, #0
 800643e:	2101      	movs	r1, #1
 8006440:	4618      	mov	r0, r3
 8006442:	f002 fc79 	bl	8008d38 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 8006446:	bf00      	nop
 8006448:	bd80      	pop	{r7, pc}
 800644a:	bf00      	nop
 800644c:	20000984 	.word	0x20000984

08006450 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b084      	sub	sp, #16
 8006454:	af00      	add	r7, sp, #0
 8006456:	4603      	mov	r3, r0
 8006458:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800645a:	79fb      	ldrb	r3, [r7, #7]
 800645c:	4a08      	ldr	r2, [pc, #32]	; (8006480 <disk_status+0x30>)
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	4413      	add	r3, r2
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	79fa      	ldrb	r2, [r7, #7]
 8006468:	4905      	ldr	r1, [pc, #20]	; (8006480 <disk_status+0x30>)
 800646a:	440a      	add	r2, r1
 800646c:	7a12      	ldrb	r2, [r2, #8]
 800646e:	4610      	mov	r0, r2
 8006470:	4798      	blx	r3
 8006472:	4603      	mov	r3, r0
 8006474:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006476:	7bfb      	ldrb	r3, [r7, #15]
}
 8006478:	4618      	mov	r0, r3
 800647a:	3710      	adds	r7, #16
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}
 8006480:	200009b0 	.word	0x200009b0

08006484 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b084      	sub	sp, #16
 8006488:	af00      	add	r7, sp, #0
 800648a:	4603      	mov	r3, r0
 800648c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800648e:	2300      	movs	r3, #0
 8006490:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006492:	79fb      	ldrb	r3, [r7, #7]
 8006494:	4a0d      	ldr	r2, [pc, #52]	; (80064cc <disk_initialize+0x48>)
 8006496:	5cd3      	ldrb	r3, [r2, r3]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d111      	bne.n	80064c0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800649c:	79fb      	ldrb	r3, [r7, #7]
 800649e:	4a0b      	ldr	r2, [pc, #44]	; (80064cc <disk_initialize+0x48>)
 80064a0:	2101      	movs	r1, #1
 80064a2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80064a4:	79fb      	ldrb	r3, [r7, #7]
 80064a6:	4a09      	ldr	r2, [pc, #36]	; (80064cc <disk_initialize+0x48>)
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	4413      	add	r3, r2
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	79fa      	ldrb	r2, [r7, #7]
 80064b2:	4906      	ldr	r1, [pc, #24]	; (80064cc <disk_initialize+0x48>)
 80064b4:	440a      	add	r2, r1
 80064b6:	7a12      	ldrb	r2, [r2, #8]
 80064b8:	4610      	mov	r0, r2
 80064ba:	4798      	blx	r3
 80064bc:	4603      	mov	r3, r0
 80064be:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80064c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3710      	adds	r7, #16
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}
 80064ca:	bf00      	nop
 80064cc:	200009b0 	.word	0x200009b0

080064d0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80064d0:	b590      	push	{r4, r7, lr}
 80064d2:	b087      	sub	sp, #28
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	60b9      	str	r1, [r7, #8]
 80064d8:	607a      	str	r2, [r7, #4]
 80064da:	603b      	str	r3, [r7, #0]
 80064dc:	4603      	mov	r3, r0
 80064de:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80064e0:	7bfb      	ldrb	r3, [r7, #15]
 80064e2:	4a0a      	ldr	r2, [pc, #40]	; (800650c <disk_read+0x3c>)
 80064e4:	009b      	lsls	r3, r3, #2
 80064e6:	4413      	add	r3, r2
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	689c      	ldr	r4, [r3, #8]
 80064ec:	7bfb      	ldrb	r3, [r7, #15]
 80064ee:	4a07      	ldr	r2, [pc, #28]	; (800650c <disk_read+0x3c>)
 80064f0:	4413      	add	r3, r2
 80064f2:	7a18      	ldrb	r0, [r3, #8]
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	687a      	ldr	r2, [r7, #4]
 80064f8:	68b9      	ldr	r1, [r7, #8]
 80064fa:	47a0      	blx	r4
 80064fc:	4603      	mov	r3, r0
 80064fe:	75fb      	strb	r3, [r7, #23]
  return res;
 8006500:	7dfb      	ldrb	r3, [r7, #23]
}
 8006502:	4618      	mov	r0, r3
 8006504:	371c      	adds	r7, #28
 8006506:	46bd      	mov	sp, r7
 8006508:	bd90      	pop	{r4, r7, pc}
 800650a:	bf00      	nop
 800650c:	200009b0 	.word	0x200009b0

08006510 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006510:	b590      	push	{r4, r7, lr}
 8006512:	b087      	sub	sp, #28
 8006514:	af00      	add	r7, sp, #0
 8006516:	60b9      	str	r1, [r7, #8]
 8006518:	607a      	str	r2, [r7, #4]
 800651a:	603b      	str	r3, [r7, #0]
 800651c:	4603      	mov	r3, r0
 800651e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006520:	7bfb      	ldrb	r3, [r7, #15]
 8006522:	4a0a      	ldr	r2, [pc, #40]	; (800654c <disk_write+0x3c>)
 8006524:	009b      	lsls	r3, r3, #2
 8006526:	4413      	add	r3, r2
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	68dc      	ldr	r4, [r3, #12]
 800652c:	7bfb      	ldrb	r3, [r7, #15]
 800652e:	4a07      	ldr	r2, [pc, #28]	; (800654c <disk_write+0x3c>)
 8006530:	4413      	add	r3, r2
 8006532:	7a18      	ldrb	r0, [r3, #8]
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	687a      	ldr	r2, [r7, #4]
 8006538:	68b9      	ldr	r1, [r7, #8]
 800653a:	47a0      	blx	r4
 800653c:	4603      	mov	r3, r0
 800653e:	75fb      	strb	r3, [r7, #23]
  return res;
 8006540:	7dfb      	ldrb	r3, [r7, #23]
}
 8006542:	4618      	mov	r0, r3
 8006544:	371c      	adds	r7, #28
 8006546:	46bd      	mov	sp, r7
 8006548:	bd90      	pop	{r4, r7, pc}
 800654a:	bf00      	nop
 800654c:	200009b0 	.word	0x200009b0

08006550 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b084      	sub	sp, #16
 8006554:	af00      	add	r7, sp, #0
 8006556:	4603      	mov	r3, r0
 8006558:	603a      	str	r2, [r7, #0]
 800655a:	71fb      	strb	r3, [r7, #7]
 800655c:	460b      	mov	r3, r1
 800655e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006560:	79fb      	ldrb	r3, [r7, #7]
 8006562:	4a09      	ldr	r2, [pc, #36]	; (8006588 <disk_ioctl+0x38>)
 8006564:	009b      	lsls	r3, r3, #2
 8006566:	4413      	add	r3, r2
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	691b      	ldr	r3, [r3, #16]
 800656c:	79fa      	ldrb	r2, [r7, #7]
 800656e:	4906      	ldr	r1, [pc, #24]	; (8006588 <disk_ioctl+0x38>)
 8006570:	440a      	add	r2, r1
 8006572:	7a10      	ldrb	r0, [r2, #8]
 8006574:	79b9      	ldrb	r1, [r7, #6]
 8006576:	683a      	ldr	r2, [r7, #0]
 8006578:	4798      	blx	r3
 800657a:	4603      	mov	r3, r0
 800657c:	73fb      	strb	r3, [r7, #15]
  return res;
 800657e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006580:	4618      	mov	r0, r3
 8006582:	3710      	adds	r7, #16
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}
 8006588:	200009b0 	.word	0x200009b0

0800658c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800658c:	b480      	push	{r7}
 800658e:	b085      	sub	sp, #20
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	3301      	adds	r3, #1
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800659c:	89fb      	ldrh	r3, [r7, #14]
 800659e:	021b      	lsls	r3, r3, #8
 80065a0:	b21a      	sxth	r2, r3
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	781b      	ldrb	r3, [r3, #0]
 80065a6:	b21b      	sxth	r3, r3
 80065a8:	4313      	orrs	r3, r2
 80065aa:	b21b      	sxth	r3, r3
 80065ac:	81fb      	strh	r3, [r7, #14]
	return rv;
 80065ae:	89fb      	ldrh	r3, [r7, #14]
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3714      	adds	r7, #20
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr

080065bc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80065bc:	b480      	push	{r7}
 80065be:	b085      	sub	sp, #20
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	3303      	adds	r3, #3
 80065c8:	781b      	ldrb	r3, [r3, #0]
 80065ca:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	021b      	lsls	r3, r3, #8
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	3202      	adds	r2, #2
 80065d4:	7812      	ldrb	r2, [r2, #0]
 80065d6:	4313      	orrs	r3, r2
 80065d8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	021b      	lsls	r3, r3, #8
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	3201      	adds	r2, #1
 80065e2:	7812      	ldrb	r2, [r2, #0]
 80065e4:	4313      	orrs	r3, r2
 80065e6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	021b      	lsls	r3, r3, #8
 80065ec:	687a      	ldr	r2, [r7, #4]
 80065ee:	7812      	ldrb	r2, [r2, #0]
 80065f0:	4313      	orrs	r3, r2
 80065f2:	60fb      	str	r3, [r7, #12]
	return rv;
 80065f4:	68fb      	ldr	r3, [r7, #12]
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3714      	adds	r7, #20
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr

08006602 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006602:	b480      	push	{r7}
 8006604:	b083      	sub	sp, #12
 8006606:	af00      	add	r7, sp, #0
 8006608:	6078      	str	r0, [r7, #4]
 800660a:	460b      	mov	r3, r1
 800660c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	1c5a      	adds	r2, r3, #1
 8006612:	607a      	str	r2, [r7, #4]
 8006614:	887a      	ldrh	r2, [r7, #2]
 8006616:	b2d2      	uxtb	r2, r2
 8006618:	701a      	strb	r2, [r3, #0]
 800661a:	887b      	ldrh	r3, [r7, #2]
 800661c:	0a1b      	lsrs	r3, r3, #8
 800661e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	1c5a      	adds	r2, r3, #1
 8006624:	607a      	str	r2, [r7, #4]
 8006626:	887a      	ldrh	r2, [r7, #2]
 8006628:	b2d2      	uxtb	r2, r2
 800662a:	701a      	strb	r2, [r3, #0]
}
 800662c:	bf00      	nop
 800662e:	370c      	adds	r7, #12
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr

08006638 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006638:	b480      	push	{r7}
 800663a:	b083      	sub	sp, #12
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	1c5a      	adds	r2, r3, #1
 8006646:	607a      	str	r2, [r7, #4]
 8006648:	683a      	ldr	r2, [r7, #0]
 800664a:	b2d2      	uxtb	r2, r2
 800664c:	701a      	strb	r2, [r3, #0]
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	0a1b      	lsrs	r3, r3, #8
 8006652:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	1c5a      	adds	r2, r3, #1
 8006658:	607a      	str	r2, [r7, #4]
 800665a:	683a      	ldr	r2, [r7, #0]
 800665c:	b2d2      	uxtb	r2, r2
 800665e:	701a      	strb	r2, [r3, #0]
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	0a1b      	lsrs	r3, r3, #8
 8006664:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	1c5a      	adds	r2, r3, #1
 800666a:	607a      	str	r2, [r7, #4]
 800666c:	683a      	ldr	r2, [r7, #0]
 800666e:	b2d2      	uxtb	r2, r2
 8006670:	701a      	strb	r2, [r3, #0]
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	0a1b      	lsrs	r3, r3, #8
 8006676:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	1c5a      	adds	r2, r3, #1
 800667c:	607a      	str	r2, [r7, #4]
 800667e:	683a      	ldr	r2, [r7, #0]
 8006680:	b2d2      	uxtb	r2, r2
 8006682:	701a      	strb	r2, [r3, #0]
}
 8006684:	bf00      	nop
 8006686:	370c      	adds	r7, #12
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006690:	b480      	push	{r7}
 8006692:	b087      	sub	sp, #28
 8006694:	af00      	add	r7, sp, #0
 8006696:	60f8      	str	r0, [r7, #12]
 8006698:	60b9      	str	r1, [r7, #8]
 800669a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d00d      	beq.n	80066c6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80066aa:	693a      	ldr	r2, [r7, #16]
 80066ac:	1c53      	adds	r3, r2, #1
 80066ae:	613b      	str	r3, [r7, #16]
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	1c59      	adds	r1, r3, #1
 80066b4:	6179      	str	r1, [r7, #20]
 80066b6:	7812      	ldrb	r2, [r2, #0]
 80066b8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	3b01      	subs	r3, #1
 80066be:	607b      	str	r3, [r7, #4]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d1f1      	bne.n	80066aa <mem_cpy+0x1a>
	}
}
 80066c6:	bf00      	nop
 80066c8:	371c      	adds	r7, #28
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr

080066d2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80066d2:	b480      	push	{r7}
 80066d4:	b087      	sub	sp, #28
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	60f8      	str	r0, [r7, #12]
 80066da:	60b9      	str	r1, [r7, #8]
 80066dc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	1c5a      	adds	r2, r3, #1
 80066e6:	617a      	str	r2, [r7, #20]
 80066e8:	68ba      	ldr	r2, [r7, #8]
 80066ea:	b2d2      	uxtb	r2, r2
 80066ec:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	3b01      	subs	r3, #1
 80066f2:	607b      	str	r3, [r7, #4]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d1f3      	bne.n	80066e2 <mem_set+0x10>
}
 80066fa:	bf00      	nop
 80066fc:	bf00      	nop
 80066fe:	371c      	adds	r7, #28
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr

08006708 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006708:	b480      	push	{r7}
 800670a:	b089      	sub	sp, #36	; 0x24
 800670c:	af00      	add	r7, sp, #0
 800670e:	60f8      	str	r0, [r7, #12]
 8006710:	60b9      	str	r1, [r7, #8]
 8006712:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	61fb      	str	r3, [r7, #28]
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800671c:	2300      	movs	r3, #0
 800671e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006720:	69fb      	ldr	r3, [r7, #28]
 8006722:	1c5a      	adds	r2, r3, #1
 8006724:	61fa      	str	r2, [r7, #28]
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	4619      	mov	r1, r3
 800672a:	69bb      	ldr	r3, [r7, #24]
 800672c:	1c5a      	adds	r2, r3, #1
 800672e:	61ba      	str	r2, [r7, #24]
 8006730:	781b      	ldrb	r3, [r3, #0]
 8006732:	1acb      	subs	r3, r1, r3
 8006734:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	3b01      	subs	r3, #1
 800673a:	607b      	str	r3, [r7, #4]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d002      	beq.n	8006748 <mem_cmp+0x40>
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d0eb      	beq.n	8006720 <mem_cmp+0x18>

	return r;
 8006748:	697b      	ldr	r3, [r7, #20]
}
 800674a:	4618      	mov	r0, r3
 800674c:	3724      	adds	r7, #36	; 0x24
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr

08006756 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006756:	b480      	push	{r7}
 8006758:	b083      	sub	sp, #12
 800675a:	af00      	add	r7, sp, #0
 800675c:	6078      	str	r0, [r7, #4]
 800675e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006760:	e002      	b.n	8006768 <chk_chr+0x12>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	3301      	adds	r3, #1
 8006766:	607b      	str	r3, [r7, #4]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d005      	beq.n	800677c <chk_chr+0x26>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	461a      	mov	r2, r3
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	4293      	cmp	r3, r2
 800677a:	d1f2      	bne.n	8006762 <chk_chr+0xc>
	return *str;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	781b      	ldrb	r3, [r3, #0]
}
 8006780:	4618      	mov	r0, r3
 8006782:	370c      	adds	r7, #12
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr

0800678c <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b082      	sub	sp, #8
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d009      	beq.n	80067ae <lock_fs+0x22>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	68db      	ldr	r3, [r3, #12]
 800679e:	4618      	mov	r0, r3
 80067a0:	f002 f91f 	bl	80089e2 <ff_req_grant>
 80067a4:	4603      	mov	r3, r0
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d001      	beq.n	80067ae <lock_fs+0x22>
 80067aa:	2301      	movs	r3, #1
 80067ac:	e000      	b.n	80067b0 <lock_fs+0x24>
 80067ae:	2300      	movs	r3, #0
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3708      	adds	r7, #8
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}

080067b8 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b082      	sub	sp, #8
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	460b      	mov	r3, r1
 80067c2:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d00d      	beq.n	80067e6 <unlock_fs+0x2e>
 80067ca:	78fb      	ldrb	r3, [r7, #3]
 80067cc:	2b0c      	cmp	r3, #12
 80067ce:	d00a      	beq.n	80067e6 <unlock_fs+0x2e>
 80067d0:	78fb      	ldrb	r3, [r7, #3]
 80067d2:	2b0b      	cmp	r3, #11
 80067d4:	d007      	beq.n	80067e6 <unlock_fs+0x2e>
 80067d6:	78fb      	ldrb	r3, [r7, #3]
 80067d8:	2b0f      	cmp	r3, #15
 80067da:	d004      	beq.n	80067e6 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	68db      	ldr	r3, [r3, #12]
 80067e0:	4618      	mov	r0, r3
 80067e2:	f002 f913 	bl	8008a0c <ff_rel_grant>
	}
}
 80067e6:	bf00      	nop
 80067e8:	3708      	adds	r7, #8
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}
	...

080067f0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b085      	sub	sp, #20
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80067fa:	2300      	movs	r3, #0
 80067fc:	60bb      	str	r3, [r7, #8]
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	60fb      	str	r3, [r7, #12]
 8006802:	e029      	b.n	8006858 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006804:	4a27      	ldr	r2, [pc, #156]	; (80068a4 <chk_lock+0xb4>)
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	011b      	lsls	r3, r3, #4
 800680a:	4413      	add	r3, r2
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d01d      	beq.n	800684e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006812:	4a24      	ldr	r2, [pc, #144]	; (80068a4 <chk_lock+0xb4>)
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	011b      	lsls	r3, r3, #4
 8006818:	4413      	add	r3, r2
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	429a      	cmp	r2, r3
 8006822:	d116      	bne.n	8006852 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006824:	4a1f      	ldr	r2, [pc, #124]	; (80068a4 <chk_lock+0xb4>)
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	011b      	lsls	r3, r3, #4
 800682a:	4413      	add	r3, r2
 800682c:	3304      	adds	r3, #4
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006834:	429a      	cmp	r2, r3
 8006836:	d10c      	bne.n	8006852 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006838:	4a1a      	ldr	r2, [pc, #104]	; (80068a4 <chk_lock+0xb4>)
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	011b      	lsls	r3, r3, #4
 800683e:	4413      	add	r3, r2
 8006840:	3308      	adds	r3, #8
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006848:	429a      	cmp	r2, r3
 800684a:	d102      	bne.n	8006852 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800684c:	e007      	b.n	800685e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800684e:	2301      	movs	r3, #1
 8006850:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	3301      	adds	r3, #1
 8006856:	60fb      	str	r3, [r7, #12]
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2b01      	cmp	r3, #1
 800685c:	d9d2      	bls.n	8006804 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2b02      	cmp	r3, #2
 8006862:	d109      	bne.n	8006878 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d102      	bne.n	8006870 <chk_lock+0x80>
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	2b02      	cmp	r3, #2
 800686e:	d101      	bne.n	8006874 <chk_lock+0x84>
 8006870:	2300      	movs	r3, #0
 8006872:	e010      	b.n	8006896 <chk_lock+0xa6>
 8006874:	2312      	movs	r3, #18
 8006876:	e00e      	b.n	8006896 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d108      	bne.n	8006890 <chk_lock+0xa0>
 800687e:	4a09      	ldr	r2, [pc, #36]	; (80068a4 <chk_lock+0xb4>)
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	011b      	lsls	r3, r3, #4
 8006884:	4413      	add	r3, r2
 8006886:	330c      	adds	r3, #12
 8006888:	881b      	ldrh	r3, [r3, #0]
 800688a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800688e:	d101      	bne.n	8006894 <chk_lock+0xa4>
 8006890:	2310      	movs	r3, #16
 8006892:	e000      	b.n	8006896 <chk_lock+0xa6>
 8006894:	2300      	movs	r3, #0
}
 8006896:	4618      	mov	r0, r3
 8006898:	3714      	adds	r7, #20
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr
 80068a2:	bf00      	nop
 80068a4:	20000990 	.word	0x20000990

080068a8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80068a8:	b480      	push	{r7}
 80068aa:	b083      	sub	sp, #12
 80068ac:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80068ae:	2300      	movs	r3, #0
 80068b0:	607b      	str	r3, [r7, #4]
 80068b2:	e002      	b.n	80068ba <enq_lock+0x12>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	3301      	adds	r3, #1
 80068b8:	607b      	str	r3, [r7, #4]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d806      	bhi.n	80068ce <enq_lock+0x26>
 80068c0:	4a09      	ldr	r2, [pc, #36]	; (80068e8 <enq_lock+0x40>)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	011b      	lsls	r3, r3, #4
 80068c6:	4413      	add	r3, r2
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d1f2      	bne.n	80068b4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2b02      	cmp	r3, #2
 80068d2:	bf14      	ite	ne
 80068d4:	2301      	movne	r3, #1
 80068d6:	2300      	moveq	r3, #0
 80068d8:	b2db      	uxtb	r3, r3
}
 80068da:	4618      	mov	r0, r3
 80068dc:	370c      	adds	r7, #12
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr
 80068e6:	bf00      	nop
 80068e8:	20000990 	.word	0x20000990

080068ec <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b085      	sub	sp, #20
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80068f6:	2300      	movs	r3, #0
 80068f8:	60fb      	str	r3, [r7, #12]
 80068fa:	e01f      	b.n	800693c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80068fc:	4a41      	ldr	r2, [pc, #260]	; (8006a04 <inc_lock+0x118>)
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	011b      	lsls	r3, r3, #4
 8006902:	4413      	add	r3, r2
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	429a      	cmp	r2, r3
 800690c:	d113      	bne.n	8006936 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800690e:	4a3d      	ldr	r2, [pc, #244]	; (8006a04 <inc_lock+0x118>)
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	011b      	lsls	r3, r3, #4
 8006914:	4413      	add	r3, r2
 8006916:	3304      	adds	r3, #4
 8006918:	681a      	ldr	r2, [r3, #0]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800691e:	429a      	cmp	r2, r3
 8006920:	d109      	bne.n	8006936 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8006922:	4a38      	ldr	r2, [pc, #224]	; (8006a04 <inc_lock+0x118>)
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	011b      	lsls	r3, r3, #4
 8006928:	4413      	add	r3, r2
 800692a:	3308      	adds	r3, #8
 800692c:	681a      	ldr	r2, [r3, #0]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8006932:	429a      	cmp	r2, r3
 8006934:	d006      	beq.n	8006944 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	3301      	adds	r3, #1
 800693a:	60fb      	str	r3, [r7, #12]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2b01      	cmp	r3, #1
 8006940:	d9dc      	bls.n	80068fc <inc_lock+0x10>
 8006942:	e000      	b.n	8006946 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006944:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2b02      	cmp	r3, #2
 800694a:	d132      	bne.n	80069b2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800694c:	2300      	movs	r3, #0
 800694e:	60fb      	str	r3, [r7, #12]
 8006950:	e002      	b.n	8006958 <inc_lock+0x6c>
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	3301      	adds	r3, #1
 8006956:	60fb      	str	r3, [r7, #12]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2b01      	cmp	r3, #1
 800695c:	d806      	bhi.n	800696c <inc_lock+0x80>
 800695e:	4a29      	ldr	r2, [pc, #164]	; (8006a04 <inc_lock+0x118>)
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	011b      	lsls	r3, r3, #4
 8006964:	4413      	add	r3, r2
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d1f2      	bne.n	8006952 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2b02      	cmp	r3, #2
 8006970:	d101      	bne.n	8006976 <inc_lock+0x8a>
 8006972:	2300      	movs	r3, #0
 8006974:	e040      	b.n	80069f8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681a      	ldr	r2, [r3, #0]
 800697a:	4922      	ldr	r1, [pc, #136]	; (8006a04 <inc_lock+0x118>)
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	011b      	lsls	r3, r3, #4
 8006980:	440b      	add	r3, r1
 8006982:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	689a      	ldr	r2, [r3, #8]
 8006988:	491e      	ldr	r1, [pc, #120]	; (8006a04 <inc_lock+0x118>)
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	011b      	lsls	r3, r3, #4
 800698e:	440b      	add	r3, r1
 8006990:	3304      	adds	r3, #4
 8006992:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	695a      	ldr	r2, [r3, #20]
 8006998:	491a      	ldr	r1, [pc, #104]	; (8006a04 <inc_lock+0x118>)
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	011b      	lsls	r3, r3, #4
 800699e:	440b      	add	r3, r1
 80069a0:	3308      	adds	r3, #8
 80069a2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80069a4:	4a17      	ldr	r2, [pc, #92]	; (8006a04 <inc_lock+0x118>)
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	011b      	lsls	r3, r3, #4
 80069aa:	4413      	add	r3, r2
 80069ac:	330c      	adds	r3, #12
 80069ae:	2200      	movs	r2, #0
 80069b0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d009      	beq.n	80069cc <inc_lock+0xe0>
 80069b8:	4a12      	ldr	r2, [pc, #72]	; (8006a04 <inc_lock+0x118>)
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	011b      	lsls	r3, r3, #4
 80069be:	4413      	add	r3, r2
 80069c0:	330c      	adds	r3, #12
 80069c2:	881b      	ldrh	r3, [r3, #0]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d001      	beq.n	80069cc <inc_lock+0xe0>
 80069c8:	2300      	movs	r3, #0
 80069ca:	e015      	b.n	80069f8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d108      	bne.n	80069e4 <inc_lock+0xf8>
 80069d2:	4a0c      	ldr	r2, [pc, #48]	; (8006a04 <inc_lock+0x118>)
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	011b      	lsls	r3, r3, #4
 80069d8:	4413      	add	r3, r2
 80069da:	330c      	adds	r3, #12
 80069dc:	881b      	ldrh	r3, [r3, #0]
 80069de:	3301      	adds	r3, #1
 80069e0:	b29a      	uxth	r2, r3
 80069e2:	e001      	b.n	80069e8 <inc_lock+0xfc>
 80069e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80069e8:	4906      	ldr	r1, [pc, #24]	; (8006a04 <inc_lock+0x118>)
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	011b      	lsls	r3, r3, #4
 80069ee:	440b      	add	r3, r1
 80069f0:	330c      	adds	r3, #12
 80069f2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	3301      	adds	r3, #1
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3714      	adds	r7, #20
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr
 8006a04:	20000990 	.word	0x20000990

08006a08 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b085      	sub	sp, #20
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006a10:	2300      	movs	r3, #0
 8006a12:	60fb      	str	r3, [r7, #12]
 8006a14:	e010      	b.n	8006a38 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006a16:	4a0d      	ldr	r2, [pc, #52]	; (8006a4c <clear_lock+0x44>)
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	011b      	lsls	r3, r3, #4
 8006a1c:	4413      	add	r3, r2
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	429a      	cmp	r2, r3
 8006a24:	d105      	bne.n	8006a32 <clear_lock+0x2a>
 8006a26:	4a09      	ldr	r2, [pc, #36]	; (8006a4c <clear_lock+0x44>)
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	011b      	lsls	r3, r3, #4
 8006a2c:	4413      	add	r3, r2
 8006a2e:	2200      	movs	r2, #0
 8006a30:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	3301      	adds	r3, #1
 8006a36:	60fb      	str	r3, [r7, #12]
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d9eb      	bls.n	8006a16 <clear_lock+0xe>
	}
}
 8006a3e:	bf00      	nop
 8006a40:	bf00      	nop
 8006a42:	3714      	adds	r7, #20
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr
 8006a4c:	20000990 	.word	0x20000990

08006a50 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b086      	sub	sp, #24
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	78db      	ldrb	r3, [r3, #3]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d034      	beq.n	8006ace <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a68:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	7858      	ldrb	r0, [r3, #1]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006a74:	2301      	movs	r3, #1
 8006a76:	697a      	ldr	r2, [r7, #20]
 8006a78:	f7ff fd4a 	bl	8006510 <disk_write>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d002      	beq.n	8006a88 <sync_window+0x38>
			res = FR_DISK_ERR;
 8006a82:	2301      	movs	r3, #1
 8006a84:	73fb      	strb	r3, [r7, #15]
 8006a86:	e022      	b.n	8006ace <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a92:	697a      	ldr	r2, [r7, #20]
 8006a94:	1ad2      	subs	r2, r2, r3
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	69db      	ldr	r3, [r3, #28]
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d217      	bcs.n	8006ace <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	789b      	ldrb	r3, [r3, #2]
 8006aa2:	613b      	str	r3, [r7, #16]
 8006aa4:	e010      	b.n	8006ac8 <sync_window+0x78>
					wsect += fs->fsize;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	69db      	ldr	r3, [r3, #28]
 8006aaa:	697a      	ldr	r2, [r7, #20]
 8006aac:	4413      	add	r3, r2
 8006aae:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	7858      	ldrb	r0, [r3, #1]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006aba:	2301      	movs	r3, #1
 8006abc:	697a      	ldr	r2, [r7, #20]
 8006abe:	f7ff fd27 	bl	8006510 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	3b01      	subs	r3, #1
 8006ac6:	613b      	str	r3, [r7, #16]
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d8eb      	bhi.n	8006aa6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8006ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3718      	adds	r7, #24
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b084      	sub	sp, #16
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aea:	683a      	ldr	r2, [r7, #0]
 8006aec:	429a      	cmp	r2, r3
 8006aee:	d01b      	beq.n	8006b28 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f7ff ffad 	bl	8006a50 <sync_window>
 8006af6:	4603      	mov	r3, r0
 8006af8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006afa:	7bfb      	ldrb	r3, [r7, #15]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d113      	bne.n	8006b28 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	7858      	ldrb	r0, [r3, #1]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	683a      	ldr	r2, [r7, #0]
 8006b0e:	f7ff fcdf 	bl	80064d0 <disk_read>
 8006b12:	4603      	mov	r3, r0
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d004      	beq.n	8006b22 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006b18:	f04f 33ff 	mov.w	r3, #4294967295
 8006b1c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	683a      	ldr	r2, [r7, #0]
 8006b26:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8006b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3710      	adds	r7, #16
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}
	...

08006b34 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b084      	sub	sp, #16
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f7ff ff87 	bl	8006a50 <sync_window>
 8006b42:	4603      	mov	r3, r0
 8006b44:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006b46:	7bfb      	ldrb	r3, [r7, #15]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d158      	bne.n	8006bfe <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	2b03      	cmp	r3, #3
 8006b52:	d148      	bne.n	8006be6 <sync_fs+0xb2>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	791b      	ldrb	r3, [r3, #4]
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d144      	bne.n	8006be6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	3334      	adds	r3, #52	; 0x34
 8006b60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b64:	2100      	movs	r1, #0
 8006b66:	4618      	mov	r0, r3
 8006b68:	f7ff fdb3 	bl	80066d2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	3334      	adds	r3, #52	; 0x34
 8006b70:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006b74:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f7ff fd42 	bl	8006602 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	3334      	adds	r3, #52	; 0x34
 8006b82:	4921      	ldr	r1, [pc, #132]	; (8006c08 <sync_fs+0xd4>)
 8006b84:	4618      	mov	r0, r3
 8006b86:	f7ff fd57 	bl	8006638 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	3334      	adds	r3, #52	; 0x34
 8006b8e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006b92:	491e      	ldr	r1, [pc, #120]	; (8006c0c <sync_fs+0xd8>)
 8006b94:	4618      	mov	r0, r3
 8006b96:	f7ff fd4f 	bl	8006638 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	3334      	adds	r3, #52	; 0x34
 8006b9e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	695b      	ldr	r3, [r3, #20]
 8006ba6:	4619      	mov	r1, r3
 8006ba8:	4610      	mov	r0, r2
 8006baa:	f7ff fd45 	bl	8006638 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	3334      	adds	r3, #52	; 0x34
 8006bb2:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	691b      	ldr	r3, [r3, #16]
 8006bba:	4619      	mov	r1, r3
 8006bbc:	4610      	mov	r0, r2
 8006bbe:	f7ff fd3b 	bl	8006638 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6a1b      	ldr	r3, [r3, #32]
 8006bc6:	1c5a      	adds	r2, r3, #1
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	7858      	ldrb	r0, [r3, #1]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bda:	2301      	movs	r3, #1
 8006bdc:	f7ff fc98 	bl	8006510 <disk_write>
			fs->fsi_flag = 0;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2200      	movs	r2, #0
 8006be4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	785b      	ldrb	r3, [r3, #1]
 8006bea:	2200      	movs	r2, #0
 8006bec:	2100      	movs	r1, #0
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f7ff fcae 	bl	8006550 <disk_ioctl>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d001      	beq.n	8006bfe <sync_fs+0xca>
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006bfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3710      	adds	r7, #16
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}
 8006c08:	41615252 	.word	0x41615252
 8006c0c:	61417272 	.word	0x61417272

08006c10 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b083      	sub	sp, #12
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	3b02      	subs	r3, #2
 8006c1e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	699b      	ldr	r3, [r3, #24]
 8006c24:	3b02      	subs	r3, #2
 8006c26:	683a      	ldr	r2, [r7, #0]
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d301      	bcc.n	8006c30 <clust2sect+0x20>
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	e008      	b.n	8006c42 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	895b      	ldrh	r3, [r3, #10]
 8006c34:	461a      	mov	r2, r3
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	fb03 f202 	mul.w	r2, r3, r2
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c40:	4413      	add	r3, r2
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	370c      	adds	r7, #12
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr

08006c4e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006c4e:	b580      	push	{r7, lr}
 8006c50:	b086      	sub	sp, #24
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]
 8006c56:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d904      	bls.n	8006c6e <get_fat+0x20>
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	699b      	ldr	r3, [r3, #24]
 8006c68:	683a      	ldr	r2, [r7, #0]
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	d302      	bcc.n	8006c74 <get_fat+0x26>
		val = 1;	/* Internal error */
 8006c6e:	2301      	movs	r3, #1
 8006c70:	617b      	str	r3, [r7, #20]
 8006c72:	e08f      	b.n	8006d94 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006c74:	f04f 33ff 	mov.w	r3, #4294967295
 8006c78:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	781b      	ldrb	r3, [r3, #0]
 8006c7e:	2b03      	cmp	r3, #3
 8006c80:	d062      	beq.n	8006d48 <get_fat+0xfa>
 8006c82:	2b03      	cmp	r3, #3
 8006c84:	dc7c      	bgt.n	8006d80 <get_fat+0x132>
 8006c86:	2b01      	cmp	r3, #1
 8006c88:	d002      	beq.n	8006c90 <get_fat+0x42>
 8006c8a:	2b02      	cmp	r3, #2
 8006c8c:	d042      	beq.n	8006d14 <get_fat+0xc6>
 8006c8e:	e077      	b.n	8006d80 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	60fb      	str	r3, [r7, #12]
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	085b      	lsrs	r3, r3, #1
 8006c98:	68fa      	ldr	r2, [r7, #12]
 8006c9a:	4413      	add	r3, r2
 8006c9c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	0a5b      	lsrs	r3, r3, #9
 8006ca6:	4413      	add	r3, r2
 8006ca8:	4619      	mov	r1, r3
 8006caa:	6938      	ldr	r0, [r7, #16]
 8006cac:	f7ff ff14 	bl	8006ad8 <move_window>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d167      	bne.n	8006d86 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	1c5a      	adds	r2, r3, #1
 8006cba:	60fa      	str	r2, [r7, #12]
 8006cbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cc0:	693a      	ldr	r2, [r7, #16]
 8006cc2:	4413      	add	r3, r2
 8006cc4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006cc8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	0a5b      	lsrs	r3, r3, #9
 8006cd2:	4413      	add	r3, r2
 8006cd4:	4619      	mov	r1, r3
 8006cd6:	6938      	ldr	r0, [r7, #16]
 8006cd8:	f7ff fefe 	bl	8006ad8 <move_window>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d153      	bne.n	8006d8a <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ce8:	693a      	ldr	r2, [r7, #16]
 8006cea:	4413      	add	r3, r2
 8006cec:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006cf0:	021b      	lsls	r3, r3, #8
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	f003 0301 	and.w	r3, r3, #1
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d002      	beq.n	8006d0a <get_fat+0xbc>
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	091b      	lsrs	r3, r3, #4
 8006d08:	e002      	b.n	8006d10 <get_fat+0xc2>
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d10:	617b      	str	r3, [r7, #20]
			break;
 8006d12:	e03f      	b.n	8006d94 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	0a1b      	lsrs	r3, r3, #8
 8006d1c:	4413      	add	r3, r2
 8006d1e:	4619      	mov	r1, r3
 8006d20:	6938      	ldr	r0, [r7, #16]
 8006d22:	f7ff fed9 	bl	8006ad8 <move_window>
 8006d26:	4603      	mov	r3, r0
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d130      	bne.n	8006d8e <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	005b      	lsls	r3, r3, #1
 8006d36:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8006d3a:	4413      	add	r3, r2
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f7ff fc25 	bl	800658c <ld_word>
 8006d42:	4603      	mov	r3, r0
 8006d44:	617b      	str	r3, [r7, #20]
			break;
 8006d46:	e025      	b.n	8006d94 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	09db      	lsrs	r3, r3, #7
 8006d50:	4413      	add	r3, r2
 8006d52:	4619      	mov	r1, r3
 8006d54:	6938      	ldr	r0, [r7, #16]
 8006d56:	f7ff febf 	bl	8006ad8 <move_window>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d118      	bne.n	8006d92 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	009b      	lsls	r3, r3, #2
 8006d6a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006d6e:	4413      	add	r3, r2
 8006d70:	4618      	mov	r0, r3
 8006d72:	f7ff fc23 	bl	80065bc <ld_dword>
 8006d76:	4603      	mov	r3, r0
 8006d78:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006d7c:	617b      	str	r3, [r7, #20]
			break;
 8006d7e:	e009      	b.n	8006d94 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006d80:	2301      	movs	r3, #1
 8006d82:	617b      	str	r3, [r7, #20]
 8006d84:	e006      	b.n	8006d94 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006d86:	bf00      	nop
 8006d88:	e004      	b.n	8006d94 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006d8a:	bf00      	nop
 8006d8c:	e002      	b.n	8006d94 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006d8e:	bf00      	nop
 8006d90:	e000      	b.n	8006d94 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006d92:	bf00      	nop
		}
	}

	return val;
 8006d94:	697b      	ldr	r3, [r7, #20]
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3718      	adds	r7, #24
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}

08006d9e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006d9e:	b590      	push	{r4, r7, lr}
 8006da0:	b089      	sub	sp, #36	; 0x24
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	60f8      	str	r0, [r7, #12]
 8006da6:	60b9      	str	r1, [r7, #8]
 8006da8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006daa:	2302      	movs	r3, #2
 8006dac:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	f240 80d9 	bls.w	8006f68 <put_fat+0x1ca>
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	699b      	ldr	r3, [r3, #24]
 8006dba:	68ba      	ldr	r2, [r7, #8]
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	f080 80d3 	bcs.w	8006f68 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	2b03      	cmp	r3, #3
 8006dc8:	f000 8096 	beq.w	8006ef8 <put_fat+0x15a>
 8006dcc:	2b03      	cmp	r3, #3
 8006dce:	f300 80cb 	bgt.w	8006f68 <put_fat+0x1ca>
 8006dd2:	2b01      	cmp	r3, #1
 8006dd4:	d002      	beq.n	8006ddc <put_fat+0x3e>
 8006dd6:	2b02      	cmp	r3, #2
 8006dd8:	d06e      	beq.n	8006eb8 <put_fat+0x11a>
 8006dda:	e0c5      	b.n	8006f68 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	61bb      	str	r3, [r7, #24]
 8006de0:	69bb      	ldr	r3, [r7, #24]
 8006de2:	085b      	lsrs	r3, r3, #1
 8006de4:	69ba      	ldr	r2, [r7, #24]
 8006de6:	4413      	add	r3, r2
 8006de8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006dee:	69bb      	ldr	r3, [r7, #24]
 8006df0:	0a5b      	lsrs	r3, r3, #9
 8006df2:	4413      	add	r3, r2
 8006df4:	4619      	mov	r1, r3
 8006df6:	68f8      	ldr	r0, [r7, #12]
 8006df8:	f7ff fe6e 	bl	8006ad8 <move_window>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006e00:	7ffb      	ldrb	r3, [r7, #31]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	f040 80a9 	bne.w	8006f5a <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006e0e:	69bb      	ldr	r3, [r7, #24]
 8006e10:	1c59      	adds	r1, r3, #1
 8006e12:	61b9      	str	r1, [r7, #24]
 8006e14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e18:	4413      	add	r3, r2
 8006e1a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	f003 0301 	and.w	r3, r3, #1
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d00d      	beq.n	8006e42 <put_fat+0xa4>
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	781b      	ldrb	r3, [r3, #0]
 8006e2a:	b25b      	sxtb	r3, r3
 8006e2c:	f003 030f 	and.w	r3, r3, #15
 8006e30:	b25a      	sxtb	r2, r3
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	b2db      	uxtb	r3, r3
 8006e36:	011b      	lsls	r3, r3, #4
 8006e38:	b25b      	sxtb	r3, r3
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	b25b      	sxtb	r3, r3
 8006e3e:	b2db      	uxtb	r3, r3
 8006e40:	e001      	b.n	8006e46 <put_fat+0xa8>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	697a      	ldr	r2, [r7, #20]
 8006e48:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2201      	movs	r2, #1
 8006e4e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e54:	69bb      	ldr	r3, [r7, #24]
 8006e56:	0a5b      	lsrs	r3, r3, #9
 8006e58:	4413      	add	r3, r2
 8006e5a:	4619      	mov	r1, r3
 8006e5c:	68f8      	ldr	r0, [r7, #12]
 8006e5e:	f7ff fe3b 	bl	8006ad8 <move_window>
 8006e62:	4603      	mov	r3, r0
 8006e64:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006e66:	7ffb      	ldrb	r3, [r7, #31]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d178      	bne.n	8006f5e <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006e72:	69bb      	ldr	r3, [r7, #24]
 8006e74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e78:	4413      	add	r3, r2
 8006e7a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	f003 0301 	and.w	r3, r3, #1
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d003      	beq.n	8006e8e <put_fat+0xf0>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	091b      	lsrs	r3, r3, #4
 8006e8a:	b2db      	uxtb	r3, r3
 8006e8c:	e00e      	b.n	8006eac <put_fat+0x10e>
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	781b      	ldrb	r3, [r3, #0]
 8006e92:	b25b      	sxtb	r3, r3
 8006e94:	f023 030f 	bic.w	r3, r3, #15
 8006e98:	b25a      	sxtb	r2, r3
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	0a1b      	lsrs	r3, r3, #8
 8006e9e:	b25b      	sxtb	r3, r3
 8006ea0:	f003 030f 	and.w	r3, r3, #15
 8006ea4:	b25b      	sxtb	r3, r3
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	b25b      	sxtb	r3, r3
 8006eaa:	b2db      	uxtb	r3, r3
 8006eac:	697a      	ldr	r2, [r7, #20]
 8006eae:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	70da      	strb	r2, [r3, #3]
			break;
 8006eb6:	e057      	b.n	8006f68 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	0a1b      	lsrs	r3, r3, #8
 8006ec0:	4413      	add	r3, r2
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	68f8      	ldr	r0, [r7, #12]
 8006ec6:	f7ff fe07 	bl	8006ad8 <move_window>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006ece:	7ffb      	ldrb	r3, [r7, #31]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d146      	bne.n	8006f62 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	005b      	lsls	r3, r3, #1
 8006ede:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8006ee2:	4413      	add	r3, r2
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	b292      	uxth	r2, r2
 8006ee8:	4611      	mov	r1, r2
 8006eea:	4618      	mov	r0, r3
 8006eec:	f7ff fb89 	bl	8006602 <st_word>
			fs->wflag = 1;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	70da      	strb	r2, [r3, #3]
			break;
 8006ef6:	e037      	b.n	8006f68 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	09db      	lsrs	r3, r3, #7
 8006f00:	4413      	add	r3, r2
 8006f02:	4619      	mov	r1, r3
 8006f04:	68f8      	ldr	r0, [r7, #12]
 8006f06:	f7ff fde7 	bl	8006ad8 <move_window>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006f0e:	7ffb      	ldrb	r3, [r7, #31]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d128      	bne.n	8006f66 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	009b      	lsls	r3, r3, #2
 8006f24:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006f28:	4413      	add	r3, r2
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f7ff fb46 	bl	80065bc <ld_dword>
 8006f30:	4603      	mov	r3, r0
 8006f32:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006f36:	4323      	orrs	r3, r4
 8006f38:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	009b      	lsls	r3, r3, #2
 8006f44:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006f48:	4413      	add	r3, r2
 8006f4a:	6879      	ldr	r1, [r7, #4]
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f7ff fb73 	bl	8006638 <st_dword>
			fs->wflag = 1;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2201      	movs	r2, #1
 8006f56:	70da      	strb	r2, [r3, #3]
			break;
 8006f58:	e006      	b.n	8006f68 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006f5a:	bf00      	nop
 8006f5c:	e004      	b.n	8006f68 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006f5e:	bf00      	nop
 8006f60:	e002      	b.n	8006f68 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006f62:	bf00      	nop
 8006f64:	e000      	b.n	8006f68 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8006f66:	bf00      	nop
		}
	}
	return res;
 8006f68:	7ffb      	ldrb	r3, [r7, #31]
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3724      	adds	r7, #36	; 0x24
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd90      	pop	{r4, r7, pc}

08006f72 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006f72:	b580      	push	{r7, lr}
 8006f74:	b088      	sub	sp, #32
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	60f8      	str	r0, [r7, #12]
 8006f7a:	60b9      	str	r1, [r7, #8]
 8006f7c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	2b01      	cmp	r3, #1
 8006f8c:	d904      	bls.n	8006f98 <remove_chain+0x26>
 8006f8e:	69bb      	ldr	r3, [r7, #24]
 8006f90:	699b      	ldr	r3, [r3, #24]
 8006f92:	68ba      	ldr	r2, [r7, #8]
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d301      	bcc.n	8006f9c <remove_chain+0x2a>
 8006f98:	2302      	movs	r3, #2
 8006f9a:	e04b      	b.n	8007034 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d00c      	beq.n	8006fbc <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006fa2:	f04f 32ff 	mov.w	r2, #4294967295
 8006fa6:	6879      	ldr	r1, [r7, #4]
 8006fa8:	69b8      	ldr	r0, [r7, #24]
 8006faa:	f7ff fef8 	bl	8006d9e <put_fat>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006fb2:	7ffb      	ldrb	r3, [r7, #31]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d001      	beq.n	8006fbc <remove_chain+0x4a>
 8006fb8:	7ffb      	ldrb	r3, [r7, #31]
 8006fba:	e03b      	b.n	8007034 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006fbc:	68b9      	ldr	r1, [r7, #8]
 8006fbe:	68f8      	ldr	r0, [r7, #12]
 8006fc0:	f7ff fe45 	bl	8006c4e <get_fat>
 8006fc4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d031      	beq.n	8007030 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	2b01      	cmp	r3, #1
 8006fd0:	d101      	bne.n	8006fd6 <remove_chain+0x64>
 8006fd2:	2302      	movs	r3, #2
 8006fd4:	e02e      	b.n	8007034 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fdc:	d101      	bne.n	8006fe2 <remove_chain+0x70>
 8006fde:	2301      	movs	r3, #1
 8006fe0:	e028      	b.n	8007034 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	68b9      	ldr	r1, [r7, #8]
 8006fe6:	69b8      	ldr	r0, [r7, #24]
 8006fe8:	f7ff fed9 	bl	8006d9e <put_fat>
 8006fec:	4603      	mov	r3, r0
 8006fee:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006ff0:	7ffb      	ldrb	r3, [r7, #31]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d001      	beq.n	8006ffa <remove_chain+0x88>
 8006ff6:	7ffb      	ldrb	r3, [r7, #31]
 8006ff8:	e01c      	b.n	8007034 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006ffa:	69bb      	ldr	r3, [r7, #24]
 8006ffc:	695a      	ldr	r2, [r3, #20]
 8006ffe:	69bb      	ldr	r3, [r7, #24]
 8007000:	699b      	ldr	r3, [r3, #24]
 8007002:	3b02      	subs	r3, #2
 8007004:	429a      	cmp	r2, r3
 8007006:	d20b      	bcs.n	8007020 <remove_chain+0xae>
			fs->free_clst++;
 8007008:	69bb      	ldr	r3, [r7, #24]
 800700a:	695b      	ldr	r3, [r3, #20]
 800700c:	1c5a      	adds	r2, r3, #1
 800700e:	69bb      	ldr	r3, [r7, #24]
 8007010:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8007012:	69bb      	ldr	r3, [r7, #24]
 8007014:	791b      	ldrb	r3, [r3, #4]
 8007016:	f043 0301 	orr.w	r3, r3, #1
 800701a:	b2da      	uxtb	r2, r3
 800701c:	69bb      	ldr	r3, [r7, #24]
 800701e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007024:	69bb      	ldr	r3, [r7, #24]
 8007026:	699b      	ldr	r3, [r3, #24]
 8007028:	68ba      	ldr	r2, [r7, #8]
 800702a:	429a      	cmp	r2, r3
 800702c:	d3c6      	bcc.n	8006fbc <remove_chain+0x4a>
 800702e:	e000      	b.n	8007032 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007030:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007032:	2300      	movs	r3, #0
}
 8007034:	4618      	mov	r0, r3
 8007036:	3720      	adds	r7, #32
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}

0800703c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b088      	sub	sp, #32
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
 8007044:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d10d      	bne.n	800706e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	691b      	ldr	r3, [r3, #16]
 8007056:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007058:	69bb      	ldr	r3, [r7, #24]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d004      	beq.n	8007068 <create_chain+0x2c>
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	699b      	ldr	r3, [r3, #24]
 8007062:	69ba      	ldr	r2, [r7, #24]
 8007064:	429a      	cmp	r2, r3
 8007066:	d31b      	bcc.n	80070a0 <create_chain+0x64>
 8007068:	2301      	movs	r3, #1
 800706a:	61bb      	str	r3, [r7, #24]
 800706c:	e018      	b.n	80070a0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800706e:	6839      	ldr	r1, [r7, #0]
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f7ff fdec 	bl	8006c4e <get_fat>
 8007076:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2b01      	cmp	r3, #1
 800707c:	d801      	bhi.n	8007082 <create_chain+0x46>
 800707e:	2301      	movs	r3, #1
 8007080:	e070      	b.n	8007164 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007088:	d101      	bne.n	800708e <create_chain+0x52>
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	e06a      	b.n	8007164 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	699b      	ldr	r3, [r3, #24]
 8007092:	68fa      	ldr	r2, [r7, #12]
 8007094:	429a      	cmp	r2, r3
 8007096:	d201      	bcs.n	800709c <create_chain+0x60>
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	e063      	b.n	8007164 <create_chain+0x128>
		scl = clst;
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80070a0:	69bb      	ldr	r3, [r7, #24]
 80070a2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80070a4:	69fb      	ldr	r3, [r7, #28]
 80070a6:	3301      	adds	r3, #1
 80070a8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	699b      	ldr	r3, [r3, #24]
 80070ae:	69fa      	ldr	r2, [r7, #28]
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d307      	bcc.n	80070c4 <create_chain+0x88>
				ncl = 2;
 80070b4:	2302      	movs	r3, #2
 80070b6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80070b8:	69fa      	ldr	r2, [r7, #28]
 80070ba:	69bb      	ldr	r3, [r7, #24]
 80070bc:	429a      	cmp	r2, r3
 80070be:	d901      	bls.n	80070c4 <create_chain+0x88>
 80070c0:	2300      	movs	r3, #0
 80070c2:	e04f      	b.n	8007164 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80070c4:	69f9      	ldr	r1, [r7, #28]
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f7ff fdc1 	bl	8006c4e <get_fat>
 80070cc:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d00e      	beq.n	80070f2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2b01      	cmp	r3, #1
 80070d8:	d003      	beq.n	80070e2 <create_chain+0xa6>
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070e0:	d101      	bne.n	80070e6 <create_chain+0xaa>
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	e03e      	b.n	8007164 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80070e6:	69fa      	ldr	r2, [r7, #28]
 80070e8:	69bb      	ldr	r3, [r7, #24]
 80070ea:	429a      	cmp	r2, r3
 80070ec:	d1da      	bne.n	80070a4 <create_chain+0x68>
 80070ee:	2300      	movs	r3, #0
 80070f0:	e038      	b.n	8007164 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80070f2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80070f4:	f04f 32ff 	mov.w	r2, #4294967295
 80070f8:	69f9      	ldr	r1, [r7, #28]
 80070fa:	6938      	ldr	r0, [r7, #16]
 80070fc:	f7ff fe4f 	bl	8006d9e <put_fat>
 8007100:	4603      	mov	r3, r0
 8007102:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007104:	7dfb      	ldrb	r3, [r7, #23]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d109      	bne.n	800711e <create_chain+0xe2>
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d006      	beq.n	800711e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007110:	69fa      	ldr	r2, [r7, #28]
 8007112:	6839      	ldr	r1, [r7, #0]
 8007114:	6938      	ldr	r0, [r7, #16]
 8007116:	f7ff fe42 	bl	8006d9e <put_fat>
 800711a:	4603      	mov	r3, r0
 800711c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800711e:	7dfb      	ldrb	r3, [r7, #23]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d116      	bne.n	8007152 <create_chain+0x116>
		fs->last_clst = ncl;
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	69fa      	ldr	r2, [r7, #28]
 8007128:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	695a      	ldr	r2, [r3, #20]
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	699b      	ldr	r3, [r3, #24]
 8007132:	3b02      	subs	r3, #2
 8007134:	429a      	cmp	r2, r3
 8007136:	d804      	bhi.n	8007142 <create_chain+0x106>
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	695b      	ldr	r3, [r3, #20]
 800713c:	1e5a      	subs	r2, r3, #1
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	791b      	ldrb	r3, [r3, #4]
 8007146:	f043 0301 	orr.w	r3, r3, #1
 800714a:	b2da      	uxtb	r2, r3
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	711a      	strb	r2, [r3, #4]
 8007150:	e007      	b.n	8007162 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007152:	7dfb      	ldrb	r3, [r7, #23]
 8007154:	2b01      	cmp	r3, #1
 8007156:	d102      	bne.n	800715e <create_chain+0x122>
 8007158:	f04f 33ff 	mov.w	r3, #4294967295
 800715c:	e000      	b.n	8007160 <create_chain+0x124>
 800715e:	2301      	movs	r3, #1
 8007160:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007162:	69fb      	ldr	r3, [r7, #28]
}
 8007164:	4618      	mov	r0, r3
 8007166:	3720      	adds	r7, #32
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}

0800716c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800716c:	b480      	push	{r7}
 800716e:	b087      	sub	sp, #28
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007180:	3304      	adds	r3, #4
 8007182:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	0a5b      	lsrs	r3, r3, #9
 8007188:	68fa      	ldr	r2, [r7, #12]
 800718a:	8952      	ldrh	r2, [r2, #10]
 800718c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007190:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	1d1a      	adds	r2, r3, #4
 8007196:	613a      	str	r2, [r7, #16]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d101      	bne.n	80071a6 <clmt_clust+0x3a>
 80071a2:	2300      	movs	r3, #0
 80071a4:	e010      	b.n	80071c8 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80071a6:	697a      	ldr	r2, [r7, #20]
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	429a      	cmp	r2, r3
 80071ac:	d307      	bcc.n	80071be <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80071ae:	697a      	ldr	r2, [r7, #20]
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	1ad3      	subs	r3, r2, r3
 80071b4:	617b      	str	r3, [r7, #20]
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	3304      	adds	r3, #4
 80071ba:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80071bc:	e7e9      	b.n	8007192 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80071be:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	4413      	add	r3, r2
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	371c      	adds	r7, #28
 80071cc:	46bd      	mov	sp, r7
 80071ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d2:	4770      	bx	lr

080071d4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b086      	sub	sp, #24
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80071ea:	d204      	bcs.n	80071f6 <dir_sdi+0x22>
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	f003 031f 	and.w	r3, r3, #31
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d001      	beq.n	80071fa <dir_sdi+0x26>
		return FR_INT_ERR;
 80071f6:	2302      	movs	r3, #2
 80071f8:	e063      	b.n	80072c2 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	683a      	ldr	r2, [r7, #0]
 80071fe:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d106      	bne.n	800721a <dir_sdi+0x46>
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	781b      	ldrb	r3, [r3, #0]
 8007210:	2b02      	cmp	r3, #2
 8007212:	d902      	bls.n	800721a <dir_sdi+0x46>
		clst = fs->dirbase;
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007218:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d10c      	bne.n	800723a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	095b      	lsrs	r3, r3, #5
 8007224:	693a      	ldr	r2, [r7, #16]
 8007226:	8912      	ldrh	r2, [r2, #8]
 8007228:	4293      	cmp	r3, r2
 800722a:	d301      	bcc.n	8007230 <dir_sdi+0x5c>
 800722c:	2302      	movs	r3, #2
 800722e:	e048      	b.n	80072c2 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	61da      	str	r2, [r3, #28]
 8007238:	e029      	b.n	800728e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	895b      	ldrh	r3, [r3, #10]
 800723e:	025b      	lsls	r3, r3, #9
 8007240:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007242:	e019      	b.n	8007278 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6979      	ldr	r1, [r7, #20]
 8007248:	4618      	mov	r0, r3
 800724a:	f7ff fd00 	bl	8006c4e <get_fat>
 800724e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007256:	d101      	bne.n	800725c <dir_sdi+0x88>
 8007258:	2301      	movs	r3, #1
 800725a:	e032      	b.n	80072c2 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	2b01      	cmp	r3, #1
 8007260:	d904      	bls.n	800726c <dir_sdi+0x98>
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	699b      	ldr	r3, [r3, #24]
 8007266:	697a      	ldr	r2, [r7, #20]
 8007268:	429a      	cmp	r2, r3
 800726a:	d301      	bcc.n	8007270 <dir_sdi+0x9c>
 800726c:	2302      	movs	r3, #2
 800726e:	e028      	b.n	80072c2 <dir_sdi+0xee>
			ofs -= csz;
 8007270:	683a      	ldr	r2, [r7, #0]
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	1ad3      	subs	r3, r2, r3
 8007276:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007278:	683a      	ldr	r2, [r7, #0]
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	429a      	cmp	r2, r3
 800727e:	d2e1      	bcs.n	8007244 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8007280:	6979      	ldr	r1, [r7, #20]
 8007282:	6938      	ldr	r0, [r7, #16]
 8007284:	f7ff fcc4 	bl	8006c10 <clust2sect>
 8007288:	4602      	mov	r2, r0
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	697a      	ldr	r2, [r7, #20]
 8007292:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	69db      	ldr	r3, [r3, #28]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d101      	bne.n	80072a0 <dir_sdi+0xcc>
 800729c:	2302      	movs	r3, #2
 800729e:	e010      	b.n	80072c2 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	69da      	ldr	r2, [r3, #28]
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	0a5b      	lsrs	r3, r3, #9
 80072a8:	441a      	add	r2, r3
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072ba:	441a      	add	r2, r3
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80072c0:	2300      	movs	r3, #0
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	3718      	adds	r7, #24
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}

080072ca <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80072ca:	b580      	push	{r7, lr}
 80072cc:	b086      	sub	sp, #24
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	6078      	str	r0, [r7, #4]
 80072d2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	695b      	ldr	r3, [r3, #20]
 80072de:	3320      	adds	r3, #32
 80072e0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	69db      	ldr	r3, [r3, #28]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d003      	beq.n	80072f2 <dir_next+0x28>
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80072f0:	d301      	bcc.n	80072f6 <dir_next+0x2c>
 80072f2:	2304      	movs	r3, #4
 80072f4:	e0aa      	b.n	800744c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	f040 8098 	bne.w	8007432 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	69db      	ldr	r3, [r3, #28]
 8007306:	1c5a      	adds	r2, r3, #1
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	699b      	ldr	r3, [r3, #24]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d10b      	bne.n	800732c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	095b      	lsrs	r3, r3, #5
 8007318:	68fa      	ldr	r2, [r7, #12]
 800731a:	8912      	ldrh	r2, [r2, #8]
 800731c:	4293      	cmp	r3, r2
 800731e:	f0c0 8088 	bcc.w	8007432 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2200      	movs	r2, #0
 8007326:	61da      	str	r2, [r3, #28]
 8007328:	2304      	movs	r3, #4
 800732a:	e08f      	b.n	800744c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	0a5b      	lsrs	r3, r3, #9
 8007330:	68fa      	ldr	r2, [r7, #12]
 8007332:	8952      	ldrh	r2, [r2, #10]
 8007334:	3a01      	subs	r2, #1
 8007336:	4013      	ands	r3, r2
 8007338:	2b00      	cmp	r3, #0
 800733a:	d17a      	bne.n	8007432 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800733c:	687a      	ldr	r2, [r7, #4]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	699b      	ldr	r3, [r3, #24]
 8007342:	4619      	mov	r1, r3
 8007344:	4610      	mov	r0, r2
 8007346:	f7ff fc82 	bl	8006c4e <get_fat>
 800734a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	2b01      	cmp	r3, #1
 8007350:	d801      	bhi.n	8007356 <dir_next+0x8c>
 8007352:	2302      	movs	r3, #2
 8007354:	e07a      	b.n	800744c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800735c:	d101      	bne.n	8007362 <dir_next+0x98>
 800735e:	2301      	movs	r3, #1
 8007360:	e074      	b.n	800744c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	699b      	ldr	r3, [r3, #24]
 8007366:	697a      	ldr	r2, [r7, #20]
 8007368:	429a      	cmp	r2, r3
 800736a:	d358      	bcc.n	800741e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d104      	bne.n	800737c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2200      	movs	r2, #0
 8007376:	61da      	str	r2, [r3, #28]
 8007378:	2304      	movs	r3, #4
 800737a:	e067      	b.n	800744c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800737c:	687a      	ldr	r2, [r7, #4]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	699b      	ldr	r3, [r3, #24]
 8007382:	4619      	mov	r1, r3
 8007384:	4610      	mov	r0, r2
 8007386:	f7ff fe59 	bl	800703c <create_chain>
 800738a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d101      	bne.n	8007396 <dir_next+0xcc>
 8007392:	2307      	movs	r3, #7
 8007394:	e05a      	b.n	800744c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	2b01      	cmp	r3, #1
 800739a:	d101      	bne.n	80073a0 <dir_next+0xd6>
 800739c:	2302      	movs	r3, #2
 800739e:	e055      	b.n	800744c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073a6:	d101      	bne.n	80073ac <dir_next+0xe2>
 80073a8:	2301      	movs	r3, #1
 80073aa:	e04f      	b.n	800744c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80073ac:	68f8      	ldr	r0, [r7, #12]
 80073ae:	f7ff fb4f 	bl	8006a50 <sync_window>
 80073b2:	4603      	mov	r3, r0
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d001      	beq.n	80073bc <dir_next+0xf2>
 80073b8:	2301      	movs	r3, #1
 80073ba:	e047      	b.n	800744c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	3334      	adds	r3, #52	; 0x34
 80073c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80073c4:	2100      	movs	r1, #0
 80073c6:	4618      	mov	r0, r3
 80073c8:	f7ff f983 	bl	80066d2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80073cc:	2300      	movs	r3, #0
 80073ce:	613b      	str	r3, [r7, #16]
 80073d0:	6979      	ldr	r1, [r7, #20]
 80073d2:	68f8      	ldr	r0, [r7, #12]
 80073d4:	f7ff fc1c 	bl	8006c10 <clust2sect>
 80073d8:	4602      	mov	r2, r0
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	631a      	str	r2, [r3, #48]	; 0x30
 80073de:	e012      	b.n	8007406 <dir_next+0x13c>
						fs->wflag = 1;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2201      	movs	r2, #1
 80073e4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80073e6:	68f8      	ldr	r0, [r7, #12]
 80073e8:	f7ff fb32 	bl	8006a50 <sync_window>
 80073ec:	4603      	mov	r3, r0
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d001      	beq.n	80073f6 <dir_next+0x12c>
 80073f2:	2301      	movs	r3, #1
 80073f4:	e02a      	b.n	800744c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	3301      	adds	r3, #1
 80073fa:	613b      	str	r3, [r7, #16]
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007400:	1c5a      	adds	r2, r3, #1
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	631a      	str	r2, [r3, #48]	; 0x30
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	895b      	ldrh	r3, [r3, #10]
 800740a:	461a      	mov	r2, r3
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	4293      	cmp	r3, r2
 8007410:	d3e6      	bcc.n	80073e0 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	1ad2      	subs	r2, r2, r3
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	697a      	ldr	r2, [r7, #20]
 8007422:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007424:	6979      	ldr	r1, [r7, #20]
 8007426:	68f8      	ldr	r0, [r7, #12]
 8007428:	f7ff fbf2 	bl	8006c10 <clust2sect>
 800742c:	4602      	mov	r2, r0
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	68ba      	ldr	r2, [r7, #8]
 8007436:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007444:	441a      	add	r2, r3
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800744a:	2300      	movs	r3, #0
}
 800744c:	4618      	mov	r0, r3
 800744e:	3718      	adds	r7, #24
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}

08007454 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b086      	sub	sp, #24
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007464:	2100      	movs	r1, #0
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f7ff feb4 	bl	80071d4 <dir_sdi>
 800746c:	4603      	mov	r3, r0
 800746e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007470:	7dfb      	ldrb	r3, [r7, #23]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d12b      	bne.n	80074ce <dir_alloc+0x7a>
		n = 0;
 8007476:	2300      	movs	r3, #0
 8007478:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	69db      	ldr	r3, [r3, #28]
 800747e:	4619      	mov	r1, r3
 8007480:	68f8      	ldr	r0, [r7, #12]
 8007482:	f7ff fb29 	bl	8006ad8 <move_window>
 8007486:	4603      	mov	r3, r0
 8007488:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800748a:	7dfb      	ldrb	r3, [r7, #23]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d11d      	bne.n	80074cc <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6a1b      	ldr	r3, [r3, #32]
 8007494:	781b      	ldrb	r3, [r3, #0]
 8007496:	2be5      	cmp	r3, #229	; 0xe5
 8007498:	d004      	beq.n	80074a4 <dir_alloc+0x50>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6a1b      	ldr	r3, [r3, #32]
 800749e:	781b      	ldrb	r3, [r3, #0]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d107      	bne.n	80074b4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	3301      	adds	r3, #1
 80074a8:	613b      	str	r3, [r7, #16]
 80074aa:	693a      	ldr	r2, [r7, #16]
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	429a      	cmp	r2, r3
 80074b0:	d102      	bne.n	80074b8 <dir_alloc+0x64>
 80074b2:	e00c      	b.n	80074ce <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80074b4:	2300      	movs	r3, #0
 80074b6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80074b8:	2101      	movs	r1, #1
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f7ff ff05 	bl	80072ca <dir_next>
 80074c0:	4603      	mov	r3, r0
 80074c2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80074c4:	7dfb      	ldrb	r3, [r7, #23]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d0d7      	beq.n	800747a <dir_alloc+0x26>
 80074ca:	e000      	b.n	80074ce <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80074cc:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80074ce:	7dfb      	ldrb	r3, [r7, #23]
 80074d0:	2b04      	cmp	r3, #4
 80074d2:	d101      	bne.n	80074d8 <dir_alloc+0x84>
 80074d4:	2307      	movs	r3, #7
 80074d6:	75fb      	strb	r3, [r7, #23]
	return res;
 80074d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3718      	adds	r7, #24
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}

080074e2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80074e2:	b580      	push	{r7, lr}
 80074e4:	b084      	sub	sp, #16
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	6078      	str	r0, [r7, #4]
 80074ea:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	331a      	adds	r3, #26
 80074f0:	4618      	mov	r0, r3
 80074f2:	f7ff f84b 	bl	800658c <ld_word>
 80074f6:	4603      	mov	r3, r0
 80074f8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	781b      	ldrb	r3, [r3, #0]
 80074fe:	2b03      	cmp	r3, #3
 8007500:	d109      	bne.n	8007516 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	3314      	adds	r3, #20
 8007506:	4618      	mov	r0, r3
 8007508:	f7ff f840 	bl	800658c <ld_word>
 800750c:	4603      	mov	r3, r0
 800750e:	041b      	lsls	r3, r3, #16
 8007510:	68fa      	ldr	r2, [r7, #12]
 8007512:	4313      	orrs	r3, r2
 8007514:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007516:	68fb      	ldr	r3, [r7, #12]
}
 8007518:	4618      	mov	r0, r3
 800751a:	3710      	adds	r7, #16
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}

08007520 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b084      	sub	sp, #16
 8007524:	af00      	add	r7, sp, #0
 8007526:	60f8      	str	r0, [r7, #12]
 8007528:	60b9      	str	r1, [r7, #8]
 800752a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	331a      	adds	r3, #26
 8007530:	687a      	ldr	r2, [r7, #4]
 8007532:	b292      	uxth	r2, r2
 8007534:	4611      	mov	r1, r2
 8007536:	4618      	mov	r0, r3
 8007538:	f7ff f863 	bl	8006602 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	781b      	ldrb	r3, [r3, #0]
 8007540:	2b03      	cmp	r3, #3
 8007542:	d109      	bne.n	8007558 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	f103 0214 	add.w	r2, r3, #20
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	0c1b      	lsrs	r3, r3, #16
 800754e:	b29b      	uxth	r3, r3
 8007550:	4619      	mov	r1, r3
 8007552:	4610      	mov	r0, r2
 8007554:	f7ff f855 	bl	8006602 <st_word>
	}
}
 8007558:	bf00      	nop
 800755a:	3710      	adds	r7, #16
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b086      	sub	sp, #24
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800756e:	2100      	movs	r1, #0
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f7ff fe2f 	bl	80071d4 <dir_sdi>
 8007576:	4603      	mov	r3, r0
 8007578:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800757a:	7dfb      	ldrb	r3, [r7, #23]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d001      	beq.n	8007584 <dir_find+0x24>
 8007580:	7dfb      	ldrb	r3, [r7, #23]
 8007582:	e03e      	b.n	8007602 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	69db      	ldr	r3, [r3, #28]
 8007588:	4619      	mov	r1, r3
 800758a:	6938      	ldr	r0, [r7, #16]
 800758c:	f7ff faa4 	bl	8006ad8 <move_window>
 8007590:	4603      	mov	r3, r0
 8007592:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007594:	7dfb      	ldrb	r3, [r7, #23]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d12f      	bne.n	80075fa <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6a1b      	ldr	r3, [r3, #32]
 800759e:	781b      	ldrb	r3, [r3, #0]
 80075a0:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80075a2:	7bfb      	ldrb	r3, [r7, #15]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d102      	bne.n	80075ae <dir_find+0x4e>
 80075a8:	2304      	movs	r3, #4
 80075aa:	75fb      	strb	r3, [r7, #23]
 80075ac:	e028      	b.n	8007600 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6a1b      	ldr	r3, [r3, #32]
 80075b2:	330b      	adds	r3, #11
 80075b4:	781b      	ldrb	r3, [r3, #0]
 80075b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80075ba:	b2da      	uxtb	r2, r3
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6a1b      	ldr	r3, [r3, #32]
 80075c4:	330b      	adds	r3, #11
 80075c6:	781b      	ldrb	r3, [r3, #0]
 80075c8:	f003 0308 	and.w	r3, r3, #8
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d10a      	bne.n	80075e6 <dir_find+0x86>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6a18      	ldr	r0, [r3, #32]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	3324      	adds	r3, #36	; 0x24
 80075d8:	220b      	movs	r2, #11
 80075da:	4619      	mov	r1, r3
 80075dc:	f7ff f894 	bl	8006708 <mem_cmp>
 80075e0:	4603      	mov	r3, r0
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d00b      	beq.n	80075fe <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80075e6:	2100      	movs	r1, #0
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f7ff fe6e 	bl	80072ca <dir_next>
 80075ee:	4603      	mov	r3, r0
 80075f0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80075f2:	7dfb      	ldrb	r3, [r7, #23]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d0c5      	beq.n	8007584 <dir_find+0x24>
 80075f8:	e002      	b.n	8007600 <dir_find+0xa0>
		if (res != FR_OK) break;
 80075fa:	bf00      	nop
 80075fc:	e000      	b.n	8007600 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80075fe:	bf00      	nop

	return res;
 8007600:	7dfb      	ldrb	r3, [r7, #23]
}
 8007602:	4618      	mov	r0, r3
 8007604:	3718      	adds	r7, #24
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}

0800760a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800760a:	b580      	push	{r7, lr}
 800760c:	b084      	sub	sp, #16
 800760e:	af00      	add	r7, sp, #0
 8007610:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8007618:	2101      	movs	r1, #1
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f7ff ff1a 	bl	8007454 <dir_alloc>
 8007620:	4603      	mov	r3, r0
 8007622:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007624:	7bfb      	ldrb	r3, [r7, #15]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d11c      	bne.n	8007664 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	69db      	ldr	r3, [r3, #28]
 800762e:	4619      	mov	r1, r3
 8007630:	68b8      	ldr	r0, [r7, #8]
 8007632:	f7ff fa51 	bl	8006ad8 <move_window>
 8007636:	4603      	mov	r3, r0
 8007638:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800763a:	7bfb      	ldrb	r3, [r7, #15]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d111      	bne.n	8007664 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6a1b      	ldr	r3, [r3, #32]
 8007644:	2220      	movs	r2, #32
 8007646:	2100      	movs	r1, #0
 8007648:	4618      	mov	r0, r3
 800764a:	f7ff f842 	bl	80066d2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6a18      	ldr	r0, [r3, #32]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	3324      	adds	r3, #36	; 0x24
 8007656:	220b      	movs	r2, #11
 8007658:	4619      	mov	r1, r3
 800765a:	f7ff f819 	bl	8006690 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	2201      	movs	r2, #1
 8007662:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007664:	7bfb      	ldrb	r3, [r7, #15]
}
 8007666:	4618      	mov	r0, r3
 8007668:	3710      	adds	r7, #16
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}

0800766e <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800766e:	b580      	push	{r7, lr}
 8007670:	b086      	sub	sp, #24
 8007672:	af00      	add	r7, sp, #0
 8007674:	6078      	str	r0, [r7, #4]
 8007676:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	2200      	movs	r2, #0
 800767c:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	69db      	ldr	r3, [r3, #28]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d04e      	beq.n	8007724 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8007686:	2300      	movs	r3, #0
 8007688:	613b      	str	r3, [r7, #16]
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800768e:	e021      	b.n	80076d4 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6a1a      	ldr	r2, [r3, #32]
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	1c59      	adds	r1, r3, #1
 8007698:	6179      	str	r1, [r7, #20]
 800769a:	4413      	add	r3, r2
 800769c:	781b      	ldrb	r3, [r3, #0]
 800769e:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 80076a0:	7bfb      	ldrb	r3, [r7, #15]
 80076a2:	2b20      	cmp	r3, #32
 80076a4:	d100      	bne.n	80076a8 <get_fileinfo+0x3a>
 80076a6:	e015      	b.n	80076d4 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80076a8:	7bfb      	ldrb	r3, [r7, #15]
 80076aa:	2b05      	cmp	r3, #5
 80076ac:	d101      	bne.n	80076b2 <get_fileinfo+0x44>
 80076ae:	23e5      	movs	r3, #229	; 0xe5
 80076b0:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	2b09      	cmp	r3, #9
 80076b6:	d106      	bne.n	80076c6 <get_fileinfo+0x58>
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	1c5a      	adds	r2, r3, #1
 80076bc:	613a      	str	r2, [r7, #16]
 80076be:	683a      	ldr	r2, [r7, #0]
 80076c0:	4413      	add	r3, r2
 80076c2:	222e      	movs	r2, #46	; 0x2e
 80076c4:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	1c5a      	adds	r2, r3, #1
 80076ca:	613a      	str	r2, [r7, #16]
 80076cc:	683a      	ldr	r2, [r7, #0]
 80076ce:	4413      	add	r3, r2
 80076d0:	7bfa      	ldrb	r2, [r7, #15]
 80076d2:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	2b0a      	cmp	r3, #10
 80076d8:	d9da      	bls.n	8007690 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 80076da:	683a      	ldr	r2, [r7, #0]
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	4413      	add	r3, r2
 80076e0:	3309      	adds	r3, #9
 80076e2:	2200      	movs	r2, #0
 80076e4:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6a1b      	ldr	r3, [r3, #32]
 80076ea:	7ada      	ldrb	r2, [r3, #11]
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6a1b      	ldr	r3, [r3, #32]
 80076f4:	331c      	adds	r3, #28
 80076f6:	4618      	mov	r0, r3
 80076f8:	f7fe ff60 	bl	80065bc <ld_dword>
 80076fc:	4602      	mov	r2, r0
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6a1b      	ldr	r3, [r3, #32]
 8007706:	3316      	adds	r3, #22
 8007708:	4618      	mov	r0, r3
 800770a:	f7fe ff57 	bl	80065bc <ld_dword>
 800770e:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	b29a      	uxth	r2, r3
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	80da      	strh	r2, [r3, #6]
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	0c1b      	lsrs	r3, r3, #16
 800771c:	b29a      	uxth	r2, r3
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	809a      	strh	r2, [r3, #4]
 8007722:	e000      	b.n	8007726 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8007724:	bf00      	nop
}
 8007726:	3718      	adds	r7, #24
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}

0800772c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b088      	sub	sp, #32
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	60fb      	str	r3, [r7, #12]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	3324      	adds	r3, #36	; 0x24
 8007740:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8007742:	220b      	movs	r2, #11
 8007744:	2120      	movs	r1, #32
 8007746:	68b8      	ldr	r0, [r7, #8]
 8007748:	f7fe ffc3 	bl	80066d2 <mem_set>
	si = i = 0; ni = 8;
 800774c:	2300      	movs	r3, #0
 800774e:	613b      	str	r3, [r7, #16]
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	61fb      	str	r3, [r7, #28]
 8007754:	2308      	movs	r3, #8
 8007756:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8007758:	69fb      	ldr	r3, [r7, #28]
 800775a:	1c5a      	adds	r2, r3, #1
 800775c:	61fa      	str	r2, [r7, #28]
 800775e:	68fa      	ldr	r2, [r7, #12]
 8007760:	4413      	add	r3, r2
 8007762:	781b      	ldrb	r3, [r3, #0]
 8007764:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007766:	7efb      	ldrb	r3, [r7, #27]
 8007768:	2b20      	cmp	r3, #32
 800776a:	d94e      	bls.n	800780a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800776c:	7efb      	ldrb	r3, [r7, #27]
 800776e:	2b2f      	cmp	r3, #47	; 0x2f
 8007770:	d006      	beq.n	8007780 <create_name+0x54>
 8007772:	7efb      	ldrb	r3, [r7, #27]
 8007774:	2b5c      	cmp	r3, #92	; 0x5c
 8007776:	d110      	bne.n	800779a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007778:	e002      	b.n	8007780 <create_name+0x54>
 800777a:	69fb      	ldr	r3, [r7, #28]
 800777c:	3301      	adds	r3, #1
 800777e:	61fb      	str	r3, [r7, #28]
 8007780:	68fa      	ldr	r2, [r7, #12]
 8007782:	69fb      	ldr	r3, [r7, #28]
 8007784:	4413      	add	r3, r2
 8007786:	781b      	ldrb	r3, [r3, #0]
 8007788:	2b2f      	cmp	r3, #47	; 0x2f
 800778a:	d0f6      	beq.n	800777a <create_name+0x4e>
 800778c:	68fa      	ldr	r2, [r7, #12]
 800778e:	69fb      	ldr	r3, [r7, #28]
 8007790:	4413      	add	r3, r2
 8007792:	781b      	ldrb	r3, [r3, #0]
 8007794:	2b5c      	cmp	r3, #92	; 0x5c
 8007796:	d0f0      	beq.n	800777a <create_name+0x4e>
			break;
 8007798:	e038      	b.n	800780c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800779a:	7efb      	ldrb	r3, [r7, #27]
 800779c:	2b2e      	cmp	r3, #46	; 0x2e
 800779e:	d003      	beq.n	80077a8 <create_name+0x7c>
 80077a0:	693a      	ldr	r2, [r7, #16]
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	429a      	cmp	r2, r3
 80077a6:	d30c      	bcc.n	80077c2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	2b0b      	cmp	r3, #11
 80077ac:	d002      	beq.n	80077b4 <create_name+0x88>
 80077ae:	7efb      	ldrb	r3, [r7, #27]
 80077b0:	2b2e      	cmp	r3, #46	; 0x2e
 80077b2:	d001      	beq.n	80077b8 <create_name+0x8c>
 80077b4:	2306      	movs	r3, #6
 80077b6:	e044      	b.n	8007842 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80077b8:	2308      	movs	r3, #8
 80077ba:	613b      	str	r3, [r7, #16]
 80077bc:	230b      	movs	r3, #11
 80077be:	617b      	str	r3, [r7, #20]
			continue;
 80077c0:	e022      	b.n	8007808 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80077c2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	da04      	bge.n	80077d4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80077ca:	7efb      	ldrb	r3, [r7, #27]
 80077cc:	3b80      	subs	r3, #128	; 0x80
 80077ce:	4a1f      	ldr	r2, [pc, #124]	; (800784c <create_name+0x120>)
 80077d0:	5cd3      	ldrb	r3, [r2, r3]
 80077d2:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80077d4:	7efb      	ldrb	r3, [r7, #27]
 80077d6:	4619      	mov	r1, r3
 80077d8:	481d      	ldr	r0, [pc, #116]	; (8007850 <create_name+0x124>)
 80077da:	f7fe ffbc 	bl	8006756 <chk_chr>
 80077de:	4603      	mov	r3, r0
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d001      	beq.n	80077e8 <create_name+0xbc>
 80077e4:	2306      	movs	r3, #6
 80077e6:	e02c      	b.n	8007842 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80077e8:	7efb      	ldrb	r3, [r7, #27]
 80077ea:	2b60      	cmp	r3, #96	; 0x60
 80077ec:	d905      	bls.n	80077fa <create_name+0xce>
 80077ee:	7efb      	ldrb	r3, [r7, #27]
 80077f0:	2b7a      	cmp	r3, #122	; 0x7a
 80077f2:	d802      	bhi.n	80077fa <create_name+0xce>
 80077f4:	7efb      	ldrb	r3, [r7, #27]
 80077f6:	3b20      	subs	r3, #32
 80077f8:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	1c5a      	adds	r2, r3, #1
 80077fe:	613a      	str	r2, [r7, #16]
 8007800:	68ba      	ldr	r2, [r7, #8]
 8007802:	4413      	add	r3, r2
 8007804:	7efa      	ldrb	r2, [r7, #27]
 8007806:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8007808:	e7a6      	b.n	8007758 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800780a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800780c:	68fa      	ldr	r2, [r7, #12]
 800780e:	69fb      	ldr	r3, [r7, #28]
 8007810:	441a      	add	r2, r3
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d101      	bne.n	8007820 <create_name+0xf4>
 800781c:	2306      	movs	r3, #6
 800781e:	e010      	b.n	8007842 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	781b      	ldrb	r3, [r3, #0]
 8007824:	2be5      	cmp	r3, #229	; 0xe5
 8007826:	d102      	bne.n	800782e <create_name+0x102>
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	2205      	movs	r2, #5
 800782c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800782e:	7efb      	ldrb	r3, [r7, #27]
 8007830:	2b20      	cmp	r3, #32
 8007832:	d801      	bhi.n	8007838 <create_name+0x10c>
 8007834:	2204      	movs	r2, #4
 8007836:	e000      	b.n	800783a <create_name+0x10e>
 8007838:	2200      	movs	r2, #0
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	330b      	adds	r3, #11
 800783e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007840:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8007842:	4618      	mov	r0, r3
 8007844:	3720      	adds	r7, #32
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}
 800784a:	bf00      	nop
 800784c:	0800c694 	.word	0x0800c694
 8007850:	0800c614 	.word	0x0800c614

08007854 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b086      	sub	sp, #24
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
 800785c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007868:	e002      	b.n	8007870 <follow_path+0x1c>
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	3301      	adds	r3, #1
 800786e:	603b      	str	r3, [r7, #0]
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	781b      	ldrb	r3, [r3, #0]
 8007874:	2b2f      	cmp	r3, #47	; 0x2f
 8007876:	d0f8      	beq.n	800786a <follow_path+0x16>
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	781b      	ldrb	r3, [r3, #0]
 800787c:	2b5c      	cmp	r3, #92	; 0x5c
 800787e:	d0f4      	beq.n	800786a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	2200      	movs	r2, #0
 8007884:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	781b      	ldrb	r3, [r3, #0]
 800788a:	2b1f      	cmp	r3, #31
 800788c:	d80a      	bhi.n	80078a4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2280      	movs	r2, #128	; 0x80
 8007892:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007896:	2100      	movs	r1, #0
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f7ff fc9b 	bl	80071d4 <dir_sdi>
 800789e:	4603      	mov	r3, r0
 80078a0:	75fb      	strb	r3, [r7, #23]
 80078a2:	e043      	b.n	800792c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80078a4:	463b      	mov	r3, r7
 80078a6:	4619      	mov	r1, r3
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f7ff ff3f 	bl	800772c <create_name>
 80078ae:	4603      	mov	r3, r0
 80078b0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80078b2:	7dfb      	ldrb	r3, [r7, #23]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d134      	bne.n	8007922 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f7ff fe51 	bl	8007560 <dir_find>
 80078be:	4603      	mov	r3, r0
 80078c0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80078c8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80078ca:	7dfb      	ldrb	r3, [r7, #23]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d00a      	beq.n	80078e6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80078d0:	7dfb      	ldrb	r3, [r7, #23]
 80078d2:	2b04      	cmp	r3, #4
 80078d4:	d127      	bne.n	8007926 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80078d6:	7afb      	ldrb	r3, [r7, #11]
 80078d8:	f003 0304 	and.w	r3, r3, #4
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d122      	bne.n	8007926 <follow_path+0xd2>
 80078e0:	2305      	movs	r3, #5
 80078e2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80078e4:	e01f      	b.n	8007926 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80078e6:	7afb      	ldrb	r3, [r7, #11]
 80078e8:	f003 0304 	and.w	r3, r3, #4
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d11c      	bne.n	800792a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	799b      	ldrb	r3, [r3, #6]
 80078f4:	f003 0310 	and.w	r3, r3, #16
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d102      	bne.n	8007902 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80078fc:	2305      	movs	r3, #5
 80078fe:	75fb      	strb	r3, [r7, #23]
 8007900:	e014      	b.n	800792c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	695b      	ldr	r3, [r3, #20]
 800790c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007910:	4413      	add	r3, r2
 8007912:	4619      	mov	r1, r3
 8007914:	68f8      	ldr	r0, [r7, #12]
 8007916:	f7ff fde4 	bl	80074e2 <ld_clust>
 800791a:	4602      	mov	r2, r0
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007920:	e7c0      	b.n	80078a4 <follow_path+0x50>
			if (res != FR_OK) break;
 8007922:	bf00      	nop
 8007924:	e002      	b.n	800792c <follow_path+0xd8>
				break;
 8007926:	bf00      	nop
 8007928:	e000      	b.n	800792c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800792a:	bf00      	nop
			}
		}
	}

	return res;
 800792c:	7dfb      	ldrb	r3, [r7, #23]
}
 800792e:	4618      	mov	r0, r3
 8007930:	3718      	adds	r7, #24
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}

08007936 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007936:	b480      	push	{r7}
 8007938:	b087      	sub	sp, #28
 800793a:	af00      	add	r7, sp, #0
 800793c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800793e:	f04f 33ff 	mov.w	r3, #4294967295
 8007942:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d031      	beq.n	80079b0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	617b      	str	r3, [r7, #20]
 8007952:	e002      	b.n	800795a <get_ldnumber+0x24>
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	3301      	adds	r3, #1
 8007958:	617b      	str	r3, [r7, #20]
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	781b      	ldrb	r3, [r3, #0]
 800795e:	2b20      	cmp	r3, #32
 8007960:	d903      	bls.n	800796a <get_ldnumber+0x34>
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	781b      	ldrb	r3, [r3, #0]
 8007966:	2b3a      	cmp	r3, #58	; 0x3a
 8007968:	d1f4      	bne.n	8007954 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	781b      	ldrb	r3, [r3, #0]
 800796e:	2b3a      	cmp	r3, #58	; 0x3a
 8007970:	d11c      	bne.n	80079ac <get_ldnumber+0x76>
			tp = *path;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	1c5a      	adds	r2, r3, #1
 800797c:	60fa      	str	r2, [r7, #12]
 800797e:	781b      	ldrb	r3, [r3, #0]
 8007980:	3b30      	subs	r3, #48	; 0x30
 8007982:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	2b09      	cmp	r3, #9
 8007988:	d80e      	bhi.n	80079a8 <get_ldnumber+0x72>
 800798a:	68fa      	ldr	r2, [r7, #12]
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	429a      	cmp	r2, r3
 8007990:	d10a      	bne.n	80079a8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d107      	bne.n	80079a8 <get_ldnumber+0x72>
					vol = (int)i;
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	3301      	adds	r3, #1
 80079a0:	617b      	str	r3, [r7, #20]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	697a      	ldr	r2, [r7, #20]
 80079a6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	e002      	b.n	80079b2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80079ac:	2300      	movs	r3, #0
 80079ae:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80079b0:	693b      	ldr	r3, [r7, #16]
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	371c      	adds	r7, #28
 80079b6:	46bd      	mov	sp, r7
 80079b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079bc:	4770      	bx	lr
	...

080079c0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b082      	sub	sp, #8
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
 80079c8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2200      	movs	r2, #0
 80079ce:	70da      	strb	r2, [r3, #3]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f04f 32ff 	mov.w	r2, #4294967295
 80079d6:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80079d8:	6839      	ldr	r1, [r7, #0]
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f7ff f87c 	bl	8006ad8 <move_window>
 80079e0:	4603      	mov	r3, r0
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d001      	beq.n	80079ea <check_fs+0x2a>
 80079e6:	2304      	movs	r3, #4
 80079e8:	e038      	b.n	8007a5c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	3334      	adds	r3, #52	; 0x34
 80079ee:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80079f2:	4618      	mov	r0, r3
 80079f4:	f7fe fdca 	bl	800658c <ld_word>
 80079f8:	4603      	mov	r3, r0
 80079fa:	461a      	mov	r2, r3
 80079fc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d001      	beq.n	8007a08 <check_fs+0x48>
 8007a04:	2303      	movs	r3, #3
 8007a06:	e029      	b.n	8007a5c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007a0e:	2be9      	cmp	r3, #233	; 0xe9
 8007a10:	d009      	beq.n	8007a26 <check_fs+0x66>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007a18:	2beb      	cmp	r3, #235	; 0xeb
 8007a1a:	d11e      	bne.n	8007a5a <check_fs+0x9a>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007a22:	2b90      	cmp	r3, #144	; 0x90
 8007a24:	d119      	bne.n	8007a5a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	3334      	adds	r3, #52	; 0x34
 8007a2a:	3336      	adds	r3, #54	; 0x36
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f7fe fdc5 	bl	80065bc <ld_dword>
 8007a32:	4603      	mov	r3, r0
 8007a34:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007a38:	4a0a      	ldr	r2, [pc, #40]	; (8007a64 <check_fs+0xa4>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d101      	bne.n	8007a42 <check_fs+0x82>
 8007a3e:	2300      	movs	r3, #0
 8007a40:	e00c      	b.n	8007a5c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	3334      	adds	r3, #52	; 0x34
 8007a46:	3352      	adds	r3, #82	; 0x52
 8007a48:	4618      	mov	r0, r3
 8007a4a:	f7fe fdb7 	bl	80065bc <ld_dword>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	4a05      	ldr	r2, [pc, #20]	; (8007a68 <check_fs+0xa8>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d101      	bne.n	8007a5a <check_fs+0x9a>
 8007a56:	2300      	movs	r3, #0
 8007a58:	e000      	b.n	8007a5c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007a5a:	2302      	movs	r3, #2
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3708      	adds	r7, #8
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}
 8007a64:	00544146 	.word	0x00544146
 8007a68:	33544146 	.word	0x33544146

08007a6c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b096      	sub	sp, #88	; 0x58
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	60f8      	str	r0, [r7, #12]
 8007a74:	60b9      	str	r1, [r7, #8]
 8007a76:	4613      	mov	r3, r2
 8007a78:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007a80:	68f8      	ldr	r0, [r7, #12]
 8007a82:	f7ff ff58 	bl	8007936 <get_ldnumber>
 8007a86:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007a88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	da01      	bge.n	8007a92 <find_volume+0x26>
 8007a8e:	230b      	movs	r3, #11
 8007a90:	e235      	b.n	8007efe <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007a92:	4aa5      	ldr	r2, [pc, #660]	; (8007d28 <find_volume+0x2bc>)
 8007a94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a9a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d101      	bne.n	8007aa6 <find_volume+0x3a>
 8007aa2:	230c      	movs	r3, #12
 8007aa4:	e22b      	b.n	8007efe <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 8007aa6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007aa8:	f7fe fe70 	bl	800678c <lock_fs>
 8007aac:	4603      	mov	r3, r0
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d101      	bne.n	8007ab6 <find_volume+0x4a>
 8007ab2:	230f      	movs	r3, #15
 8007ab4:	e223      	b.n	8007efe <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007aba:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007abc:	79fb      	ldrb	r3, [r7, #7]
 8007abe:	f023 0301 	bic.w	r3, r3, #1
 8007ac2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ac6:	781b      	ldrb	r3, [r3, #0]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d01a      	beq.n	8007b02 <find_volume+0x96>
		stat = disk_status(fs->drv);
 8007acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ace:	785b      	ldrb	r3, [r3, #1]
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f7fe fcbd 	bl	8006450 <disk_status>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007adc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007ae0:	f003 0301 	and.w	r3, r3, #1
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d10c      	bne.n	8007b02 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007ae8:	79fb      	ldrb	r3, [r7, #7]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d007      	beq.n	8007afe <find_volume+0x92>
 8007aee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007af2:	f003 0304 	and.w	r3, r3, #4
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d001      	beq.n	8007afe <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8007afa:	230a      	movs	r3, #10
 8007afc:	e1ff      	b.n	8007efe <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 8007afe:	2300      	movs	r3, #0
 8007b00:	e1fd      	b.n	8007efe <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b04:	2200      	movs	r2, #0
 8007b06:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007b08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b0a:	b2da      	uxtb	r2, r3
 8007b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b0e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b12:	785b      	ldrb	r3, [r3, #1]
 8007b14:	4618      	mov	r0, r3
 8007b16:	f7fe fcb5 	bl	8006484 <disk_initialize>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007b20:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007b24:	f003 0301 	and.w	r3, r3, #1
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d001      	beq.n	8007b30 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007b2c:	2303      	movs	r3, #3
 8007b2e:	e1e6      	b.n	8007efe <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007b30:	79fb      	ldrb	r3, [r7, #7]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d007      	beq.n	8007b46 <find_volume+0xda>
 8007b36:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007b3a:	f003 0304 	and.w	r3, r3, #4
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d001      	beq.n	8007b46 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8007b42:	230a      	movs	r3, #10
 8007b44:	e1db      	b.n	8007efe <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007b46:	2300      	movs	r3, #0
 8007b48:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007b4a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007b4c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007b4e:	f7ff ff37 	bl	80079c0 <check_fs>
 8007b52:	4603      	mov	r3, r0
 8007b54:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007b58:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007b5c:	2b02      	cmp	r3, #2
 8007b5e:	d149      	bne.n	8007bf4 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007b60:	2300      	movs	r3, #0
 8007b62:	643b      	str	r3, [r7, #64]	; 0x40
 8007b64:	e01e      	b.n	8007ba4 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b68:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007b6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b6e:	011b      	lsls	r3, r3, #4
 8007b70:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007b74:	4413      	add	r3, r2
 8007b76:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b7a:	3304      	adds	r3, #4
 8007b7c:	781b      	ldrb	r3, [r3, #0]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d006      	beq.n	8007b90 <find_volume+0x124>
 8007b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b84:	3308      	adds	r3, #8
 8007b86:	4618      	mov	r0, r3
 8007b88:	f7fe fd18 	bl	80065bc <ld_dword>
 8007b8c:	4602      	mov	r2, r0
 8007b8e:	e000      	b.n	8007b92 <find_volume+0x126>
 8007b90:	2200      	movs	r2, #0
 8007b92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b94:	009b      	lsls	r3, r3, #2
 8007b96:	3358      	adds	r3, #88	; 0x58
 8007b98:	443b      	add	r3, r7
 8007b9a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007b9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ba0:	3301      	adds	r3, #1
 8007ba2:	643b      	str	r3, [r7, #64]	; 0x40
 8007ba4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ba6:	2b03      	cmp	r3, #3
 8007ba8:	d9dd      	bls.n	8007b66 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007baa:	2300      	movs	r3, #0
 8007bac:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007bae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d002      	beq.n	8007bba <find_volume+0x14e>
 8007bb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bb6:	3b01      	subs	r3, #1
 8007bb8:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007bba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bbc:	009b      	lsls	r3, r3, #2
 8007bbe:	3358      	adds	r3, #88	; 0x58
 8007bc0:	443b      	add	r3, r7
 8007bc2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007bc6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007bc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d005      	beq.n	8007bda <find_volume+0x16e>
 8007bce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007bd0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007bd2:	f7ff fef5 	bl	80079c0 <check_fs>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	e000      	b.n	8007bdc <find_volume+0x170>
 8007bda:	2303      	movs	r3, #3
 8007bdc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007be0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007be4:	2b01      	cmp	r3, #1
 8007be6:	d905      	bls.n	8007bf4 <find_volume+0x188>
 8007be8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bea:	3301      	adds	r3, #1
 8007bec:	643b      	str	r3, [r7, #64]	; 0x40
 8007bee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bf0:	2b03      	cmp	r3, #3
 8007bf2:	d9e2      	bls.n	8007bba <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007bf4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007bf8:	2b04      	cmp	r3, #4
 8007bfa:	d101      	bne.n	8007c00 <find_volume+0x194>
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	e17e      	b.n	8007efe <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007c00:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	d901      	bls.n	8007c0c <find_volume+0x1a0>
 8007c08:	230d      	movs	r3, #13
 8007c0a:	e178      	b.n	8007efe <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c0e:	3334      	adds	r3, #52	; 0x34
 8007c10:	330b      	adds	r3, #11
 8007c12:	4618      	mov	r0, r3
 8007c14:	f7fe fcba 	bl	800658c <ld_word>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c1e:	d001      	beq.n	8007c24 <find_volume+0x1b8>
 8007c20:	230d      	movs	r3, #13
 8007c22:	e16c      	b.n	8007efe <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c26:	3334      	adds	r3, #52	; 0x34
 8007c28:	3316      	adds	r3, #22
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f7fe fcae 	bl	800658c <ld_word>
 8007c30:	4603      	mov	r3, r0
 8007c32:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007c34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d106      	bne.n	8007c48 <find_volume+0x1dc>
 8007c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c3c:	3334      	adds	r3, #52	; 0x34
 8007c3e:	3324      	adds	r3, #36	; 0x24
 8007c40:	4618      	mov	r0, r3
 8007c42:	f7fe fcbb 	bl	80065bc <ld_dword>
 8007c46:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c4a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007c4c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c50:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c56:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c5a:	789b      	ldrb	r3, [r3, #2]
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	d005      	beq.n	8007c6c <find_volume+0x200>
 8007c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c62:	789b      	ldrb	r3, [r3, #2]
 8007c64:	2b02      	cmp	r3, #2
 8007c66:	d001      	beq.n	8007c6c <find_volume+0x200>
 8007c68:	230d      	movs	r3, #13
 8007c6a:	e148      	b.n	8007efe <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c6e:	789b      	ldrb	r3, [r3, #2]
 8007c70:	461a      	mov	r2, r3
 8007c72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c74:	fb02 f303 	mul.w	r3, r2, r3
 8007c78:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c80:	b29a      	uxth	r2, r3
 8007c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c84:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c88:	895b      	ldrh	r3, [r3, #10]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d008      	beq.n	8007ca0 <find_volume+0x234>
 8007c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c90:	895b      	ldrh	r3, [r3, #10]
 8007c92:	461a      	mov	r2, r3
 8007c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c96:	895b      	ldrh	r3, [r3, #10]
 8007c98:	3b01      	subs	r3, #1
 8007c9a:	4013      	ands	r3, r2
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d001      	beq.n	8007ca4 <find_volume+0x238>
 8007ca0:	230d      	movs	r3, #13
 8007ca2:	e12c      	b.n	8007efe <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ca6:	3334      	adds	r3, #52	; 0x34
 8007ca8:	3311      	adds	r3, #17
 8007caa:	4618      	mov	r0, r3
 8007cac:	f7fe fc6e 	bl	800658c <ld_word>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cb6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cba:	891b      	ldrh	r3, [r3, #8]
 8007cbc:	f003 030f 	and.w	r3, r3, #15
 8007cc0:	b29b      	uxth	r3, r3
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d001      	beq.n	8007cca <find_volume+0x25e>
 8007cc6:	230d      	movs	r3, #13
 8007cc8:	e119      	b.n	8007efe <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ccc:	3334      	adds	r3, #52	; 0x34
 8007cce:	3313      	adds	r3, #19
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f7fe fc5b 	bl	800658c <ld_word>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007cda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d106      	bne.n	8007cee <find_volume+0x282>
 8007ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce2:	3334      	adds	r3, #52	; 0x34
 8007ce4:	3320      	adds	r3, #32
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f7fe fc68 	bl	80065bc <ld_dword>
 8007cec:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cf0:	3334      	adds	r3, #52	; 0x34
 8007cf2:	330e      	adds	r3, #14
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f7fe fc49 	bl	800658c <ld_word>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007cfe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d101      	bne.n	8007d08 <find_volume+0x29c>
 8007d04:	230d      	movs	r3, #13
 8007d06:	e0fa      	b.n	8007efe <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007d08:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007d0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d0c:	4413      	add	r3, r2
 8007d0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d10:	8912      	ldrh	r2, [r2, #8]
 8007d12:	0912      	lsrs	r2, r2, #4
 8007d14:	b292      	uxth	r2, r2
 8007d16:	4413      	add	r3, r2
 8007d18:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007d1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d1e:	429a      	cmp	r2, r3
 8007d20:	d204      	bcs.n	8007d2c <find_volume+0x2c0>
 8007d22:	230d      	movs	r3, #13
 8007d24:	e0eb      	b.n	8007efe <find_volume+0x492>
 8007d26:	bf00      	nop
 8007d28:	20000988 	.word	0x20000988
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007d2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d30:	1ad3      	subs	r3, r2, r3
 8007d32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d34:	8952      	ldrh	r2, [r2, #10]
 8007d36:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d3a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d101      	bne.n	8007d46 <find_volume+0x2da>
 8007d42:	230d      	movs	r3, #13
 8007d44:	e0db      	b.n	8007efe <find_volume+0x492>
		fmt = FS_FAT32;
 8007d46:	2303      	movs	r3, #3
 8007d48:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d4e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d802      	bhi.n	8007d5c <find_volume+0x2f0>
 8007d56:	2302      	movs	r3, #2
 8007d58:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d5e:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d802      	bhi.n	8007d6c <find_volume+0x300>
 8007d66:	2301      	movs	r3, #1
 8007d68:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d6e:	1c9a      	adds	r2, r3, #2
 8007d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d72:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8007d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d76:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007d78:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007d7a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007d7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d7e:	441a      	add	r2, r3
 8007d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d82:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8007d84:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d88:	441a      	add	r2, r3
 8007d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d8c:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8007d8e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007d92:	2b03      	cmp	r3, #3
 8007d94:	d11e      	bne.n	8007dd4 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d98:	3334      	adds	r3, #52	; 0x34
 8007d9a:	332a      	adds	r3, #42	; 0x2a
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f7fe fbf5 	bl	800658c <ld_word>
 8007da2:	4603      	mov	r3, r0
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d001      	beq.n	8007dac <find_volume+0x340>
 8007da8:	230d      	movs	r3, #13
 8007daa:	e0a8      	b.n	8007efe <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dae:	891b      	ldrh	r3, [r3, #8]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d001      	beq.n	8007db8 <find_volume+0x34c>
 8007db4:	230d      	movs	r3, #13
 8007db6:	e0a2      	b.n	8007efe <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dba:	3334      	adds	r3, #52	; 0x34
 8007dbc:	332c      	adds	r3, #44	; 0x2c
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f7fe fbfc 	bl	80065bc <ld_dword>
 8007dc4:	4602      	mov	r2, r0
 8007dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc8:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dcc:	699b      	ldr	r3, [r3, #24]
 8007dce:	009b      	lsls	r3, r3, #2
 8007dd0:	647b      	str	r3, [r7, #68]	; 0x44
 8007dd2:	e01f      	b.n	8007e14 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dd6:	891b      	ldrh	r3, [r3, #8]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d101      	bne.n	8007de0 <find_volume+0x374>
 8007ddc:	230d      	movs	r3, #13
 8007dde:	e08e      	b.n	8007efe <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007de2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007de4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007de6:	441a      	add	r2, r3
 8007de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dea:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007dec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007df0:	2b02      	cmp	r3, #2
 8007df2:	d103      	bne.n	8007dfc <find_volume+0x390>
 8007df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007df6:	699b      	ldr	r3, [r3, #24]
 8007df8:	005b      	lsls	r3, r3, #1
 8007dfa:	e00a      	b.n	8007e12 <find_volume+0x3a6>
 8007dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dfe:	699a      	ldr	r2, [r3, #24]
 8007e00:	4613      	mov	r3, r2
 8007e02:	005b      	lsls	r3, r3, #1
 8007e04:	4413      	add	r3, r2
 8007e06:	085a      	lsrs	r2, r3, #1
 8007e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e0a:	699b      	ldr	r3, [r3, #24]
 8007e0c:	f003 0301 	and.w	r3, r3, #1
 8007e10:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007e12:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e16:	69da      	ldr	r2, [r3, #28]
 8007e18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e1a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8007e1e:	0a5b      	lsrs	r3, r3, #9
 8007e20:	429a      	cmp	r2, r3
 8007e22:	d201      	bcs.n	8007e28 <find_volume+0x3bc>
 8007e24:	230d      	movs	r3, #13
 8007e26:	e06a      	b.n	8007efe <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e2a:	f04f 32ff 	mov.w	r2, #4294967295
 8007e2e:	615a      	str	r2, [r3, #20]
 8007e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e32:	695a      	ldr	r2, [r3, #20]
 8007e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e36:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8007e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e3a:	2280      	movs	r2, #128	; 0x80
 8007e3c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007e3e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007e42:	2b03      	cmp	r3, #3
 8007e44:	d149      	bne.n	8007eda <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e48:	3334      	adds	r3, #52	; 0x34
 8007e4a:	3330      	adds	r3, #48	; 0x30
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f7fe fb9d 	bl	800658c <ld_word>
 8007e52:	4603      	mov	r3, r0
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	d140      	bne.n	8007eda <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007e58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e5a:	3301      	adds	r3, #1
 8007e5c:	4619      	mov	r1, r3
 8007e5e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007e60:	f7fe fe3a 	bl	8006ad8 <move_window>
 8007e64:	4603      	mov	r3, r0
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d137      	bne.n	8007eda <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 8007e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e72:	3334      	adds	r3, #52	; 0x34
 8007e74:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f7fe fb87 	bl	800658c <ld_word>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	461a      	mov	r2, r3
 8007e82:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007e86:	429a      	cmp	r2, r3
 8007e88:	d127      	bne.n	8007eda <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e8c:	3334      	adds	r3, #52	; 0x34
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f7fe fb94 	bl	80065bc <ld_dword>
 8007e94:	4603      	mov	r3, r0
 8007e96:	4a1c      	ldr	r2, [pc, #112]	; (8007f08 <find_volume+0x49c>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d11e      	bne.n	8007eda <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e9e:	3334      	adds	r3, #52	; 0x34
 8007ea0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f7fe fb89 	bl	80065bc <ld_dword>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	4a17      	ldr	r2, [pc, #92]	; (8007f0c <find_volume+0x4a0>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d113      	bne.n	8007eda <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eb4:	3334      	adds	r3, #52	; 0x34
 8007eb6:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f7fe fb7e 	bl	80065bc <ld_dword>
 8007ec0:	4602      	mov	r2, r0
 8007ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ec4:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ec8:	3334      	adds	r3, #52	; 0x34
 8007eca:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f7fe fb74 	bl	80065bc <ld_dword>
 8007ed4:	4602      	mov	r2, r0
 8007ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ed8:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007edc:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8007ee0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007ee2:	4b0b      	ldr	r3, [pc, #44]	; (8007f10 <find_volume+0x4a4>)
 8007ee4:	881b      	ldrh	r3, [r3, #0]
 8007ee6:	3301      	adds	r3, #1
 8007ee8:	b29a      	uxth	r2, r3
 8007eea:	4b09      	ldr	r3, [pc, #36]	; (8007f10 <find_volume+0x4a4>)
 8007eec:	801a      	strh	r2, [r3, #0]
 8007eee:	4b08      	ldr	r3, [pc, #32]	; (8007f10 <find_volume+0x4a4>)
 8007ef0:	881a      	ldrh	r2, [r3, #0]
 8007ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ef4:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007ef6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007ef8:	f7fe fd86 	bl	8006a08 <clear_lock>
#endif
	return FR_OK;
 8007efc:	2300      	movs	r3, #0
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3758      	adds	r7, #88	; 0x58
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}
 8007f06:	bf00      	nop
 8007f08:	41615252 	.word	0x41615252
 8007f0c:	61417272 	.word	0x61417272
 8007f10:	2000098c 	.word	0x2000098c

08007f14 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b084      	sub	sp, #16
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007f1e:	2309      	movs	r3, #9
 8007f20:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d02e      	beq.n	8007f86 <validate+0x72>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d02a      	beq.n	8007f86 <validate+0x72>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	781b      	ldrb	r3, [r3, #0]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d025      	beq.n	8007f86 <validate+0x72>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	889a      	ldrh	r2, [r3, #4]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	88db      	ldrh	r3, [r3, #6]
 8007f44:	429a      	cmp	r2, r3
 8007f46:	d11e      	bne.n	8007f86 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f7fe fc1d 	bl	800678c <lock_fs>
 8007f52:	4603      	mov	r3, r0
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d014      	beq.n	8007f82 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	785b      	ldrb	r3, [r3, #1]
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f7fe fa76 	bl	8006450 <disk_status>
 8007f64:	4603      	mov	r3, r0
 8007f66:	f003 0301 	and.w	r3, r3, #1
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d102      	bne.n	8007f74 <validate+0x60>
				res = FR_OK;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	73fb      	strb	r3, [r7, #15]
 8007f72:	e008      	b.n	8007f86 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	2100      	movs	r1, #0
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f7fe fc1c 	bl	80067b8 <unlock_fs>
 8007f80:	e001      	b.n	8007f86 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8007f82:	230f      	movs	r3, #15
 8007f84:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007f86:	7bfb      	ldrb	r3, [r7, #15]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d102      	bne.n	8007f92 <validate+0x7e>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	e000      	b.n	8007f94 <validate+0x80>
 8007f92:	2300      	movs	r3, #0
 8007f94:	683a      	ldr	r2, [r7, #0]
 8007f96:	6013      	str	r3, [r2, #0]
	return res;
 8007f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3710      	adds	r7, #16
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}
	...

08007fa4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b088      	sub	sp, #32
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	60f8      	str	r0, [r7, #12]
 8007fac:	60b9      	str	r1, [r7, #8]
 8007fae:	4613      	mov	r3, r2
 8007fb0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007fb6:	f107 0310 	add.w	r3, r7, #16
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f7ff fcbb 	bl	8007936 <get_ldnumber>
 8007fc0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007fc2:	69fb      	ldr	r3, [r7, #28]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	da01      	bge.n	8007fcc <f_mount+0x28>
 8007fc8:	230b      	movs	r3, #11
 8007fca:	e048      	b.n	800805e <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007fcc:	4a26      	ldr	r2, [pc, #152]	; (8008068 <f_mount+0xc4>)
 8007fce:	69fb      	ldr	r3, [r7, #28]
 8007fd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fd4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007fd6:	69bb      	ldr	r3, [r7, #24]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d00f      	beq.n	8007ffc <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007fdc:	69b8      	ldr	r0, [r7, #24]
 8007fde:	f7fe fd13 	bl	8006a08 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8007fe2:	69bb      	ldr	r3, [r7, #24]
 8007fe4:	68db      	ldr	r3, [r3, #12]
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f000 fcef 	bl	80089ca <ff_del_syncobj>
 8007fec:	4603      	mov	r3, r0
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d101      	bne.n	8007ff6 <f_mount+0x52>
 8007ff2:	2302      	movs	r3, #2
 8007ff4:	e033      	b.n	800805e <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007ff6:	69bb      	ldr	r3, [r7, #24]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d00f      	beq.n	8008022 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	2200      	movs	r2, #0
 8008006:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8008008:	69fb      	ldr	r3, [r7, #28]
 800800a:	b2da      	uxtb	r2, r3
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	330c      	adds	r3, #12
 8008010:	4619      	mov	r1, r3
 8008012:	4610      	mov	r0, r2
 8008014:	f000 fcb9 	bl	800898a <ff_cre_syncobj>
 8008018:	4603      	mov	r3, r0
 800801a:	2b00      	cmp	r3, #0
 800801c:	d101      	bne.n	8008022 <f_mount+0x7e>
 800801e:	2302      	movs	r3, #2
 8008020:	e01d      	b.n	800805e <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008022:	68fa      	ldr	r2, [r7, #12]
 8008024:	4910      	ldr	r1, [pc, #64]	; (8008068 <f_mount+0xc4>)
 8008026:	69fb      	ldr	r3, [r7, #28]
 8008028:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d002      	beq.n	8008038 <f_mount+0x94>
 8008032:	79fb      	ldrb	r3, [r7, #7]
 8008034:	2b01      	cmp	r3, #1
 8008036:	d001      	beq.n	800803c <f_mount+0x98>
 8008038:	2300      	movs	r3, #0
 800803a:	e010      	b.n	800805e <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800803c:	f107 010c 	add.w	r1, r7, #12
 8008040:	f107 0308 	add.w	r3, r7, #8
 8008044:	2200      	movs	r2, #0
 8008046:	4618      	mov	r0, r3
 8008048:	f7ff fd10 	bl	8007a6c <find_volume>
 800804c:	4603      	mov	r3, r0
 800804e:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	7dfa      	ldrb	r2, [r7, #23]
 8008054:	4611      	mov	r1, r2
 8008056:	4618      	mov	r0, r3
 8008058:	f7fe fbae 	bl	80067b8 <unlock_fs>
 800805c:	7dfb      	ldrb	r3, [r7, #23]
}
 800805e:	4618      	mov	r0, r3
 8008060:	3720      	adds	r7, #32
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}
 8008066:	bf00      	nop
 8008068:	20000988 	.word	0x20000988

0800806c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b098      	sub	sp, #96	; 0x60
 8008070:	af00      	add	r7, sp, #0
 8008072:	60f8      	str	r0, [r7, #12]
 8008074:	60b9      	str	r1, [r7, #8]
 8008076:	4613      	mov	r3, r2
 8008078:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d101      	bne.n	8008084 <f_open+0x18>
 8008080:	2309      	movs	r3, #9
 8008082:	e1b3      	b.n	80083ec <f_open+0x380>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008084:	79fb      	ldrb	r3, [r7, #7]
 8008086:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800808a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800808c:	79fa      	ldrb	r2, [r7, #7]
 800808e:	f107 0110 	add.w	r1, r7, #16
 8008092:	f107 0308 	add.w	r3, r7, #8
 8008096:	4618      	mov	r0, r3
 8008098:	f7ff fce8 	bl	8007a6c <find_volume>
 800809c:	4603      	mov	r3, r0
 800809e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80080a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	f040 8190 	bne.w	80083cc <f_open+0x360>
		dj.obj.fs = fs;
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80080b0:	68ba      	ldr	r2, [r7, #8]
 80080b2:	f107 0314 	add.w	r3, r7, #20
 80080b6:	4611      	mov	r1, r2
 80080b8:	4618      	mov	r0, r3
 80080ba:	f7ff fbcb 	bl	8007854 <follow_path>
 80080be:	4603      	mov	r3, r0
 80080c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80080c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d11a      	bne.n	8008102 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80080cc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80080d0:	b25b      	sxtb	r3, r3
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	da03      	bge.n	80080de <f_open+0x72>
				res = FR_INVALID_NAME;
 80080d6:	2306      	movs	r3, #6
 80080d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80080dc:	e011      	b.n	8008102 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80080de:	79fb      	ldrb	r3, [r7, #7]
 80080e0:	f023 0301 	bic.w	r3, r3, #1
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	bf14      	ite	ne
 80080e8:	2301      	movne	r3, #1
 80080ea:	2300      	moveq	r3, #0
 80080ec:	b2db      	uxtb	r3, r3
 80080ee:	461a      	mov	r2, r3
 80080f0:	f107 0314 	add.w	r3, r7, #20
 80080f4:	4611      	mov	r1, r2
 80080f6:	4618      	mov	r0, r3
 80080f8:	f7fe fb7a 	bl	80067f0 <chk_lock>
 80080fc:	4603      	mov	r3, r0
 80080fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008102:	79fb      	ldrb	r3, [r7, #7]
 8008104:	f003 031c 	and.w	r3, r3, #28
 8008108:	2b00      	cmp	r3, #0
 800810a:	d07e      	beq.n	800820a <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 800810c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008110:	2b00      	cmp	r3, #0
 8008112:	d017      	beq.n	8008144 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008114:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008118:	2b04      	cmp	r3, #4
 800811a:	d10e      	bne.n	800813a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800811c:	f7fe fbc4 	bl	80068a8 <enq_lock>
 8008120:	4603      	mov	r3, r0
 8008122:	2b00      	cmp	r3, #0
 8008124:	d006      	beq.n	8008134 <f_open+0xc8>
 8008126:	f107 0314 	add.w	r3, r7, #20
 800812a:	4618      	mov	r0, r3
 800812c:	f7ff fa6d 	bl	800760a <dir_register>
 8008130:	4603      	mov	r3, r0
 8008132:	e000      	b.n	8008136 <f_open+0xca>
 8008134:	2312      	movs	r3, #18
 8008136:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800813a:	79fb      	ldrb	r3, [r7, #7]
 800813c:	f043 0308 	orr.w	r3, r3, #8
 8008140:	71fb      	strb	r3, [r7, #7]
 8008142:	e010      	b.n	8008166 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008144:	7ebb      	ldrb	r3, [r7, #26]
 8008146:	f003 0311 	and.w	r3, r3, #17
 800814a:	2b00      	cmp	r3, #0
 800814c:	d003      	beq.n	8008156 <f_open+0xea>
					res = FR_DENIED;
 800814e:	2307      	movs	r3, #7
 8008150:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008154:	e007      	b.n	8008166 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008156:	79fb      	ldrb	r3, [r7, #7]
 8008158:	f003 0304 	and.w	r3, r3, #4
 800815c:	2b00      	cmp	r3, #0
 800815e:	d002      	beq.n	8008166 <f_open+0xfa>
 8008160:	2308      	movs	r3, #8
 8008162:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008166:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800816a:	2b00      	cmp	r3, #0
 800816c:	d167      	bne.n	800823e <f_open+0x1d2>
 800816e:	79fb      	ldrb	r3, [r7, #7]
 8008170:	f003 0308 	and.w	r3, r3, #8
 8008174:	2b00      	cmp	r3, #0
 8008176:	d062      	beq.n	800823e <f_open+0x1d2>
				dw = GET_FATTIME();
 8008178:	4b9e      	ldr	r3, [pc, #632]	; (80083f4 <f_open+0x388>)
 800817a:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800817c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800817e:	330e      	adds	r3, #14
 8008180:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008182:	4618      	mov	r0, r3
 8008184:	f7fe fa58 	bl	8006638 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800818a:	3316      	adds	r3, #22
 800818c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800818e:	4618      	mov	r0, r3
 8008190:	f7fe fa52 	bl	8006638 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008196:	330b      	adds	r3, #11
 8008198:	2220      	movs	r2, #32
 800819a:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80081a0:	4611      	mov	r1, r2
 80081a2:	4618      	mov	r0, r3
 80081a4:	f7ff f99d 	bl	80074e2 <ld_clust>
 80081a8:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80081ae:	2200      	movs	r2, #0
 80081b0:	4618      	mov	r0, r3
 80081b2:	f7ff f9b5 	bl	8007520 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80081b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081b8:	331c      	adds	r3, #28
 80081ba:	2100      	movs	r1, #0
 80081bc:	4618      	mov	r0, r3
 80081be:	f7fe fa3b 	bl	8006638 <st_dword>
					fs->wflag = 1;
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	2201      	movs	r2, #1
 80081c6:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80081c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d037      	beq.n	800823e <f_open+0x1d2>
						dw = fs->winsect;
 80081ce:	693b      	ldr	r3, [r7, #16]
 80081d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081d2:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80081d4:	f107 0314 	add.w	r3, r7, #20
 80081d8:	2200      	movs	r2, #0
 80081da:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80081dc:	4618      	mov	r0, r3
 80081de:	f7fe fec8 	bl	8006f72 <remove_chain>
 80081e2:	4603      	mov	r3, r0
 80081e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80081e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d126      	bne.n	800823e <f_open+0x1d2>
							res = move_window(fs, dw);
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80081f4:	4618      	mov	r0, r3
 80081f6:	f7fe fc6f 	bl	8006ad8 <move_window>
 80081fa:	4603      	mov	r3, r0
 80081fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008204:	3a01      	subs	r2, #1
 8008206:	611a      	str	r2, [r3, #16]
 8008208:	e019      	b.n	800823e <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800820a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800820e:	2b00      	cmp	r3, #0
 8008210:	d115      	bne.n	800823e <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008212:	7ebb      	ldrb	r3, [r7, #26]
 8008214:	f003 0310 	and.w	r3, r3, #16
 8008218:	2b00      	cmp	r3, #0
 800821a:	d003      	beq.n	8008224 <f_open+0x1b8>
					res = FR_NO_FILE;
 800821c:	2304      	movs	r3, #4
 800821e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008222:	e00c      	b.n	800823e <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008224:	79fb      	ldrb	r3, [r7, #7]
 8008226:	f003 0302 	and.w	r3, r3, #2
 800822a:	2b00      	cmp	r3, #0
 800822c:	d007      	beq.n	800823e <f_open+0x1d2>
 800822e:	7ebb      	ldrb	r3, [r7, #26]
 8008230:	f003 0301 	and.w	r3, r3, #1
 8008234:	2b00      	cmp	r3, #0
 8008236:	d002      	beq.n	800823e <f_open+0x1d2>
						res = FR_DENIED;
 8008238:	2307      	movs	r3, #7
 800823a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800823e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008242:	2b00      	cmp	r3, #0
 8008244:	d128      	bne.n	8008298 <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008246:	79fb      	ldrb	r3, [r7, #7]
 8008248:	f003 0308 	and.w	r3, r3, #8
 800824c:	2b00      	cmp	r3, #0
 800824e:	d003      	beq.n	8008258 <f_open+0x1ec>
				mode |= FA_MODIFIED;
 8008250:	79fb      	ldrb	r3, [r7, #7]
 8008252:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008256:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008258:	693b      	ldr	r3, [r7, #16]
 800825a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8008260:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008266:	79fb      	ldrb	r3, [r7, #7]
 8008268:	f023 0301 	bic.w	r3, r3, #1
 800826c:	2b00      	cmp	r3, #0
 800826e:	bf14      	ite	ne
 8008270:	2301      	movne	r3, #1
 8008272:	2300      	moveq	r3, #0
 8008274:	b2db      	uxtb	r3, r3
 8008276:	461a      	mov	r2, r3
 8008278:	f107 0314 	add.w	r3, r7, #20
 800827c:	4611      	mov	r1, r2
 800827e:	4618      	mov	r0, r3
 8008280:	f7fe fb34 	bl	80068ec <inc_lock>
 8008284:	4602      	mov	r2, r0
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	691b      	ldr	r3, [r3, #16]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d102      	bne.n	8008298 <f_open+0x22c>
 8008292:	2302      	movs	r3, #2
 8008294:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008298:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800829c:	2b00      	cmp	r3, #0
 800829e:	f040 8095 	bne.w	80083cc <f_open+0x360>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80082a6:	4611      	mov	r1, r2
 80082a8:	4618      	mov	r0, r3
 80082aa:	f7ff f91a 	bl	80074e2 <ld_clust>
 80082ae:	4602      	mov	r2, r0
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80082b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082b6:	331c      	adds	r3, #28
 80082b8:	4618      	mov	r0, r3
 80082ba:	f7fe f97f 	bl	80065bc <ld_dword>
 80082be:	4602      	mov	r2, r0
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	2200      	movs	r2, #0
 80082c8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80082ca:	693a      	ldr	r2, [r7, #16]
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	88da      	ldrh	r2, [r3, #6]
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	79fa      	ldrb	r2, [r7, #7]
 80082dc:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	2200      	movs	r2, #0
 80082e2:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	2200      	movs	r2, #0
 80082e8:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	2200      	movs	r2, #0
 80082ee:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	3330      	adds	r3, #48	; 0x30
 80082f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80082f8:	2100      	movs	r1, #0
 80082fa:	4618      	mov	r0, r3
 80082fc:	f7fe f9e9 	bl	80066d2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008300:	79fb      	ldrb	r3, [r7, #7]
 8008302:	f003 0320 	and.w	r3, r3, #32
 8008306:	2b00      	cmp	r3, #0
 8008308:	d060      	beq.n	80083cc <f_open+0x360>
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	68db      	ldr	r3, [r3, #12]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d05c      	beq.n	80083cc <f_open+0x360>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	68da      	ldr	r2, [r3, #12]
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800831a:	693b      	ldr	r3, [r7, #16]
 800831c:	895b      	ldrh	r3, [r3, #10]
 800831e:	025b      	lsls	r3, r3, #9
 8008320:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	689b      	ldr	r3, [r3, #8]
 8008326:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	68db      	ldr	r3, [r3, #12]
 800832c:	657b      	str	r3, [r7, #84]	; 0x54
 800832e:	e016      	b.n	800835e <f_open+0x2f2>
					clst = get_fat(&fp->obj, clst);
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008334:	4618      	mov	r0, r3
 8008336:	f7fe fc8a 	bl	8006c4e <get_fat>
 800833a:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800833c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800833e:	2b01      	cmp	r3, #1
 8008340:	d802      	bhi.n	8008348 <f_open+0x2dc>
 8008342:	2302      	movs	r3, #2
 8008344:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008348:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800834a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800834e:	d102      	bne.n	8008356 <f_open+0x2ea>
 8008350:	2301      	movs	r3, #1
 8008352:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008356:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008358:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800835a:	1ad3      	subs	r3, r2, r3
 800835c:	657b      	str	r3, [r7, #84]	; 0x54
 800835e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008362:	2b00      	cmp	r3, #0
 8008364:	d103      	bne.n	800836e <f_open+0x302>
 8008366:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008368:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800836a:	429a      	cmp	r2, r3
 800836c:	d8e0      	bhi.n	8008330 <f_open+0x2c4>
				}
				fp->clust = clst;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008372:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008374:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008378:	2b00      	cmp	r3, #0
 800837a:	d127      	bne.n	80083cc <f_open+0x360>
 800837c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800837e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008382:	2b00      	cmp	r3, #0
 8008384:	d022      	beq.n	80083cc <f_open+0x360>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800838a:	4618      	mov	r0, r3
 800838c:	f7fe fc40 	bl	8006c10 <clust2sect>
 8008390:	6478      	str	r0, [r7, #68]	; 0x44
 8008392:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008394:	2b00      	cmp	r3, #0
 8008396:	d103      	bne.n	80083a0 <f_open+0x334>
						res = FR_INT_ERR;
 8008398:	2302      	movs	r3, #2
 800839a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800839e:	e015      	b.n	80083cc <f_open+0x360>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80083a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80083a2:	0a5a      	lsrs	r2, r3, #9
 80083a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083a6:	441a      	add	r2, r3
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	7858      	ldrb	r0, [r3, #1]
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	6a1a      	ldr	r2, [r3, #32]
 80083ba:	2301      	movs	r3, #1
 80083bc:	f7fe f888 	bl	80064d0 <disk_read>
 80083c0:	4603      	mov	r3, r0
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d002      	beq.n	80083cc <f_open+0x360>
 80083c6:	2301      	movs	r3, #1
 80083c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80083cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d002      	beq.n	80083da <f_open+0x36e>
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	2200      	movs	r2, #0
 80083d8:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80083da:	693b      	ldr	r3, [r7, #16]
 80083dc:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80083e0:	4611      	mov	r1, r2
 80083e2:	4618      	mov	r0, r3
 80083e4:	f7fe f9e8 	bl	80067b8 <unlock_fs>
 80083e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	3760      	adds	r7, #96	; 0x60
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}
 80083f4:	58c40000 	.word	0x58c40000

080083f8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b08c      	sub	sp, #48	; 0x30
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	60f8      	str	r0, [r7, #12]
 8008400:	60b9      	str	r1, [r7, #8]
 8008402:	607a      	str	r2, [r7, #4]
 8008404:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	2200      	movs	r2, #0
 800840e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	f107 0210 	add.w	r2, r7, #16
 8008416:	4611      	mov	r1, r2
 8008418:	4618      	mov	r0, r3
 800841a:	f7ff fd7b 	bl	8007f14 <validate>
 800841e:	4603      	mov	r3, r0
 8008420:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008424:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008428:	2b00      	cmp	r3, #0
 800842a:	d107      	bne.n	800843c <f_write+0x44>
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	7d5b      	ldrb	r3, [r3, #21]
 8008430:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008434:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008438:	2b00      	cmp	r3, #0
 800843a:	d009      	beq.n	8008450 <f_write+0x58>
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8008442:	4611      	mov	r1, r2
 8008444:	4618      	mov	r0, r3
 8008446:	f7fe f9b7 	bl	80067b8 <unlock_fs>
 800844a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800844e:	e173      	b.n	8008738 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	7d1b      	ldrb	r3, [r3, #20]
 8008454:	f003 0302 	and.w	r3, r3, #2
 8008458:	2b00      	cmp	r3, #0
 800845a:	d106      	bne.n	800846a <f_write+0x72>
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	2107      	movs	r1, #7
 8008460:	4618      	mov	r0, r3
 8008462:	f7fe f9a9 	bl	80067b8 <unlock_fs>
 8008466:	2307      	movs	r3, #7
 8008468:	e166      	b.n	8008738 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	699a      	ldr	r2, [r3, #24]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	441a      	add	r2, r3
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	699b      	ldr	r3, [r3, #24]
 8008476:	429a      	cmp	r2, r3
 8008478:	f080 814b 	bcs.w	8008712 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	699b      	ldr	r3, [r3, #24]
 8008480:	43db      	mvns	r3, r3
 8008482:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008484:	e145      	b.n	8008712 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	699b      	ldr	r3, [r3, #24]
 800848a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800848e:	2b00      	cmp	r3, #0
 8008490:	f040 8101 	bne.w	8008696 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	699b      	ldr	r3, [r3, #24]
 8008498:	0a5b      	lsrs	r3, r3, #9
 800849a:	693a      	ldr	r2, [r7, #16]
 800849c:	8952      	ldrh	r2, [r2, #10]
 800849e:	3a01      	subs	r2, #1
 80084a0:	4013      	ands	r3, r2
 80084a2:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80084a4:	69bb      	ldr	r3, [r7, #24]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d14d      	bne.n	8008546 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	699b      	ldr	r3, [r3, #24]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d10c      	bne.n	80084cc <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	689b      	ldr	r3, [r3, #8]
 80084b6:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80084b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d11a      	bne.n	80084f4 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	2100      	movs	r1, #0
 80084c2:	4618      	mov	r0, r3
 80084c4:	f7fe fdba 	bl	800703c <create_chain>
 80084c8:	62b8      	str	r0, [r7, #40]	; 0x28
 80084ca:	e013      	b.n	80084f4 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d007      	beq.n	80084e4 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	699b      	ldr	r3, [r3, #24]
 80084d8:	4619      	mov	r1, r3
 80084da:	68f8      	ldr	r0, [r7, #12]
 80084dc:	f7fe fe46 	bl	800716c <clmt_clust>
 80084e0:	62b8      	str	r0, [r7, #40]	; 0x28
 80084e2:	e007      	b.n	80084f4 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80084e4:	68fa      	ldr	r2, [r7, #12]
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	69db      	ldr	r3, [r3, #28]
 80084ea:	4619      	mov	r1, r3
 80084ec:	4610      	mov	r0, r2
 80084ee:	f7fe fda5 	bl	800703c <create_chain>
 80084f2:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80084f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	f000 8110 	beq.w	800871c <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80084fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084fe:	2b01      	cmp	r3, #1
 8008500:	d109      	bne.n	8008516 <f_write+0x11e>
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	2202      	movs	r2, #2
 8008506:	755a      	strb	r2, [r3, #21]
 8008508:	693b      	ldr	r3, [r7, #16]
 800850a:	2102      	movs	r1, #2
 800850c:	4618      	mov	r0, r3
 800850e:	f7fe f953 	bl	80067b8 <unlock_fs>
 8008512:	2302      	movs	r3, #2
 8008514:	e110      	b.n	8008738 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800851c:	d109      	bne.n	8008532 <f_write+0x13a>
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2201      	movs	r2, #1
 8008522:	755a      	strb	r2, [r3, #21]
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	2101      	movs	r1, #1
 8008528:	4618      	mov	r0, r3
 800852a:	f7fe f945 	bl	80067b8 <unlock_fs>
 800852e:	2301      	movs	r3, #1
 8008530:	e102      	b.n	8008738 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008536:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	689b      	ldr	r3, [r3, #8]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d102      	bne.n	8008546 <f_write+0x14e>
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008544:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	7d1b      	ldrb	r3, [r3, #20]
 800854a:	b25b      	sxtb	r3, r3
 800854c:	2b00      	cmp	r3, #0
 800854e:	da1d      	bge.n	800858c <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	7858      	ldrb	r0, [r3, #1]
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	6a1a      	ldr	r2, [r3, #32]
 800855e:	2301      	movs	r3, #1
 8008560:	f7fd ffd6 	bl	8006510 <disk_write>
 8008564:	4603      	mov	r3, r0
 8008566:	2b00      	cmp	r3, #0
 8008568:	d009      	beq.n	800857e <f_write+0x186>
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	2201      	movs	r2, #1
 800856e:	755a      	strb	r2, [r3, #21]
 8008570:	693b      	ldr	r3, [r7, #16]
 8008572:	2101      	movs	r1, #1
 8008574:	4618      	mov	r0, r3
 8008576:	f7fe f91f 	bl	80067b8 <unlock_fs>
 800857a:	2301      	movs	r3, #1
 800857c:	e0dc      	b.n	8008738 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	7d1b      	ldrb	r3, [r3, #20]
 8008582:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008586:	b2da      	uxtb	r2, r3
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800858c:	693a      	ldr	r2, [r7, #16]
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	69db      	ldr	r3, [r3, #28]
 8008592:	4619      	mov	r1, r3
 8008594:	4610      	mov	r0, r2
 8008596:	f7fe fb3b 	bl	8006c10 <clust2sect>
 800859a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800859c:	697b      	ldr	r3, [r7, #20]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d109      	bne.n	80085b6 <f_write+0x1be>
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	2202      	movs	r2, #2
 80085a6:	755a      	strb	r2, [r3, #21]
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	2102      	movs	r1, #2
 80085ac:	4618      	mov	r0, r3
 80085ae:	f7fe f903 	bl	80067b8 <unlock_fs>
 80085b2:	2302      	movs	r3, #2
 80085b4:	e0c0      	b.n	8008738 <f_write+0x340>
			sect += csect;
 80085b6:	697a      	ldr	r2, [r7, #20]
 80085b8:	69bb      	ldr	r3, [r7, #24]
 80085ba:	4413      	add	r3, r2
 80085bc:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	0a5b      	lsrs	r3, r3, #9
 80085c2:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80085c4:	6a3b      	ldr	r3, [r7, #32]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d041      	beq.n	800864e <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80085ca:	69ba      	ldr	r2, [r7, #24]
 80085cc:	6a3b      	ldr	r3, [r7, #32]
 80085ce:	4413      	add	r3, r2
 80085d0:	693a      	ldr	r2, [r7, #16]
 80085d2:	8952      	ldrh	r2, [r2, #10]
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d905      	bls.n	80085e4 <f_write+0x1ec>
					cc = fs->csize - csect;
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	895b      	ldrh	r3, [r3, #10]
 80085dc:	461a      	mov	r2, r3
 80085de:	69bb      	ldr	r3, [r7, #24]
 80085e0:	1ad3      	subs	r3, r2, r3
 80085e2:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80085e4:	693b      	ldr	r3, [r7, #16]
 80085e6:	7858      	ldrb	r0, [r3, #1]
 80085e8:	6a3b      	ldr	r3, [r7, #32]
 80085ea:	697a      	ldr	r2, [r7, #20]
 80085ec:	69f9      	ldr	r1, [r7, #28]
 80085ee:	f7fd ff8f 	bl	8006510 <disk_write>
 80085f2:	4603      	mov	r3, r0
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d009      	beq.n	800860c <f_write+0x214>
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	2201      	movs	r2, #1
 80085fc:	755a      	strb	r2, [r3, #21]
 80085fe:	693b      	ldr	r3, [r7, #16]
 8008600:	2101      	movs	r1, #1
 8008602:	4618      	mov	r0, r3
 8008604:	f7fe f8d8 	bl	80067b8 <unlock_fs>
 8008608:	2301      	movs	r3, #1
 800860a:	e095      	b.n	8008738 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	6a1a      	ldr	r2, [r3, #32]
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	1ad3      	subs	r3, r2, r3
 8008614:	6a3a      	ldr	r2, [r7, #32]
 8008616:	429a      	cmp	r2, r3
 8008618:	d915      	bls.n	8008646 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	6a1a      	ldr	r2, [r3, #32]
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	1ad3      	subs	r3, r2, r3
 8008628:	025b      	lsls	r3, r3, #9
 800862a:	69fa      	ldr	r2, [r7, #28]
 800862c:	4413      	add	r3, r2
 800862e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008632:	4619      	mov	r1, r3
 8008634:	f7fe f82c 	bl	8006690 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	7d1b      	ldrb	r3, [r3, #20]
 800863c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008640:	b2da      	uxtb	r2, r3
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008646:	6a3b      	ldr	r3, [r7, #32]
 8008648:	025b      	lsls	r3, r3, #9
 800864a:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800864c:	e044      	b.n	80086d8 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	6a1b      	ldr	r3, [r3, #32]
 8008652:	697a      	ldr	r2, [r7, #20]
 8008654:	429a      	cmp	r2, r3
 8008656:	d01b      	beq.n	8008690 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	699a      	ldr	r2, [r3, #24]
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008660:	429a      	cmp	r2, r3
 8008662:	d215      	bcs.n	8008690 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	7858      	ldrb	r0, [r3, #1]
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800866e:	2301      	movs	r3, #1
 8008670:	697a      	ldr	r2, [r7, #20]
 8008672:	f7fd ff2d 	bl	80064d0 <disk_read>
 8008676:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008678:	2b00      	cmp	r3, #0
 800867a:	d009      	beq.n	8008690 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	2201      	movs	r2, #1
 8008680:	755a      	strb	r2, [r3, #21]
 8008682:	693b      	ldr	r3, [r7, #16]
 8008684:	2101      	movs	r1, #1
 8008686:	4618      	mov	r0, r3
 8008688:	f7fe f896 	bl	80067b8 <unlock_fs>
 800868c:	2301      	movs	r3, #1
 800868e:	e053      	b.n	8008738 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	697a      	ldr	r2, [r7, #20]
 8008694:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	699b      	ldr	r3, [r3, #24]
 800869a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800869e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80086a2:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80086a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	429a      	cmp	r2, r3
 80086aa:	d901      	bls.n	80086b0 <f_write+0x2b8>
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	699b      	ldr	r3, [r3, #24]
 80086ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086be:	4413      	add	r3, r2
 80086c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086c2:	69f9      	ldr	r1, [r7, #28]
 80086c4:	4618      	mov	r0, r3
 80086c6:	f7fd ffe3 	bl	8006690 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	7d1b      	ldrb	r3, [r3, #20]
 80086ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80086d2:	b2da      	uxtb	r2, r3
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80086d8:	69fa      	ldr	r2, [r7, #28]
 80086da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086dc:	4413      	add	r3, r2
 80086de:	61fb      	str	r3, [r7, #28]
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	699a      	ldr	r2, [r3, #24]
 80086e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e6:	441a      	add	r2, r3
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	619a      	str	r2, [r3, #24]
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	68da      	ldr	r2, [r3, #12]
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	699b      	ldr	r3, [r3, #24]
 80086f4:	429a      	cmp	r2, r3
 80086f6:	bf38      	it	cc
 80086f8:	461a      	movcc	r2, r3
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	60da      	str	r2, [r3, #12]
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	681a      	ldr	r2, [r3, #0]
 8008702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008704:	441a      	add	r2, r3
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	601a      	str	r2, [r3, #0]
 800870a:	687a      	ldr	r2, [r7, #4]
 800870c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800870e:	1ad3      	subs	r3, r2, r3
 8008710:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2b00      	cmp	r3, #0
 8008716:	f47f aeb6 	bne.w	8008486 <f_write+0x8e>
 800871a:	e000      	b.n	800871e <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800871c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	7d1b      	ldrb	r3, [r3, #20]
 8008722:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008726:	b2da      	uxtb	r2, r3
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	2100      	movs	r1, #0
 8008730:	4618      	mov	r0, r3
 8008732:	f7fe f841 	bl	80067b8 <unlock_fs>
 8008736:	2300      	movs	r3, #0
}
 8008738:	4618      	mov	r0, r3
 800873a:	3730      	adds	r7, #48	; 0x30
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}

08008740 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b086      	sub	sp, #24
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f107 0208 	add.w	r2, r7, #8
 800874e:	4611      	mov	r1, r2
 8008750:	4618      	mov	r0, r3
 8008752:	f7ff fbdf 	bl	8007f14 <validate>
 8008756:	4603      	mov	r3, r0
 8008758:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800875a:	7dfb      	ldrb	r3, [r7, #23]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d16c      	bne.n	800883a <f_sync+0xfa>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	7d1b      	ldrb	r3, [r3, #20]
 8008764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008768:	2b00      	cmp	r3, #0
 800876a:	d066      	beq.n	800883a <f_sync+0xfa>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	7d1b      	ldrb	r3, [r3, #20]
 8008770:	b25b      	sxtb	r3, r3
 8008772:	2b00      	cmp	r3, #0
 8008774:	da1a      	bge.n	80087ac <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	7858      	ldrb	r0, [r3, #1]
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6a1a      	ldr	r2, [r3, #32]
 8008784:	2301      	movs	r3, #1
 8008786:	f7fd fec3 	bl	8006510 <disk_write>
 800878a:	4603      	mov	r3, r0
 800878c:	2b00      	cmp	r3, #0
 800878e:	d006      	beq.n	800879e <f_sync+0x5e>
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	2101      	movs	r1, #1
 8008794:	4618      	mov	r0, r3
 8008796:	f7fe f80f 	bl	80067b8 <unlock_fs>
 800879a:	2301      	movs	r3, #1
 800879c:	e054      	b.n	8008848 <f_sync+0x108>
				fp->flag &= (BYTE)~FA_DIRTY;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	7d1b      	ldrb	r3, [r3, #20]
 80087a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087a6:	b2da      	uxtb	r2, r3
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80087ac:	4b28      	ldr	r3, [pc, #160]	; (8008850 <f_sync+0x110>)
 80087ae:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80087b0:	68ba      	ldr	r2, [r7, #8]
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087b6:	4619      	mov	r1, r3
 80087b8:	4610      	mov	r0, r2
 80087ba:	f7fe f98d 	bl	8006ad8 <move_window>
 80087be:	4603      	mov	r3, r0
 80087c0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80087c2:	7dfb      	ldrb	r3, [r7, #23]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d138      	bne.n	800883a <f_sync+0xfa>
					dir = fp->dir_ptr;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087cc:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	330b      	adds	r3, #11
 80087d2:	781a      	ldrb	r2, [r3, #0]
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	330b      	adds	r3, #11
 80087d8:	f042 0220 	orr.w	r2, r2, #32
 80087dc:	b2d2      	uxtb	r2, r2
 80087de:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6818      	ldr	r0, [r3, #0]
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	689b      	ldr	r3, [r3, #8]
 80087e8:	461a      	mov	r2, r3
 80087ea:	68f9      	ldr	r1, [r7, #12]
 80087ec:	f7fe fe98 	bl	8007520 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	f103 021c 	add.w	r2, r3, #28
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	68db      	ldr	r3, [r3, #12]
 80087fa:	4619      	mov	r1, r3
 80087fc:	4610      	mov	r0, r2
 80087fe:	f7fd ff1b 	bl	8006638 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	3316      	adds	r3, #22
 8008806:	6939      	ldr	r1, [r7, #16]
 8008808:	4618      	mov	r0, r3
 800880a:	f7fd ff15 	bl	8006638 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	3312      	adds	r3, #18
 8008812:	2100      	movs	r1, #0
 8008814:	4618      	mov	r0, r3
 8008816:	f7fd fef4 	bl	8006602 <st_word>
					fs->wflag = 1;
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	2201      	movs	r2, #1
 800881e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	4618      	mov	r0, r3
 8008824:	f7fe f986 	bl	8006b34 <sync_fs>
 8008828:	4603      	mov	r3, r0
 800882a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	7d1b      	ldrb	r3, [r3, #20]
 8008830:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008834:	b2da      	uxtb	r2, r3
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	7dfa      	ldrb	r2, [r7, #23]
 800883e:	4611      	mov	r1, r2
 8008840:	4618      	mov	r0, r3
 8008842:	f7fd ffb9 	bl	80067b8 <unlock_fs>
 8008846:	7dfb      	ldrb	r3, [r7, #23]
}
 8008848:	4618      	mov	r0, r3
 800884a:	3718      	adds	r7, #24
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}
 8008850:	58c40000 	.word	0x58c40000

08008854 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b090      	sub	sp, #64	; 0x40
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
 800885c:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800885e:	f107 010c 	add.w	r1, r7, #12
 8008862:	1d3b      	adds	r3, r7, #4
 8008864:	2200      	movs	r2, #0
 8008866:	4618      	mov	r0, r3
 8008868:	f7ff f900 	bl	8007a6c <find_volume>
 800886c:	4603      	mov	r3, r0
 800886e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8008872:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008876:	2b00      	cmp	r3, #0
 8008878:	d11f      	bne.n	80088ba <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800887a:	687a      	ldr	r2, [r7, #4]
 800887c:	f107 030c 	add.w	r3, r7, #12
 8008880:	4611      	mov	r1, r2
 8008882:	4618      	mov	r0, r3
 8008884:	f7fe ffe6 	bl	8007854 <follow_path>
 8008888:	4603      	mov	r3, r0
 800888a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800888e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008892:	2b00      	cmp	r3, #0
 8008894:	d111      	bne.n	80088ba <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8008896:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800889a:	b25b      	sxtb	r3, r3
 800889c:	2b00      	cmp	r3, #0
 800889e:	da03      	bge.n	80088a8 <f_stat+0x54>
				res = FR_INVALID_NAME;
 80088a0:	2306      	movs	r3, #6
 80088a2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80088a6:	e008      	b.n	80088ba <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d005      	beq.n	80088ba <f_stat+0x66>
 80088ae:	f107 030c 	add.w	r3, r7, #12
 80088b2:	6839      	ldr	r1, [r7, #0]
 80088b4:	4618      	mov	r0, r3
 80088b6:	f7fe feda 	bl	800766e <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80088c0:	4611      	mov	r1, r2
 80088c2:	4618      	mov	r0, r3
 80088c4:	f7fd ff78 	bl	80067b8 <unlock_fs>
 80088c8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3740      	adds	r7, #64	; 0x40
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}

080088d4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80088d4:	b480      	push	{r7}
 80088d6:	b087      	sub	sp, #28
 80088d8:	af00      	add	r7, sp, #0
 80088da:	60f8      	str	r0, [r7, #12]
 80088dc:	60b9      	str	r1, [r7, #8]
 80088de:	4613      	mov	r3, r2
 80088e0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80088e2:	2301      	movs	r3, #1
 80088e4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80088e6:	2300      	movs	r3, #0
 80088e8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80088ea:	4b1f      	ldr	r3, [pc, #124]	; (8008968 <FATFS_LinkDriverEx+0x94>)
 80088ec:	7a5b      	ldrb	r3, [r3, #9]
 80088ee:	b2db      	uxtb	r3, r3
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d131      	bne.n	8008958 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80088f4:	4b1c      	ldr	r3, [pc, #112]	; (8008968 <FATFS_LinkDriverEx+0x94>)
 80088f6:	7a5b      	ldrb	r3, [r3, #9]
 80088f8:	b2db      	uxtb	r3, r3
 80088fa:	461a      	mov	r2, r3
 80088fc:	4b1a      	ldr	r3, [pc, #104]	; (8008968 <FATFS_LinkDriverEx+0x94>)
 80088fe:	2100      	movs	r1, #0
 8008900:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008902:	4b19      	ldr	r3, [pc, #100]	; (8008968 <FATFS_LinkDriverEx+0x94>)
 8008904:	7a5b      	ldrb	r3, [r3, #9]
 8008906:	b2db      	uxtb	r3, r3
 8008908:	4a17      	ldr	r2, [pc, #92]	; (8008968 <FATFS_LinkDriverEx+0x94>)
 800890a:	009b      	lsls	r3, r3, #2
 800890c:	4413      	add	r3, r2
 800890e:	68fa      	ldr	r2, [r7, #12]
 8008910:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008912:	4b15      	ldr	r3, [pc, #84]	; (8008968 <FATFS_LinkDriverEx+0x94>)
 8008914:	7a5b      	ldrb	r3, [r3, #9]
 8008916:	b2db      	uxtb	r3, r3
 8008918:	461a      	mov	r2, r3
 800891a:	4b13      	ldr	r3, [pc, #76]	; (8008968 <FATFS_LinkDriverEx+0x94>)
 800891c:	4413      	add	r3, r2
 800891e:	79fa      	ldrb	r2, [r7, #7]
 8008920:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008922:	4b11      	ldr	r3, [pc, #68]	; (8008968 <FATFS_LinkDriverEx+0x94>)
 8008924:	7a5b      	ldrb	r3, [r3, #9]
 8008926:	b2db      	uxtb	r3, r3
 8008928:	1c5a      	adds	r2, r3, #1
 800892a:	b2d1      	uxtb	r1, r2
 800892c:	4a0e      	ldr	r2, [pc, #56]	; (8008968 <FATFS_LinkDriverEx+0x94>)
 800892e:	7251      	strb	r1, [r2, #9]
 8008930:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008932:	7dbb      	ldrb	r3, [r7, #22]
 8008934:	3330      	adds	r3, #48	; 0x30
 8008936:	b2da      	uxtb	r2, r3
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	3301      	adds	r3, #1
 8008940:	223a      	movs	r2, #58	; 0x3a
 8008942:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	3302      	adds	r3, #2
 8008948:	222f      	movs	r2, #47	; 0x2f
 800894a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	3303      	adds	r3, #3
 8008950:	2200      	movs	r2, #0
 8008952:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008954:	2300      	movs	r3, #0
 8008956:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008958:	7dfb      	ldrb	r3, [r7, #23]
}
 800895a:	4618      	mov	r0, r3
 800895c:	371c      	adds	r7, #28
 800895e:	46bd      	mov	sp, r7
 8008960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008964:	4770      	bx	lr
 8008966:	bf00      	nop
 8008968:	200009b0 	.word	0x200009b0

0800896c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b082      	sub	sp, #8
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
 8008974:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008976:	2200      	movs	r2, #0
 8008978:	6839      	ldr	r1, [r7, #0]
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f7ff ffaa 	bl	80088d4 <FATFS_LinkDriverEx>
 8008980:	4603      	mov	r3, r0
}
 8008982:	4618      	mov	r0, r3
 8008984:	3708      	adds	r7, #8
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}

0800898a <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800898a:	b580      	push	{r7, lr}
 800898c:	b086      	sub	sp, #24
 800898e:	af00      	add	r7, sp, #0
 8008990:	4603      	mov	r3, r0
 8008992:	6039      	str	r1, [r7, #0]
 8008994:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 8008996:	2300      	movs	r3, #0
 8008998:	60fb      	str	r3, [r7, #12]
 800899a:	2300      	movs	r3, #0
 800899c:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 800899e:	f107 030c 	add.w	r3, r7, #12
 80089a2:	2101      	movs	r1, #1
 80089a4:	4618      	mov	r0, r3
 80089a6:	f000 f8d5 	bl	8008b54 <osSemaphoreCreate>
 80089aa:	4602      	mov	r2, r0
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	bf14      	ite	ne
 80089b8:	2301      	movne	r3, #1
 80089ba:	2300      	moveq	r3, #0
 80089bc:	b2db      	uxtb	r3, r3
 80089be:	617b      	str	r3, [r7, #20]

    return ret;
 80089c0:	697b      	ldr	r3, [r7, #20]
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3718      	adds	r7, #24
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}

080089ca <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 80089ca:	b580      	push	{r7, lr}
 80089cc:	b082      	sub	sp, #8
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f000 f974 	bl	8008cc0 <osSemaphoreDelete>
#endif
    return 1;
 80089d8:	2301      	movs	r3, #1
}
 80089da:	4618      	mov	r0, r3
 80089dc:	3708      	adds	r7, #8
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}

080089e2 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 80089e2:	b580      	push	{r7, lr}
 80089e4:	b084      	sub	sp, #16
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	6078      	str	r0, [r7, #4]
  int ret = 0;
 80089ea:	2300      	movs	r3, #0
 80089ec:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 80089ee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f000 f8e0 	bl	8008bb8 <osSemaphoreWait>
 80089f8:	4603      	mov	r3, r0
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d101      	bne.n	8008a02 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 80089fe:	2301      	movs	r3, #1
 8008a00:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8008a02:	68fb      	ldr	r3, [r7, #12]
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	3710      	adds	r7, #16
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}

08008a0c <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b082      	sub	sp, #8
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f000 f91d 	bl	8008c54 <osSemaphoreRelease>
#endif
}
 8008a1a:	bf00      	nop
 8008a1c:	3708      	adds	r7, #8
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}

08008a22 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008a22:	b480      	push	{r7}
 8008a24:	b085      	sub	sp, #20
 8008a26:	af00      	add	r7, sp, #0
 8008a28:	4603      	mov	r3, r0
 8008a2a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008a30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008a34:	2b84      	cmp	r3, #132	; 0x84
 8008a36:	d005      	beq.n	8008a44 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008a38:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	4413      	add	r3, r2
 8008a40:	3303      	adds	r3, #3
 8008a42:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008a44:	68fb      	ldr	r3, [r7, #12]
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3714      	adds	r7, #20
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a50:	4770      	bx	lr

08008a52 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8008a52:	b480      	push	{r7}
 8008a54:	b083      	sub	sp, #12
 8008a56:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a58:	f3ef 8305 	mrs	r3, IPSR
 8008a5c:	607b      	str	r3, [r7, #4]
  return(result);
 8008a5e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	bf14      	ite	ne
 8008a64:	2301      	movne	r3, #1
 8008a66:	2300      	moveq	r3, #0
 8008a68:	b2db      	uxtb	r3, r3
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	370c      	adds	r7, #12
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a74:	4770      	bx	lr

08008a76 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008a76:	b580      	push	{r7, lr}
 8008a78:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008a7a:	f001 fbb1 	bl	800a1e0 <vTaskStartScheduler>
  
  return osOK;
 8008a7e:	2300      	movs	r3, #0
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	bd80      	pop	{r7, pc}

08008a84 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8008a88:	f001 ffde 	bl	800aa48 <xTaskGetSchedulerState>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	2b01      	cmp	r3, #1
 8008a90:	d101      	bne.n	8008a96 <osKernelRunning+0x12>
    return 0;
 8008a92:	2300      	movs	r3, #0
 8008a94:	e000      	b.n	8008a98 <osKernelRunning+0x14>
  else
    return 1;
 8008a96:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	bd80      	pop	{r7, pc}

08008a9c <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8008aa0:	f7ff ffd7 	bl	8008a52 <inHandlerMode>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d003      	beq.n	8008ab2 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8008aaa:	f001 fcbd 	bl	800a428 <xTaskGetTickCountFromISR>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	e002      	b.n	8008ab8 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8008ab2:	f001 fca9 	bl	800a408 <xTaskGetTickCount>
 8008ab6:	4603      	mov	r3, r0
  }
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	bd80      	pop	{r7, pc}

08008abc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008abe:	b089      	sub	sp, #36	; 0x24
 8008ac0:	af04      	add	r7, sp, #16
 8008ac2:	6078      	str	r0, [r7, #4]
 8008ac4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	695b      	ldr	r3, [r3, #20]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d020      	beq.n	8008b10 <osThreadCreate+0x54>
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	699b      	ldr	r3, [r3, #24]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d01c      	beq.n	8008b10 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	685c      	ldr	r4, [r3, #4]
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	691e      	ldr	r6, [r3, #16]
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f7ff ff9a 	bl	8008a22 <makeFreeRtosPriority>
 8008aee:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	695b      	ldr	r3, [r3, #20]
 8008af4:	687a      	ldr	r2, [r7, #4]
 8008af6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008af8:	9202      	str	r2, [sp, #8]
 8008afa:	9301      	str	r3, [sp, #4]
 8008afc:	9100      	str	r1, [sp, #0]
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	4632      	mov	r2, r6
 8008b02:	4629      	mov	r1, r5
 8008b04:	4620      	mov	r0, r4
 8008b06:	f001 f9c1 	bl	8009e8c <xTaskCreateStatic>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	60fb      	str	r3, [r7, #12]
 8008b0e:	e01c      	b.n	8008b4a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	685c      	ldr	r4, [r3, #4]
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008b1c:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008b24:	4618      	mov	r0, r3
 8008b26:	f7ff ff7c 	bl	8008a22 <makeFreeRtosPriority>
 8008b2a:	4602      	mov	r2, r0
 8008b2c:	f107 030c 	add.w	r3, r7, #12
 8008b30:	9301      	str	r3, [sp, #4]
 8008b32:	9200      	str	r2, [sp, #0]
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	4632      	mov	r2, r6
 8008b38:	4629      	mov	r1, r5
 8008b3a:	4620      	mov	r0, r4
 8008b3c:	f001 fa03 	bl	8009f46 <xTaskCreate>
 8008b40:	4603      	mov	r3, r0
 8008b42:	2b01      	cmp	r3, #1
 8008b44:	d001      	beq.n	8008b4a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008b46:	2300      	movs	r3, #0
 8008b48:	e000      	b.n	8008b4c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	3714      	adds	r7, #20
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008b54 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b086      	sub	sp, #24
 8008b58:	af02      	add	r7, sp, #8
 8008b5a:	6078      	str	r0, [r7, #4]
 8008b5c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	685b      	ldr	r3, [r3, #4]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d00f      	beq.n	8008b86 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	2b01      	cmp	r3, #1
 8008b6a:	d10a      	bne.n	8008b82 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	685b      	ldr	r3, [r3, #4]
 8008b70:	2203      	movs	r2, #3
 8008b72:	9200      	str	r2, [sp, #0]
 8008b74:	2200      	movs	r2, #0
 8008b76:	2100      	movs	r1, #0
 8008b78:	2001      	movs	r0, #1
 8008b7a:	f000 faad 	bl	80090d8 <xQueueGenericCreateStatic>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	e016      	b.n	8008bb0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8008b82:	2300      	movs	r3, #0
 8008b84:	e014      	b.n	8008bb0 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	2b01      	cmp	r3, #1
 8008b8a:	d110      	bne.n	8008bae <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8008b8c:	2203      	movs	r2, #3
 8008b8e:	2100      	movs	r1, #0
 8008b90:	2001      	movs	r0, #1
 8008b92:	f000 fb19 	bl	80091c8 <xQueueGenericCreate>
 8008b96:	60f8      	str	r0, [r7, #12]
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d005      	beq.n	8008baa <osSemaphoreCreate+0x56>
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	2100      	movs	r1, #0
 8008ba4:	68f8      	ldr	r0, [r7, #12]
 8008ba6:	f000 fb69 	bl	800927c <xQueueGenericSend>
      return sema;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	e000      	b.n	8008bb0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8008bae:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	3710      	adds	r7, #16
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}

08008bb8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b084      	sub	sp, #16
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
 8008bc0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d101      	bne.n	8008bd0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8008bcc:	2380      	movs	r3, #128	; 0x80
 8008bce:	e03a      	b.n	8008c46 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bda:	d103      	bne.n	8008be4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8008bdc:	f04f 33ff 	mov.w	r3, #4294967295
 8008be0:	60fb      	str	r3, [r7, #12]
 8008be2:	e009      	b.n	8008bf8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d006      	beq.n	8008bf8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d101      	bne.n	8008bf8 <osSemaphoreWait+0x40>
      ticks = 1;
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8008bf8:	f7ff ff2b 	bl	8008a52 <inHandlerMode>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d017      	beq.n	8008c32 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8008c02:	f107 0308 	add.w	r3, r7, #8
 8008c06:	461a      	mov	r2, r3
 8008c08:	2100      	movs	r1, #0
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f000 ff48 	bl	8009aa0 <xQueueReceiveFromISR>
 8008c10:	4603      	mov	r3, r0
 8008c12:	2b01      	cmp	r3, #1
 8008c14:	d001      	beq.n	8008c1a <osSemaphoreWait+0x62>
      return osErrorOS;
 8008c16:	23ff      	movs	r3, #255	; 0xff
 8008c18:	e015      	b.n	8008c46 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d011      	beq.n	8008c44 <osSemaphoreWait+0x8c>
 8008c20:	4b0b      	ldr	r3, [pc, #44]	; (8008c50 <osSemaphoreWait+0x98>)
 8008c22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c26:	601a      	str	r2, [r3, #0]
 8008c28:	f3bf 8f4f 	dsb	sy
 8008c2c:	f3bf 8f6f 	isb	sy
 8008c30:	e008      	b.n	8008c44 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8008c32:	68f9      	ldr	r1, [r7, #12]
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f000 fe27 	bl	8009888 <xQueueSemaphoreTake>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	2b01      	cmp	r3, #1
 8008c3e:	d001      	beq.n	8008c44 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8008c40:	23ff      	movs	r3, #255	; 0xff
 8008c42:	e000      	b.n	8008c46 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8008c44:	2300      	movs	r3, #0
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3710      	adds	r7, #16
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}
 8008c4e:	bf00      	nop
 8008c50:	e000ed04 	.word	0xe000ed04

08008c54 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b084      	sub	sp, #16
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8008c60:	2300      	movs	r3, #0
 8008c62:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8008c64:	f7ff fef5 	bl	8008a52 <inHandlerMode>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d016      	beq.n	8008c9c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8008c6e:	f107 0308 	add.w	r3, r7, #8
 8008c72:	4619      	mov	r1, r3
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f000 fc9a 	bl	80095ae <xQueueGiveFromISR>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	2b01      	cmp	r3, #1
 8008c7e:	d001      	beq.n	8008c84 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8008c80:	23ff      	movs	r3, #255	; 0xff
 8008c82:	e017      	b.n	8008cb4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d013      	beq.n	8008cb2 <osSemaphoreRelease+0x5e>
 8008c8a:	4b0c      	ldr	r3, [pc, #48]	; (8008cbc <osSemaphoreRelease+0x68>)
 8008c8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c90:	601a      	str	r2, [r3, #0]
 8008c92:	f3bf 8f4f 	dsb	sy
 8008c96:	f3bf 8f6f 	isb	sy
 8008c9a:	e00a      	b.n	8008cb2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	2100      	movs	r1, #0
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f000 faea 	bl	800927c <xQueueGenericSend>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	2b01      	cmp	r3, #1
 8008cac:	d001      	beq.n	8008cb2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8008cae:	23ff      	movs	r3, #255	; 0xff
 8008cb0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	3710      	adds	r7, #16
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bd80      	pop	{r7, pc}
 8008cbc:	e000ed04 	.word	0xe000ed04

08008cc0 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b082      	sub	sp, #8
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8008cc8:	f7ff fec3 	bl	8008a52 <inHandlerMode>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d001      	beq.n	8008cd6 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8008cd2:	2382      	movs	r3, #130	; 0x82
 8008cd4:	e003      	b.n	8008cde <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f000 ff62 	bl	8009ba0 <vQueueDelete>

  return osOK; 
 8008cdc:	2300      	movs	r3, #0
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3708      	adds	r7, #8
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}

08008ce6 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8008ce6:	b590      	push	{r4, r7, lr}
 8008ce8:	b085      	sub	sp, #20
 8008cea:	af02      	add	r7, sp, #8
 8008cec:	6078      	str	r0, [r7, #4]
 8008cee:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	689b      	ldr	r3, [r3, #8]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d011      	beq.n	8008d1c <osMessageCreate+0x36>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	68db      	ldr	r3, [r3, #12]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d00d      	beq.n	8008d1c <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6818      	ldr	r0, [r3, #0]
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6859      	ldr	r1, [r3, #4]
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	689a      	ldr	r2, [r3, #8]
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	68db      	ldr	r3, [r3, #12]
 8008d10:	2400      	movs	r4, #0
 8008d12:	9400      	str	r4, [sp, #0]
 8008d14:	f000 f9e0 	bl	80090d8 <xQueueGenericCreateStatic>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	e008      	b.n	8008d2e <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6818      	ldr	r0, [r3, #0]
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	685b      	ldr	r3, [r3, #4]
 8008d24:	2200      	movs	r2, #0
 8008d26:	4619      	mov	r1, r3
 8008d28:	f000 fa4e 	bl	80091c8 <xQueueGenericCreate>
 8008d2c:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	370c      	adds	r7, #12
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd90      	pop	{r4, r7, pc}
	...

08008d38 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b086      	sub	sp, #24
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	60f8      	str	r0, [r7, #12]
 8008d40:	60b9      	str	r1, [r7, #8]
 8008d42:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8008d44:	2300      	movs	r3, #0
 8008d46:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8008d4c:	697b      	ldr	r3, [r7, #20]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d101      	bne.n	8008d56 <osMessagePut+0x1e>
    ticks = 1;
 8008d52:	2301      	movs	r3, #1
 8008d54:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8008d56:	f7ff fe7c 	bl	8008a52 <inHandlerMode>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d018      	beq.n	8008d92 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8008d60:	f107 0210 	add.w	r2, r7, #16
 8008d64:	f107 0108 	add.w	r1, r7, #8
 8008d68:	2300      	movs	r3, #0
 8008d6a:	68f8      	ldr	r0, [r7, #12]
 8008d6c:	f000 fb84 	bl	8009478 <xQueueGenericSendFromISR>
 8008d70:	4603      	mov	r3, r0
 8008d72:	2b01      	cmp	r3, #1
 8008d74:	d001      	beq.n	8008d7a <osMessagePut+0x42>
      return osErrorOS;
 8008d76:	23ff      	movs	r3, #255	; 0xff
 8008d78:	e018      	b.n	8008dac <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008d7a:	693b      	ldr	r3, [r7, #16]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d014      	beq.n	8008daa <osMessagePut+0x72>
 8008d80:	4b0c      	ldr	r3, [pc, #48]	; (8008db4 <osMessagePut+0x7c>)
 8008d82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d86:	601a      	str	r2, [r3, #0]
 8008d88:	f3bf 8f4f 	dsb	sy
 8008d8c:	f3bf 8f6f 	isb	sy
 8008d90:	e00b      	b.n	8008daa <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8008d92:	f107 0108 	add.w	r1, r7, #8
 8008d96:	2300      	movs	r3, #0
 8008d98:	697a      	ldr	r2, [r7, #20]
 8008d9a:	68f8      	ldr	r0, [r7, #12]
 8008d9c:	f000 fa6e 	bl	800927c <xQueueGenericSend>
 8008da0:	4603      	mov	r3, r0
 8008da2:	2b01      	cmp	r3, #1
 8008da4:	d001      	beq.n	8008daa <osMessagePut+0x72>
      return osErrorOS;
 8008da6:	23ff      	movs	r3, #255	; 0xff
 8008da8:	e000      	b.n	8008dac <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8008daa:	2300      	movs	r3, #0
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	3718      	adds	r7, #24
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}
 8008db4:	e000ed04 	.word	0xe000ed04

08008db8 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8008db8:	b590      	push	{r4, r7, lr}
 8008dba:	b08b      	sub	sp, #44	; 0x2c
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	60f8      	str	r0, [r7, #12]
 8008dc0:	60b9      	str	r1, [r7, #8]
 8008dc2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8008dc8:	2300      	movs	r3, #0
 8008dca:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d10a      	bne.n	8008de8 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8008dd2:	2380      	movs	r3, #128	; 0x80
 8008dd4:	617b      	str	r3, [r7, #20]
    return event;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	461c      	mov	r4, r3
 8008dda:	f107 0314 	add.w	r3, r7, #20
 8008dde:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008de2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008de6:	e054      	b.n	8008e92 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8008de8:	2300      	movs	r3, #0
 8008dea:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8008dec:	2300      	movs	r3, #0
 8008dee:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008df6:	d103      	bne.n	8008e00 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8008df8:	f04f 33ff 	mov.w	r3, #4294967295
 8008dfc:	627b      	str	r3, [r7, #36]	; 0x24
 8008dfe:	e009      	b.n	8008e14 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d006      	beq.n	8008e14 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8008e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d101      	bne.n	8008e14 <osMessageGet+0x5c>
      ticks = 1;
 8008e10:	2301      	movs	r3, #1
 8008e12:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8008e14:	f7ff fe1d 	bl	8008a52 <inHandlerMode>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d01c      	beq.n	8008e58 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8008e1e:	f107 0220 	add.w	r2, r7, #32
 8008e22:	f107 0314 	add.w	r3, r7, #20
 8008e26:	3304      	adds	r3, #4
 8008e28:	4619      	mov	r1, r3
 8008e2a:	68b8      	ldr	r0, [r7, #8]
 8008e2c:	f000 fe38 	bl	8009aa0 <xQueueReceiveFromISR>
 8008e30:	4603      	mov	r3, r0
 8008e32:	2b01      	cmp	r3, #1
 8008e34:	d102      	bne.n	8008e3c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8008e36:	2310      	movs	r3, #16
 8008e38:	617b      	str	r3, [r7, #20]
 8008e3a:	e001      	b.n	8008e40 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008e40:	6a3b      	ldr	r3, [r7, #32]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d01d      	beq.n	8008e82 <osMessageGet+0xca>
 8008e46:	4b15      	ldr	r3, [pc, #84]	; (8008e9c <osMessageGet+0xe4>)
 8008e48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e4c:	601a      	str	r2, [r3, #0]
 8008e4e:	f3bf 8f4f 	dsb	sy
 8008e52:	f3bf 8f6f 	isb	sy
 8008e56:	e014      	b.n	8008e82 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8008e58:	f107 0314 	add.w	r3, r7, #20
 8008e5c:	3304      	adds	r3, #4
 8008e5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e60:	4619      	mov	r1, r3
 8008e62:	68b8      	ldr	r0, [r7, #8]
 8008e64:	f000 fc30 	bl	80096c8 <xQueueReceive>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	2b01      	cmp	r3, #1
 8008e6c:	d102      	bne.n	8008e74 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8008e6e:	2310      	movs	r3, #16
 8008e70:	617b      	str	r3, [r7, #20]
 8008e72:	e006      	b.n	8008e82 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8008e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d101      	bne.n	8008e7e <osMessageGet+0xc6>
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	e000      	b.n	8008e80 <osMessageGet+0xc8>
 8008e7e:	2340      	movs	r3, #64	; 0x40
 8008e80:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	461c      	mov	r4, r3
 8008e86:	f107 0314 	add.w	r3, r7, #20
 8008e8a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008e8e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8008e92:	68f8      	ldr	r0, [r7, #12]
 8008e94:	372c      	adds	r7, #44	; 0x2c
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bd90      	pop	{r4, r7, pc}
 8008e9a:	bf00      	nop
 8008e9c:	e000ed04 	.word	0xe000ed04

08008ea0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b083      	sub	sp, #12
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f103 0208 	add.w	r2, r3, #8
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8008eb8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f103 0208 	add.w	r2, r3, #8
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f103 0208 	add.w	r2, r3, #8
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008ed4:	bf00      	nop
 8008ed6:	370c      	adds	r7, #12
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ede:	4770      	bx	lr

08008ee0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b083      	sub	sp, #12
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2200      	movs	r2, #0
 8008eec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008eee:	bf00      	nop
 8008ef0:	370c      	adds	r7, #12
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef8:	4770      	bx	lr

08008efa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008efa:	b480      	push	{r7}
 8008efc:	b085      	sub	sp, #20
 8008efe:	af00      	add	r7, sp, #0
 8008f00:	6078      	str	r0, [r7, #4]
 8008f02:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	685b      	ldr	r3, [r3, #4]
 8008f08:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	68fa      	ldr	r2, [r7, #12]
 8008f0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	689a      	ldr	r2, [r3, #8]
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	689b      	ldr	r3, [r3, #8]
 8008f1c:	683a      	ldr	r2, [r7, #0]
 8008f1e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	683a      	ldr	r2, [r7, #0]
 8008f24:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	687a      	ldr	r2, [r7, #4]
 8008f2a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	1c5a      	adds	r2, r3, #1
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	601a      	str	r2, [r3, #0]
}
 8008f36:	bf00      	nop
 8008f38:	3714      	adds	r7, #20
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f40:	4770      	bx	lr

08008f42 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008f42:	b480      	push	{r7}
 8008f44:	b085      	sub	sp, #20
 8008f46:	af00      	add	r7, sp, #0
 8008f48:	6078      	str	r0, [r7, #4]
 8008f4a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f58:	d103      	bne.n	8008f62 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	691b      	ldr	r3, [r3, #16]
 8008f5e:	60fb      	str	r3, [r7, #12]
 8008f60:	e00c      	b.n	8008f7c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	3308      	adds	r3, #8
 8008f66:	60fb      	str	r3, [r7, #12]
 8008f68:	e002      	b.n	8008f70 <vListInsert+0x2e>
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	685b      	ldr	r3, [r3, #4]
 8008f6e:	60fb      	str	r3, [r7, #12]
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	685b      	ldr	r3, [r3, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	68ba      	ldr	r2, [r7, #8]
 8008f78:	429a      	cmp	r2, r3
 8008f7a:	d2f6      	bcs.n	8008f6a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	685a      	ldr	r2, [r3, #4]
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	685b      	ldr	r3, [r3, #4]
 8008f88:	683a      	ldr	r2, [r7, #0]
 8008f8a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	68fa      	ldr	r2, [r7, #12]
 8008f90:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	683a      	ldr	r2, [r7, #0]
 8008f96:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	687a      	ldr	r2, [r7, #4]
 8008f9c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	1c5a      	adds	r2, r3, #1
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	601a      	str	r2, [r3, #0]
}
 8008fa8:	bf00      	nop
 8008faa:	3714      	adds	r7, #20
 8008fac:	46bd      	mov	sp, r7
 8008fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb2:	4770      	bx	lr

08008fb4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b085      	sub	sp, #20
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	691b      	ldr	r3, [r3, #16]
 8008fc0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	685b      	ldr	r3, [r3, #4]
 8008fc6:	687a      	ldr	r2, [r7, #4]
 8008fc8:	6892      	ldr	r2, [r2, #8]
 8008fca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	689b      	ldr	r3, [r3, #8]
 8008fd0:	687a      	ldr	r2, [r7, #4]
 8008fd2:	6852      	ldr	r2, [r2, #4]
 8008fd4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	685b      	ldr	r3, [r3, #4]
 8008fda:	687a      	ldr	r2, [r7, #4]
 8008fdc:	429a      	cmp	r2, r3
 8008fde:	d103      	bne.n	8008fe8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	689a      	ldr	r2, [r3, #8]
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2200      	movs	r2, #0
 8008fec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	1e5a      	subs	r2, r3, #1
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	3714      	adds	r7, #20
 8009000:	46bd      	mov	sp, r7
 8009002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009006:	4770      	bx	lr

08009008 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b084      	sub	sp, #16
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d10a      	bne.n	8009032 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800901c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009020:	f383 8811 	msr	BASEPRI, r3
 8009024:	f3bf 8f6f 	isb	sy
 8009028:	f3bf 8f4f 	dsb	sy
 800902c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800902e:	bf00      	nop
 8009030:	e7fe      	b.n	8009030 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009032:	f002 f857 	bl	800b0e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681a      	ldr	r2, [r3, #0]
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800903e:	68f9      	ldr	r1, [r7, #12]
 8009040:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009042:	fb01 f303 	mul.w	r3, r1, r3
 8009046:	441a      	add	r2, r3
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	2200      	movs	r2, #0
 8009050:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681a      	ldr	r2, [r3, #0]
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681a      	ldr	r2, [r3, #0]
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009062:	3b01      	subs	r3, #1
 8009064:	68f9      	ldr	r1, [r7, #12]
 8009066:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009068:	fb01 f303 	mul.w	r3, r1, r3
 800906c:	441a      	add	r2, r3
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	22ff      	movs	r2, #255	; 0xff
 8009076:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	22ff      	movs	r2, #255	; 0xff
 800907e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d114      	bne.n	80090b2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	691b      	ldr	r3, [r3, #16]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d01a      	beq.n	80090c6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	3310      	adds	r3, #16
 8009094:	4618      	mov	r0, r3
 8009096:	f001 fb17 	bl	800a6c8 <xTaskRemoveFromEventList>
 800909a:	4603      	mov	r3, r0
 800909c:	2b00      	cmp	r3, #0
 800909e:	d012      	beq.n	80090c6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80090a0:	4b0c      	ldr	r3, [pc, #48]	; (80090d4 <xQueueGenericReset+0xcc>)
 80090a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090a6:	601a      	str	r2, [r3, #0]
 80090a8:	f3bf 8f4f 	dsb	sy
 80090ac:	f3bf 8f6f 	isb	sy
 80090b0:	e009      	b.n	80090c6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	3310      	adds	r3, #16
 80090b6:	4618      	mov	r0, r3
 80090b8:	f7ff fef2 	bl	8008ea0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	3324      	adds	r3, #36	; 0x24
 80090c0:	4618      	mov	r0, r3
 80090c2:	f7ff feed 	bl	8008ea0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80090c6:	f002 f83d 	bl	800b144 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80090ca:	2301      	movs	r3, #1
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	3710      	adds	r7, #16
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}
 80090d4:	e000ed04 	.word	0xe000ed04

080090d8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b08e      	sub	sp, #56	; 0x38
 80090dc:	af02      	add	r7, sp, #8
 80090de:	60f8      	str	r0, [r7, #12]
 80090e0:	60b9      	str	r1, [r7, #8]
 80090e2:	607a      	str	r2, [r7, #4]
 80090e4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d10a      	bne.n	8009102 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80090ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090f0:	f383 8811 	msr	BASEPRI, r3
 80090f4:	f3bf 8f6f 	isb	sy
 80090f8:	f3bf 8f4f 	dsb	sy
 80090fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80090fe:	bf00      	nop
 8009100:	e7fe      	b.n	8009100 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d10a      	bne.n	800911e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800910c:	f383 8811 	msr	BASEPRI, r3
 8009110:	f3bf 8f6f 	isb	sy
 8009114:	f3bf 8f4f 	dsb	sy
 8009118:	627b      	str	r3, [r7, #36]	; 0x24
}
 800911a:	bf00      	nop
 800911c:	e7fe      	b.n	800911c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d002      	beq.n	800912a <xQueueGenericCreateStatic+0x52>
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d001      	beq.n	800912e <xQueueGenericCreateStatic+0x56>
 800912a:	2301      	movs	r3, #1
 800912c:	e000      	b.n	8009130 <xQueueGenericCreateStatic+0x58>
 800912e:	2300      	movs	r3, #0
 8009130:	2b00      	cmp	r3, #0
 8009132:	d10a      	bne.n	800914a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009138:	f383 8811 	msr	BASEPRI, r3
 800913c:	f3bf 8f6f 	isb	sy
 8009140:	f3bf 8f4f 	dsb	sy
 8009144:	623b      	str	r3, [r7, #32]
}
 8009146:	bf00      	nop
 8009148:	e7fe      	b.n	8009148 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d102      	bne.n	8009156 <xQueueGenericCreateStatic+0x7e>
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d101      	bne.n	800915a <xQueueGenericCreateStatic+0x82>
 8009156:	2301      	movs	r3, #1
 8009158:	e000      	b.n	800915c <xQueueGenericCreateStatic+0x84>
 800915a:	2300      	movs	r3, #0
 800915c:	2b00      	cmp	r3, #0
 800915e:	d10a      	bne.n	8009176 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009164:	f383 8811 	msr	BASEPRI, r3
 8009168:	f3bf 8f6f 	isb	sy
 800916c:	f3bf 8f4f 	dsb	sy
 8009170:	61fb      	str	r3, [r7, #28]
}
 8009172:	bf00      	nop
 8009174:	e7fe      	b.n	8009174 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009176:	2348      	movs	r3, #72	; 0x48
 8009178:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	2b48      	cmp	r3, #72	; 0x48
 800917e:	d00a      	beq.n	8009196 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009184:	f383 8811 	msr	BASEPRI, r3
 8009188:	f3bf 8f6f 	isb	sy
 800918c:	f3bf 8f4f 	dsb	sy
 8009190:	61bb      	str	r3, [r7, #24]
}
 8009192:	bf00      	nop
 8009194:	e7fe      	b.n	8009194 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009196:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800919c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d00d      	beq.n	80091be <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80091a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091a4:	2201      	movs	r2, #1
 80091a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80091aa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80091ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091b0:	9300      	str	r3, [sp, #0]
 80091b2:	4613      	mov	r3, r2
 80091b4:	687a      	ldr	r2, [r7, #4]
 80091b6:	68b9      	ldr	r1, [r7, #8]
 80091b8:	68f8      	ldr	r0, [r7, #12]
 80091ba:	f000 f83f 	bl	800923c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80091be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80091c0:	4618      	mov	r0, r3
 80091c2:	3730      	adds	r7, #48	; 0x30
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}

080091c8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b08a      	sub	sp, #40	; 0x28
 80091cc:	af02      	add	r7, sp, #8
 80091ce:	60f8      	str	r0, [r7, #12]
 80091d0:	60b9      	str	r1, [r7, #8]
 80091d2:	4613      	mov	r3, r2
 80091d4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d10a      	bne.n	80091f2 <xQueueGenericCreate+0x2a>
	__asm volatile
 80091dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091e0:	f383 8811 	msr	BASEPRI, r3
 80091e4:	f3bf 8f6f 	isb	sy
 80091e8:	f3bf 8f4f 	dsb	sy
 80091ec:	613b      	str	r3, [r7, #16]
}
 80091ee:	bf00      	nop
 80091f0:	e7fe      	b.n	80091f0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	68ba      	ldr	r2, [r7, #8]
 80091f6:	fb02 f303 	mul.w	r3, r2, r3
 80091fa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80091fc:	69fb      	ldr	r3, [r7, #28]
 80091fe:	3348      	adds	r3, #72	; 0x48
 8009200:	4618      	mov	r0, r3
 8009202:	f002 f891 	bl	800b328 <pvPortMalloc>
 8009206:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009208:	69bb      	ldr	r3, [r7, #24]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d011      	beq.n	8009232 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800920e:	69bb      	ldr	r3, [r7, #24]
 8009210:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	3348      	adds	r3, #72	; 0x48
 8009216:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009218:	69bb      	ldr	r3, [r7, #24]
 800921a:	2200      	movs	r2, #0
 800921c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009220:	79fa      	ldrb	r2, [r7, #7]
 8009222:	69bb      	ldr	r3, [r7, #24]
 8009224:	9300      	str	r3, [sp, #0]
 8009226:	4613      	mov	r3, r2
 8009228:	697a      	ldr	r2, [r7, #20]
 800922a:	68b9      	ldr	r1, [r7, #8]
 800922c:	68f8      	ldr	r0, [r7, #12]
 800922e:	f000 f805 	bl	800923c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009232:	69bb      	ldr	r3, [r7, #24]
	}
 8009234:	4618      	mov	r0, r3
 8009236:	3720      	adds	r7, #32
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}

0800923c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b084      	sub	sp, #16
 8009240:	af00      	add	r7, sp, #0
 8009242:	60f8      	str	r0, [r7, #12]
 8009244:	60b9      	str	r1, [r7, #8]
 8009246:	607a      	str	r2, [r7, #4]
 8009248:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d103      	bne.n	8009258 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009250:	69bb      	ldr	r3, [r7, #24]
 8009252:	69ba      	ldr	r2, [r7, #24]
 8009254:	601a      	str	r2, [r3, #0]
 8009256:	e002      	b.n	800925e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009258:	69bb      	ldr	r3, [r7, #24]
 800925a:	687a      	ldr	r2, [r7, #4]
 800925c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800925e:	69bb      	ldr	r3, [r7, #24]
 8009260:	68fa      	ldr	r2, [r7, #12]
 8009262:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009264:	69bb      	ldr	r3, [r7, #24]
 8009266:	68ba      	ldr	r2, [r7, #8]
 8009268:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800926a:	2101      	movs	r1, #1
 800926c:	69b8      	ldr	r0, [r7, #24]
 800926e:	f7ff fecb 	bl	8009008 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009272:	bf00      	nop
 8009274:	3710      	adds	r7, #16
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}
	...

0800927c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b08e      	sub	sp, #56	; 0x38
 8009280:	af00      	add	r7, sp, #0
 8009282:	60f8      	str	r0, [r7, #12]
 8009284:	60b9      	str	r1, [r7, #8]
 8009286:	607a      	str	r2, [r7, #4]
 8009288:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800928a:	2300      	movs	r3, #0
 800928c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009294:	2b00      	cmp	r3, #0
 8009296:	d10a      	bne.n	80092ae <xQueueGenericSend+0x32>
	__asm volatile
 8009298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800929c:	f383 8811 	msr	BASEPRI, r3
 80092a0:	f3bf 8f6f 	isb	sy
 80092a4:	f3bf 8f4f 	dsb	sy
 80092a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80092aa:	bf00      	nop
 80092ac:	e7fe      	b.n	80092ac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d103      	bne.n	80092bc <xQueueGenericSend+0x40>
 80092b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d101      	bne.n	80092c0 <xQueueGenericSend+0x44>
 80092bc:	2301      	movs	r3, #1
 80092be:	e000      	b.n	80092c2 <xQueueGenericSend+0x46>
 80092c0:	2300      	movs	r3, #0
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d10a      	bne.n	80092dc <xQueueGenericSend+0x60>
	__asm volatile
 80092c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ca:	f383 8811 	msr	BASEPRI, r3
 80092ce:	f3bf 8f6f 	isb	sy
 80092d2:	f3bf 8f4f 	dsb	sy
 80092d6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80092d8:	bf00      	nop
 80092da:	e7fe      	b.n	80092da <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	2b02      	cmp	r3, #2
 80092e0:	d103      	bne.n	80092ea <xQueueGenericSend+0x6e>
 80092e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092e6:	2b01      	cmp	r3, #1
 80092e8:	d101      	bne.n	80092ee <xQueueGenericSend+0x72>
 80092ea:	2301      	movs	r3, #1
 80092ec:	e000      	b.n	80092f0 <xQueueGenericSend+0x74>
 80092ee:	2300      	movs	r3, #0
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d10a      	bne.n	800930a <xQueueGenericSend+0x8e>
	__asm volatile
 80092f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092f8:	f383 8811 	msr	BASEPRI, r3
 80092fc:	f3bf 8f6f 	isb	sy
 8009300:	f3bf 8f4f 	dsb	sy
 8009304:	623b      	str	r3, [r7, #32]
}
 8009306:	bf00      	nop
 8009308:	e7fe      	b.n	8009308 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800930a:	f001 fb9d 	bl	800aa48 <xTaskGetSchedulerState>
 800930e:	4603      	mov	r3, r0
 8009310:	2b00      	cmp	r3, #0
 8009312:	d102      	bne.n	800931a <xQueueGenericSend+0x9e>
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d101      	bne.n	800931e <xQueueGenericSend+0xa2>
 800931a:	2301      	movs	r3, #1
 800931c:	e000      	b.n	8009320 <xQueueGenericSend+0xa4>
 800931e:	2300      	movs	r3, #0
 8009320:	2b00      	cmp	r3, #0
 8009322:	d10a      	bne.n	800933a <xQueueGenericSend+0xbe>
	__asm volatile
 8009324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009328:	f383 8811 	msr	BASEPRI, r3
 800932c:	f3bf 8f6f 	isb	sy
 8009330:	f3bf 8f4f 	dsb	sy
 8009334:	61fb      	str	r3, [r7, #28]
}
 8009336:	bf00      	nop
 8009338:	e7fe      	b.n	8009338 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800933a:	f001 fed3 	bl	800b0e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800933e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009340:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009346:	429a      	cmp	r2, r3
 8009348:	d302      	bcc.n	8009350 <xQueueGenericSend+0xd4>
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	2b02      	cmp	r3, #2
 800934e:	d129      	bne.n	80093a4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009350:	683a      	ldr	r2, [r7, #0]
 8009352:	68b9      	ldr	r1, [r7, #8]
 8009354:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009356:	f000 fc5e 	bl	8009c16 <prvCopyDataToQueue>
 800935a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800935c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800935e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009360:	2b00      	cmp	r3, #0
 8009362:	d010      	beq.n	8009386 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009366:	3324      	adds	r3, #36	; 0x24
 8009368:	4618      	mov	r0, r3
 800936a:	f001 f9ad 	bl	800a6c8 <xTaskRemoveFromEventList>
 800936e:	4603      	mov	r3, r0
 8009370:	2b00      	cmp	r3, #0
 8009372:	d013      	beq.n	800939c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009374:	4b3f      	ldr	r3, [pc, #252]	; (8009474 <xQueueGenericSend+0x1f8>)
 8009376:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800937a:	601a      	str	r2, [r3, #0]
 800937c:	f3bf 8f4f 	dsb	sy
 8009380:	f3bf 8f6f 	isb	sy
 8009384:	e00a      	b.n	800939c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009388:	2b00      	cmp	r3, #0
 800938a:	d007      	beq.n	800939c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800938c:	4b39      	ldr	r3, [pc, #228]	; (8009474 <xQueueGenericSend+0x1f8>)
 800938e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009392:	601a      	str	r2, [r3, #0]
 8009394:	f3bf 8f4f 	dsb	sy
 8009398:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800939c:	f001 fed2 	bl	800b144 <vPortExitCritical>
				return pdPASS;
 80093a0:	2301      	movs	r3, #1
 80093a2:	e063      	b.n	800946c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d103      	bne.n	80093b2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80093aa:	f001 fecb 	bl	800b144 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80093ae:	2300      	movs	r3, #0
 80093b0:	e05c      	b.n	800946c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80093b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d106      	bne.n	80093c6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80093b8:	f107 0314 	add.w	r3, r7, #20
 80093bc:	4618      	mov	r0, r3
 80093be:	f001 f9e5 	bl	800a78c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80093c2:	2301      	movs	r3, #1
 80093c4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80093c6:	f001 febd 	bl	800b144 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80093ca:	f000 ff73 	bl	800a2b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80093ce:	f001 fe89 	bl	800b0e4 <vPortEnterCritical>
 80093d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80093d8:	b25b      	sxtb	r3, r3
 80093da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093de:	d103      	bne.n	80093e8 <xQueueGenericSend+0x16c>
 80093e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093e2:	2200      	movs	r2, #0
 80093e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80093e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80093ee:	b25b      	sxtb	r3, r3
 80093f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093f4:	d103      	bne.n	80093fe <xQueueGenericSend+0x182>
 80093f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093f8:	2200      	movs	r2, #0
 80093fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80093fe:	f001 fea1 	bl	800b144 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009402:	1d3a      	adds	r2, r7, #4
 8009404:	f107 0314 	add.w	r3, r7, #20
 8009408:	4611      	mov	r1, r2
 800940a:	4618      	mov	r0, r3
 800940c:	f001 f9d4 	bl	800a7b8 <xTaskCheckForTimeOut>
 8009410:	4603      	mov	r3, r0
 8009412:	2b00      	cmp	r3, #0
 8009414:	d124      	bne.n	8009460 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009416:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009418:	f000 fcf5 	bl	8009e06 <prvIsQueueFull>
 800941c:	4603      	mov	r3, r0
 800941e:	2b00      	cmp	r3, #0
 8009420:	d018      	beq.n	8009454 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009424:	3310      	adds	r3, #16
 8009426:	687a      	ldr	r2, [r7, #4]
 8009428:	4611      	mov	r1, r2
 800942a:	4618      	mov	r0, r3
 800942c:	f001 f928 	bl	800a680 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009430:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009432:	f000 fc80 	bl	8009d36 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009436:	f000 ff4b 	bl	800a2d0 <xTaskResumeAll>
 800943a:	4603      	mov	r3, r0
 800943c:	2b00      	cmp	r3, #0
 800943e:	f47f af7c 	bne.w	800933a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009442:	4b0c      	ldr	r3, [pc, #48]	; (8009474 <xQueueGenericSend+0x1f8>)
 8009444:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009448:	601a      	str	r2, [r3, #0]
 800944a:	f3bf 8f4f 	dsb	sy
 800944e:	f3bf 8f6f 	isb	sy
 8009452:	e772      	b.n	800933a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009454:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009456:	f000 fc6e 	bl	8009d36 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800945a:	f000 ff39 	bl	800a2d0 <xTaskResumeAll>
 800945e:	e76c      	b.n	800933a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009460:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009462:	f000 fc68 	bl	8009d36 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009466:	f000 ff33 	bl	800a2d0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800946a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800946c:	4618      	mov	r0, r3
 800946e:	3738      	adds	r7, #56	; 0x38
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}
 8009474:	e000ed04 	.word	0xe000ed04

08009478 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b090      	sub	sp, #64	; 0x40
 800947c:	af00      	add	r7, sp, #0
 800947e:	60f8      	str	r0, [r7, #12]
 8009480:	60b9      	str	r1, [r7, #8]
 8009482:	607a      	str	r2, [r7, #4]
 8009484:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800948a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800948c:	2b00      	cmp	r3, #0
 800948e:	d10a      	bne.n	80094a6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009494:	f383 8811 	msr	BASEPRI, r3
 8009498:	f3bf 8f6f 	isb	sy
 800949c:	f3bf 8f4f 	dsb	sy
 80094a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80094a2:	bf00      	nop
 80094a4:	e7fe      	b.n	80094a4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80094a6:	68bb      	ldr	r3, [r7, #8]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d103      	bne.n	80094b4 <xQueueGenericSendFromISR+0x3c>
 80094ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d101      	bne.n	80094b8 <xQueueGenericSendFromISR+0x40>
 80094b4:	2301      	movs	r3, #1
 80094b6:	e000      	b.n	80094ba <xQueueGenericSendFromISR+0x42>
 80094b8:	2300      	movs	r3, #0
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d10a      	bne.n	80094d4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80094be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c2:	f383 8811 	msr	BASEPRI, r3
 80094c6:	f3bf 8f6f 	isb	sy
 80094ca:	f3bf 8f4f 	dsb	sy
 80094ce:	627b      	str	r3, [r7, #36]	; 0x24
}
 80094d0:	bf00      	nop
 80094d2:	e7fe      	b.n	80094d2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	2b02      	cmp	r3, #2
 80094d8:	d103      	bne.n	80094e2 <xQueueGenericSendFromISR+0x6a>
 80094da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094de:	2b01      	cmp	r3, #1
 80094e0:	d101      	bne.n	80094e6 <xQueueGenericSendFromISR+0x6e>
 80094e2:	2301      	movs	r3, #1
 80094e4:	e000      	b.n	80094e8 <xQueueGenericSendFromISR+0x70>
 80094e6:	2300      	movs	r3, #0
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d10a      	bne.n	8009502 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80094ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094f0:	f383 8811 	msr	BASEPRI, r3
 80094f4:	f3bf 8f6f 	isb	sy
 80094f8:	f3bf 8f4f 	dsb	sy
 80094fc:	623b      	str	r3, [r7, #32]
}
 80094fe:	bf00      	nop
 8009500:	e7fe      	b.n	8009500 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009502:	f001 fed1 	bl	800b2a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009506:	f3ef 8211 	mrs	r2, BASEPRI
 800950a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800950e:	f383 8811 	msr	BASEPRI, r3
 8009512:	f3bf 8f6f 	isb	sy
 8009516:	f3bf 8f4f 	dsb	sy
 800951a:	61fa      	str	r2, [r7, #28]
 800951c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800951e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009520:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009524:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800952a:	429a      	cmp	r2, r3
 800952c:	d302      	bcc.n	8009534 <xQueueGenericSendFromISR+0xbc>
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	2b02      	cmp	r3, #2
 8009532:	d12f      	bne.n	8009594 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009536:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800953a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800953e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009542:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009544:	683a      	ldr	r2, [r7, #0]
 8009546:	68b9      	ldr	r1, [r7, #8]
 8009548:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800954a:	f000 fb64 	bl	8009c16 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800954e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009556:	d112      	bne.n	800957e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800955a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800955c:	2b00      	cmp	r3, #0
 800955e:	d016      	beq.n	800958e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009562:	3324      	adds	r3, #36	; 0x24
 8009564:	4618      	mov	r0, r3
 8009566:	f001 f8af 	bl	800a6c8 <xTaskRemoveFromEventList>
 800956a:	4603      	mov	r3, r0
 800956c:	2b00      	cmp	r3, #0
 800956e:	d00e      	beq.n	800958e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d00b      	beq.n	800958e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2201      	movs	r2, #1
 800957a:	601a      	str	r2, [r3, #0]
 800957c:	e007      	b.n	800958e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800957e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009582:	3301      	adds	r3, #1
 8009584:	b2db      	uxtb	r3, r3
 8009586:	b25a      	sxtb	r2, r3
 8009588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800958a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800958e:	2301      	movs	r3, #1
 8009590:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009592:	e001      	b.n	8009598 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009594:	2300      	movs	r3, #0
 8009596:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800959a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800959c:	697b      	ldr	r3, [r7, #20]
 800959e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80095a2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80095a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3740      	adds	r7, #64	; 0x40
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}

080095ae <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80095ae:	b580      	push	{r7, lr}
 80095b0:	b08e      	sub	sp, #56	; 0x38
 80095b2:	af00      	add	r7, sp, #0
 80095b4:	6078      	str	r0, [r7, #4]
 80095b6:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80095bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d10a      	bne.n	80095d8 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80095c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095c6:	f383 8811 	msr	BASEPRI, r3
 80095ca:	f3bf 8f6f 	isb	sy
 80095ce:	f3bf 8f4f 	dsb	sy
 80095d2:	623b      	str	r3, [r7, #32]
}
 80095d4:	bf00      	nop
 80095d6:	e7fe      	b.n	80095d6 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80095d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d00a      	beq.n	80095f6 <xQueueGiveFromISR+0x48>
	__asm volatile
 80095e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e4:	f383 8811 	msr	BASEPRI, r3
 80095e8:	f3bf 8f6f 	isb	sy
 80095ec:	f3bf 8f4f 	dsb	sy
 80095f0:	61fb      	str	r3, [r7, #28]
}
 80095f2:	bf00      	nop
 80095f4:	e7fe      	b.n	80095f4 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80095f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d103      	bne.n	8009606 <xQueueGiveFromISR+0x58>
 80095fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009600:	689b      	ldr	r3, [r3, #8]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d101      	bne.n	800960a <xQueueGiveFromISR+0x5c>
 8009606:	2301      	movs	r3, #1
 8009608:	e000      	b.n	800960c <xQueueGiveFromISR+0x5e>
 800960a:	2300      	movs	r3, #0
 800960c:	2b00      	cmp	r3, #0
 800960e:	d10a      	bne.n	8009626 <xQueueGiveFromISR+0x78>
	__asm volatile
 8009610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009614:	f383 8811 	msr	BASEPRI, r3
 8009618:	f3bf 8f6f 	isb	sy
 800961c:	f3bf 8f4f 	dsb	sy
 8009620:	61bb      	str	r3, [r7, #24]
}
 8009622:	bf00      	nop
 8009624:	e7fe      	b.n	8009624 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009626:	f001 fe3f 	bl	800b2a8 <vPortValidateInterruptPriority>
	__asm volatile
 800962a:	f3ef 8211 	mrs	r2, BASEPRI
 800962e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009632:	f383 8811 	msr	BASEPRI, r3
 8009636:	f3bf 8f6f 	isb	sy
 800963a:	f3bf 8f4f 	dsb	sy
 800963e:	617a      	str	r2, [r7, #20]
 8009640:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009642:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009644:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800964a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800964c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800964e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009650:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009652:	429a      	cmp	r2, r3
 8009654:	d22b      	bcs.n	80096ae <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009658:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800965c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009662:	1c5a      	adds	r2, r3, #1
 8009664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009666:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009668:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800966c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009670:	d112      	bne.n	8009698 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009676:	2b00      	cmp	r3, #0
 8009678:	d016      	beq.n	80096a8 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800967a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800967c:	3324      	adds	r3, #36	; 0x24
 800967e:	4618      	mov	r0, r3
 8009680:	f001 f822 	bl	800a6c8 <xTaskRemoveFromEventList>
 8009684:	4603      	mov	r3, r0
 8009686:	2b00      	cmp	r3, #0
 8009688:	d00e      	beq.n	80096a8 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d00b      	beq.n	80096a8 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	2201      	movs	r2, #1
 8009694:	601a      	str	r2, [r3, #0]
 8009696:	e007      	b.n	80096a8 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009698:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800969c:	3301      	adds	r3, #1
 800969e:	b2db      	uxtb	r3, r3
 80096a0:	b25a      	sxtb	r2, r3
 80096a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80096a8:	2301      	movs	r3, #1
 80096aa:	637b      	str	r3, [r7, #52]	; 0x34
 80096ac:	e001      	b.n	80096b2 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80096ae:	2300      	movs	r3, #0
 80096b0:	637b      	str	r3, [r7, #52]	; 0x34
 80096b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096b4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	f383 8811 	msr	BASEPRI, r3
}
 80096bc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80096be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	3738      	adds	r7, #56	; 0x38
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}

080096c8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b08c      	sub	sp, #48	; 0x30
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	60f8      	str	r0, [r7, #12]
 80096d0:	60b9      	str	r1, [r7, #8]
 80096d2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80096d4:	2300      	movs	r3, #0
 80096d6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80096dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d10a      	bne.n	80096f8 <xQueueReceive+0x30>
	__asm volatile
 80096e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e6:	f383 8811 	msr	BASEPRI, r3
 80096ea:	f3bf 8f6f 	isb	sy
 80096ee:	f3bf 8f4f 	dsb	sy
 80096f2:	623b      	str	r3, [r7, #32]
}
 80096f4:	bf00      	nop
 80096f6:	e7fe      	b.n	80096f6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d103      	bne.n	8009706 <xQueueReceive+0x3e>
 80096fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009702:	2b00      	cmp	r3, #0
 8009704:	d101      	bne.n	800970a <xQueueReceive+0x42>
 8009706:	2301      	movs	r3, #1
 8009708:	e000      	b.n	800970c <xQueueReceive+0x44>
 800970a:	2300      	movs	r3, #0
 800970c:	2b00      	cmp	r3, #0
 800970e:	d10a      	bne.n	8009726 <xQueueReceive+0x5e>
	__asm volatile
 8009710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009714:	f383 8811 	msr	BASEPRI, r3
 8009718:	f3bf 8f6f 	isb	sy
 800971c:	f3bf 8f4f 	dsb	sy
 8009720:	61fb      	str	r3, [r7, #28]
}
 8009722:	bf00      	nop
 8009724:	e7fe      	b.n	8009724 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009726:	f001 f98f 	bl	800aa48 <xTaskGetSchedulerState>
 800972a:	4603      	mov	r3, r0
 800972c:	2b00      	cmp	r3, #0
 800972e:	d102      	bne.n	8009736 <xQueueReceive+0x6e>
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d101      	bne.n	800973a <xQueueReceive+0x72>
 8009736:	2301      	movs	r3, #1
 8009738:	e000      	b.n	800973c <xQueueReceive+0x74>
 800973a:	2300      	movs	r3, #0
 800973c:	2b00      	cmp	r3, #0
 800973e:	d10a      	bne.n	8009756 <xQueueReceive+0x8e>
	__asm volatile
 8009740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009744:	f383 8811 	msr	BASEPRI, r3
 8009748:	f3bf 8f6f 	isb	sy
 800974c:	f3bf 8f4f 	dsb	sy
 8009750:	61bb      	str	r3, [r7, #24]
}
 8009752:	bf00      	nop
 8009754:	e7fe      	b.n	8009754 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009756:	f001 fcc5 	bl	800b0e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800975a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800975c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800975e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009762:	2b00      	cmp	r3, #0
 8009764:	d01f      	beq.n	80097a6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009766:	68b9      	ldr	r1, [r7, #8]
 8009768:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800976a:	f000 fabe 	bl	8009cea <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800976e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009770:	1e5a      	subs	r2, r3, #1
 8009772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009774:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009778:	691b      	ldr	r3, [r3, #16]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d00f      	beq.n	800979e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800977e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009780:	3310      	adds	r3, #16
 8009782:	4618      	mov	r0, r3
 8009784:	f000 ffa0 	bl	800a6c8 <xTaskRemoveFromEventList>
 8009788:	4603      	mov	r3, r0
 800978a:	2b00      	cmp	r3, #0
 800978c:	d007      	beq.n	800979e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800978e:	4b3d      	ldr	r3, [pc, #244]	; (8009884 <xQueueReceive+0x1bc>)
 8009790:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009794:	601a      	str	r2, [r3, #0]
 8009796:	f3bf 8f4f 	dsb	sy
 800979a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800979e:	f001 fcd1 	bl	800b144 <vPortExitCritical>
				return pdPASS;
 80097a2:	2301      	movs	r3, #1
 80097a4:	e069      	b.n	800987a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d103      	bne.n	80097b4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80097ac:	f001 fcca 	bl	800b144 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80097b0:	2300      	movs	r3, #0
 80097b2:	e062      	b.n	800987a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80097b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d106      	bne.n	80097c8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80097ba:	f107 0310 	add.w	r3, r7, #16
 80097be:	4618      	mov	r0, r3
 80097c0:	f000 ffe4 	bl	800a78c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80097c4:	2301      	movs	r3, #1
 80097c6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80097c8:	f001 fcbc 	bl	800b144 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80097cc:	f000 fd72 	bl	800a2b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80097d0:	f001 fc88 	bl	800b0e4 <vPortEnterCritical>
 80097d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80097da:	b25b      	sxtb	r3, r3
 80097dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097e0:	d103      	bne.n	80097ea <xQueueReceive+0x122>
 80097e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097e4:	2200      	movs	r2, #0
 80097e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80097ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80097f0:	b25b      	sxtb	r3, r3
 80097f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097f6:	d103      	bne.n	8009800 <xQueueReceive+0x138>
 80097f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097fa:	2200      	movs	r2, #0
 80097fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009800:	f001 fca0 	bl	800b144 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009804:	1d3a      	adds	r2, r7, #4
 8009806:	f107 0310 	add.w	r3, r7, #16
 800980a:	4611      	mov	r1, r2
 800980c:	4618      	mov	r0, r3
 800980e:	f000 ffd3 	bl	800a7b8 <xTaskCheckForTimeOut>
 8009812:	4603      	mov	r3, r0
 8009814:	2b00      	cmp	r3, #0
 8009816:	d123      	bne.n	8009860 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009818:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800981a:	f000 fade 	bl	8009dda <prvIsQueueEmpty>
 800981e:	4603      	mov	r3, r0
 8009820:	2b00      	cmp	r3, #0
 8009822:	d017      	beq.n	8009854 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009826:	3324      	adds	r3, #36	; 0x24
 8009828:	687a      	ldr	r2, [r7, #4]
 800982a:	4611      	mov	r1, r2
 800982c:	4618      	mov	r0, r3
 800982e:	f000 ff27 	bl	800a680 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009832:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009834:	f000 fa7f 	bl	8009d36 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009838:	f000 fd4a 	bl	800a2d0 <xTaskResumeAll>
 800983c:	4603      	mov	r3, r0
 800983e:	2b00      	cmp	r3, #0
 8009840:	d189      	bne.n	8009756 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009842:	4b10      	ldr	r3, [pc, #64]	; (8009884 <xQueueReceive+0x1bc>)
 8009844:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009848:	601a      	str	r2, [r3, #0]
 800984a:	f3bf 8f4f 	dsb	sy
 800984e:	f3bf 8f6f 	isb	sy
 8009852:	e780      	b.n	8009756 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009854:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009856:	f000 fa6e 	bl	8009d36 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800985a:	f000 fd39 	bl	800a2d0 <xTaskResumeAll>
 800985e:	e77a      	b.n	8009756 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009860:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009862:	f000 fa68 	bl	8009d36 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009866:	f000 fd33 	bl	800a2d0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800986a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800986c:	f000 fab5 	bl	8009dda <prvIsQueueEmpty>
 8009870:	4603      	mov	r3, r0
 8009872:	2b00      	cmp	r3, #0
 8009874:	f43f af6f 	beq.w	8009756 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009878:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800987a:	4618      	mov	r0, r3
 800987c:	3730      	adds	r7, #48	; 0x30
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}
 8009882:	bf00      	nop
 8009884:	e000ed04 	.word	0xe000ed04

08009888 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b08e      	sub	sp, #56	; 0x38
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
 8009890:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009892:	2300      	movs	r3, #0
 8009894:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800989a:	2300      	movs	r3, #0
 800989c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800989e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d10a      	bne.n	80098ba <xQueueSemaphoreTake+0x32>
	__asm volatile
 80098a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098a8:	f383 8811 	msr	BASEPRI, r3
 80098ac:	f3bf 8f6f 	isb	sy
 80098b0:	f3bf 8f4f 	dsb	sy
 80098b4:	623b      	str	r3, [r7, #32]
}
 80098b6:	bf00      	nop
 80098b8:	e7fe      	b.n	80098b8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80098ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d00a      	beq.n	80098d8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80098c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098c6:	f383 8811 	msr	BASEPRI, r3
 80098ca:	f3bf 8f6f 	isb	sy
 80098ce:	f3bf 8f4f 	dsb	sy
 80098d2:	61fb      	str	r3, [r7, #28]
}
 80098d4:	bf00      	nop
 80098d6:	e7fe      	b.n	80098d6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80098d8:	f001 f8b6 	bl	800aa48 <xTaskGetSchedulerState>
 80098dc:	4603      	mov	r3, r0
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d102      	bne.n	80098e8 <xQueueSemaphoreTake+0x60>
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d101      	bne.n	80098ec <xQueueSemaphoreTake+0x64>
 80098e8:	2301      	movs	r3, #1
 80098ea:	e000      	b.n	80098ee <xQueueSemaphoreTake+0x66>
 80098ec:	2300      	movs	r3, #0
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d10a      	bne.n	8009908 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80098f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098f6:	f383 8811 	msr	BASEPRI, r3
 80098fa:	f3bf 8f6f 	isb	sy
 80098fe:	f3bf 8f4f 	dsb	sy
 8009902:	61bb      	str	r3, [r7, #24]
}
 8009904:	bf00      	nop
 8009906:	e7fe      	b.n	8009906 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009908:	f001 fbec 	bl	800b0e4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800990c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800990e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009910:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009914:	2b00      	cmp	r3, #0
 8009916:	d024      	beq.n	8009962 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800991a:	1e5a      	subs	r2, r3, #1
 800991c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800991e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d104      	bne.n	8009932 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009928:	f001 fa36 	bl	800ad98 <pvTaskIncrementMutexHeldCount>
 800992c:	4602      	mov	r2, r0
 800992e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009930:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009934:	691b      	ldr	r3, [r3, #16]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d00f      	beq.n	800995a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800993a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800993c:	3310      	adds	r3, #16
 800993e:	4618      	mov	r0, r3
 8009940:	f000 fec2 	bl	800a6c8 <xTaskRemoveFromEventList>
 8009944:	4603      	mov	r3, r0
 8009946:	2b00      	cmp	r3, #0
 8009948:	d007      	beq.n	800995a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800994a:	4b54      	ldr	r3, [pc, #336]	; (8009a9c <xQueueSemaphoreTake+0x214>)
 800994c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009950:	601a      	str	r2, [r3, #0]
 8009952:	f3bf 8f4f 	dsb	sy
 8009956:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800995a:	f001 fbf3 	bl	800b144 <vPortExitCritical>
				return pdPASS;
 800995e:	2301      	movs	r3, #1
 8009960:	e097      	b.n	8009a92 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d111      	bne.n	800998c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800996a:	2b00      	cmp	r3, #0
 800996c:	d00a      	beq.n	8009984 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800996e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009972:	f383 8811 	msr	BASEPRI, r3
 8009976:	f3bf 8f6f 	isb	sy
 800997a:	f3bf 8f4f 	dsb	sy
 800997e:	617b      	str	r3, [r7, #20]
}
 8009980:	bf00      	nop
 8009982:	e7fe      	b.n	8009982 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009984:	f001 fbde 	bl	800b144 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009988:	2300      	movs	r3, #0
 800998a:	e082      	b.n	8009a92 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800998c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800998e:	2b00      	cmp	r3, #0
 8009990:	d106      	bne.n	80099a0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009992:	f107 030c 	add.w	r3, r7, #12
 8009996:	4618      	mov	r0, r3
 8009998:	f000 fef8 	bl	800a78c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800999c:	2301      	movs	r3, #1
 800999e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80099a0:	f001 fbd0 	bl	800b144 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80099a4:	f000 fc86 	bl	800a2b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80099a8:	f001 fb9c 	bl	800b0e4 <vPortEnterCritical>
 80099ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80099b2:	b25b      	sxtb	r3, r3
 80099b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099b8:	d103      	bne.n	80099c2 <xQueueSemaphoreTake+0x13a>
 80099ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099bc:	2200      	movs	r2, #0
 80099be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80099c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80099c8:	b25b      	sxtb	r3, r3
 80099ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099ce:	d103      	bne.n	80099d8 <xQueueSemaphoreTake+0x150>
 80099d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099d2:	2200      	movs	r2, #0
 80099d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80099d8:	f001 fbb4 	bl	800b144 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80099dc:	463a      	mov	r2, r7
 80099de:	f107 030c 	add.w	r3, r7, #12
 80099e2:	4611      	mov	r1, r2
 80099e4:	4618      	mov	r0, r3
 80099e6:	f000 fee7 	bl	800a7b8 <xTaskCheckForTimeOut>
 80099ea:	4603      	mov	r3, r0
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d132      	bne.n	8009a56 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80099f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80099f2:	f000 f9f2 	bl	8009dda <prvIsQueueEmpty>
 80099f6:	4603      	mov	r3, r0
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d026      	beq.n	8009a4a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80099fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d109      	bne.n	8009a18 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8009a04:	f001 fb6e 	bl	800b0e4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a0a:	689b      	ldr	r3, [r3, #8]
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	f001 f839 	bl	800aa84 <xTaskPriorityInherit>
 8009a12:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009a14:	f001 fb96 	bl	800b144 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a1a:	3324      	adds	r3, #36	; 0x24
 8009a1c:	683a      	ldr	r2, [r7, #0]
 8009a1e:	4611      	mov	r1, r2
 8009a20:	4618      	mov	r0, r3
 8009a22:	f000 fe2d 	bl	800a680 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009a26:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009a28:	f000 f985 	bl	8009d36 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009a2c:	f000 fc50 	bl	800a2d0 <xTaskResumeAll>
 8009a30:	4603      	mov	r3, r0
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	f47f af68 	bne.w	8009908 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8009a38:	4b18      	ldr	r3, [pc, #96]	; (8009a9c <xQueueSemaphoreTake+0x214>)
 8009a3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a3e:	601a      	str	r2, [r3, #0]
 8009a40:	f3bf 8f4f 	dsb	sy
 8009a44:	f3bf 8f6f 	isb	sy
 8009a48:	e75e      	b.n	8009908 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009a4a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009a4c:	f000 f973 	bl	8009d36 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009a50:	f000 fc3e 	bl	800a2d0 <xTaskResumeAll>
 8009a54:	e758      	b.n	8009908 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009a56:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009a58:	f000 f96d 	bl	8009d36 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009a5c:	f000 fc38 	bl	800a2d0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009a60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009a62:	f000 f9ba 	bl	8009dda <prvIsQueueEmpty>
 8009a66:	4603      	mov	r3, r0
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	f43f af4d 	beq.w	8009908 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d00d      	beq.n	8009a90 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8009a74:	f001 fb36 	bl	800b0e4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009a78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009a7a:	f000 f8b4 	bl	8009be6 <prvGetDisinheritPriorityAfterTimeout>
 8009a7e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a82:	689b      	ldr	r3, [r3, #8]
 8009a84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009a86:	4618      	mov	r0, r3
 8009a88:	f001 f8f8 	bl	800ac7c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009a8c:	f001 fb5a 	bl	800b144 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009a90:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009a92:	4618      	mov	r0, r3
 8009a94:	3738      	adds	r7, #56	; 0x38
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}
 8009a9a:	bf00      	nop
 8009a9c:	e000ed04 	.word	0xe000ed04

08009aa0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b08e      	sub	sp, #56	; 0x38
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	60f8      	str	r0, [r7, #12]
 8009aa8:	60b9      	str	r1, [r7, #8]
 8009aaa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d10a      	bne.n	8009acc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8009ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aba:	f383 8811 	msr	BASEPRI, r3
 8009abe:	f3bf 8f6f 	isb	sy
 8009ac2:	f3bf 8f4f 	dsb	sy
 8009ac6:	623b      	str	r3, [r7, #32]
}
 8009ac8:	bf00      	nop
 8009aca:	e7fe      	b.n	8009aca <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d103      	bne.n	8009ada <xQueueReceiveFromISR+0x3a>
 8009ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d101      	bne.n	8009ade <xQueueReceiveFromISR+0x3e>
 8009ada:	2301      	movs	r3, #1
 8009adc:	e000      	b.n	8009ae0 <xQueueReceiveFromISR+0x40>
 8009ade:	2300      	movs	r3, #0
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d10a      	bne.n	8009afa <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8009ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ae8:	f383 8811 	msr	BASEPRI, r3
 8009aec:	f3bf 8f6f 	isb	sy
 8009af0:	f3bf 8f4f 	dsb	sy
 8009af4:	61fb      	str	r3, [r7, #28]
}
 8009af6:	bf00      	nop
 8009af8:	e7fe      	b.n	8009af8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009afa:	f001 fbd5 	bl	800b2a8 <vPortValidateInterruptPriority>
	__asm volatile
 8009afe:	f3ef 8211 	mrs	r2, BASEPRI
 8009b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b06:	f383 8811 	msr	BASEPRI, r3
 8009b0a:	f3bf 8f6f 	isb	sy
 8009b0e:	f3bf 8f4f 	dsb	sy
 8009b12:	61ba      	str	r2, [r7, #24]
 8009b14:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009b16:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009b18:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b1e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d02f      	beq.n	8009b86 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009b2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009b30:	68b9      	ldr	r1, [r7, #8]
 8009b32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009b34:	f000 f8d9 	bl	8009cea <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b3a:	1e5a      	subs	r2, r3, #1
 8009b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b3e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009b40:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b48:	d112      	bne.n	8009b70 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b4c:	691b      	ldr	r3, [r3, #16]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d016      	beq.n	8009b80 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b54:	3310      	adds	r3, #16
 8009b56:	4618      	mov	r0, r3
 8009b58:	f000 fdb6 	bl	800a6c8 <xTaskRemoveFromEventList>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d00e      	beq.n	8009b80 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d00b      	beq.n	8009b80 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2201      	movs	r2, #1
 8009b6c:	601a      	str	r2, [r3, #0]
 8009b6e:	e007      	b.n	8009b80 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009b70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b74:	3301      	adds	r3, #1
 8009b76:	b2db      	uxtb	r3, r3
 8009b78:	b25a      	sxtb	r2, r3
 8009b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009b80:	2301      	movs	r3, #1
 8009b82:	637b      	str	r3, [r7, #52]	; 0x34
 8009b84:	e001      	b.n	8009b8a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8009b86:	2300      	movs	r3, #0
 8009b88:	637b      	str	r3, [r7, #52]	; 0x34
 8009b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b8c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009b8e:	693b      	ldr	r3, [r7, #16]
 8009b90:	f383 8811 	msr	BASEPRI, r3
}
 8009b94:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	3738      	adds	r7, #56	; 0x38
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd80      	pop	{r7, pc}

08009ba0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b084      	sub	sp, #16
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d10a      	bne.n	8009bc8 <vQueueDelete+0x28>
	__asm volatile
 8009bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bb6:	f383 8811 	msr	BASEPRI, r3
 8009bba:	f3bf 8f6f 	isb	sy
 8009bbe:	f3bf 8f4f 	dsb	sy
 8009bc2:	60bb      	str	r3, [r7, #8]
}
 8009bc4:	bf00      	nop
 8009bc6:	e7fe      	b.n	8009bc6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8009bc8:	68f8      	ldr	r0, [r7, #12]
 8009bca:	f000 f935 	bl	8009e38 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d102      	bne.n	8009bde <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8009bd8:	68f8      	ldr	r0, [r7, #12]
 8009bda:	f001 fc71 	bl	800b4c0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8009bde:	bf00      	nop
 8009be0:	3710      	adds	r7, #16
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}

08009be6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009be6:	b480      	push	{r7}
 8009be8:	b085      	sub	sp, #20
 8009bea:	af00      	add	r7, sp, #0
 8009bec:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d006      	beq.n	8009c04 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f1c3 0307 	rsb	r3, r3, #7
 8009c00:	60fb      	str	r3, [r7, #12]
 8009c02:	e001      	b.n	8009c08 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009c04:	2300      	movs	r3, #0
 8009c06:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009c08:	68fb      	ldr	r3, [r7, #12]
	}
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	3714      	adds	r7, #20
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c14:	4770      	bx	lr

08009c16 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009c16:	b580      	push	{r7, lr}
 8009c18:	b086      	sub	sp, #24
 8009c1a:	af00      	add	r7, sp, #0
 8009c1c:	60f8      	str	r0, [r7, #12]
 8009c1e:	60b9      	str	r1, [r7, #8]
 8009c20:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009c22:	2300      	movs	r3, #0
 8009c24:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c2a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d10d      	bne.n	8009c50 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d14d      	bne.n	8009cd8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	689b      	ldr	r3, [r3, #8]
 8009c40:	4618      	mov	r0, r3
 8009c42:	f000 ff95 	bl	800ab70 <xTaskPriorityDisinherit>
 8009c46:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	609a      	str	r2, [r3, #8]
 8009c4e:	e043      	b.n	8009cd8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d119      	bne.n	8009c8a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	6858      	ldr	r0, [r3, #4]
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c5e:	461a      	mov	r2, r3
 8009c60:	68b9      	ldr	r1, [r7, #8]
 8009c62:	f001 feb3 	bl	800b9cc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	685a      	ldr	r2, [r3, #4]
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c6e:	441a      	add	r2, r3
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	685a      	ldr	r2, [r3, #4]
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	689b      	ldr	r3, [r3, #8]
 8009c7c:	429a      	cmp	r2, r3
 8009c7e:	d32b      	bcc.n	8009cd8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	681a      	ldr	r2, [r3, #0]
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	605a      	str	r2, [r3, #4]
 8009c88:	e026      	b.n	8009cd8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	68d8      	ldr	r0, [r3, #12]
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c92:	461a      	mov	r2, r3
 8009c94:	68b9      	ldr	r1, [r7, #8]
 8009c96:	f001 fe99 	bl	800b9cc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	68da      	ldr	r2, [r3, #12]
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ca2:	425b      	negs	r3, r3
 8009ca4:	441a      	add	r2, r3
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	68da      	ldr	r2, [r3, #12]
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	429a      	cmp	r2, r3
 8009cb4:	d207      	bcs.n	8009cc6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	689a      	ldr	r2, [r3, #8]
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cbe:	425b      	negs	r3, r3
 8009cc0:	441a      	add	r2, r3
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	2b02      	cmp	r3, #2
 8009cca:	d105      	bne.n	8009cd8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009ccc:	693b      	ldr	r3, [r7, #16]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d002      	beq.n	8009cd8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009cd2:	693b      	ldr	r3, [r7, #16]
 8009cd4:	3b01      	subs	r3, #1
 8009cd6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009cd8:	693b      	ldr	r3, [r7, #16]
 8009cda:	1c5a      	adds	r2, r3, #1
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009ce0:	697b      	ldr	r3, [r7, #20]
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	3718      	adds	r7, #24
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd80      	pop	{r7, pc}

08009cea <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009cea:	b580      	push	{r7, lr}
 8009cec:	b082      	sub	sp, #8
 8009cee:	af00      	add	r7, sp, #0
 8009cf0:	6078      	str	r0, [r7, #4]
 8009cf2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d018      	beq.n	8009d2e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	68da      	ldr	r2, [r3, #12]
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d04:	441a      	add	r2, r3
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	68da      	ldr	r2, [r3, #12]
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	689b      	ldr	r3, [r3, #8]
 8009d12:	429a      	cmp	r2, r3
 8009d14:	d303      	bcc.n	8009d1e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681a      	ldr	r2, [r3, #0]
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	68d9      	ldr	r1, [r3, #12]
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d26:	461a      	mov	r2, r3
 8009d28:	6838      	ldr	r0, [r7, #0]
 8009d2a:	f001 fe4f 	bl	800b9cc <memcpy>
	}
}
 8009d2e:	bf00      	nop
 8009d30:	3708      	adds	r7, #8
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}

08009d36 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009d36:	b580      	push	{r7, lr}
 8009d38:	b084      	sub	sp, #16
 8009d3a:	af00      	add	r7, sp, #0
 8009d3c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009d3e:	f001 f9d1 	bl	800b0e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009d48:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009d4a:	e011      	b.n	8009d70 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d012      	beq.n	8009d7a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	3324      	adds	r3, #36	; 0x24
 8009d58:	4618      	mov	r0, r3
 8009d5a:	f000 fcb5 	bl	800a6c8 <xTaskRemoveFromEventList>
 8009d5e:	4603      	mov	r3, r0
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d001      	beq.n	8009d68 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009d64:	f000 fd8a 	bl	800a87c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009d68:	7bfb      	ldrb	r3, [r7, #15]
 8009d6a:	3b01      	subs	r3, #1
 8009d6c:	b2db      	uxtb	r3, r3
 8009d6e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009d70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	dce9      	bgt.n	8009d4c <prvUnlockQueue+0x16>
 8009d78:	e000      	b.n	8009d7c <prvUnlockQueue+0x46>
					break;
 8009d7a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	22ff      	movs	r2, #255	; 0xff
 8009d80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009d84:	f001 f9de 	bl	800b144 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009d88:	f001 f9ac 	bl	800b0e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009d92:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009d94:	e011      	b.n	8009dba <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	691b      	ldr	r3, [r3, #16]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d012      	beq.n	8009dc4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	3310      	adds	r3, #16
 8009da2:	4618      	mov	r0, r3
 8009da4:	f000 fc90 	bl	800a6c8 <xTaskRemoveFromEventList>
 8009da8:	4603      	mov	r3, r0
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d001      	beq.n	8009db2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009dae:	f000 fd65 	bl	800a87c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009db2:	7bbb      	ldrb	r3, [r7, #14]
 8009db4:	3b01      	subs	r3, #1
 8009db6:	b2db      	uxtb	r3, r3
 8009db8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009dba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	dce9      	bgt.n	8009d96 <prvUnlockQueue+0x60>
 8009dc2:	e000      	b.n	8009dc6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009dc4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	22ff      	movs	r2, #255	; 0xff
 8009dca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009dce:	f001 f9b9 	bl	800b144 <vPortExitCritical>
}
 8009dd2:	bf00      	nop
 8009dd4:	3710      	adds	r7, #16
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}

08009dda <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009dda:	b580      	push	{r7, lr}
 8009ddc:	b084      	sub	sp, #16
 8009dde:	af00      	add	r7, sp, #0
 8009de0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009de2:	f001 f97f 	bl	800b0e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d102      	bne.n	8009df4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009dee:	2301      	movs	r3, #1
 8009df0:	60fb      	str	r3, [r7, #12]
 8009df2:	e001      	b.n	8009df8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009df4:	2300      	movs	r3, #0
 8009df6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009df8:	f001 f9a4 	bl	800b144 <vPortExitCritical>

	return xReturn;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
}
 8009dfe:	4618      	mov	r0, r3
 8009e00:	3710      	adds	r7, #16
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}

08009e06 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009e06:	b580      	push	{r7, lr}
 8009e08:	b084      	sub	sp, #16
 8009e0a:	af00      	add	r7, sp, #0
 8009e0c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009e0e:	f001 f969 	bl	800b0e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e1a:	429a      	cmp	r2, r3
 8009e1c:	d102      	bne.n	8009e24 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009e1e:	2301      	movs	r3, #1
 8009e20:	60fb      	str	r3, [r7, #12]
 8009e22:	e001      	b.n	8009e28 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009e24:	2300      	movs	r3, #0
 8009e26:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009e28:	f001 f98c 	bl	800b144 <vPortExitCritical>

	return xReturn;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
}
 8009e2e:	4618      	mov	r0, r3
 8009e30:	3710      	adds	r7, #16
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd80      	pop	{r7, pc}
	...

08009e38 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009e38:	b480      	push	{r7}
 8009e3a:	b085      	sub	sp, #20
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009e40:	2300      	movs	r3, #0
 8009e42:	60fb      	str	r3, [r7, #12]
 8009e44:	e016      	b.n	8009e74 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009e46:	4a10      	ldr	r2, [pc, #64]	; (8009e88 <vQueueUnregisterQueue+0x50>)
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	00db      	lsls	r3, r3, #3
 8009e4c:	4413      	add	r3, r2
 8009e4e:	685b      	ldr	r3, [r3, #4]
 8009e50:	687a      	ldr	r2, [r7, #4]
 8009e52:	429a      	cmp	r2, r3
 8009e54:	d10b      	bne.n	8009e6e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8009e56:	4a0c      	ldr	r2, [pc, #48]	; (8009e88 <vQueueUnregisterQueue+0x50>)
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	2100      	movs	r1, #0
 8009e5c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009e60:	4a09      	ldr	r2, [pc, #36]	; (8009e88 <vQueueUnregisterQueue+0x50>)
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	00db      	lsls	r3, r3, #3
 8009e66:	4413      	add	r3, r2
 8009e68:	2200      	movs	r2, #0
 8009e6a:	605a      	str	r2, [r3, #4]
				break;
 8009e6c:	e006      	b.n	8009e7c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	3301      	adds	r3, #1
 8009e72:	60fb      	str	r3, [r7, #12]
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	2b07      	cmp	r3, #7
 8009e78:	d9e5      	bls.n	8009e46 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8009e7a:	bf00      	nop
 8009e7c:	bf00      	nop
 8009e7e:	3714      	adds	r7, #20
 8009e80:	46bd      	mov	sp, r7
 8009e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e86:	4770      	bx	lr
 8009e88:	200009bc 	.word	0x200009bc

08009e8c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b08e      	sub	sp, #56	; 0x38
 8009e90:	af04      	add	r7, sp, #16
 8009e92:	60f8      	str	r0, [r7, #12]
 8009e94:	60b9      	str	r1, [r7, #8]
 8009e96:	607a      	str	r2, [r7, #4]
 8009e98:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d10a      	bne.n	8009eb6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8009ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ea4:	f383 8811 	msr	BASEPRI, r3
 8009ea8:	f3bf 8f6f 	isb	sy
 8009eac:	f3bf 8f4f 	dsb	sy
 8009eb0:	623b      	str	r3, [r7, #32]
}
 8009eb2:	bf00      	nop
 8009eb4:	e7fe      	b.n	8009eb4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d10a      	bne.n	8009ed2 <xTaskCreateStatic+0x46>
	__asm volatile
 8009ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ec0:	f383 8811 	msr	BASEPRI, r3
 8009ec4:	f3bf 8f6f 	isb	sy
 8009ec8:	f3bf 8f4f 	dsb	sy
 8009ecc:	61fb      	str	r3, [r7, #28]
}
 8009ece:	bf00      	nop
 8009ed0:	e7fe      	b.n	8009ed0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009ed2:	23a0      	movs	r3, #160	; 0xa0
 8009ed4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009ed6:	693b      	ldr	r3, [r7, #16]
 8009ed8:	2ba0      	cmp	r3, #160	; 0xa0
 8009eda:	d00a      	beq.n	8009ef2 <xTaskCreateStatic+0x66>
	__asm volatile
 8009edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ee0:	f383 8811 	msr	BASEPRI, r3
 8009ee4:	f3bf 8f6f 	isb	sy
 8009ee8:	f3bf 8f4f 	dsb	sy
 8009eec:	61bb      	str	r3, [r7, #24]
}
 8009eee:	bf00      	nop
 8009ef0:	e7fe      	b.n	8009ef0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009ef2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d01e      	beq.n	8009f38 <xTaskCreateStatic+0xac>
 8009efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d01b      	beq.n	8009f38 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f02:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f08:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f0c:	2202      	movs	r2, #2
 8009f0e:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009f12:	2300      	movs	r3, #0
 8009f14:	9303      	str	r3, [sp, #12]
 8009f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f18:	9302      	str	r3, [sp, #8]
 8009f1a:	f107 0314 	add.w	r3, r7, #20
 8009f1e:	9301      	str	r3, [sp, #4]
 8009f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f22:	9300      	str	r3, [sp, #0]
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	687a      	ldr	r2, [r7, #4]
 8009f28:	68b9      	ldr	r1, [r7, #8]
 8009f2a:	68f8      	ldr	r0, [r7, #12]
 8009f2c:	f000 f850 	bl	8009fd0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009f30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009f32:	f000 f8eb 	bl	800a10c <prvAddNewTaskToReadyList>
 8009f36:	e001      	b.n	8009f3c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009f38:	2300      	movs	r3, #0
 8009f3a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009f3c:	697b      	ldr	r3, [r7, #20]
	}
 8009f3e:	4618      	mov	r0, r3
 8009f40:	3728      	adds	r7, #40	; 0x28
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}

08009f46 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009f46:	b580      	push	{r7, lr}
 8009f48:	b08c      	sub	sp, #48	; 0x30
 8009f4a:	af04      	add	r7, sp, #16
 8009f4c:	60f8      	str	r0, [r7, #12]
 8009f4e:	60b9      	str	r1, [r7, #8]
 8009f50:	603b      	str	r3, [r7, #0]
 8009f52:	4613      	mov	r3, r2
 8009f54:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009f56:	88fb      	ldrh	r3, [r7, #6]
 8009f58:	009b      	lsls	r3, r3, #2
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	f001 f9e4 	bl	800b328 <pvPortMalloc>
 8009f60:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009f62:	697b      	ldr	r3, [r7, #20]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d00e      	beq.n	8009f86 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009f68:	20a0      	movs	r0, #160	; 0xa0
 8009f6a:	f001 f9dd 	bl	800b328 <pvPortMalloc>
 8009f6e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009f70:	69fb      	ldr	r3, [r7, #28]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d003      	beq.n	8009f7e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009f76:	69fb      	ldr	r3, [r7, #28]
 8009f78:	697a      	ldr	r2, [r7, #20]
 8009f7a:	631a      	str	r2, [r3, #48]	; 0x30
 8009f7c:	e005      	b.n	8009f8a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009f7e:	6978      	ldr	r0, [r7, #20]
 8009f80:	f001 fa9e 	bl	800b4c0 <vPortFree>
 8009f84:	e001      	b.n	8009f8a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009f86:	2300      	movs	r3, #0
 8009f88:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009f8a:	69fb      	ldr	r3, [r7, #28]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d017      	beq.n	8009fc0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009f90:	69fb      	ldr	r3, [r7, #28]
 8009f92:	2200      	movs	r2, #0
 8009f94:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009f98:	88fa      	ldrh	r2, [r7, #6]
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	9303      	str	r3, [sp, #12]
 8009f9e:	69fb      	ldr	r3, [r7, #28]
 8009fa0:	9302      	str	r3, [sp, #8]
 8009fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fa4:	9301      	str	r3, [sp, #4]
 8009fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fa8:	9300      	str	r3, [sp, #0]
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	68b9      	ldr	r1, [r7, #8]
 8009fae:	68f8      	ldr	r0, [r7, #12]
 8009fb0:	f000 f80e 	bl	8009fd0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009fb4:	69f8      	ldr	r0, [r7, #28]
 8009fb6:	f000 f8a9 	bl	800a10c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009fba:	2301      	movs	r3, #1
 8009fbc:	61bb      	str	r3, [r7, #24]
 8009fbe:	e002      	b.n	8009fc6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8009fc4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009fc6:	69bb      	ldr	r3, [r7, #24]
	}
 8009fc8:	4618      	mov	r0, r3
 8009fca:	3720      	adds	r7, #32
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	bd80      	pop	{r7, pc}

08009fd0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b088      	sub	sp, #32
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	60f8      	str	r0, [r7, #12]
 8009fd8:	60b9      	str	r1, [r7, #8]
 8009fda:	607a      	str	r2, [r7, #4]
 8009fdc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fe0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009fe8:	3b01      	subs	r3, #1
 8009fea:	009b      	lsls	r3, r3, #2
 8009fec:	4413      	add	r3, r2
 8009fee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009ff0:	69bb      	ldr	r3, [r7, #24]
 8009ff2:	f023 0307 	bic.w	r3, r3, #7
 8009ff6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009ff8:	69bb      	ldr	r3, [r7, #24]
 8009ffa:	f003 0307 	and.w	r3, r3, #7
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d00a      	beq.n	800a018 <prvInitialiseNewTask+0x48>
	__asm volatile
 800a002:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a006:	f383 8811 	msr	BASEPRI, r3
 800a00a:	f3bf 8f6f 	isb	sy
 800a00e:	f3bf 8f4f 	dsb	sy
 800a012:	617b      	str	r3, [r7, #20]
}
 800a014:	bf00      	nop
 800a016:	e7fe      	b.n	800a016 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d01f      	beq.n	800a05e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a01e:	2300      	movs	r3, #0
 800a020:	61fb      	str	r3, [r7, #28]
 800a022:	e012      	b.n	800a04a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a024:	68ba      	ldr	r2, [r7, #8]
 800a026:	69fb      	ldr	r3, [r7, #28]
 800a028:	4413      	add	r3, r2
 800a02a:	7819      	ldrb	r1, [r3, #0]
 800a02c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a02e:	69fb      	ldr	r3, [r7, #28]
 800a030:	4413      	add	r3, r2
 800a032:	3334      	adds	r3, #52	; 0x34
 800a034:	460a      	mov	r2, r1
 800a036:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a038:	68ba      	ldr	r2, [r7, #8]
 800a03a:	69fb      	ldr	r3, [r7, #28]
 800a03c:	4413      	add	r3, r2
 800a03e:	781b      	ldrb	r3, [r3, #0]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d006      	beq.n	800a052 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a044:	69fb      	ldr	r3, [r7, #28]
 800a046:	3301      	adds	r3, #1
 800a048:	61fb      	str	r3, [r7, #28]
 800a04a:	69fb      	ldr	r3, [r7, #28]
 800a04c:	2b0f      	cmp	r3, #15
 800a04e:	d9e9      	bls.n	800a024 <prvInitialiseNewTask+0x54>
 800a050:	e000      	b.n	800a054 <prvInitialiseNewTask+0x84>
			{
				break;
 800a052:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a056:	2200      	movs	r2, #0
 800a058:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a05c:	e003      	b.n	800a066 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a05e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a060:	2200      	movs	r2, #0
 800a062:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a068:	2b06      	cmp	r3, #6
 800a06a:	d901      	bls.n	800a070 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a06c:	2306      	movs	r3, #6
 800a06e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a072:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a074:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a078:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a07a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a07c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a07e:	2200      	movs	r2, #0
 800a080:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a084:	3304      	adds	r3, #4
 800a086:	4618      	mov	r0, r3
 800a088:	f7fe ff2a 	bl	8008ee0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a08c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a08e:	3318      	adds	r3, #24
 800a090:	4618      	mov	r0, r3
 800a092:	f7fe ff25 	bl	8008ee0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a098:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a09a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a09c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a09e:	f1c3 0207 	rsb	r2, r3, #7
 800a0a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0a4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a0a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0aa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a0ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a0b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a0bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0be:	334c      	adds	r3, #76	; 0x4c
 800a0c0:	224c      	movs	r2, #76	; 0x4c
 800a0c2:	2100      	movs	r1, #0
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	f001 fbe7 	bl	800b898 <memset>
 800a0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0cc:	4a0c      	ldr	r2, [pc, #48]	; (800a100 <prvInitialiseNewTask+0x130>)
 800a0ce:	651a      	str	r2, [r3, #80]	; 0x50
 800a0d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0d2:	4a0c      	ldr	r2, [pc, #48]	; (800a104 <prvInitialiseNewTask+0x134>)
 800a0d4:	655a      	str	r2, [r3, #84]	; 0x54
 800a0d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0d8:	4a0b      	ldr	r2, [pc, #44]	; (800a108 <prvInitialiseNewTask+0x138>)
 800a0da:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a0dc:	683a      	ldr	r2, [r7, #0]
 800a0de:	68f9      	ldr	r1, [r7, #12]
 800a0e0:	69b8      	ldr	r0, [r7, #24]
 800a0e2:	f000 fed3 	bl	800ae8c <pxPortInitialiseStack>
 800a0e6:	4602      	mov	r2, r0
 800a0e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ea:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a0ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d002      	beq.n	800a0f8 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a0f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0f6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a0f8:	bf00      	nop
 800a0fa:	3720      	adds	r7, #32
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bd80      	pop	{r7, pc}
 800a100:	200191f8 	.word	0x200191f8
 800a104:	20019260 	.word	0x20019260
 800a108:	200192c8 	.word	0x200192c8

0800a10c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b082      	sub	sp, #8
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a114:	f000 ffe6 	bl	800b0e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a118:	4b2a      	ldr	r3, [pc, #168]	; (800a1c4 <prvAddNewTaskToReadyList+0xb8>)
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	3301      	adds	r3, #1
 800a11e:	4a29      	ldr	r2, [pc, #164]	; (800a1c4 <prvAddNewTaskToReadyList+0xb8>)
 800a120:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a122:	4b29      	ldr	r3, [pc, #164]	; (800a1c8 <prvAddNewTaskToReadyList+0xbc>)
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d109      	bne.n	800a13e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a12a:	4a27      	ldr	r2, [pc, #156]	; (800a1c8 <prvAddNewTaskToReadyList+0xbc>)
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a130:	4b24      	ldr	r3, [pc, #144]	; (800a1c4 <prvAddNewTaskToReadyList+0xb8>)
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	2b01      	cmp	r3, #1
 800a136:	d110      	bne.n	800a15a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a138:	f000 fbc4 	bl	800a8c4 <prvInitialiseTaskLists>
 800a13c:	e00d      	b.n	800a15a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a13e:	4b23      	ldr	r3, [pc, #140]	; (800a1cc <prvAddNewTaskToReadyList+0xc0>)
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d109      	bne.n	800a15a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a146:	4b20      	ldr	r3, [pc, #128]	; (800a1c8 <prvAddNewTaskToReadyList+0xbc>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a150:	429a      	cmp	r2, r3
 800a152:	d802      	bhi.n	800a15a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a154:	4a1c      	ldr	r2, [pc, #112]	; (800a1c8 <prvAddNewTaskToReadyList+0xbc>)
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a15a:	4b1d      	ldr	r3, [pc, #116]	; (800a1d0 <prvAddNewTaskToReadyList+0xc4>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	3301      	adds	r3, #1
 800a160:	4a1b      	ldr	r2, [pc, #108]	; (800a1d0 <prvAddNewTaskToReadyList+0xc4>)
 800a162:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a168:	2201      	movs	r2, #1
 800a16a:	409a      	lsls	r2, r3
 800a16c:	4b19      	ldr	r3, [pc, #100]	; (800a1d4 <prvAddNewTaskToReadyList+0xc8>)
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	4313      	orrs	r3, r2
 800a172:	4a18      	ldr	r2, [pc, #96]	; (800a1d4 <prvAddNewTaskToReadyList+0xc8>)
 800a174:	6013      	str	r3, [r2, #0]
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a17a:	4613      	mov	r3, r2
 800a17c:	009b      	lsls	r3, r3, #2
 800a17e:	4413      	add	r3, r2
 800a180:	009b      	lsls	r3, r3, #2
 800a182:	4a15      	ldr	r2, [pc, #84]	; (800a1d8 <prvAddNewTaskToReadyList+0xcc>)
 800a184:	441a      	add	r2, r3
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	3304      	adds	r3, #4
 800a18a:	4619      	mov	r1, r3
 800a18c:	4610      	mov	r0, r2
 800a18e:	f7fe feb4 	bl	8008efa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a192:	f000 ffd7 	bl	800b144 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a196:	4b0d      	ldr	r3, [pc, #52]	; (800a1cc <prvAddNewTaskToReadyList+0xc0>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d00e      	beq.n	800a1bc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a19e:	4b0a      	ldr	r3, [pc, #40]	; (800a1c8 <prvAddNewTaskToReadyList+0xbc>)
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1a8:	429a      	cmp	r2, r3
 800a1aa:	d207      	bcs.n	800a1bc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a1ac:	4b0b      	ldr	r3, [pc, #44]	; (800a1dc <prvAddNewTaskToReadyList+0xd0>)
 800a1ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1b2:	601a      	str	r2, [r3, #0]
 800a1b4:	f3bf 8f4f 	dsb	sy
 800a1b8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a1bc:	bf00      	nop
 800a1be:	3708      	adds	r7, #8
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}
 800a1c4:	20000afc 	.word	0x20000afc
 800a1c8:	200009fc 	.word	0x200009fc
 800a1cc:	20000b08 	.word	0x20000b08
 800a1d0:	20000b18 	.word	0x20000b18
 800a1d4:	20000b04 	.word	0x20000b04
 800a1d8:	20000a00 	.word	0x20000a00
 800a1dc:	e000ed04 	.word	0xe000ed04

0800a1e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b08a      	sub	sp, #40	; 0x28
 800a1e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a1ee:	463a      	mov	r2, r7
 800a1f0:	1d39      	adds	r1, r7, #4
 800a1f2:	f107 0308 	add.w	r3, r7, #8
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f7f6 fa90 	bl	800071c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a1fc:	6839      	ldr	r1, [r7, #0]
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	68ba      	ldr	r2, [r7, #8]
 800a202:	9202      	str	r2, [sp, #8]
 800a204:	9301      	str	r3, [sp, #4]
 800a206:	2300      	movs	r3, #0
 800a208:	9300      	str	r3, [sp, #0]
 800a20a:	2300      	movs	r3, #0
 800a20c:	460a      	mov	r2, r1
 800a20e:	4921      	ldr	r1, [pc, #132]	; (800a294 <vTaskStartScheduler+0xb4>)
 800a210:	4821      	ldr	r0, [pc, #132]	; (800a298 <vTaskStartScheduler+0xb8>)
 800a212:	f7ff fe3b 	bl	8009e8c <xTaskCreateStatic>
 800a216:	4603      	mov	r3, r0
 800a218:	4a20      	ldr	r2, [pc, #128]	; (800a29c <vTaskStartScheduler+0xbc>)
 800a21a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a21c:	4b1f      	ldr	r3, [pc, #124]	; (800a29c <vTaskStartScheduler+0xbc>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d002      	beq.n	800a22a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a224:	2301      	movs	r3, #1
 800a226:	617b      	str	r3, [r7, #20]
 800a228:	e001      	b.n	800a22e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a22a:	2300      	movs	r3, #0
 800a22c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a22e:	697b      	ldr	r3, [r7, #20]
 800a230:	2b01      	cmp	r3, #1
 800a232:	d11b      	bne.n	800a26c <vTaskStartScheduler+0x8c>
	__asm volatile
 800a234:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a238:	f383 8811 	msr	BASEPRI, r3
 800a23c:	f3bf 8f6f 	isb	sy
 800a240:	f3bf 8f4f 	dsb	sy
 800a244:	613b      	str	r3, [r7, #16]
}
 800a246:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a248:	4b15      	ldr	r3, [pc, #84]	; (800a2a0 <vTaskStartScheduler+0xc0>)
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	334c      	adds	r3, #76	; 0x4c
 800a24e:	4a15      	ldr	r2, [pc, #84]	; (800a2a4 <vTaskStartScheduler+0xc4>)
 800a250:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a252:	4b15      	ldr	r3, [pc, #84]	; (800a2a8 <vTaskStartScheduler+0xc8>)
 800a254:	f04f 32ff 	mov.w	r2, #4294967295
 800a258:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a25a:	4b14      	ldr	r3, [pc, #80]	; (800a2ac <vTaskStartScheduler+0xcc>)
 800a25c:	2201      	movs	r2, #1
 800a25e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a260:	4b13      	ldr	r3, [pc, #76]	; (800a2b0 <vTaskStartScheduler+0xd0>)
 800a262:	2200      	movs	r2, #0
 800a264:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a266:	f000 fe9b 	bl	800afa0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a26a:	e00e      	b.n	800a28a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a26c:	697b      	ldr	r3, [r7, #20]
 800a26e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a272:	d10a      	bne.n	800a28a <vTaskStartScheduler+0xaa>
	__asm volatile
 800a274:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a278:	f383 8811 	msr	BASEPRI, r3
 800a27c:	f3bf 8f6f 	isb	sy
 800a280:	f3bf 8f4f 	dsb	sy
 800a284:	60fb      	str	r3, [r7, #12]
}
 800a286:	bf00      	nop
 800a288:	e7fe      	b.n	800a288 <vTaskStartScheduler+0xa8>
}
 800a28a:	bf00      	nop
 800a28c:	3718      	adds	r7, #24
 800a28e:	46bd      	mov	sp, r7
 800a290:	bd80      	pop	{r7, pc}
 800a292:	bf00      	nop
 800a294:	0800c658 	.word	0x0800c658
 800a298:	0800a895 	.word	0x0800a895
 800a29c:	20000b20 	.word	0x20000b20
 800a2a0:	200009fc 	.word	0x200009fc
 800a2a4:	2000005c 	.word	0x2000005c
 800a2a8:	20000b1c 	.word	0x20000b1c
 800a2ac:	20000b08 	.word	0x20000b08
 800a2b0:	20000b00 	.word	0x20000b00

0800a2b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a2b4:	b480      	push	{r7}
 800a2b6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a2b8:	4b04      	ldr	r3, [pc, #16]	; (800a2cc <vTaskSuspendAll+0x18>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	3301      	adds	r3, #1
 800a2be:	4a03      	ldr	r2, [pc, #12]	; (800a2cc <vTaskSuspendAll+0x18>)
 800a2c0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a2c2:	bf00      	nop
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ca:	4770      	bx	lr
 800a2cc:	20000b24 	.word	0x20000b24

0800a2d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b084      	sub	sp, #16
 800a2d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a2de:	4b41      	ldr	r3, [pc, #260]	; (800a3e4 <xTaskResumeAll+0x114>)
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d10a      	bne.n	800a2fc <xTaskResumeAll+0x2c>
	__asm volatile
 800a2e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2ea:	f383 8811 	msr	BASEPRI, r3
 800a2ee:	f3bf 8f6f 	isb	sy
 800a2f2:	f3bf 8f4f 	dsb	sy
 800a2f6:	603b      	str	r3, [r7, #0]
}
 800a2f8:	bf00      	nop
 800a2fa:	e7fe      	b.n	800a2fa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a2fc:	f000 fef2 	bl	800b0e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a300:	4b38      	ldr	r3, [pc, #224]	; (800a3e4 <xTaskResumeAll+0x114>)
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	3b01      	subs	r3, #1
 800a306:	4a37      	ldr	r2, [pc, #220]	; (800a3e4 <xTaskResumeAll+0x114>)
 800a308:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a30a:	4b36      	ldr	r3, [pc, #216]	; (800a3e4 <xTaskResumeAll+0x114>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d161      	bne.n	800a3d6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a312:	4b35      	ldr	r3, [pc, #212]	; (800a3e8 <xTaskResumeAll+0x118>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d05d      	beq.n	800a3d6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a31a:	e02e      	b.n	800a37a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a31c:	4b33      	ldr	r3, [pc, #204]	; (800a3ec <xTaskResumeAll+0x11c>)
 800a31e:	68db      	ldr	r3, [r3, #12]
 800a320:	68db      	ldr	r3, [r3, #12]
 800a322:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	3318      	adds	r3, #24
 800a328:	4618      	mov	r0, r3
 800a32a:	f7fe fe43 	bl	8008fb4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	3304      	adds	r3, #4
 800a332:	4618      	mov	r0, r3
 800a334:	f7fe fe3e 	bl	8008fb4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a33c:	2201      	movs	r2, #1
 800a33e:	409a      	lsls	r2, r3
 800a340:	4b2b      	ldr	r3, [pc, #172]	; (800a3f0 <xTaskResumeAll+0x120>)
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	4313      	orrs	r3, r2
 800a346:	4a2a      	ldr	r2, [pc, #168]	; (800a3f0 <xTaskResumeAll+0x120>)
 800a348:	6013      	str	r3, [r2, #0]
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a34e:	4613      	mov	r3, r2
 800a350:	009b      	lsls	r3, r3, #2
 800a352:	4413      	add	r3, r2
 800a354:	009b      	lsls	r3, r3, #2
 800a356:	4a27      	ldr	r2, [pc, #156]	; (800a3f4 <xTaskResumeAll+0x124>)
 800a358:	441a      	add	r2, r3
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	3304      	adds	r3, #4
 800a35e:	4619      	mov	r1, r3
 800a360:	4610      	mov	r0, r2
 800a362:	f7fe fdca 	bl	8008efa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a36a:	4b23      	ldr	r3, [pc, #140]	; (800a3f8 <xTaskResumeAll+0x128>)
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a370:	429a      	cmp	r2, r3
 800a372:	d302      	bcc.n	800a37a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800a374:	4b21      	ldr	r3, [pc, #132]	; (800a3fc <xTaskResumeAll+0x12c>)
 800a376:	2201      	movs	r2, #1
 800a378:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a37a:	4b1c      	ldr	r3, [pc, #112]	; (800a3ec <xTaskResumeAll+0x11c>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d1cc      	bne.n	800a31c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d001      	beq.n	800a38c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a388:	f000 fb3e 	bl	800aa08 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a38c:	4b1c      	ldr	r3, [pc, #112]	; (800a400 <xTaskResumeAll+0x130>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d010      	beq.n	800a3ba <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a398:	f000 f858 	bl	800a44c <xTaskIncrementTick>
 800a39c:	4603      	mov	r3, r0
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d002      	beq.n	800a3a8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800a3a2:	4b16      	ldr	r3, [pc, #88]	; (800a3fc <xTaskResumeAll+0x12c>)
 800a3a4:	2201      	movs	r2, #1
 800a3a6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	3b01      	subs	r3, #1
 800a3ac:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d1f1      	bne.n	800a398 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800a3b4:	4b12      	ldr	r3, [pc, #72]	; (800a400 <xTaskResumeAll+0x130>)
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a3ba:	4b10      	ldr	r3, [pc, #64]	; (800a3fc <xTaskResumeAll+0x12c>)
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d009      	beq.n	800a3d6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a3c6:	4b0f      	ldr	r3, [pc, #60]	; (800a404 <xTaskResumeAll+0x134>)
 800a3c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3cc:	601a      	str	r2, [r3, #0]
 800a3ce:	f3bf 8f4f 	dsb	sy
 800a3d2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a3d6:	f000 feb5 	bl	800b144 <vPortExitCritical>

	return xAlreadyYielded;
 800a3da:	68bb      	ldr	r3, [r7, #8]
}
 800a3dc:	4618      	mov	r0, r3
 800a3de:	3710      	adds	r7, #16
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bd80      	pop	{r7, pc}
 800a3e4:	20000b24 	.word	0x20000b24
 800a3e8:	20000afc 	.word	0x20000afc
 800a3ec:	20000abc 	.word	0x20000abc
 800a3f0:	20000b04 	.word	0x20000b04
 800a3f4:	20000a00 	.word	0x20000a00
 800a3f8:	200009fc 	.word	0x200009fc
 800a3fc:	20000b10 	.word	0x20000b10
 800a400:	20000b0c 	.word	0x20000b0c
 800a404:	e000ed04 	.word	0xe000ed04

0800a408 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a408:	b480      	push	{r7}
 800a40a:	b083      	sub	sp, #12
 800a40c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a40e:	4b05      	ldr	r3, [pc, #20]	; (800a424 <xTaskGetTickCount+0x1c>)
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a414:	687b      	ldr	r3, [r7, #4]
}
 800a416:	4618      	mov	r0, r3
 800a418:	370c      	adds	r7, #12
 800a41a:	46bd      	mov	sp, r7
 800a41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a420:	4770      	bx	lr
 800a422:	bf00      	nop
 800a424:	20000b00 	.word	0x20000b00

0800a428 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b082      	sub	sp, #8
 800a42c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a42e:	f000 ff3b 	bl	800b2a8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800a432:	2300      	movs	r3, #0
 800a434:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800a436:	4b04      	ldr	r3, [pc, #16]	; (800a448 <xTaskGetTickCountFromISR+0x20>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a43c:	683b      	ldr	r3, [r7, #0]
}
 800a43e:	4618      	mov	r0, r3
 800a440:	3708      	adds	r7, #8
 800a442:	46bd      	mov	sp, r7
 800a444:	bd80      	pop	{r7, pc}
 800a446:	bf00      	nop
 800a448:	20000b00 	.word	0x20000b00

0800a44c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b086      	sub	sp, #24
 800a450:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a452:	2300      	movs	r3, #0
 800a454:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a456:	4b4e      	ldr	r3, [pc, #312]	; (800a590 <xTaskIncrementTick+0x144>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	f040 808e 	bne.w	800a57c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a460:	4b4c      	ldr	r3, [pc, #304]	; (800a594 <xTaskIncrementTick+0x148>)
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	3301      	adds	r3, #1
 800a466:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a468:	4a4a      	ldr	r2, [pc, #296]	; (800a594 <xTaskIncrementTick+0x148>)
 800a46a:	693b      	ldr	r3, [r7, #16]
 800a46c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a46e:	693b      	ldr	r3, [r7, #16]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d120      	bne.n	800a4b6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a474:	4b48      	ldr	r3, [pc, #288]	; (800a598 <xTaskIncrementTick+0x14c>)
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d00a      	beq.n	800a494 <xTaskIncrementTick+0x48>
	__asm volatile
 800a47e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a482:	f383 8811 	msr	BASEPRI, r3
 800a486:	f3bf 8f6f 	isb	sy
 800a48a:	f3bf 8f4f 	dsb	sy
 800a48e:	603b      	str	r3, [r7, #0]
}
 800a490:	bf00      	nop
 800a492:	e7fe      	b.n	800a492 <xTaskIncrementTick+0x46>
 800a494:	4b40      	ldr	r3, [pc, #256]	; (800a598 <xTaskIncrementTick+0x14c>)
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	60fb      	str	r3, [r7, #12]
 800a49a:	4b40      	ldr	r3, [pc, #256]	; (800a59c <xTaskIncrementTick+0x150>)
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	4a3e      	ldr	r2, [pc, #248]	; (800a598 <xTaskIncrementTick+0x14c>)
 800a4a0:	6013      	str	r3, [r2, #0]
 800a4a2:	4a3e      	ldr	r2, [pc, #248]	; (800a59c <xTaskIncrementTick+0x150>)
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	6013      	str	r3, [r2, #0]
 800a4a8:	4b3d      	ldr	r3, [pc, #244]	; (800a5a0 <xTaskIncrementTick+0x154>)
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	3301      	adds	r3, #1
 800a4ae:	4a3c      	ldr	r2, [pc, #240]	; (800a5a0 <xTaskIncrementTick+0x154>)
 800a4b0:	6013      	str	r3, [r2, #0]
 800a4b2:	f000 faa9 	bl	800aa08 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a4b6:	4b3b      	ldr	r3, [pc, #236]	; (800a5a4 <xTaskIncrementTick+0x158>)
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	693a      	ldr	r2, [r7, #16]
 800a4bc:	429a      	cmp	r2, r3
 800a4be:	d348      	bcc.n	800a552 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a4c0:	4b35      	ldr	r3, [pc, #212]	; (800a598 <xTaskIncrementTick+0x14c>)
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d104      	bne.n	800a4d4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4ca:	4b36      	ldr	r3, [pc, #216]	; (800a5a4 <xTaskIncrementTick+0x158>)
 800a4cc:	f04f 32ff 	mov.w	r2, #4294967295
 800a4d0:	601a      	str	r2, [r3, #0]
					break;
 800a4d2:	e03e      	b.n	800a552 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4d4:	4b30      	ldr	r3, [pc, #192]	; (800a598 <xTaskIncrementTick+0x14c>)
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	68db      	ldr	r3, [r3, #12]
 800a4da:	68db      	ldr	r3, [r3, #12]
 800a4dc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a4de:	68bb      	ldr	r3, [r7, #8]
 800a4e0:	685b      	ldr	r3, [r3, #4]
 800a4e2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a4e4:	693a      	ldr	r2, [r7, #16]
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	429a      	cmp	r2, r3
 800a4ea:	d203      	bcs.n	800a4f4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a4ec:	4a2d      	ldr	r2, [pc, #180]	; (800a5a4 <xTaskIncrementTick+0x158>)
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a4f2:	e02e      	b.n	800a552 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a4f4:	68bb      	ldr	r3, [r7, #8]
 800a4f6:	3304      	adds	r3, #4
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	f7fe fd5b 	bl	8008fb4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a4fe:	68bb      	ldr	r3, [r7, #8]
 800a500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a502:	2b00      	cmp	r3, #0
 800a504:	d004      	beq.n	800a510 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a506:	68bb      	ldr	r3, [r7, #8]
 800a508:	3318      	adds	r3, #24
 800a50a:	4618      	mov	r0, r3
 800a50c:	f7fe fd52 	bl	8008fb4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a510:	68bb      	ldr	r3, [r7, #8]
 800a512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a514:	2201      	movs	r2, #1
 800a516:	409a      	lsls	r2, r3
 800a518:	4b23      	ldr	r3, [pc, #140]	; (800a5a8 <xTaskIncrementTick+0x15c>)
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	4313      	orrs	r3, r2
 800a51e:	4a22      	ldr	r2, [pc, #136]	; (800a5a8 <xTaskIncrementTick+0x15c>)
 800a520:	6013      	str	r3, [r2, #0]
 800a522:	68bb      	ldr	r3, [r7, #8]
 800a524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a526:	4613      	mov	r3, r2
 800a528:	009b      	lsls	r3, r3, #2
 800a52a:	4413      	add	r3, r2
 800a52c:	009b      	lsls	r3, r3, #2
 800a52e:	4a1f      	ldr	r2, [pc, #124]	; (800a5ac <xTaskIncrementTick+0x160>)
 800a530:	441a      	add	r2, r3
 800a532:	68bb      	ldr	r3, [r7, #8]
 800a534:	3304      	adds	r3, #4
 800a536:	4619      	mov	r1, r3
 800a538:	4610      	mov	r0, r2
 800a53a:	f7fe fcde 	bl	8008efa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a53e:	68bb      	ldr	r3, [r7, #8]
 800a540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a542:	4b1b      	ldr	r3, [pc, #108]	; (800a5b0 <xTaskIncrementTick+0x164>)
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a548:	429a      	cmp	r2, r3
 800a54a:	d3b9      	bcc.n	800a4c0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a54c:	2301      	movs	r3, #1
 800a54e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a550:	e7b6      	b.n	800a4c0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a552:	4b17      	ldr	r3, [pc, #92]	; (800a5b0 <xTaskIncrementTick+0x164>)
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a558:	4914      	ldr	r1, [pc, #80]	; (800a5ac <xTaskIncrementTick+0x160>)
 800a55a:	4613      	mov	r3, r2
 800a55c:	009b      	lsls	r3, r3, #2
 800a55e:	4413      	add	r3, r2
 800a560:	009b      	lsls	r3, r3, #2
 800a562:	440b      	add	r3, r1
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	2b01      	cmp	r3, #1
 800a568:	d901      	bls.n	800a56e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800a56a:	2301      	movs	r3, #1
 800a56c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a56e:	4b11      	ldr	r3, [pc, #68]	; (800a5b4 <xTaskIncrementTick+0x168>)
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d007      	beq.n	800a586 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800a576:	2301      	movs	r3, #1
 800a578:	617b      	str	r3, [r7, #20]
 800a57a:	e004      	b.n	800a586 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a57c:	4b0e      	ldr	r3, [pc, #56]	; (800a5b8 <xTaskIncrementTick+0x16c>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	3301      	adds	r3, #1
 800a582:	4a0d      	ldr	r2, [pc, #52]	; (800a5b8 <xTaskIncrementTick+0x16c>)
 800a584:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a586:	697b      	ldr	r3, [r7, #20]
}
 800a588:	4618      	mov	r0, r3
 800a58a:	3718      	adds	r7, #24
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd80      	pop	{r7, pc}
 800a590:	20000b24 	.word	0x20000b24
 800a594:	20000b00 	.word	0x20000b00
 800a598:	20000ab4 	.word	0x20000ab4
 800a59c:	20000ab8 	.word	0x20000ab8
 800a5a0:	20000b14 	.word	0x20000b14
 800a5a4:	20000b1c 	.word	0x20000b1c
 800a5a8:	20000b04 	.word	0x20000b04
 800a5ac:	20000a00 	.word	0x20000a00
 800a5b0:	200009fc 	.word	0x200009fc
 800a5b4:	20000b10 	.word	0x20000b10
 800a5b8:	20000b0c 	.word	0x20000b0c

0800a5bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a5bc:	b480      	push	{r7}
 800a5be:	b087      	sub	sp, #28
 800a5c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a5c2:	4b29      	ldr	r3, [pc, #164]	; (800a668 <vTaskSwitchContext+0xac>)
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d003      	beq.n	800a5d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a5ca:	4b28      	ldr	r3, [pc, #160]	; (800a66c <vTaskSwitchContext+0xb0>)
 800a5cc:	2201      	movs	r2, #1
 800a5ce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a5d0:	e044      	b.n	800a65c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800a5d2:	4b26      	ldr	r3, [pc, #152]	; (800a66c <vTaskSwitchContext+0xb0>)
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5d8:	4b25      	ldr	r3, [pc, #148]	; (800a670 <vTaskSwitchContext+0xb4>)
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	fab3 f383 	clz	r3, r3
 800a5e4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a5e6:	7afb      	ldrb	r3, [r7, #11]
 800a5e8:	f1c3 031f 	rsb	r3, r3, #31
 800a5ec:	617b      	str	r3, [r7, #20]
 800a5ee:	4921      	ldr	r1, [pc, #132]	; (800a674 <vTaskSwitchContext+0xb8>)
 800a5f0:	697a      	ldr	r2, [r7, #20]
 800a5f2:	4613      	mov	r3, r2
 800a5f4:	009b      	lsls	r3, r3, #2
 800a5f6:	4413      	add	r3, r2
 800a5f8:	009b      	lsls	r3, r3, #2
 800a5fa:	440b      	add	r3, r1
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d10a      	bne.n	800a618 <vTaskSwitchContext+0x5c>
	__asm volatile
 800a602:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a606:	f383 8811 	msr	BASEPRI, r3
 800a60a:	f3bf 8f6f 	isb	sy
 800a60e:	f3bf 8f4f 	dsb	sy
 800a612:	607b      	str	r3, [r7, #4]
}
 800a614:	bf00      	nop
 800a616:	e7fe      	b.n	800a616 <vTaskSwitchContext+0x5a>
 800a618:	697a      	ldr	r2, [r7, #20]
 800a61a:	4613      	mov	r3, r2
 800a61c:	009b      	lsls	r3, r3, #2
 800a61e:	4413      	add	r3, r2
 800a620:	009b      	lsls	r3, r3, #2
 800a622:	4a14      	ldr	r2, [pc, #80]	; (800a674 <vTaskSwitchContext+0xb8>)
 800a624:	4413      	add	r3, r2
 800a626:	613b      	str	r3, [r7, #16]
 800a628:	693b      	ldr	r3, [r7, #16]
 800a62a:	685b      	ldr	r3, [r3, #4]
 800a62c:	685a      	ldr	r2, [r3, #4]
 800a62e:	693b      	ldr	r3, [r7, #16]
 800a630:	605a      	str	r2, [r3, #4]
 800a632:	693b      	ldr	r3, [r7, #16]
 800a634:	685a      	ldr	r2, [r3, #4]
 800a636:	693b      	ldr	r3, [r7, #16]
 800a638:	3308      	adds	r3, #8
 800a63a:	429a      	cmp	r2, r3
 800a63c:	d104      	bne.n	800a648 <vTaskSwitchContext+0x8c>
 800a63e:	693b      	ldr	r3, [r7, #16]
 800a640:	685b      	ldr	r3, [r3, #4]
 800a642:	685a      	ldr	r2, [r3, #4]
 800a644:	693b      	ldr	r3, [r7, #16]
 800a646:	605a      	str	r2, [r3, #4]
 800a648:	693b      	ldr	r3, [r7, #16]
 800a64a:	685b      	ldr	r3, [r3, #4]
 800a64c:	68db      	ldr	r3, [r3, #12]
 800a64e:	4a0a      	ldr	r2, [pc, #40]	; (800a678 <vTaskSwitchContext+0xbc>)
 800a650:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a652:	4b09      	ldr	r3, [pc, #36]	; (800a678 <vTaskSwitchContext+0xbc>)
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	334c      	adds	r3, #76	; 0x4c
 800a658:	4a08      	ldr	r2, [pc, #32]	; (800a67c <vTaskSwitchContext+0xc0>)
 800a65a:	6013      	str	r3, [r2, #0]
}
 800a65c:	bf00      	nop
 800a65e:	371c      	adds	r7, #28
 800a660:	46bd      	mov	sp, r7
 800a662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a666:	4770      	bx	lr
 800a668:	20000b24 	.word	0x20000b24
 800a66c:	20000b10 	.word	0x20000b10
 800a670:	20000b04 	.word	0x20000b04
 800a674:	20000a00 	.word	0x20000a00
 800a678:	200009fc 	.word	0x200009fc
 800a67c:	2000005c 	.word	0x2000005c

0800a680 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b084      	sub	sp, #16
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
 800a688:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d10a      	bne.n	800a6a6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a690:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a694:	f383 8811 	msr	BASEPRI, r3
 800a698:	f3bf 8f6f 	isb	sy
 800a69c:	f3bf 8f4f 	dsb	sy
 800a6a0:	60fb      	str	r3, [r7, #12]
}
 800a6a2:	bf00      	nop
 800a6a4:	e7fe      	b.n	800a6a4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a6a6:	4b07      	ldr	r3, [pc, #28]	; (800a6c4 <vTaskPlaceOnEventList+0x44>)
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	3318      	adds	r3, #24
 800a6ac:	4619      	mov	r1, r3
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	f7fe fc47 	bl	8008f42 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a6b4:	2101      	movs	r1, #1
 800a6b6:	6838      	ldr	r0, [r7, #0]
 800a6b8:	f000 fb82 	bl	800adc0 <prvAddCurrentTaskToDelayedList>
}
 800a6bc:	bf00      	nop
 800a6be:	3710      	adds	r7, #16
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	bd80      	pop	{r7, pc}
 800a6c4:	200009fc 	.word	0x200009fc

0800a6c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b086      	sub	sp, #24
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	68db      	ldr	r3, [r3, #12]
 800a6d4:	68db      	ldr	r3, [r3, #12]
 800a6d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a6d8:	693b      	ldr	r3, [r7, #16]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d10a      	bne.n	800a6f4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a6de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6e2:	f383 8811 	msr	BASEPRI, r3
 800a6e6:	f3bf 8f6f 	isb	sy
 800a6ea:	f3bf 8f4f 	dsb	sy
 800a6ee:	60fb      	str	r3, [r7, #12]
}
 800a6f0:	bf00      	nop
 800a6f2:	e7fe      	b.n	800a6f2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a6f4:	693b      	ldr	r3, [r7, #16]
 800a6f6:	3318      	adds	r3, #24
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	f7fe fc5b 	bl	8008fb4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a6fe:	4b1d      	ldr	r3, [pc, #116]	; (800a774 <xTaskRemoveFromEventList+0xac>)
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d11c      	bne.n	800a740 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a706:	693b      	ldr	r3, [r7, #16]
 800a708:	3304      	adds	r3, #4
 800a70a:	4618      	mov	r0, r3
 800a70c:	f7fe fc52 	bl	8008fb4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a710:	693b      	ldr	r3, [r7, #16]
 800a712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a714:	2201      	movs	r2, #1
 800a716:	409a      	lsls	r2, r3
 800a718:	4b17      	ldr	r3, [pc, #92]	; (800a778 <xTaskRemoveFromEventList+0xb0>)
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	4313      	orrs	r3, r2
 800a71e:	4a16      	ldr	r2, [pc, #88]	; (800a778 <xTaskRemoveFromEventList+0xb0>)
 800a720:	6013      	str	r3, [r2, #0]
 800a722:	693b      	ldr	r3, [r7, #16]
 800a724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a726:	4613      	mov	r3, r2
 800a728:	009b      	lsls	r3, r3, #2
 800a72a:	4413      	add	r3, r2
 800a72c:	009b      	lsls	r3, r3, #2
 800a72e:	4a13      	ldr	r2, [pc, #76]	; (800a77c <xTaskRemoveFromEventList+0xb4>)
 800a730:	441a      	add	r2, r3
 800a732:	693b      	ldr	r3, [r7, #16]
 800a734:	3304      	adds	r3, #4
 800a736:	4619      	mov	r1, r3
 800a738:	4610      	mov	r0, r2
 800a73a:	f7fe fbde 	bl	8008efa <vListInsertEnd>
 800a73e:	e005      	b.n	800a74c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a740:	693b      	ldr	r3, [r7, #16]
 800a742:	3318      	adds	r3, #24
 800a744:	4619      	mov	r1, r3
 800a746:	480e      	ldr	r0, [pc, #56]	; (800a780 <xTaskRemoveFromEventList+0xb8>)
 800a748:	f7fe fbd7 	bl	8008efa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a74c:	693b      	ldr	r3, [r7, #16]
 800a74e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a750:	4b0c      	ldr	r3, [pc, #48]	; (800a784 <xTaskRemoveFromEventList+0xbc>)
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a756:	429a      	cmp	r2, r3
 800a758:	d905      	bls.n	800a766 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a75a:	2301      	movs	r3, #1
 800a75c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a75e:	4b0a      	ldr	r3, [pc, #40]	; (800a788 <xTaskRemoveFromEventList+0xc0>)
 800a760:	2201      	movs	r2, #1
 800a762:	601a      	str	r2, [r3, #0]
 800a764:	e001      	b.n	800a76a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800a766:	2300      	movs	r3, #0
 800a768:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a76a:	697b      	ldr	r3, [r7, #20]
}
 800a76c:	4618      	mov	r0, r3
 800a76e:	3718      	adds	r7, #24
 800a770:	46bd      	mov	sp, r7
 800a772:	bd80      	pop	{r7, pc}
 800a774:	20000b24 	.word	0x20000b24
 800a778:	20000b04 	.word	0x20000b04
 800a77c:	20000a00 	.word	0x20000a00
 800a780:	20000abc 	.word	0x20000abc
 800a784:	200009fc 	.word	0x200009fc
 800a788:	20000b10 	.word	0x20000b10

0800a78c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a78c:	b480      	push	{r7}
 800a78e:	b083      	sub	sp, #12
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a794:	4b06      	ldr	r3, [pc, #24]	; (800a7b0 <vTaskInternalSetTimeOutState+0x24>)
 800a796:	681a      	ldr	r2, [r3, #0]
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a79c:	4b05      	ldr	r3, [pc, #20]	; (800a7b4 <vTaskInternalSetTimeOutState+0x28>)
 800a79e:	681a      	ldr	r2, [r3, #0]
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	605a      	str	r2, [r3, #4]
}
 800a7a4:	bf00      	nop
 800a7a6:	370c      	adds	r7, #12
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ae:	4770      	bx	lr
 800a7b0:	20000b14 	.word	0x20000b14
 800a7b4:	20000b00 	.word	0x20000b00

0800a7b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b088      	sub	sp, #32
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
 800a7c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d10a      	bne.n	800a7de <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a7c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7cc:	f383 8811 	msr	BASEPRI, r3
 800a7d0:	f3bf 8f6f 	isb	sy
 800a7d4:	f3bf 8f4f 	dsb	sy
 800a7d8:	613b      	str	r3, [r7, #16]
}
 800a7da:	bf00      	nop
 800a7dc:	e7fe      	b.n	800a7dc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d10a      	bne.n	800a7fa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a7e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7e8:	f383 8811 	msr	BASEPRI, r3
 800a7ec:	f3bf 8f6f 	isb	sy
 800a7f0:	f3bf 8f4f 	dsb	sy
 800a7f4:	60fb      	str	r3, [r7, #12]
}
 800a7f6:	bf00      	nop
 800a7f8:	e7fe      	b.n	800a7f8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a7fa:	f000 fc73 	bl	800b0e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a7fe:	4b1d      	ldr	r3, [pc, #116]	; (800a874 <xTaskCheckForTimeOut+0xbc>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	685b      	ldr	r3, [r3, #4]
 800a808:	69ba      	ldr	r2, [r7, #24]
 800a80a:	1ad3      	subs	r3, r2, r3
 800a80c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a816:	d102      	bne.n	800a81e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a818:	2300      	movs	r3, #0
 800a81a:	61fb      	str	r3, [r7, #28]
 800a81c:	e023      	b.n	800a866 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681a      	ldr	r2, [r3, #0]
 800a822:	4b15      	ldr	r3, [pc, #84]	; (800a878 <xTaskCheckForTimeOut+0xc0>)
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	429a      	cmp	r2, r3
 800a828:	d007      	beq.n	800a83a <xTaskCheckForTimeOut+0x82>
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	685b      	ldr	r3, [r3, #4]
 800a82e:	69ba      	ldr	r2, [r7, #24]
 800a830:	429a      	cmp	r2, r3
 800a832:	d302      	bcc.n	800a83a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a834:	2301      	movs	r3, #1
 800a836:	61fb      	str	r3, [r7, #28]
 800a838:	e015      	b.n	800a866 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	697a      	ldr	r2, [r7, #20]
 800a840:	429a      	cmp	r2, r3
 800a842:	d20b      	bcs.n	800a85c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	681a      	ldr	r2, [r3, #0]
 800a848:	697b      	ldr	r3, [r7, #20]
 800a84a:	1ad2      	subs	r2, r2, r3
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a850:	6878      	ldr	r0, [r7, #4]
 800a852:	f7ff ff9b 	bl	800a78c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a856:	2300      	movs	r3, #0
 800a858:	61fb      	str	r3, [r7, #28]
 800a85a:	e004      	b.n	800a866 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	2200      	movs	r2, #0
 800a860:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a862:	2301      	movs	r3, #1
 800a864:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a866:	f000 fc6d 	bl	800b144 <vPortExitCritical>

	return xReturn;
 800a86a:	69fb      	ldr	r3, [r7, #28]
}
 800a86c:	4618      	mov	r0, r3
 800a86e:	3720      	adds	r7, #32
 800a870:	46bd      	mov	sp, r7
 800a872:	bd80      	pop	{r7, pc}
 800a874:	20000b00 	.word	0x20000b00
 800a878:	20000b14 	.word	0x20000b14

0800a87c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a87c:	b480      	push	{r7}
 800a87e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a880:	4b03      	ldr	r3, [pc, #12]	; (800a890 <vTaskMissedYield+0x14>)
 800a882:	2201      	movs	r2, #1
 800a884:	601a      	str	r2, [r3, #0]
}
 800a886:	bf00      	nop
 800a888:	46bd      	mov	sp, r7
 800a88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88e:	4770      	bx	lr
 800a890:	20000b10 	.word	0x20000b10

0800a894 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b082      	sub	sp, #8
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a89c:	f000 f852 	bl	800a944 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a8a0:	4b06      	ldr	r3, [pc, #24]	; (800a8bc <prvIdleTask+0x28>)
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	2b01      	cmp	r3, #1
 800a8a6:	d9f9      	bls.n	800a89c <prvIdleTask+0x8>
			{
				taskYIELD();
 800a8a8:	4b05      	ldr	r3, [pc, #20]	; (800a8c0 <prvIdleTask+0x2c>)
 800a8aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8ae:	601a      	str	r2, [r3, #0]
 800a8b0:	f3bf 8f4f 	dsb	sy
 800a8b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a8b8:	e7f0      	b.n	800a89c <prvIdleTask+0x8>
 800a8ba:	bf00      	nop
 800a8bc:	20000a00 	.word	0x20000a00
 800a8c0:	e000ed04 	.word	0xe000ed04

0800a8c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b082      	sub	sp, #8
 800a8c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	607b      	str	r3, [r7, #4]
 800a8ce:	e00c      	b.n	800a8ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a8d0:	687a      	ldr	r2, [r7, #4]
 800a8d2:	4613      	mov	r3, r2
 800a8d4:	009b      	lsls	r3, r3, #2
 800a8d6:	4413      	add	r3, r2
 800a8d8:	009b      	lsls	r3, r3, #2
 800a8da:	4a12      	ldr	r2, [pc, #72]	; (800a924 <prvInitialiseTaskLists+0x60>)
 800a8dc:	4413      	add	r3, r2
 800a8de:	4618      	mov	r0, r3
 800a8e0:	f7fe fade 	bl	8008ea0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	3301      	adds	r3, #1
 800a8e8:	607b      	str	r3, [r7, #4]
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	2b06      	cmp	r3, #6
 800a8ee:	d9ef      	bls.n	800a8d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a8f0:	480d      	ldr	r0, [pc, #52]	; (800a928 <prvInitialiseTaskLists+0x64>)
 800a8f2:	f7fe fad5 	bl	8008ea0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a8f6:	480d      	ldr	r0, [pc, #52]	; (800a92c <prvInitialiseTaskLists+0x68>)
 800a8f8:	f7fe fad2 	bl	8008ea0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a8fc:	480c      	ldr	r0, [pc, #48]	; (800a930 <prvInitialiseTaskLists+0x6c>)
 800a8fe:	f7fe facf 	bl	8008ea0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a902:	480c      	ldr	r0, [pc, #48]	; (800a934 <prvInitialiseTaskLists+0x70>)
 800a904:	f7fe facc 	bl	8008ea0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a908:	480b      	ldr	r0, [pc, #44]	; (800a938 <prvInitialiseTaskLists+0x74>)
 800a90a:	f7fe fac9 	bl	8008ea0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a90e:	4b0b      	ldr	r3, [pc, #44]	; (800a93c <prvInitialiseTaskLists+0x78>)
 800a910:	4a05      	ldr	r2, [pc, #20]	; (800a928 <prvInitialiseTaskLists+0x64>)
 800a912:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a914:	4b0a      	ldr	r3, [pc, #40]	; (800a940 <prvInitialiseTaskLists+0x7c>)
 800a916:	4a05      	ldr	r2, [pc, #20]	; (800a92c <prvInitialiseTaskLists+0x68>)
 800a918:	601a      	str	r2, [r3, #0]
}
 800a91a:	bf00      	nop
 800a91c:	3708      	adds	r7, #8
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}
 800a922:	bf00      	nop
 800a924:	20000a00 	.word	0x20000a00
 800a928:	20000a8c 	.word	0x20000a8c
 800a92c:	20000aa0 	.word	0x20000aa0
 800a930:	20000abc 	.word	0x20000abc
 800a934:	20000ad0 	.word	0x20000ad0
 800a938:	20000ae8 	.word	0x20000ae8
 800a93c:	20000ab4 	.word	0x20000ab4
 800a940:	20000ab8 	.word	0x20000ab8

0800a944 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b082      	sub	sp, #8
 800a948:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a94a:	e019      	b.n	800a980 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a94c:	f000 fbca 	bl	800b0e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a950:	4b10      	ldr	r3, [pc, #64]	; (800a994 <prvCheckTasksWaitingTermination+0x50>)
 800a952:	68db      	ldr	r3, [r3, #12]
 800a954:	68db      	ldr	r3, [r3, #12]
 800a956:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	3304      	adds	r3, #4
 800a95c:	4618      	mov	r0, r3
 800a95e:	f7fe fb29 	bl	8008fb4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a962:	4b0d      	ldr	r3, [pc, #52]	; (800a998 <prvCheckTasksWaitingTermination+0x54>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	3b01      	subs	r3, #1
 800a968:	4a0b      	ldr	r2, [pc, #44]	; (800a998 <prvCheckTasksWaitingTermination+0x54>)
 800a96a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a96c:	4b0b      	ldr	r3, [pc, #44]	; (800a99c <prvCheckTasksWaitingTermination+0x58>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	3b01      	subs	r3, #1
 800a972:	4a0a      	ldr	r2, [pc, #40]	; (800a99c <prvCheckTasksWaitingTermination+0x58>)
 800a974:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a976:	f000 fbe5 	bl	800b144 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f000 f810 	bl	800a9a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a980:	4b06      	ldr	r3, [pc, #24]	; (800a99c <prvCheckTasksWaitingTermination+0x58>)
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d1e1      	bne.n	800a94c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a988:	bf00      	nop
 800a98a:	bf00      	nop
 800a98c:	3708      	adds	r7, #8
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd80      	pop	{r7, pc}
 800a992:	bf00      	nop
 800a994:	20000ad0 	.word	0x20000ad0
 800a998:	20000afc 	.word	0x20000afc
 800a99c:	20000ae4 	.word	0x20000ae4

0800a9a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b084      	sub	sp, #16
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	334c      	adds	r3, #76	; 0x4c
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	f000 ff7b 	bl	800b8a8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d108      	bne.n	800a9ce <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	f000 fd7d 	bl	800b4c0 <vPortFree>
				vPortFree( pxTCB );
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	f000 fd7a 	bl	800b4c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a9cc:	e018      	b.n	800aa00 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800a9d4:	2b01      	cmp	r3, #1
 800a9d6:	d103      	bne.n	800a9e0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a9d8:	6878      	ldr	r0, [r7, #4]
 800a9da:	f000 fd71 	bl	800b4c0 <vPortFree>
	}
 800a9de:	e00f      	b.n	800aa00 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800a9e6:	2b02      	cmp	r3, #2
 800a9e8:	d00a      	beq.n	800aa00 <prvDeleteTCB+0x60>
	__asm volatile
 800a9ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9ee:	f383 8811 	msr	BASEPRI, r3
 800a9f2:	f3bf 8f6f 	isb	sy
 800a9f6:	f3bf 8f4f 	dsb	sy
 800a9fa:	60fb      	str	r3, [r7, #12]
}
 800a9fc:	bf00      	nop
 800a9fe:	e7fe      	b.n	800a9fe <prvDeleteTCB+0x5e>
	}
 800aa00:	bf00      	nop
 800aa02:	3710      	adds	r7, #16
 800aa04:	46bd      	mov	sp, r7
 800aa06:	bd80      	pop	{r7, pc}

0800aa08 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800aa08:	b480      	push	{r7}
 800aa0a:	b083      	sub	sp, #12
 800aa0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aa0e:	4b0c      	ldr	r3, [pc, #48]	; (800aa40 <prvResetNextTaskUnblockTime+0x38>)
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d104      	bne.n	800aa22 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800aa18:	4b0a      	ldr	r3, [pc, #40]	; (800aa44 <prvResetNextTaskUnblockTime+0x3c>)
 800aa1a:	f04f 32ff 	mov.w	r2, #4294967295
 800aa1e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800aa20:	e008      	b.n	800aa34 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa22:	4b07      	ldr	r3, [pc, #28]	; (800aa40 <prvResetNextTaskUnblockTime+0x38>)
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	68db      	ldr	r3, [r3, #12]
 800aa28:	68db      	ldr	r3, [r3, #12]
 800aa2a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	685b      	ldr	r3, [r3, #4]
 800aa30:	4a04      	ldr	r2, [pc, #16]	; (800aa44 <prvResetNextTaskUnblockTime+0x3c>)
 800aa32:	6013      	str	r3, [r2, #0]
}
 800aa34:	bf00      	nop
 800aa36:	370c      	adds	r7, #12
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3e:	4770      	bx	lr
 800aa40:	20000ab4 	.word	0x20000ab4
 800aa44:	20000b1c 	.word	0x20000b1c

0800aa48 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800aa48:	b480      	push	{r7}
 800aa4a:	b083      	sub	sp, #12
 800aa4c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800aa4e:	4b0b      	ldr	r3, [pc, #44]	; (800aa7c <xTaskGetSchedulerState+0x34>)
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d102      	bne.n	800aa5c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800aa56:	2301      	movs	r3, #1
 800aa58:	607b      	str	r3, [r7, #4]
 800aa5a:	e008      	b.n	800aa6e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa5c:	4b08      	ldr	r3, [pc, #32]	; (800aa80 <xTaskGetSchedulerState+0x38>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d102      	bne.n	800aa6a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800aa64:	2302      	movs	r3, #2
 800aa66:	607b      	str	r3, [r7, #4]
 800aa68:	e001      	b.n	800aa6e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800aa6e:	687b      	ldr	r3, [r7, #4]
	}
 800aa70:	4618      	mov	r0, r3
 800aa72:	370c      	adds	r7, #12
 800aa74:	46bd      	mov	sp, r7
 800aa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7a:	4770      	bx	lr
 800aa7c:	20000b08 	.word	0x20000b08
 800aa80:	20000b24 	.word	0x20000b24

0800aa84 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b084      	sub	sp, #16
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800aa90:	2300      	movs	r3, #0
 800aa92:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d05e      	beq.n	800ab58 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800aa9a:	68bb      	ldr	r3, [r7, #8]
 800aa9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa9e:	4b31      	ldr	r3, [pc, #196]	; (800ab64 <xTaskPriorityInherit+0xe0>)
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaa4:	429a      	cmp	r2, r3
 800aaa6:	d24e      	bcs.n	800ab46 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800aaa8:	68bb      	ldr	r3, [r7, #8]
 800aaaa:	699b      	ldr	r3, [r3, #24]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	db06      	blt.n	800aabe <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aab0:	4b2c      	ldr	r3, [pc, #176]	; (800ab64 <xTaskPriorityInherit+0xe0>)
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aab6:	f1c3 0207 	rsb	r2, r3, #7
 800aaba:	68bb      	ldr	r3, [r7, #8]
 800aabc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800aabe:	68bb      	ldr	r3, [r7, #8]
 800aac0:	6959      	ldr	r1, [r3, #20]
 800aac2:	68bb      	ldr	r3, [r7, #8]
 800aac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aac6:	4613      	mov	r3, r2
 800aac8:	009b      	lsls	r3, r3, #2
 800aaca:	4413      	add	r3, r2
 800aacc:	009b      	lsls	r3, r3, #2
 800aace:	4a26      	ldr	r2, [pc, #152]	; (800ab68 <xTaskPriorityInherit+0xe4>)
 800aad0:	4413      	add	r3, r2
 800aad2:	4299      	cmp	r1, r3
 800aad4:	d12f      	bne.n	800ab36 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aad6:	68bb      	ldr	r3, [r7, #8]
 800aad8:	3304      	adds	r3, #4
 800aada:	4618      	mov	r0, r3
 800aadc:	f7fe fa6a 	bl	8008fb4 <uxListRemove>
 800aae0:	4603      	mov	r3, r0
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d10a      	bne.n	800aafc <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800aae6:	68bb      	ldr	r3, [r7, #8]
 800aae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaea:	2201      	movs	r2, #1
 800aaec:	fa02 f303 	lsl.w	r3, r2, r3
 800aaf0:	43da      	mvns	r2, r3
 800aaf2:	4b1e      	ldr	r3, [pc, #120]	; (800ab6c <xTaskPriorityInherit+0xe8>)
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	4013      	ands	r3, r2
 800aaf8:	4a1c      	ldr	r2, [pc, #112]	; (800ab6c <xTaskPriorityInherit+0xe8>)
 800aafa:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800aafc:	4b19      	ldr	r3, [pc, #100]	; (800ab64 <xTaskPriorityInherit+0xe0>)
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab02:	68bb      	ldr	r3, [r7, #8]
 800ab04:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ab06:	68bb      	ldr	r3, [r7, #8]
 800ab08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab0a:	2201      	movs	r2, #1
 800ab0c:	409a      	lsls	r2, r3
 800ab0e:	4b17      	ldr	r3, [pc, #92]	; (800ab6c <xTaskPriorityInherit+0xe8>)
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	4313      	orrs	r3, r2
 800ab14:	4a15      	ldr	r2, [pc, #84]	; (800ab6c <xTaskPriorityInherit+0xe8>)
 800ab16:	6013      	str	r3, [r2, #0]
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab1c:	4613      	mov	r3, r2
 800ab1e:	009b      	lsls	r3, r3, #2
 800ab20:	4413      	add	r3, r2
 800ab22:	009b      	lsls	r3, r3, #2
 800ab24:	4a10      	ldr	r2, [pc, #64]	; (800ab68 <xTaskPriorityInherit+0xe4>)
 800ab26:	441a      	add	r2, r3
 800ab28:	68bb      	ldr	r3, [r7, #8]
 800ab2a:	3304      	adds	r3, #4
 800ab2c:	4619      	mov	r1, r3
 800ab2e:	4610      	mov	r0, r2
 800ab30:	f7fe f9e3 	bl	8008efa <vListInsertEnd>
 800ab34:	e004      	b.n	800ab40 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ab36:	4b0b      	ldr	r3, [pc, #44]	; (800ab64 <xTaskPriorityInherit+0xe0>)
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab3c:	68bb      	ldr	r3, [r7, #8]
 800ab3e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ab40:	2301      	movs	r3, #1
 800ab42:	60fb      	str	r3, [r7, #12]
 800ab44:	e008      	b.n	800ab58 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ab4a:	4b06      	ldr	r3, [pc, #24]	; (800ab64 <xTaskPriorityInherit+0xe0>)
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab50:	429a      	cmp	r2, r3
 800ab52:	d201      	bcs.n	800ab58 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ab54:	2301      	movs	r3, #1
 800ab56:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ab58:	68fb      	ldr	r3, [r7, #12]
	}
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	3710      	adds	r7, #16
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bd80      	pop	{r7, pc}
 800ab62:	bf00      	nop
 800ab64:	200009fc 	.word	0x200009fc
 800ab68:	20000a00 	.word	0x20000a00
 800ab6c:	20000b04 	.word	0x20000b04

0800ab70 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b086      	sub	sp, #24
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d06e      	beq.n	800ac64 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ab86:	4b3a      	ldr	r3, [pc, #232]	; (800ac70 <xTaskPriorityDisinherit+0x100>)
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	693a      	ldr	r2, [r7, #16]
 800ab8c:	429a      	cmp	r2, r3
 800ab8e:	d00a      	beq.n	800aba6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ab90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab94:	f383 8811 	msr	BASEPRI, r3
 800ab98:	f3bf 8f6f 	isb	sy
 800ab9c:	f3bf 8f4f 	dsb	sy
 800aba0:	60fb      	str	r3, [r7, #12]
}
 800aba2:	bf00      	nop
 800aba4:	e7fe      	b.n	800aba4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800aba6:	693b      	ldr	r3, [r7, #16]
 800aba8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d10a      	bne.n	800abc4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800abae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abb2:	f383 8811 	msr	BASEPRI, r3
 800abb6:	f3bf 8f6f 	isb	sy
 800abba:	f3bf 8f4f 	dsb	sy
 800abbe:	60bb      	str	r3, [r7, #8]
}
 800abc0:	bf00      	nop
 800abc2:	e7fe      	b.n	800abc2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800abc4:	693b      	ldr	r3, [r7, #16]
 800abc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800abc8:	1e5a      	subs	r2, r3, #1
 800abca:	693b      	ldr	r3, [r7, #16]
 800abcc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800abce:	693b      	ldr	r3, [r7, #16]
 800abd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abd2:	693b      	ldr	r3, [r7, #16]
 800abd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abd6:	429a      	cmp	r2, r3
 800abd8:	d044      	beq.n	800ac64 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800abda:	693b      	ldr	r3, [r7, #16]
 800abdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d140      	bne.n	800ac64 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800abe2:	693b      	ldr	r3, [r7, #16]
 800abe4:	3304      	adds	r3, #4
 800abe6:	4618      	mov	r0, r3
 800abe8:	f7fe f9e4 	bl	8008fb4 <uxListRemove>
 800abec:	4603      	mov	r3, r0
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d115      	bne.n	800ac1e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800abf2:	693b      	ldr	r3, [r7, #16]
 800abf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abf6:	491f      	ldr	r1, [pc, #124]	; (800ac74 <xTaskPriorityDisinherit+0x104>)
 800abf8:	4613      	mov	r3, r2
 800abfa:	009b      	lsls	r3, r3, #2
 800abfc:	4413      	add	r3, r2
 800abfe:	009b      	lsls	r3, r3, #2
 800ac00:	440b      	add	r3, r1
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d10a      	bne.n	800ac1e <xTaskPriorityDisinherit+0xae>
 800ac08:	693b      	ldr	r3, [r7, #16]
 800ac0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac0c:	2201      	movs	r2, #1
 800ac0e:	fa02 f303 	lsl.w	r3, r2, r3
 800ac12:	43da      	mvns	r2, r3
 800ac14:	4b18      	ldr	r3, [pc, #96]	; (800ac78 <xTaskPriorityDisinherit+0x108>)
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	4013      	ands	r3, r2
 800ac1a:	4a17      	ldr	r2, [pc, #92]	; (800ac78 <xTaskPriorityDisinherit+0x108>)
 800ac1c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ac1e:	693b      	ldr	r3, [r7, #16]
 800ac20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ac22:	693b      	ldr	r3, [r7, #16]
 800ac24:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac26:	693b      	ldr	r3, [r7, #16]
 800ac28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac2a:	f1c3 0207 	rsb	r2, r3, #7
 800ac2e:	693b      	ldr	r3, [r7, #16]
 800ac30:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ac32:	693b      	ldr	r3, [r7, #16]
 800ac34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac36:	2201      	movs	r2, #1
 800ac38:	409a      	lsls	r2, r3
 800ac3a:	4b0f      	ldr	r3, [pc, #60]	; (800ac78 <xTaskPriorityDisinherit+0x108>)
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	4313      	orrs	r3, r2
 800ac40:	4a0d      	ldr	r2, [pc, #52]	; (800ac78 <xTaskPriorityDisinherit+0x108>)
 800ac42:	6013      	str	r3, [r2, #0]
 800ac44:	693b      	ldr	r3, [r7, #16]
 800ac46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac48:	4613      	mov	r3, r2
 800ac4a:	009b      	lsls	r3, r3, #2
 800ac4c:	4413      	add	r3, r2
 800ac4e:	009b      	lsls	r3, r3, #2
 800ac50:	4a08      	ldr	r2, [pc, #32]	; (800ac74 <xTaskPriorityDisinherit+0x104>)
 800ac52:	441a      	add	r2, r3
 800ac54:	693b      	ldr	r3, [r7, #16]
 800ac56:	3304      	adds	r3, #4
 800ac58:	4619      	mov	r1, r3
 800ac5a:	4610      	mov	r0, r2
 800ac5c:	f7fe f94d 	bl	8008efa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ac60:	2301      	movs	r3, #1
 800ac62:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ac64:	697b      	ldr	r3, [r7, #20]
	}
 800ac66:	4618      	mov	r0, r3
 800ac68:	3718      	adds	r7, #24
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	bd80      	pop	{r7, pc}
 800ac6e:	bf00      	nop
 800ac70:	200009fc 	.word	0x200009fc
 800ac74:	20000a00 	.word	0x20000a00
 800ac78:	20000b04 	.word	0x20000b04

0800ac7c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b088      	sub	sp, #32
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
 800ac84:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ac8a:	2301      	movs	r3, #1
 800ac8c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d077      	beq.n	800ad84 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ac94:	69bb      	ldr	r3, [r7, #24]
 800ac96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d10a      	bne.n	800acb2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800ac9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aca0:	f383 8811 	msr	BASEPRI, r3
 800aca4:	f3bf 8f6f 	isb	sy
 800aca8:	f3bf 8f4f 	dsb	sy
 800acac:	60fb      	str	r3, [r7, #12]
}
 800acae:	bf00      	nop
 800acb0:	e7fe      	b.n	800acb0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800acb2:	69bb      	ldr	r3, [r7, #24]
 800acb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acb6:	683a      	ldr	r2, [r7, #0]
 800acb8:	429a      	cmp	r2, r3
 800acba:	d902      	bls.n	800acc2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	61fb      	str	r3, [r7, #28]
 800acc0:	e002      	b.n	800acc8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800acc2:	69bb      	ldr	r3, [r7, #24]
 800acc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acc6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800acc8:	69bb      	ldr	r3, [r7, #24]
 800acca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800accc:	69fa      	ldr	r2, [r7, #28]
 800acce:	429a      	cmp	r2, r3
 800acd0:	d058      	beq.n	800ad84 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800acd2:	69bb      	ldr	r3, [r7, #24]
 800acd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800acd6:	697a      	ldr	r2, [r7, #20]
 800acd8:	429a      	cmp	r2, r3
 800acda:	d153      	bne.n	800ad84 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800acdc:	4b2b      	ldr	r3, [pc, #172]	; (800ad8c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	69ba      	ldr	r2, [r7, #24]
 800ace2:	429a      	cmp	r2, r3
 800ace4:	d10a      	bne.n	800acfc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800ace6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acea:	f383 8811 	msr	BASEPRI, r3
 800acee:	f3bf 8f6f 	isb	sy
 800acf2:	f3bf 8f4f 	dsb	sy
 800acf6:	60bb      	str	r3, [r7, #8]
}
 800acf8:	bf00      	nop
 800acfa:	e7fe      	b.n	800acfa <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800acfc:	69bb      	ldr	r3, [r7, #24]
 800acfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad00:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ad02:	69bb      	ldr	r3, [r7, #24]
 800ad04:	69fa      	ldr	r2, [r7, #28]
 800ad06:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ad08:	69bb      	ldr	r3, [r7, #24]
 800ad0a:	699b      	ldr	r3, [r3, #24]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	db04      	blt.n	800ad1a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad10:	69fb      	ldr	r3, [r7, #28]
 800ad12:	f1c3 0207 	rsb	r2, r3, #7
 800ad16:	69bb      	ldr	r3, [r7, #24]
 800ad18:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ad1a:	69bb      	ldr	r3, [r7, #24]
 800ad1c:	6959      	ldr	r1, [r3, #20]
 800ad1e:	693a      	ldr	r2, [r7, #16]
 800ad20:	4613      	mov	r3, r2
 800ad22:	009b      	lsls	r3, r3, #2
 800ad24:	4413      	add	r3, r2
 800ad26:	009b      	lsls	r3, r3, #2
 800ad28:	4a19      	ldr	r2, [pc, #100]	; (800ad90 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800ad2a:	4413      	add	r3, r2
 800ad2c:	4299      	cmp	r1, r3
 800ad2e:	d129      	bne.n	800ad84 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ad30:	69bb      	ldr	r3, [r7, #24]
 800ad32:	3304      	adds	r3, #4
 800ad34:	4618      	mov	r0, r3
 800ad36:	f7fe f93d 	bl	8008fb4 <uxListRemove>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d10a      	bne.n	800ad56 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800ad40:	69bb      	ldr	r3, [r7, #24]
 800ad42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad44:	2201      	movs	r2, #1
 800ad46:	fa02 f303 	lsl.w	r3, r2, r3
 800ad4a:	43da      	mvns	r2, r3
 800ad4c:	4b11      	ldr	r3, [pc, #68]	; (800ad94 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	4013      	ands	r3, r2
 800ad52:	4a10      	ldr	r2, [pc, #64]	; (800ad94 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800ad54:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ad56:	69bb      	ldr	r3, [r7, #24]
 800ad58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad5a:	2201      	movs	r2, #1
 800ad5c:	409a      	lsls	r2, r3
 800ad5e:	4b0d      	ldr	r3, [pc, #52]	; (800ad94 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	4313      	orrs	r3, r2
 800ad64:	4a0b      	ldr	r2, [pc, #44]	; (800ad94 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800ad66:	6013      	str	r3, [r2, #0]
 800ad68:	69bb      	ldr	r3, [r7, #24]
 800ad6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad6c:	4613      	mov	r3, r2
 800ad6e:	009b      	lsls	r3, r3, #2
 800ad70:	4413      	add	r3, r2
 800ad72:	009b      	lsls	r3, r3, #2
 800ad74:	4a06      	ldr	r2, [pc, #24]	; (800ad90 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800ad76:	441a      	add	r2, r3
 800ad78:	69bb      	ldr	r3, [r7, #24]
 800ad7a:	3304      	adds	r3, #4
 800ad7c:	4619      	mov	r1, r3
 800ad7e:	4610      	mov	r0, r2
 800ad80:	f7fe f8bb 	bl	8008efa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ad84:	bf00      	nop
 800ad86:	3720      	adds	r7, #32
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	bd80      	pop	{r7, pc}
 800ad8c:	200009fc 	.word	0x200009fc
 800ad90:	20000a00 	.word	0x20000a00
 800ad94:	20000b04 	.word	0x20000b04

0800ad98 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ad98:	b480      	push	{r7}
 800ad9a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ad9c:	4b07      	ldr	r3, [pc, #28]	; (800adbc <pvTaskIncrementMutexHeldCount+0x24>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d004      	beq.n	800adae <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ada4:	4b05      	ldr	r3, [pc, #20]	; (800adbc <pvTaskIncrementMutexHeldCount+0x24>)
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800adaa:	3201      	adds	r2, #1
 800adac:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800adae:	4b03      	ldr	r3, [pc, #12]	; (800adbc <pvTaskIncrementMutexHeldCount+0x24>)
 800adb0:	681b      	ldr	r3, [r3, #0]
	}
 800adb2:	4618      	mov	r0, r3
 800adb4:	46bd      	mov	sp, r7
 800adb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adba:	4770      	bx	lr
 800adbc:	200009fc 	.word	0x200009fc

0800adc0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b084      	sub	sp, #16
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
 800adc8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800adca:	4b29      	ldr	r3, [pc, #164]	; (800ae70 <prvAddCurrentTaskToDelayedList+0xb0>)
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800add0:	4b28      	ldr	r3, [pc, #160]	; (800ae74 <prvAddCurrentTaskToDelayedList+0xb4>)
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	3304      	adds	r3, #4
 800add6:	4618      	mov	r0, r3
 800add8:	f7fe f8ec 	bl	8008fb4 <uxListRemove>
 800addc:	4603      	mov	r3, r0
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d10b      	bne.n	800adfa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800ade2:	4b24      	ldr	r3, [pc, #144]	; (800ae74 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ade8:	2201      	movs	r2, #1
 800adea:	fa02 f303 	lsl.w	r3, r2, r3
 800adee:	43da      	mvns	r2, r3
 800adf0:	4b21      	ldr	r3, [pc, #132]	; (800ae78 <prvAddCurrentTaskToDelayedList+0xb8>)
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	4013      	ands	r3, r2
 800adf6:	4a20      	ldr	r2, [pc, #128]	; (800ae78 <prvAddCurrentTaskToDelayedList+0xb8>)
 800adf8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae00:	d10a      	bne.n	800ae18 <prvAddCurrentTaskToDelayedList+0x58>
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d007      	beq.n	800ae18 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ae08:	4b1a      	ldr	r3, [pc, #104]	; (800ae74 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	3304      	adds	r3, #4
 800ae0e:	4619      	mov	r1, r3
 800ae10:	481a      	ldr	r0, [pc, #104]	; (800ae7c <prvAddCurrentTaskToDelayedList+0xbc>)
 800ae12:	f7fe f872 	bl	8008efa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ae16:	e026      	b.n	800ae66 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ae18:	68fa      	ldr	r2, [r7, #12]
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	4413      	add	r3, r2
 800ae1e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ae20:	4b14      	ldr	r3, [pc, #80]	; (800ae74 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	68ba      	ldr	r2, [r7, #8]
 800ae26:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ae28:	68ba      	ldr	r2, [r7, #8]
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	429a      	cmp	r2, r3
 800ae2e:	d209      	bcs.n	800ae44 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ae30:	4b13      	ldr	r3, [pc, #76]	; (800ae80 <prvAddCurrentTaskToDelayedList+0xc0>)
 800ae32:	681a      	ldr	r2, [r3, #0]
 800ae34:	4b0f      	ldr	r3, [pc, #60]	; (800ae74 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	3304      	adds	r3, #4
 800ae3a:	4619      	mov	r1, r3
 800ae3c:	4610      	mov	r0, r2
 800ae3e:	f7fe f880 	bl	8008f42 <vListInsert>
}
 800ae42:	e010      	b.n	800ae66 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ae44:	4b0f      	ldr	r3, [pc, #60]	; (800ae84 <prvAddCurrentTaskToDelayedList+0xc4>)
 800ae46:	681a      	ldr	r2, [r3, #0]
 800ae48:	4b0a      	ldr	r3, [pc, #40]	; (800ae74 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	3304      	adds	r3, #4
 800ae4e:	4619      	mov	r1, r3
 800ae50:	4610      	mov	r0, r2
 800ae52:	f7fe f876 	bl	8008f42 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ae56:	4b0c      	ldr	r3, [pc, #48]	; (800ae88 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	68ba      	ldr	r2, [r7, #8]
 800ae5c:	429a      	cmp	r2, r3
 800ae5e:	d202      	bcs.n	800ae66 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800ae60:	4a09      	ldr	r2, [pc, #36]	; (800ae88 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ae62:	68bb      	ldr	r3, [r7, #8]
 800ae64:	6013      	str	r3, [r2, #0]
}
 800ae66:	bf00      	nop
 800ae68:	3710      	adds	r7, #16
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	bd80      	pop	{r7, pc}
 800ae6e:	bf00      	nop
 800ae70:	20000b00 	.word	0x20000b00
 800ae74:	200009fc 	.word	0x200009fc
 800ae78:	20000b04 	.word	0x20000b04
 800ae7c:	20000ae8 	.word	0x20000ae8
 800ae80:	20000ab8 	.word	0x20000ab8
 800ae84:	20000ab4 	.word	0x20000ab4
 800ae88:	20000b1c 	.word	0x20000b1c

0800ae8c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ae8c:	b480      	push	{r7}
 800ae8e:	b085      	sub	sp, #20
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	60f8      	str	r0, [r7, #12]
 800ae94:	60b9      	str	r1, [r7, #8]
 800ae96:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	3b04      	subs	r3, #4
 800ae9c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800aea4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	3b04      	subs	r3, #4
 800aeaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800aeac:	68bb      	ldr	r3, [r7, #8]
 800aeae:	f023 0201 	bic.w	r2, r3, #1
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	3b04      	subs	r3, #4
 800aeba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800aebc:	4a0c      	ldr	r2, [pc, #48]	; (800aef0 <pxPortInitialiseStack+0x64>)
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	3b14      	subs	r3, #20
 800aec6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800aec8:	687a      	ldr	r2, [r7, #4]
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	3b04      	subs	r3, #4
 800aed2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	f06f 0202 	mvn.w	r2, #2
 800aeda:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	3b20      	subs	r3, #32
 800aee0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800aee2:	68fb      	ldr	r3, [r7, #12]
}
 800aee4:	4618      	mov	r0, r3
 800aee6:	3714      	adds	r7, #20
 800aee8:	46bd      	mov	sp, r7
 800aeea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeee:	4770      	bx	lr
 800aef0:	0800aef5 	.word	0x0800aef5

0800aef4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800aef4:	b480      	push	{r7}
 800aef6:	b085      	sub	sp, #20
 800aef8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800aefa:	2300      	movs	r3, #0
 800aefc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800aefe:	4b12      	ldr	r3, [pc, #72]	; (800af48 <prvTaskExitError+0x54>)
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af06:	d00a      	beq.n	800af1e <prvTaskExitError+0x2a>
	__asm volatile
 800af08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af0c:	f383 8811 	msr	BASEPRI, r3
 800af10:	f3bf 8f6f 	isb	sy
 800af14:	f3bf 8f4f 	dsb	sy
 800af18:	60fb      	str	r3, [r7, #12]
}
 800af1a:	bf00      	nop
 800af1c:	e7fe      	b.n	800af1c <prvTaskExitError+0x28>
	__asm volatile
 800af1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af22:	f383 8811 	msr	BASEPRI, r3
 800af26:	f3bf 8f6f 	isb	sy
 800af2a:	f3bf 8f4f 	dsb	sy
 800af2e:	60bb      	str	r3, [r7, #8]
}
 800af30:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800af32:	bf00      	nop
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d0fc      	beq.n	800af34 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800af3a:	bf00      	nop
 800af3c:	bf00      	nop
 800af3e:	3714      	adds	r7, #20
 800af40:	46bd      	mov	sp, r7
 800af42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af46:	4770      	bx	lr
 800af48:	2000000c 	.word	0x2000000c
 800af4c:	00000000 	.word	0x00000000

0800af50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800af50:	4b07      	ldr	r3, [pc, #28]	; (800af70 <pxCurrentTCBConst2>)
 800af52:	6819      	ldr	r1, [r3, #0]
 800af54:	6808      	ldr	r0, [r1, #0]
 800af56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af5a:	f380 8809 	msr	PSP, r0
 800af5e:	f3bf 8f6f 	isb	sy
 800af62:	f04f 0000 	mov.w	r0, #0
 800af66:	f380 8811 	msr	BASEPRI, r0
 800af6a:	4770      	bx	lr
 800af6c:	f3af 8000 	nop.w

0800af70 <pxCurrentTCBConst2>:
 800af70:	200009fc 	.word	0x200009fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800af74:	bf00      	nop
 800af76:	bf00      	nop

0800af78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800af78:	4808      	ldr	r0, [pc, #32]	; (800af9c <prvPortStartFirstTask+0x24>)
 800af7a:	6800      	ldr	r0, [r0, #0]
 800af7c:	6800      	ldr	r0, [r0, #0]
 800af7e:	f380 8808 	msr	MSP, r0
 800af82:	f04f 0000 	mov.w	r0, #0
 800af86:	f380 8814 	msr	CONTROL, r0
 800af8a:	b662      	cpsie	i
 800af8c:	b661      	cpsie	f
 800af8e:	f3bf 8f4f 	dsb	sy
 800af92:	f3bf 8f6f 	isb	sy
 800af96:	df00      	svc	0
 800af98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800af9a:	bf00      	nop
 800af9c:	e000ed08 	.word	0xe000ed08

0800afa0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b086      	sub	sp, #24
 800afa4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800afa6:	4b46      	ldr	r3, [pc, #280]	; (800b0c0 <xPortStartScheduler+0x120>)
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	4a46      	ldr	r2, [pc, #280]	; (800b0c4 <xPortStartScheduler+0x124>)
 800afac:	4293      	cmp	r3, r2
 800afae:	d10a      	bne.n	800afc6 <xPortStartScheduler+0x26>
	__asm volatile
 800afb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afb4:	f383 8811 	msr	BASEPRI, r3
 800afb8:	f3bf 8f6f 	isb	sy
 800afbc:	f3bf 8f4f 	dsb	sy
 800afc0:	613b      	str	r3, [r7, #16]
}
 800afc2:	bf00      	nop
 800afc4:	e7fe      	b.n	800afc4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800afc6:	4b3e      	ldr	r3, [pc, #248]	; (800b0c0 <xPortStartScheduler+0x120>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	4a3f      	ldr	r2, [pc, #252]	; (800b0c8 <xPortStartScheduler+0x128>)
 800afcc:	4293      	cmp	r3, r2
 800afce:	d10a      	bne.n	800afe6 <xPortStartScheduler+0x46>
	__asm volatile
 800afd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afd4:	f383 8811 	msr	BASEPRI, r3
 800afd8:	f3bf 8f6f 	isb	sy
 800afdc:	f3bf 8f4f 	dsb	sy
 800afe0:	60fb      	str	r3, [r7, #12]
}
 800afe2:	bf00      	nop
 800afe4:	e7fe      	b.n	800afe4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800afe6:	4b39      	ldr	r3, [pc, #228]	; (800b0cc <xPortStartScheduler+0x12c>)
 800afe8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800afea:	697b      	ldr	r3, [r7, #20]
 800afec:	781b      	ldrb	r3, [r3, #0]
 800afee:	b2db      	uxtb	r3, r3
 800aff0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800aff2:	697b      	ldr	r3, [r7, #20]
 800aff4:	22ff      	movs	r2, #255	; 0xff
 800aff6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800aff8:	697b      	ldr	r3, [r7, #20]
 800affa:	781b      	ldrb	r3, [r3, #0]
 800affc:	b2db      	uxtb	r3, r3
 800affe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b000:	78fb      	ldrb	r3, [r7, #3]
 800b002:	b2db      	uxtb	r3, r3
 800b004:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b008:	b2da      	uxtb	r2, r3
 800b00a:	4b31      	ldr	r3, [pc, #196]	; (800b0d0 <xPortStartScheduler+0x130>)
 800b00c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b00e:	4b31      	ldr	r3, [pc, #196]	; (800b0d4 <xPortStartScheduler+0x134>)
 800b010:	2207      	movs	r2, #7
 800b012:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b014:	e009      	b.n	800b02a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b016:	4b2f      	ldr	r3, [pc, #188]	; (800b0d4 <xPortStartScheduler+0x134>)
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	3b01      	subs	r3, #1
 800b01c:	4a2d      	ldr	r2, [pc, #180]	; (800b0d4 <xPortStartScheduler+0x134>)
 800b01e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b020:	78fb      	ldrb	r3, [r7, #3]
 800b022:	b2db      	uxtb	r3, r3
 800b024:	005b      	lsls	r3, r3, #1
 800b026:	b2db      	uxtb	r3, r3
 800b028:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b02a:	78fb      	ldrb	r3, [r7, #3]
 800b02c:	b2db      	uxtb	r3, r3
 800b02e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b032:	2b80      	cmp	r3, #128	; 0x80
 800b034:	d0ef      	beq.n	800b016 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b036:	4b27      	ldr	r3, [pc, #156]	; (800b0d4 <xPortStartScheduler+0x134>)
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	f1c3 0307 	rsb	r3, r3, #7
 800b03e:	2b04      	cmp	r3, #4
 800b040:	d00a      	beq.n	800b058 <xPortStartScheduler+0xb8>
	__asm volatile
 800b042:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b046:	f383 8811 	msr	BASEPRI, r3
 800b04a:	f3bf 8f6f 	isb	sy
 800b04e:	f3bf 8f4f 	dsb	sy
 800b052:	60bb      	str	r3, [r7, #8]
}
 800b054:	bf00      	nop
 800b056:	e7fe      	b.n	800b056 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b058:	4b1e      	ldr	r3, [pc, #120]	; (800b0d4 <xPortStartScheduler+0x134>)
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	021b      	lsls	r3, r3, #8
 800b05e:	4a1d      	ldr	r2, [pc, #116]	; (800b0d4 <xPortStartScheduler+0x134>)
 800b060:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b062:	4b1c      	ldr	r3, [pc, #112]	; (800b0d4 <xPortStartScheduler+0x134>)
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b06a:	4a1a      	ldr	r2, [pc, #104]	; (800b0d4 <xPortStartScheduler+0x134>)
 800b06c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	b2da      	uxtb	r2, r3
 800b072:	697b      	ldr	r3, [r7, #20]
 800b074:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b076:	4b18      	ldr	r3, [pc, #96]	; (800b0d8 <xPortStartScheduler+0x138>)
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	4a17      	ldr	r2, [pc, #92]	; (800b0d8 <xPortStartScheduler+0x138>)
 800b07c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b080:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b082:	4b15      	ldr	r3, [pc, #84]	; (800b0d8 <xPortStartScheduler+0x138>)
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	4a14      	ldr	r2, [pc, #80]	; (800b0d8 <xPortStartScheduler+0x138>)
 800b088:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b08c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b08e:	f000 f8dd 	bl	800b24c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b092:	4b12      	ldr	r3, [pc, #72]	; (800b0dc <xPortStartScheduler+0x13c>)
 800b094:	2200      	movs	r2, #0
 800b096:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b098:	f000 f8fc 	bl	800b294 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b09c:	4b10      	ldr	r3, [pc, #64]	; (800b0e0 <xPortStartScheduler+0x140>)
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	4a0f      	ldr	r2, [pc, #60]	; (800b0e0 <xPortStartScheduler+0x140>)
 800b0a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b0a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b0a8:	f7ff ff66 	bl	800af78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b0ac:	f7ff fa86 	bl	800a5bc <vTaskSwitchContext>
	prvTaskExitError();
 800b0b0:	f7ff ff20 	bl	800aef4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b0b4:	2300      	movs	r3, #0
}
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	3718      	adds	r7, #24
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd80      	pop	{r7, pc}
 800b0be:	bf00      	nop
 800b0c0:	e000ed00 	.word	0xe000ed00
 800b0c4:	410fc271 	.word	0x410fc271
 800b0c8:	410fc270 	.word	0x410fc270
 800b0cc:	e000e400 	.word	0xe000e400
 800b0d0:	20000b28 	.word	0x20000b28
 800b0d4:	20000b2c 	.word	0x20000b2c
 800b0d8:	e000ed20 	.word	0xe000ed20
 800b0dc:	2000000c 	.word	0x2000000c
 800b0e0:	e000ef34 	.word	0xe000ef34

0800b0e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b0e4:	b480      	push	{r7}
 800b0e6:	b083      	sub	sp, #12
 800b0e8:	af00      	add	r7, sp, #0
	__asm volatile
 800b0ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0ee:	f383 8811 	msr	BASEPRI, r3
 800b0f2:	f3bf 8f6f 	isb	sy
 800b0f6:	f3bf 8f4f 	dsb	sy
 800b0fa:	607b      	str	r3, [r7, #4]
}
 800b0fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b0fe:	4b0f      	ldr	r3, [pc, #60]	; (800b13c <vPortEnterCritical+0x58>)
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	3301      	adds	r3, #1
 800b104:	4a0d      	ldr	r2, [pc, #52]	; (800b13c <vPortEnterCritical+0x58>)
 800b106:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b108:	4b0c      	ldr	r3, [pc, #48]	; (800b13c <vPortEnterCritical+0x58>)
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	2b01      	cmp	r3, #1
 800b10e:	d10f      	bne.n	800b130 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b110:	4b0b      	ldr	r3, [pc, #44]	; (800b140 <vPortEnterCritical+0x5c>)
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	b2db      	uxtb	r3, r3
 800b116:	2b00      	cmp	r3, #0
 800b118:	d00a      	beq.n	800b130 <vPortEnterCritical+0x4c>
	__asm volatile
 800b11a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b11e:	f383 8811 	msr	BASEPRI, r3
 800b122:	f3bf 8f6f 	isb	sy
 800b126:	f3bf 8f4f 	dsb	sy
 800b12a:	603b      	str	r3, [r7, #0]
}
 800b12c:	bf00      	nop
 800b12e:	e7fe      	b.n	800b12e <vPortEnterCritical+0x4a>
	}
}
 800b130:	bf00      	nop
 800b132:	370c      	adds	r7, #12
 800b134:	46bd      	mov	sp, r7
 800b136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13a:	4770      	bx	lr
 800b13c:	2000000c 	.word	0x2000000c
 800b140:	e000ed04 	.word	0xe000ed04

0800b144 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b144:	b480      	push	{r7}
 800b146:	b083      	sub	sp, #12
 800b148:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b14a:	4b12      	ldr	r3, [pc, #72]	; (800b194 <vPortExitCritical+0x50>)
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d10a      	bne.n	800b168 <vPortExitCritical+0x24>
	__asm volatile
 800b152:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b156:	f383 8811 	msr	BASEPRI, r3
 800b15a:	f3bf 8f6f 	isb	sy
 800b15e:	f3bf 8f4f 	dsb	sy
 800b162:	607b      	str	r3, [r7, #4]
}
 800b164:	bf00      	nop
 800b166:	e7fe      	b.n	800b166 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b168:	4b0a      	ldr	r3, [pc, #40]	; (800b194 <vPortExitCritical+0x50>)
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	3b01      	subs	r3, #1
 800b16e:	4a09      	ldr	r2, [pc, #36]	; (800b194 <vPortExitCritical+0x50>)
 800b170:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b172:	4b08      	ldr	r3, [pc, #32]	; (800b194 <vPortExitCritical+0x50>)
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d105      	bne.n	800b186 <vPortExitCritical+0x42>
 800b17a:	2300      	movs	r3, #0
 800b17c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	f383 8811 	msr	BASEPRI, r3
}
 800b184:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b186:	bf00      	nop
 800b188:	370c      	adds	r7, #12
 800b18a:	46bd      	mov	sp, r7
 800b18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b190:	4770      	bx	lr
 800b192:	bf00      	nop
 800b194:	2000000c 	.word	0x2000000c
	...

0800b1a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b1a0:	f3ef 8009 	mrs	r0, PSP
 800b1a4:	f3bf 8f6f 	isb	sy
 800b1a8:	4b15      	ldr	r3, [pc, #84]	; (800b200 <pxCurrentTCBConst>)
 800b1aa:	681a      	ldr	r2, [r3, #0]
 800b1ac:	f01e 0f10 	tst.w	lr, #16
 800b1b0:	bf08      	it	eq
 800b1b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b1b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1ba:	6010      	str	r0, [r2, #0]
 800b1bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b1c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b1c4:	f380 8811 	msr	BASEPRI, r0
 800b1c8:	f3bf 8f4f 	dsb	sy
 800b1cc:	f3bf 8f6f 	isb	sy
 800b1d0:	f7ff f9f4 	bl	800a5bc <vTaskSwitchContext>
 800b1d4:	f04f 0000 	mov.w	r0, #0
 800b1d8:	f380 8811 	msr	BASEPRI, r0
 800b1dc:	bc09      	pop	{r0, r3}
 800b1de:	6819      	ldr	r1, [r3, #0]
 800b1e0:	6808      	ldr	r0, [r1, #0]
 800b1e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1e6:	f01e 0f10 	tst.w	lr, #16
 800b1ea:	bf08      	it	eq
 800b1ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b1f0:	f380 8809 	msr	PSP, r0
 800b1f4:	f3bf 8f6f 	isb	sy
 800b1f8:	4770      	bx	lr
 800b1fa:	bf00      	nop
 800b1fc:	f3af 8000 	nop.w

0800b200 <pxCurrentTCBConst>:
 800b200:	200009fc 	.word	0x200009fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b204:	bf00      	nop
 800b206:	bf00      	nop

0800b208 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b082      	sub	sp, #8
 800b20c:	af00      	add	r7, sp, #0
	__asm volatile
 800b20e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b212:	f383 8811 	msr	BASEPRI, r3
 800b216:	f3bf 8f6f 	isb	sy
 800b21a:	f3bf 8f4f 	dsb	sy
 800b21e:	607b      	str	r3, [r7, #4]
}
 800b220:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b222:	f7ff f913 	bl	800a44c <xTaskIncrementTick>
 800b226:	4603      	mov	r3, r0
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d003      	beq.n	800b234 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b22c:	4b06      	ldr	r3, [pc, #24]	; (800b248 <xPortSysTickHandler+0x40>)
 800b22e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b232:	601a      	str	r2, [r3, #0]
 800b234:	2300      	movs	r3, #0
 800b236:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	f383 8811 	msr	BASEPRI, r3
}
 800b23e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b240:	bf00      	nop
 800b242:	3708      	adds	r7, #8
 800b244:	46bd      	mov	sp, r7
 800b246:	bd80      	pop	{r7, pc}
 800b248:	e000ed04 	.word	0xe000ed04

0800b24c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b24c:	b480      	push	{r7}
 800b24e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b250:	4b0b      	ldr	r3, [pc, #44]	; (800b280 <vPortSetupTimerInterrupt+0x34>)
 800b252:	2200      	movs	r2, #0
 800b254:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b256:	4b0b      	ldr	r3, [pc, #44]	; (800b284 <vPortSetupTimerInterrupt+0x38>)
 800b258:	2200      	movs	r2, #0
 800b25a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b25c:	4b0a      	ldr	r3, [pc, #40]	; (800b288 <vPortSetupTimerInterrupt+0x3c>)
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	4a0a      	ldr	r2, [pc, #40]	; (800b28c <vPortSetupTimerInterrupt+0x40>)
 800b262:	fba2 2303 	umull	r2, r3, r2, r3
 800b266:	099b      	lsrs	r3, r3, #6
 800b268:	4a09      	ldr	r2, [pc, #36]	; (800b290 <vPortSetupTimerInterrupt+0x44>)
 800b26a:	3b01      	subs	r3, #1
 800b26c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b26e:	4b04      	ldr	r3, [pc, #16]	; (800b280 <vPortSetupTimerInterrupt+0x34>)
 800b270:	2207      	movs	r2, #7
 800b272:	601a      	str	r2, [r3, #0]
}
 800b274:	bf00      	nop
 800b276:	46bd      	mov	sp, r7
 800b278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27c:	4770      	bx	lr
 800b27e:	bf00      	nop
 800b280:	e000e010 	.word	0xe000e010
 800b284:	e000e018 	.word	0xe000e018
 800b288:	20000000 	.word	0x20000000
 800b28c:	10624dd3 	.word	0x10624dd3
 800b290:	e000e014 	.word	0xe000e014

0800b294 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b294:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b2a4 <vPortEnableVFP+0x10>
 800b298:	6801      	ldr	r1, [r0, #0]
 800b29a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b29e:	6001      	str	r1, [r0, #0]
 800b2a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b2a2:	bf00      	nop
 800b2a4:	e000ed88 	.word	0xe000ed88

0800b2a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b2a8:	b480      	push	{r7}
 800b2aa:	b085      	sub	sp, #20
 800b2ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b2ae:	f3ef 8305 	mrs	r3, IPSR
 800b2b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	2b0f      	cmp	r3, #15
 800b2b8:	d914      	bls.n	800b2e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b2ba:	4a17      	ldr	r2, [pc, #92]	; (800b318 <vPortValidateInterruptPriority+0x70>)
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	4413      	add	r3, r2
 800b2c0:	781b      	ldrb	r3, [r3, #0]
 800b2c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b2c4:	4b15      	ldr	r3, [pc, #84]	; (800b31c <vPortValidateInterruptPriority+0x74>)
 800b2c6:	781b      	ldrb	r3, [r3, #0]
 800b2c8:	7afa      	ldrb	r2, [r7, #11]
 800b2ca:	429a      	cmp	r2, r3
 800b2cc:	d20a      	bcs.n	800b2e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b2ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2d2:	f383 8811 	msr	BASEPRI, r3
 800b2d6:	f3bf 8f6f 	isb	sy
 800b2da:	f3bf 8f4f 	dsb	sy
 800b2de:	607b      	str	r3, [r7, #4]
}
 800b2e0:	bf00      	nop
 800b2e2:	e7fe      	b.n	800b2e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b2e4:	4b0e      	ldr	r3, [pc, #56]	; (800b320 <vPortValidateInterruptPriority+0x78>)
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b2ec:	4b0d      	ldr	r3, [pc, #52]	; (800b324 <vPortValidateInterruptPriority+0x7c>)
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	429a      	cmp	r2, r3
 800b2f2:	d90a      	bls.n	800b30a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b2f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2f8:	f383 8811 	msr	BASEPRI, r3
 800b2fc:	f3bf 8f6f 	isb	sy
 800b300:	f3bf 8f4f 	dsb	sy
 800b304:	603b      	str	r3, [r7, #0]
}
 800b306:	bf00      	nop
 800b308:	e7fe      	b.n	800b308 <vPortValidateInterruptPriority+0x60>
	}
 800b30a:	bf00      	nop
 800b30c:	3714      	adds	r7, #20
 800b30e:	46bd      	mov	sp, r7
 800b310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b314:	4770      	bx	lr
 800b316:	bf00      	nop
 800b318:	e000e3f0 	.word	0xe000e3f0
 800b31c:	20000b28 	.word	0x20000b28
 800b320:	e000ed0c 	.word	0xe000ed0c
 800b324:	20000b2c 	.word	0x20000b2c

0800b328 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b08a      	sub	sp, #40	; 0x28
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b330:	2300      	movs	r3, #0
 800b332:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b334:	f7fe ffbe 	bl	800a2b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b338:	4b5b      	ldr	r3, [pc, #364]	; (800b4a8 <pvPortMalloc+0x180>)
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d101      	bne.n	800b344 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b340:	f000 f920 	bl	800b584 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b344:	4b59      	ldr	r3, [pc, #356]	; (800b4ac <pvPortMalloc+0x184>)
 800b346:	681a      	ldr	r2, [r3, #0]
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	4013      	ands	r3, r2
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	f040 8093 	bne.w	800b478 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d01d      	beq.n	800b394 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b358:	2208      	movs	r2, #8
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	4413      	add	r3, r2
 800b35e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	f003 0307 	and.w	r3, r3, #7
 800b366:	2b00      	cmp	r3, #0
 800b368:	d014      	beq.n	800b394 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	f023 0307 	bic.w	r3, r3, #7
 800b370:	3308      	adds	r3, #8
 800b372:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	f003 0307 	and.w	r3, r3, #7
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d00a      	beq.n	800b394 <pvPortMalloc+0x6c>
	__asm volatile
 800b37e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b382:	f383 8811 	msr	BASEPRI, r3
 800b386:	f3bf 8f6f 	isb	sy
 800b38a:	f3bf 8f4f 	dsb	sy
 800b38e:	617b      	str	r3, [r7, #20]
}
 800b390:	bf00      	nop
 800b392:	e7fe      	b.n	800b392 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d06e      	beq.n	800b478 <pvPortMalloc+0x150>
 800b39a:	4b45      	ldr	r3, [pc, #276]	; (800b4b0 <pvPortMalloc+0x188>)
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	687a      	ldr	r2, [r7, #4]
 800b3a0:	429a      	cmp	r2, r3
 800b3a2:	d869      	bhi.n	800b478 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b3a4:	4b43      	ldr	r3, [pc, #268]	; (800b4b4 <pvPortMalloc+0x18c>)
 800b3a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b3a8:	4b42      	ldr	r3, [pc, #264]	; (800b4b4 <pvPortMalloc+0x18c>)
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b3ae:	e004      	b.n	800b3ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b3b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b3ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3bc:	685b      	ldr	r3, [r3, #4]
 800b3be:	687a      	ldr	r2, [r7, #4]
 800b3c0:	429a      	cmp	r2, r3
 800b3c2:	d903      	bls.n	800b3cc <pvPortMalloc+0xa4>
 800b3c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d1f1      	bne.n	800b3b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b3cc:	4b36      	ldr	r3, [pc, #216]	; (800b4a8 <pvPortMalloc+0x180>)
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3d2:	429a      	cmp	r2, r3
 800b3d4:	d050      	beq.n	800b478 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b3d6:	6a3b      	ldr	r3, [r7, #32]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	2208      	movs	r2, #8
 800b3dc:	4413      	add	r3, r2
 800b3de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3e2:	681a      	ldr	r2, [r3, #0]
 800b3e4:	6a3b      	ldr	r3, [r7, #32]
 800b3e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b3e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ea:	685a      	ldr	r2, [r3, #4]
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	1ad2      	subs	r2, r2, r3
 800b3f0:	2308      	movs	r3, #8
 800b3f2:	005b      	lsls	r3, r3, #1
 800b3f4:	429a      	cmp	r2, r3
 800b3f6:	d91f      	bls.n	800b438 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b3f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	4413      	add	r3, r2
 800b3fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b400:	69bb      	ldr	r3, [r7, #24]
 800b402:	f003 0307 	and.w	r3, r3, #7
 800b406:	2b00      	cmp	r3, #0
 800b408:	d00a      	beq.n	800b420 <pvPortMalloc+0xf8>
	__asm volatile
 800b40a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b40e:	f383 8811 	msr	BASEPRI, r3
 800b412:	f3bf 8f6f 	isb	sy
 800b416:	f3bf 8f4f 	dsb	sy
 800b41a:	613b      	str	r3, [r7, #16]
}
 800b41c:	bf00      	nop
 800b41e:	e7fe      	b.n	800b41e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b422:	685a      	ldr	r2, [r3, #4]
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	1ad2      	subs	r2, r2, r3
 800b428:	69bb      	ldr	r3, [r7, #24]
 800b42a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b42c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b42e:	687a      	ldr	r2, [r7, #4]
 800b430:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b432:	69b8      	ldr	r0, [r7, #24]
 800b434:	f000 f90a 	bl	800b64c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b438:	4b1d      	ldr	r3, [pc, #116]	; (800b4b0 <pvPortMalloc+0x188>)
 800b43a:	681a      	ldr	r2, [r3, #0]
 800b43c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b43e:	685b      	ldr	r3, [r3, #4]
 800b440:	1ad3      	subs	r3, r2, r3
 800b442:	4a1b      	ldr	r2, [pc, #108]	; (800b4b0 <pvPortMalloc+0x188>)
 800b444:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b446:	4b1a      	ldr	r3, [pc, #104]	; (800b4b0 <pvPortMalloc+0x188>)
 800b448:	681a      	ldr	r2, [r3, #0]
 800b44a:	4b1b      	ldr	r3, [pc, #108]	; (800b4b8 <pvPortMalloc+0x190>)
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	429a      	cmp	r2, r3
 800b450:	d203      	bcs.n	800b45a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b452:	4b17      	ldr	r3, [pc, #92]	; (800b4b0 <pvPortMalloc+0x188>)
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	4a18      	ldr	r2, [pc, #96]	; (800b4b8 <pvPortMalloc+0x190>)
 800b458:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b45a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b45c:	685a      	ldr	r2, [r3, #4]
 800b45e:	4b13      	ldr	r3, [pc, #76]	; (800b4ac <pvPortMalloc+0x184>)
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	431a      	orrs	r2, r3
 800b464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b466:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b46a:	2200      	movs	r2, #0
 800b46c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b46e:	4b13      	ldr	r3, [pc, #76]	; (800b4bc <pvPortMalloc+0x194>)
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	3301      	adds	r3, #1
 800b474:	4a11      	ldr	r2, [pc, #68]	; (800b4bc <pvPortMalloc+0x194>)
 800b476:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b478:	f7fe ff2a 	bl	800a2d0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b47c:	69fb      	ldr	r3, [r7, #28]
 800b47e:	f003 0307 	and.w	r3, r3, #7
 800b482:	2b00      	cmp	r3, #0
 800b484:	d00a      	beq.n	800b49c <pvPortMalloc+0x174>
	__asm volatile
 800b486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b48a:	f383 8811 	msr	BASEPRI, r3
 800b48e:	f3bf 8f6f 	isb	sy
 800b492:	f3bf 8f4f 	dsb	sy
 800b496:	60fb      	str	r3, [r7, #12]
}
 800b498:	bf00      	nop
 800b49a:	e7fe      	b.n	800b49a <pvPortMalloc+0x172>
	return pvReturn;
 800b49c:	69fb      	ldr	r3, [r7, #28]
}
 800b49e:	4618      	mov	r0, r3
 800b4a0:	3728      	adds	r7, #40	; 0x28
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	bd80      	pop	{r7, pc}
 800b4a6:	bf00      	nop
 800b4a8:	200191d8 	.word	0x200191d8
 800b4ac:	200191ec 	.word	0x200191ec
 800b4b0:	200191dc 	.word	0x200191dc
 800b4b4:	200191d0 	.word	0x200191d0
 800b4b8:	200191e0 	.word	0x200191e0
 800b4bc:	200191e4 	.word	0x200191e4

0800b4c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b086      	sub	sp, #24
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d04d      	beq.n	800b56e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b4d2:	2308      	movs	r3, #8
 800b4d4:	425b      	negs	r3, r3
 800b4d6:	697a      	ldr	r2, [r7, #20]
 800b4d8:	4413      	add	r3, r2
 800b4da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b4dc:	697b      	ldr	r3, [r7, #20]
 800b4de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b4e0:	693b      	ldr	r3, [r7, #16]
 800b4e2:	685a      	ldr	r2, [r3, #4]
 800b4e4:	4b24      	ldr	r3, [pc, #144]	; (800b578 <vPortFree+0xb8>)
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	4013      	ands	r3, r2
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d10a      	bne.n	800b504 <vPortFree+0x44>
	__asm volatile
 800b4ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4f2:	f383 8811 	msr	BASEPRI, r3
 800b4f6:	f3bf 8f6f 	isb	sy
 800b4fa:	f3bf 8f4f 	dsb	sy
 800b4fe:	60fb      	str	r3, [r7, #12]
}
 800b500:	bf00      	nop
 800b502:	e7fe      	b.n	800b502 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b504:	693b      	ldr	r3, [r7, #16]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d00a      	beq.n	800b522 <vPortFree+0x62>
	__asm volatile
 800b50c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b510:	f383 8811 	msr	BASEPRI, r3
 800b514:	f3bf 8f6f 	isb	sy
 800b518:	f3bf 8f4f 	dsb	sy
 800b51c:	60bb      	str	r3, [r7, #8]
}
 800b51e:	bf00      	nop
 800b520:	e7fe      	b.n	800b520 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b522:	693b      	ldr	r3, [r7, #16]
 800b524:	685a      	ldr	r2, [r3, #4]
 800b526:	4b14      	ldr	r3, [pc, #80]	; (800b578 <vPortFree+0xb8>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	4013      	ands	r3, r2
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d01e      	beq.n	800b56e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b530:	693b      	ldr	r3, [r7, #16]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d11a      	bne.n	800b56e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b538:	693b      	ldr	r3, [r7, #16]
 800b53a:	685a      	ldr	r2, [r3, #4]
 800b53c:	4b0e      	ldr	r3, [pc, #56]	; (800b578 <vPortFree+0xb8>)
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	43db      	mvns	r3, r3
 800b542:	401a      	ands	r2, r3
 800b544:	693b      	ldr	r3, [r7, #16]
 800b546:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b548:	f7fe feb4 	bl	800a2b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b54c:	693b      	ldr	r3, [r7, #16]
 800b54e:	685a      	ldr	r2, [r3, #4]
 800b550:	4b0a      	ldr	r3, [pc, #40]	; (800b57c <vPortFree+0xbc>)
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	4413      	add	r3, r2
 800b556:	4a09      	ldr	r2, [pc, #36]	; (800b57c <vPortFree+0xbc>)
 800b558:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b55a:	6938      	ldr	r0, [r7, #16]
 800b55c:	f000 f876 	bl	800b64c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b560:	4b07      	ldr	r3, [pc, #28]	; (800b580 <vPortFree+0xc0>)
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	3301      	adds	r3, #1
 800b566:	4a06      	ldr	r2, [pc, #24]	; (800b580 <vPortFree+0xc0>)
 800b568:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b56a:	f7fe feb1 	bl	800a2d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b56e:	bf00      	nop
 800b570:	3718      	adds	r7, #24
 800b572:	46bd      	mov	sp, r7
 800b574:	bd80      	pop	{r7, pc}
 800b576:	bf00      	nop
 800b578:	200191ec 	.word	0x200191ec
 800b57c:	200191dc 	.word	0x200191dc
 800b580:	200191e8 	.word	0x200191e8

0800b584 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b584:	b480      	push	{r7}
 800b586:	b085      	sub	sp, #20
 800b588:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b58a:	4b29      	ldr	r3, [pc, #164]	; (800b630 <prvHeapInit+0xac>)
 800b58c:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b58e:	4b29      	ldr	r3, [pc, #164]	; (800b634 <prvHeapInit+0xb0>)
 800b590:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	f003 0307 	and.w	r3, r3, #7
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d00c      	beq.n	800b5b6 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	3307      	adds	r3, #7
 800b5a0:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	f023 0307 	bic.w	r3, r3, #7
 800b5a8:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b5aa:	68ba      	ldr	r2, [r7, #8]
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	1ad3      	subs	r3, r2, r3
 800b5b0:	4a20      	ldr	r2, [pc, #128]	; (800b634 <prvHeapInit+0xb0>)
 800b5b2:	4413      	add	r3, r2
 800b5b4:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b5ba:	4a1f      	ldr	r2, [pc, #124]	; (800b638 <prvHeapInit+0xb4>)
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b5c0:	4b1d      	ldr	r3, [pc, #116]	; (800b638 <prvHeapInit+0xb4>)
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	68ba      	ldr	r2, [r7, #8]
 800b5ca:	4413      	add	r3, r2
 800b5cc:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b5ce:	2208      	movs	r2, #8
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	1a9b      	subs	r3, r3, r2
 800b5d4:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	f023 0307 	bic.w	r3, r3, #7
 800b5dc:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	4a16      	ldr	r2, [pc, #88]	; (800b63c <prvHeapInit+0xb8>)
 800b5e2:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b5e4:	4b15      	ldr	r3, [pc, #84]	; (800b63c <prvHeapInit+0xb8>)
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b5ec:	4b13      	ldr	r3, [pc, #76]	; (800b63c <prvHeapInit+0xb8>)
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b5f8:	683b      	ldr	r3, [r7, #0]
 800b5fa:	68fa      	ldr	r2, [r7, #12]
 800b5fc:	1ad2      	subs	r2, r2, r3
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b602:	4b0e      	ldr	r3, [pc, #56]	; (800b63c <prvHeapInit+0xb8>)
 800b604:	681a      	ldr	r2, [r3, #0]
 800b606:	683b      	ldr	r3, [r7, #0]
 800b608:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	685b      	ldr	r3, [r3, #4]
 800b60e:	4a0c      	ldr	r2, [pc, #48]	; (800b640 <prvHeapInit+0xbc>)
 800b610:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	685b      	ldr	r3, [r3, #4]
 800b616:	4a0b      	ldr	r2, [pc, #44]	; (800b644 <prvHeapInit+0xc0>)
 800b618:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b61a:	4b0b      	ldr	r3, [pc, #44]	; (800b648 <prvHeapInit+0xc4>)
 800b61c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b620:	601a      	str	r2, [r3, #0]
}
 800b622:	bf00      	nop
 800b624:	3714      	adds	r7, #20
 800b626:	46bd      	mov	sp, r7
 800b628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62c:	4770      	bx	lr
 800b62e:	bf00      	nop
 800b630:	000186a0 	.word	0x000186a0
 800b634:	20000b30 	.word	0x20000b30
 800b638:	200191d0 	.word	0x200191d0
 800b63c:	200191d8 	.word	0x200191d8
 800b640:	200191e0 	.word	0x200191e0
 800b644:	200191dc 	.word	0x200191dc
 800b648:	200191ec 	.word	0x200191ec

0800b64c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b64c:	b480      	push	{r7}
 800b64e:	b085      	sub	sp, #20
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b654:	4b28      	ldr	r3, [pc, #160]	; (800b6f8 <prvInsertBlockIntoFreeList+0xac>)
 800b656:	60fb      	str	r3, [r7, #12]
 800b658:	e002      	b.n	800b660 <prvInsertBlockIntoFreeList+0x14>
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	60fb      	str	r3, [r7, #12]
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	687a      	ldr	r2, [r7, #4]
 800b666:	429a      	cmp	r2, r3
 800b668:	d8f7      	bhi.n	800b65a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	685b      	ldr	r3, [r3, #4]
 800b672:	68ba      	ldr	r2, [r7, #8]
 800b674:	4413      	add	r3, r2
 800b676:	687a      	ldr	r2, [r7, #4]
 800b678:	429a      	cmp	r2, r3
 800b67a:	d108      	bne.n	800b68e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	685a      	ldr	r2, [r3, #4]
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	685b      	ldr	r3, [r3, #4]
 800b684:	441a      	add	r2, r3
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	685b      	ldr	r3, [r3, #4]
 800b696:	68ba      	ldr	r2, [r7, #8]
 800b698:	441a      	add	r2, r3
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	429a      	cmp	r2, r3
 800b6a0:	d118      	bne.n	800b6d4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	681a      	ldr	r2, [r3, #0]
 800b6a6:	4b15      	ldr	r3, [pc, #84]	; (800b6fc <prvInsertBlockIntoFreeList+0xb0>)
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	429a      	cmp	r2, r3
 800b6ac:	d00d      	beq.n	800b6ca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	685a      	ldr	r2, [r3, #4]
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	685b      	ldr	r3, [r3, #4]
 800b6b8:	441a      	add	r2, r3
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	681a      	ldr	r2, [r3, #0]
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	601a      	str	r2, [r3, #0]
 800b6c8:	e008      	b.n	800b6dc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b6ca:	4b0c      	ldr	r3, [pc, #48]	; (800b6fc <prvInsertBlockIntoFreeList+0xb0>)
 800b6cc:	681a      	ldr	r2, [r3, #0]
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	601a      	str	r2, [r3, #0]
 800b6d2:	e003      	b.n	800b6dc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	681a      	ldr	r2, [r3, #0]
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b6dc:	68fa      	ldr	r2, [r7, #12]
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	429a      	cmp	r2, r3
 800b6e2:	d002      	beq.n	800b6ea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	687a      	ldr	r2, [r7, #4]
 800b6e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b6ea:	bf00      	nop
 800b6ec:	3714      	adds	r7, #20
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f4:	4770      	bx	lr
 800b6f6:	bf00      	nop
 800b6f8:	200191d0 	.word	0x200191d0
 800b6fc:	200191d8 	.word	0x200191d8

0800b700 <sbrk_aligned>:
 800b700:	b570      	push	{r4, r5, r6, lr}
 800b702:	4e0e      	ldr	r6, [pc, #56]	; (800b73c <sbrk_aligned+0x3c>)
 800b704:	460c      	mov	r4, r1
 800b706:	6831      	ldr	r1, [r6, #0]
 800b708:	4605      	mov	r5, r0
 800b70a:	b911      	cbnz	r1, 800b712 <sbrk_aligned+0x12>
 800b70c:	f000 f922 	bl	800b954 <_sbrk_r>
 800b710:	6030      	str	r0, [r6, #0]
 800b712:	4621      	mov	r1, r4
 800b714:	4628      	mov	r0, r5
 800b716:	f000 f91d 	bl	800b954 <_sbrk_r>
 800b71a:	1c43      	adds	r3, r0, #1
 800b71c:	d00a      	beq.n	800b734 <sbrk_aligned+0x34>
 800b71e:	1cc4      	adds	r4, r0, #3
 800b720:	f024 0403 	bic.w	r4, r4, #3
 800b724:	42a0      	cmp	r0, r4
 800b726:	d007      	beq.n	800b738 <sbrk_aligned+0x38>
 800b728:	1a21      	subs	r1, r4, r0
 800b72a:	4628      	mov	r0, r5
 800b72c:	f000 f912 	bl	800b954 <_sbrk_r>
 800b730:	3001      	adds	r0, #1
 800b732:	d101      	bne.n	800b738 <sbrk_aligned+0x38>
 800b734:	f04f 34ff 	mov.w	r4, #4294967295
 800b738:	4620      	mov	r0, r4
 800b73a:	bd70      	pop	{r4, r5, r6, pc}
 800b73c:	200191f4 	.word	0x200191f4

0800b740 <_malloc_r>:
 800b740:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b744:	1ccd      	adds	r5, r1, #3
 800b746:	f025 0503 	bic.w	r5, r5, #3
 800b74a:	3508      	adds	r5, #8
 800b74c:	2d0c      	cmp	r5, #12
 800b74e:	bf38      	it	cc
 800b750:	250c      	movcc	r5, #12
 800b752:	2d00      	cmp	r5, #0
 800b754:	4607      	mov	r7, r0
 800b756:	db01      	blt.n	800b75c <_malloc_r+0x1c>
 800b758:	42a9      	cmp	r1, r5
 800b75a:	d905      	bls.n	800b768 <_malloc_r+0x28>
 800b75c:	230c      	movs	r3, #12
 800b75e:	603b      	str	r3, [r7, #0]
 800b760:	2600      	movs	r6, #0
 800b762:	4630      	mov	r0, r6
 800b764:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b768:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b83c <_malloc_r+0xfc>
 800b76c:	f000 f868 	bl	800b840 <__malloc_lock>
 800b770:	f8d8 3000 	ldr.w	r3, [r8]
 800b774:	461c      	mov	r4, r3
 800b776:	bb5c      	cbnz	r4, 800b7d0 <_malloc_r+0x90>
 800b778:	4629      	mov	r1, r5
 800b77a:	4638      	mov	r0, r7
 800b77c:	f7ff ffc0 	bl	800b700 <sbrk_aligned>
 800b780:	1c43      	adds	r3, r0, #1
 800b782:	4604      	mov	r4, r0
 800b784:	d155      	bne.n	800b832 <_malloc_r+0xf2>
 800b786:	f8d8 4000 	ldr.w	r4, [r8]
 800b78a:	4626      	mov	r6, r4
 800b78c:	2e00      	cmp	r6, #0
 800b78e:	d145      	bne.n	800b81c <_malloc_r+0xdc>
 800b790:	2c00      	cmp	r4, #0
 800b792:	d048      	beq.n	800b826 <_malloc_r+0xe6>
 800b794:	6823      	ldr	r3, [r4, #0]
 800b796:	4631      	mov	r1, r6
 800b798:	4638      	mov	r0, r7
 800b79a:	eb04 0903 	add.w	r9, r4, r3
 800b79e:	f000 f8d9 	bl	800b954 <_sbrk_r>
 800b7a2:	4581      	cmp	r9, r0
 800b7a4:	d13f      	bne.n	800b826 <_malloc_r+0xe6>
 800b7a6:	6821      	ldr	r1, [r4, #0]
 800b7a8:	1a6d      	subs	r5, r5, r1
 800b7aa:	4629      	mov	r1, r5
 800b7ac:	4638      	mov	r0, r7
 800b7ae:	f7ff ffa7 	bl	800b700 <sbrk_aligned>
 800b7b2:	3001      	adds	r0, #1
 800b7b4:	d037      	beq.n	800b826 <_malloc_r+0xe6>
 800b7b6:	6823      	ldr	r3, [r4, #0]
 800b7b8:	442b      	add	r3, r5
 800b7ba:	6023      	str	r3, [r4, #0]
 800b7bc:	f8d8 3000 	ldr.w	r3, [r8]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d038      	beq.n	800b836 <_malloc_r+0xf6>
 800b7c4:	685a      	ldr	r2, [r3, #4]
 800b7c6:	42a2      	cmp	r2, r4
 800b7c8:	d12b      	bne.n	800b822 <_malloc_r+0xe2>
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	605a      	str	r2, [r3, #4]
 800b7ce:	e00f      	b.n	800b7f0 <_malloc_r+0xb0>
 800b7d0:	6822      	ldr	r2, [r4, #0]
 800b7d2:	1b52      	subs	r2, r2, r5
 800b7d4:	d41f      	bmi.n	800b816 <_malloc_r+0xd6>
 800b7d6:	2a0b      	cmp	r2, #11
 800b7d8:	d917      	bls.n	800b80a <_malloc_r+0xca>
 800b7da:	1961      	adds	r1, r4, r5
 800b7dc:	42a3      	cmp	r3, r4
 800b7de:	6025      	str	r5, [r4, #0]
 800b7e0:	bf18      	it	ne
 800b7e2:	6059      	strne	r1, [r3, #4]
 800b7e4:	6863      	ldr	r3, [r4, #4]
 800b7e6:	bf08      	it	eq
 800b7e8:	f8c8 1000 	streq.w	r1, [r8]
 800b7ec:	5162      	str	r2, [r4, r5]
 800b7ee:	604b      	str	r3, [r1, #4]
 800b7f0:	4638      	mov	r0, r7
 800b7f2:	f104 060b 	add.w	r6, r4, #11
 800b7f6:	f000 f829 	bl	800b84c <__malloc_unlock>
 800b7fa:	f026 0607 	bic.w	r6, r6, #7
 800b7fe:	1d23      	adds	r3, r4, #4
 800b800:	1af2      	subs	r2, r6, r3
 800b802:	d0ae      	beq.n	800b762 <_malloc_r+0x22>
 800b804:	1b9b      	subs	r3, r3, r6
 800b806:	50a3      	str	r3, [r4, r2]
 800b808:	e7ab      	b.n	800b762 <_malloc_r+0x22>
 800b80a:	42a3      	cmp	r3, r4
 800b80c:	6862      	ldr	r2, [r4, #4]
 800b80e:	d1dd      	bne.n	800b7cc <_malloc_r+0x8c>
 800b810:	f8c8 2000 	str.w	r2, [r8]
 800b814:	e7ec      	b.n	800b7f0 <_malloc_r+0xb0>
 800b816:	4623      	mov	r3, r4
 800b818:	6864      	ldr	r4, [r4, #4]
 800b81a:	e7ac      	b.n	800b776 <_malloc_r+0x36>
 800b81c:	4634      	mov	r4, r6
 800b81e:	6876      	ldr	r6, [r6, #4]
 800b820:	e7b4      	b.n	800b78c <_malloc_r+0x4c>
 800b822:	4613      	mov	r3, r2
 800b824:	e7cc      	b.n	800b7c0 <_malloc_r+0x80>
 800b826:	230c      	movs	r3, #12
 800b828:	603b      	str	r3, [r7, #0]
 800b82a:	4638      	mov	r0, r7
 800b82c:	f000 f80e 	bl	800b84c <__malloc_unlock>
 800b830:	e797      	b.n	800b762 <_malloc_r+0x22>
 800b832:	6025      	str	r5, [r4, #0]
 800b834:	e7dc      	b.n	800b7f0 <_malloc_r+0xb0>
 800b836:	605b      	str	r3, [r3, #4]
 800b838:	deff      	udf	#255	; 0xff
 800b83a:	bf00      	nop
 800b83c:	200191f0 	.word	0x200191f0

0800b840 <__malloc_lock>:
 800b840:	4801      	ldr	r0, [pc, #4]	; (800b848 <__malloc_lock+0x8>)
 800b842:	f000 b8c1 	b.w	800b9c8 <__retarget_lock_acquire_recursive>
 800b846:	bf00      	nop
 800b848:	20019334 	.word	0x20019334

0800b84c <__malloc_unlock>:
 800b84c:	4801      	ldr	r0, [pc, #4]	; (800b854 <__malloc_unlock+0x8>)
 800b84e:	f000 b8bc 	b.w	800b9ca <__retarget_lock_release_recursive>
 800b852:	bf00      	nop
 800b854:	20019334 	.word	0x20019334

0800b858 <siprintf>:
 800b858:	b40e      	push	{r1, r2, r3}
 800b85a:	b500      	push	{lr}
 800b85c:	b09c      	sub	sp, #112	; 0x70
 800b85e:	ab1d      	add	r3, sp, #116	; 0x74
 800b860:	9002      	str	r0, [sp, #8]
 800b862:	9006      	str	r0, [sp, #24]
 800b864:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b868:	4809      	ldr	r0, [pc, #36]	; (800b890 <siprintf+0x38>)
 800b86a:	9107      	str	r1, [sp, #28]
 800b86c:	9104      	str	r1, [sp, #16]
 800b86e:	4909      	ldr	r1, [pc, #36]	; (800b894 <siprintf+0x3c>)
 800b870:	f853 2b04 	ldr.w	r2, [r3], #4
 800b874:	9105      	str	r1, [sp, #20]
 800b876:	6800      	ldr	r0, [r0, #0]
 800b878:	9301      	str	r3, [sp, #4]
 800b87a:	a902      	add	r1, sp, #8
 800b87c:	f000 f95a 	bl	800bb34 <_svfiprintf_r>
 800b880:	9b02      	ldr	r3, [sp, #8]
 800b882:	2200      	movs	r2, #0
 800b884:	701a      	strb	r2, [r3, #0]
 800b886:	b01c      	add	sp, #112	; 0x70
 800b888:	f85d eb04 	ldr.w	lr, [sp], #4
 800b88c:	b003      	add	sp, #12
 800b88e:	4770      	bx	lr
 800b890:	2000005c 	.word	0x2000005c
 800b894:	ffff0208 	.word	0xffff0208

0800b898 <memset>:
 800b898:	4402      	add	r2, r0
 800b89a:	4603      	mov	r3, r0
 800b89c:	4293      	cmp	r3, r2
 800b89e:	d100      	bne.n	800b8a2 <memset+0xa>
 800b8a0:	4770      	bx	lr
 800b8a2:	f803 1b01 	strb.w	r1, [r3], #1
 800b8a6:	e7f9      	b.n	800b89c <memset+0x4>

0800b8a8 <_reclaim_reent>:
 800b8a8:	4b29      	ldr	r3, [pc, #164]	; (800b950 <_reclaim_reent+0xa8>)
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	4283      	cmp	r3, r0
 800b8ae:	b570      	push	{r4, r5, r6, lr}
 800b8b0:	4604      	mov	r4, r0
 800b8b2:	d04b      	beq.n	800b94c <_reclaim_reent+0xa4>
 800b8b4:	69c3      	ldr	r3, [r0, #28]
 800b8b6:	b143      	cbz	r3, 800b8ca <_reclaim_reent+0x22>
 800b8b8:	68db      	ldr	r3, [r3, #12]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d144      	bne.n	800b948 <_reclaim_reent+0xa0>
 800b8be:	69e3      	ldr	r3, [r4, #28]
 800b8c0:	6819      	ldr	r1, [r3, #0]
 800b8c2:	b111      	cbz	r1, 800b8ca <_reclaim_reent+0x22>
 800b8c4:	4620      	mov	r0, r4
 800b8c6:	f000 f88f 	bl	800b9e8 <_free_r>
 800b8ca:	6961      	ldr	r1, [r4, #20]
 800b8cc:	b111      	cbz	r1, 800b8d4 <_reclaim_reent+0x2c>
 800b8ce:	4620      	mov	r0, r4
 800b8d0:	f000 f88a 	bl	800b9e8 <_free_r>
 800b8d4:	69e1      	ldr	r1, [r4, #28]
 800b8d6:	b111      	cbz	r1, 800b8de <_reclaim_reent+0x36>
 800b8d8:	4620      	mov	r0, r4
 800b8da:	f000 f885 	bl	800b9e8 <_free_r>
 800b8de:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b8e0:	b111      	cbz	r1, 800b8e8 <_reclaim_reent+0x40>
 800b8e2:	4620      	mov	r0, r4
 800b8e4:	f000 f880 	bl	800b9e8 <_free_r>
 800b8e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b8ea:	b111      	cbz	r1, 800b8f2 <_reclaim_reent+0x4a>
 800b8ec:	4620      	mov	r0, r4
 800b8ee:	f000 f87b 	bl	800b9e8 <_free_r>
 800b8f2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b8f4:	b111      	cbz	r1, 800b8fc <_reclaim_reent+0x54>
 800b8f6:	4620      	mov	r0, r4
 800b8f8:	f000 f876 	bl	800b9e8 <_free_r>
 800b8fc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b8fe:	b111      	cbz	r1, 800b906 <_reclaim_reent+0x5e>
 800b900:	4620      	mov	r0, r4
 800b902:	f000 f871 	bl	800b9e8 <_free_r>
 800b906:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800b908:	b111      	cbz	r1, 800b910 <_reclaim_reent+0x68>
 800b90a:	4620      	mov	r0, r4
 800b90c:	f000 f86c 	bl	800b9e8 <_free_r>
 800b910:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800b912:	b111      	cbz	r1, 800b91a <_reclaim_reent+0x72>
 800b914:	4620      	mov	r0, r4
 800b916:	f000 f867 	bl	800b9e8 <_free_r>
 800b91a:	6a23      	ldr	r3, [r4, #32]
 800b91c:	b1b3      	cbz	r3, 800b94c <_reclaim_reent+0xa4>
 800b91e:	4620      	mov	r0, r4
 800b920:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b924:	4718      	bx	r3
 800b926:	5949      	ldr	r1, [r1, r5]
 800b928:	b941      	cbnz	r1, 800b93c <_reclaim_reent+0x94>
 800b92a:	3504      	adds	r5, #4
 800b92c:	69e3      	ldr	r3, [r4, #28]
 800b92e:	2d80      	cmp	r5, #128	; 0x80
 800b930:	68d9      	ldr	r1, [r3, #12]
 800b932:	d1f8      	bne.n	800b926 <_reclaim_reent+0x7e>
 800b934:	4620      	mov	r0, r4
 800b936:	f000 f857 	bl	800b9e8 <_free_r>
 800b93a:	e7c0      	b.n	800b8be <_reclaim_reent+0x16>
 800b93c:	680e      	ldr	r6, [r1, #0]
 800b93e:	4620      	mov	r0, r4
 800b940:	f000 f852 	bl	800b9e8 <_free_r>
 800b944:	4631      	mov	r1, r6
 800b946:	e7ef      	b.n	800b928 <_reclaim_reent+0x80>
 800b948:	2500      	movs	r5, #0
 800b94a:	e7ef      	b.n	800b92c <_reclaim_reent+0x84>
 800b94c:	bd70      	pop	{r4, r5, r6, pc}
 800b94e:	bf00      	nop
 800b950:	2000005c 	.word	0x2000005c

0800b954 <_sbrk_r>:
 800b954:	b538      	push	{r3, r4, r5, lr}
 800b956:	4d06      	ldr	r5, [pc, #24]	; (800b970 <_sbrk_r+0x1c>)
 800b958:	2300      	movs	r3, #0
 800b95a:	4604      	mov	r4, r0
 800b95c:	4608      	mov	r0, r1
 800b95e:	602b      	str	r3, [r5, #0]
 800b960:	f7f5 fd54 	bl	800140c <_sbrk>
 800b964:	1c43      	adds	r3, r0, #1
 800b966:	d102      	bne.n	800b96e <_sbrk_r+0x1a>
 800b968:	682b      	ldr	r3, [r5, #0]
 800b96a:	b103      	cbz	r3, 800b96e <_sbrk_r+0x1a>
 800b96c:	6023      	str	r3, [r4, #0]
 800b96e:	bd38      	pop	{r3, r4, r5, pc}
 800b970:	20019330 	.word	0x20019330

0800b974 <__errno>:
 800b974:	4b01      	ldr	r3, [pc, #4]	; (800b97c <__errno+0x8>)
 800b976:	6818      	ldr	r0, [r3, #0]
 800b978:	4770      	bx	lr
 800b97a:	bf00      	nop
 800b97c:	2000005c 	.word	0x2000005c

0800b980 <__libc_init_array>:
 800b980:	b570      	push	{r4, r5, r6, lr}
 800b982:	4d0d      	ldr	r5, [pc, #52]	; (800b9b8 <__libc_init_array+0x38>)
 800b984:	4c0d      	ldr	r4, [pc, #52]	; (800b9bc <__libc_init_array+0x3c>)
 800b986:	1b64      	subs	r4, r4, r5
 800b988:	10a4      	asrs	r4, r4, #2
 800b98a:	2600      	movs	r6, #0
 800b98c:	42a6      	cmp	r6, r4
 800b98e:	d109      	bne.n	800b9a4 <__libc_init_array+0x24>
 800b990:	4d0b      	ldr	r5, [pc, #44]	; (800b9c0 <__libc_init_array+0x40>)
 800b992:	4c0c      	ldr	r4, [pc, #48]	; (800b9c4 <__libc_init_array+0x44>)
 800b994:	f000 fbae 	bl	800c0f4 <_init>
 800b998:	1b64      	subs	r4, r4, r5
 800b99a:	10a4      	asrs	r4, r4, #2
 800b99c:	2600      	movs	r6, #0
 800b99e:	42a6      	cmp	r6, r4
 800b9a0:	d105      	bne.n	800b9ae <__libc_init_array+0x2e>
 800b9a2:	bd70      	pop	{r4, r5, r6, pc}
 800b9a4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9a8:	4798      	blx	r3
 800b9aa:	3601      	adds	r6, #1
 800b9ac:	e7ee      	b.n	800b98c <__libc_init_array+0xc>
 800b9ae:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9b2:	4798      	blx	r3
 800b9b4:	3601      	adds	r6, #1
 800b9b6:	e7f2      	b.n	800b99e <__libc_init_array+0x1e>
 800b9b8:	0800c750 	.word	0x0800c750
 800b9bc:	0800c750 	.word	0x0800c750
 800b9c0:	0800c750 	.word	0x0800c750
 800b9c4:	0800c754 	.word	0x0800c754

0800b9c8 <__retarget_lock_acquire_recursive>:
 800b9c8:	4770      	bx	lr

0800b9ca <__retarget_lock_release_recursive>:
 800b9ca:	4770      	bx	lr

0800b9cc <memcpy>:
 800b9cc:	440a      	add	r2, r1
 800b9ce:	4291      	cmp	r1, r2
 800b9d0:	f100 33ff 	add.w	r3, r0, #4294967295
 800b9d4:	d100      	bne.n	800b9d8 <memcpy+0xc>
 800b9d6:	4770      	bx	lr
 800b9d8:	b510      	push	{r4, lr}
 800b9da:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b9de:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b9e2:	4291      	cmp	r1, r2
 800b9e4:	d1f9      	bne.n	800b9da <memcpy+0xe>
 800b9e6:	bd10      	pop	{r4, pc}

0800b9e8 <_free_r>:
 800b9e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b9ea:	2900      	cmp	r1, #0
 800b9ec:	d044      	beq.n	800ba78 <_free_r+0x90>
 800b9ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9f2:	9001      	str	r0, [sp, #4]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	f1a1 0404 	sub.w	r4, r1, #4
 800b9fa:	bfb8      	it	lt
 800b9fc:	18e4      	addlt	r4, r4, r3
 800b9fe:	f7ff ff1f 	bl	800b840 <__malloc_lock>
 800ba02:	4a1e      	ldr	r2, [pc, #120]	; (800ba7c <_free_r+0x94>)
 800ba04:	9801      	ldr	r0, [sp, #4]
 800ba06:	6813      	ldr	r3, [r2, #0]
 800ba08:	b933      	cbnz	r3, 800ba18 <_free_r+0x30>
 800ba0a:	6063      	str	r3, [r4, #4]
 800ba0c:	6014      	str	r4, [r2, #0]
 800ba0e:	b003      	add	sp, #12
 800ba10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ba14:	f7ff bf1a 	b.w	800b84c <__malloc_unlock>
 800ba18:	42a3      	cmp	r3, r4
 800ba1a:	d908      	bls.n	800ba2e <_free_r+0x46>
 800ba1c:	6825      	ldr	r5, [r4, #0]
 800ba1e:	1961      	adds	r1, r4, r5
 800ba20:	428b      	cmp	r3, r1
 800ba22:	bf01      	itttt	eq
 800ba24:	6819      	ldreq	r1, [r3, #0]
 800ba26:	685b      	ldreq	r3, [r3, #4]
 800ba28:	1949      	addeq	r1, r1, r5
 800ba2a:	6021      	streq	r1, [r4, #0]
 800ba2c:	e7ed      	b.n	800ba0a <_free_r+0x22>
 800ba2e:	461a      	mov	r2, r3
 800ba30:	685b      	ldr	r3, [r3, #4]
 800ba32:	b10b      	cbz	r3, 800ba38 <_free_r+0x50>
 800ba34:	42a3      	cmp	r3, r4
 800ba36:	d9fa      	bls.n	800ba2e <_free_r+0x46>
 800ba38:	6811      	ldr	r1, [r2, #0]
 800ba3a:	1855      	adds	r5, r2, r1
 800ba3c:	42a5      	cmp	r5, r4
 800ba3e:	d10b      	bne.n	800ba58 <_free_r+0x70>
 800ba40:	6824      	ldr	r4, [r4, #0]
 800ba42:	4421      	add	r1, r4
 800ba44:	1854      	adds	r4, r2, r1
 800ba46:	42a3      	cmp	r3, r4
 800ba48:	6011      	str	r1, [r2, #0]
 800ba4a:	d1e0      	bne.n	800ba0e <_free_r+0x26>
 800ba4c:	681c      	ldr	r4, [r3, #0]
 800ba4e:	685b      	ldr	r3, [r3, #4]
 800ba50:	6053      	str	r3, [r2, #4]
 800ba52:	440c      	add	r4, r1
 800ba54:	6014      	str	r4, [r2, #0]
 800ba56:	e7da      	b.n	800ba0e <_free_r+0x26>
 800ba58:	d902      	bls.n	800ba60 <_free_r+0x78>
 800ba5a:	230c      	movs	r3, #12
 800ba5c:	6003      	str	r3, [r0, #0]
 800ba5e:	e7d6      	b.n	800ba0e <_free_r+0x26>
 800ba60:	6825      	ldr	r5, [r4, #0]
 800ba62:	1961      	adds	r1, r4, r5
 800ba64:	428b      	cmp	r3, r1
 800ba66:	bf04      	itt	eq
 800ba68:	6819      	ldreq	r1, [r3, #0]
 800ba6a:	685b      	ldreq	r3, [r3, #4]
 800ba6c:	6063      	str	r3, [r4, #4]
 800ba6e:	bf04      	itt	eq
 800ba70:	1949      	addeq	r1, r1, r5
 800ba72:	6021      	streq	r1, [r4, #0]
 800ba74:	6054      	str	r4, [r2, #4]
 800ba76:	e7ca      	b.n	800ba0e <_free_r+0x26>
 800ba78:	b003      	add	sp, #12
 800ba7a:	bd30      	pop	{r4, r5, pc}
 800ba7c:	200191f0 	.word	0x200191f0

0800ba80 <__ssputs_r>:
 800ba80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba84:	688e      	ldr	r6, [r1, #8]
 800ba86:	461f      	mov	r7, r3
 800ba88:	42be      	cmp	r6, r7
 800ba8a:	680b      	ldr	r3, [r1, #0]
 800ba8c:	4682      	mov	sl, r0
 800ba8e:	460c      	mov	r4, r1
 800ba90:	4690      	mov	r8, r2
 800ba92:	d82c      	bhi.n	800baee <__ssputs_r+0x6e>
 800ba94:	898a      	ldrh	r2, [r1, #12]
 800ba96:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ba9a:	d026      	beq.n	800baea <__ssputs_r+0x6a>
 800ba9c:	6965      	ldr	r5, [r4, #20]
 800ba9e:	6909      	ldr	r1, [r1, #16]
 800baa0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800baa4:	eba3 0901 	sub.w	r9, r3, r1
 800baa8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800baac:	1c7b      	adds	r3, r7, #1
 800baae:	444b      	add	r3, r9
 800bab0:	106d      	asrs	r5, r5, #1
 800bab2:	429d      	cmp	r5, r3
 800bab4:	bf38      	it	cc
 800bab6:	461d      	movcc	r5, r3
 800bab8:	0553      	lsls	r3, r2, #21
 800baba:	d527      	bpl.n	800bb0c <__ssputs_r+0x8c>
 800babc:	4629      	mov	r1, r5
 800babe:	f7ff fe3f 	bl	800b740 <_malloc_r>
 800bac2:	4606      	mov	r6, r0
 800bac4:	b360      	cbz	r0, 800bb20 <__ssputs_r+0xa0>
 800bac6:	6921      	ldr	r1, [r4, #16]
 800bac8:	464a      	mov	r2, r9
 800baca:	f7ff ff7f 	bl	800b9cc <memcpy>
 800bace:	89a3      	ldrh	r3, [r4, #12]
 800bad0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bad4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bad8:	81a3      	strh	r3, [r4, #12]
 800bada:	6126      	str	r6, [r4, #16]
 800badc:	6165      	str	r5, [r4, #20]
 800bade:	444e      	add	r6, r9
 800bae0:	eba5 0509 	sub.w	r5, r5, r9
 800bae4:	6026      	str	r6, [r4, #0]
 800bae6:	60a5      	str	r5, [r4, #8]
 800bae8:	463e      	mov	r6, r7
 800baea:	42be      	cmp	r6, r7
 800baec:	d900      	bls.n	800baf0 <__ssputs_r+0x70>
 800baee:	463e      	mov	r6, r7
 800baf0:	6820      	ldr	r0, [r4, #0]
 800baf2:	4632      	mov	r2, r6
 800baf4:	4641      	mov	r1, r8
 800baf6:	f000 faab 	bl	800c050 <memmove>
 800bafa:	68a3      	ldr	r3, [r4, #8]
 800bafc:	1b9b      	subs	r3, r3, r6
 800bafe:	60a3      	str	r3, [r4, #8]
 800bb00:	6823      	ldr	r3, [r4, #0]
 800bb02:	4433      	add	r3, r6
 800bb04:	6023      	str	r3, [r4, #0]
 800bb06:	2000      	movs	r0, #0
 800bb08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb0c:	462a      	mov	r2, r5
 800bb0e:	f000 fab9 	bl	800c084 <_realloc_r>
 800bb12:	4606      	mov	r6, r0
 800bb14:	2800      	cmp	r0, #0
 800bb16:	d1e0      	bne.n	800bada <__ssputs_r+0x5a>
 800bb18:	6921      	ldr	r1, [r4, #16]
 800bb1a:	4650      	mov	r0, sl
 800bb1c:	f7ff ff64 	bl	800b9e8 <_free_r>
 800bb20:	230c      	movs	r3, #12
 800bb22:	f8ca 3000 	str.w	r3, [sl]
 800bb26:	89a3      	ldrh	r3, [r4, #12]
 800bb28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb2c:	81a3      	strh	r3, [r4, #12]
 800bb2e:	f04f 30ff 	mov.w	r0, #4294967295
 800bb32:	e7e9      	b.n	800bb08 <__ssputs_r+0x88>

0800bb34 <_svfiprintf_r>:
 800bb34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb38:	4698      	mov	r8, r3
 800bb3a:	898b      	ldrh	r3, [r1, #12]
 800bb3c:	061b      	lsls	r3, r3, #24
 800bb3e:	b09d      	sub	sp, #116	; 0x74
 800bb40:	4607      	mov	r7, r0
 800bb42:	460d      	mov	r5, r1
 800bb44:	4614      	mov	r4, r2
 800bb46:	d50e      	bpl.n	800bb66 <_svfiprintf_r+0x32>
 800bb48:	690b      	ldr	r3, [r1, #16]
 800bb4a:	b963      	cbnz	r3, 800bb66 <_svfiprintf_r+0x32>
 800bb4c:	2140      	movs	r1, #64	; 0x40
 800bb4e:	f7ff fdf7 	bl	800b740 <_malloc_r>
 800bb52:	6028      	str	r0, [r5, #0]
 800bb54:	6128      	str	r0, [r5, #16]
 800bb56:	b920      	cbnz	r0, 800bb62 <_svfiprintf_r+0x2e>
 800bb58:	230c      	movs	r3, #12
 800bb5a:	603b      	str	r3, [r7, #0]
 800bb5c:	f04f 30ff 	mov.w	r0, #4294967295
 800bb60:	e0d0      	b.n	800bd04 <_svfiprintf_r+0x1d0>
 800bb62:	2340      	movs	r3, #64	; 0x40
 800bb64:	616b      	str	r3, [r5, #20]
 800bb66:	2300      	movs	r3, #0
 800bb68:	9309      	str	r3, [sp, #36]	; 0x24
 800bb6a:	2320      	movs	r3, #32
 800bb6c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bb70:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb74:	2330      	movs	r3, #48	; 0x30
 800bb76:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800bd1c <_svfiprintf_r+0x1e8>
 800bb7a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bb7e:	f04f 0901 	mov.w	r9, #1
 800bb82:	4623      	mov	r3, r4
 800bb84:	469a      	mov	sl, r3
 800bb86:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb8a:	b10a      	cbz	r2, 800bb90 <_svfiprintf_r+0x5c>
 800bb8c:	2a25      	cmp	r2, #37	; 0x25
 800bb8e:	d1f9      	bne.n	800bb84 <_svfiprintf_r+0x50>
 800bb90:	ebba 0b04 	subs.w	fp, sl, r4
 800bb94:	d00b      	beq.n	800bbae <_svfiprintf_r+0x7a>
 800bb96:	465b      	mov	r3, fp
 800bb98:	4622      	mov	r2, r4
 800bb9a:	4629      	mov	r1, r5
 800bb9c:	4638      	mov	r0, r7
 800bb9e:	f7ff ff6f 	bl	800ba80 <__ssputs_r>
 800bba2:	3001      	adds	r0, #1
 800bba4:	f000 80a9 	beq.w	800bcfa <_svfiprintf_r+0x1c6>
 800bba8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bbaa:	445a      	add	r2, fp
 800bbac:	9209      	str	r2, [sp, #36]	; 0x24
 800bbae:	f89a 3000 	ldrb.w	r3, [sl]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	f000 80a1 	beq.w	800bcfa <_svfiprintf_r+0x1c6>
 800bbb8:	2300      	movs	r3, #0
 800bbba:	f04f 32ff 	mov.w	r2, #4294967295
 800bbbe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bbc2:	f10a 0a01 	add.w	sl, sl, #1
 800bbc6:	9304      	str	r3, [sp, #16]
 800bbc8:	9307      	str	r3, [sp, #28]
 800bbca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bbce:	931a      	str	r3, [sp, #104]	; 0x68
 800bbd0:	4654      	mov	r4, sl
 800bbd2:	2205      	movs	r2, #5
 800bbd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbd8:	4850      	ldr	r0, [pc, #320]	; (800bd1c <_svfiprintf_r+0x1e8>)
 800bbda:	f7f4 fb01 	bl	80001e0 <memchr>
 800bbde:	9a04      	ldr	r2, [sp, #16]
 800bbe0:	b9d8      	cbnz	r0, 800bc1a <_svfiprintf_r+0xe6>
 800bbe2:	06d0      	lsls	r0, r2, #27
 800bbe4:	bf44      	itt	mi
 800bbe6:	2320      	movmi	r3, #32
 800bbe8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bbec:	0711      	lsls	r1, r2, #28
 800bbee:	bf44      	itt	mi
 800bbf0:	232b      	movmi	r3, #43	; 0x2b
 800bbf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bbf6:	f89a 3000 	ldrb.w	r3, [sl]
 800bbfa:	2b2a      	cmp	r3, #42	; 0x2a
 800bbfc:	d015      	beq.n	800bc2a <_svfiprintf_r+0xf6>
 800bbfe:	9a07      	ldr	r2, [sp, #28]
 800bc00:	4654      	mov	r4, sl
 800bc02:	2000      	movs	r0, #0
 800bc04:	f04f 0c0a 	mov.w	ip, #10
 800bc08:	4621      	mov	r1, r4
 800bc0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc0e:	3b30      	subs	r3, #48	; 0x30
 800bc10:	2b09      	cmp	r3, #9
 800bc12:	d94d      	bls.n	800bcb0 <_svfiprintf_r+0x17c>
 800bc14:	b1b0      	cbz	r0, 800bc44 <_svfiprintf_r+0x110>
 800bc16:	9207      	str	r2, [sp, #28]
 800bc18:	e014      	b.n	800bc44 <_svfiprintf_r+0x110>
 800bc1a:	eba0 0308 	sub.w	r3, r0, r8
 800bc1e:	fa09 f303 	lsl.w	r3, r9, r3
 800bc22:	4313      	orrs	r3, r2
 800bc24:	9304      	str	r3, [sp, #16]
 800bc26:	46a2      	mov	sl, r4
 800bc28:	e7d2      	b.n	800bbd0 <_svfiprintf_r+0x9c>
 800bc2a:	9b03      	ldr	r3, [sp, #12]
 800bc2c:	1d19      	adds	r1, r3, #4
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	9103      	str	r1, [sp, #12]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	bfbb      	ittet	lt
 800bc36:	425b      	neglt	r3, r3
 800bc38:	f042 0202 	orrlt.w	r2, r2, #2
 800bc3c:	9307      	strge	r3, [sp, #28]
 800bc3e:	9307      	strlt	r3, [sp, #28]
 800bc40:	bfb8      	it	lt
 800bc42:	9204      	strlt	r2, [sp, #16]
 800bc44:	7823      	ldrb	r3, [r4, #0]
 800bc46:	2b2e      	cmp	r3, #46	; 0x2e
 800bc48:	d10c      	bne.n	800bc64 <_svfiprintf_r+0x130>
 800bc4a:	7863      	ldrb	r3, [r4, #1]
 800bc4c:	2b2a      	cmp	r3, #42	; 0x2a
 800bc4e:	d134      	bne.n	800bcba <_svfiprintf_r+0x186>
 800bc50:	9b03      	ldr	r3, [sp, #12]
 800bc52:	1d1a      	adds	r2, r3, #4
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	9203      	str	r2, [sp, #12]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	bfb8      	it	lt
 800bc5c:	f04f 33ff 	movlt.w	r3, #4294967295
 800bc60:	3402      	adds	r4, #2
 800bc62:	9305      	str	r3, [sp, #20]
 800bc64:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800bd2c <_svfiprintf_r+0x1f8>
 800bc68:	7821      	ldrb	r1, [r4, #0]
 800bc6a:	2203      	movs	r2, #3
 800bc6c:	4650      	mov	r0, sl
 800bc6e:	f7f4 fab7 	bl	80001e0 <memchr>
 800bc72:	b138      	cbz	r0, 800bc84 <_svfiprintf_r+0x150>
 800bc74:	9b04      	ldr	r3, [sp, #16]
 800bc76:	eba0 000a 	sub.w	r0, r0, sl
 800bc7a:	2240      	movs	r2, #64	; 0x40
 800bc7c:	4082      	lsls	r2, r0
 800bc7e:	4313      	orrs	r3, r2
 800bc80:	3401      	adds	r4, #1
 800bc82:	9304      	str	r3, [sp, #16]
 800bc84:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc88:	4825      	ldr	r0, [pc, #148]	; (800bd20 <_svfiprintf_r+0x1ec>)
 800bc8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bc8e:	2206      	movs	r2, #6
 800bc90:	f7f4 faa6 	bl	80001e0 <memchr>
 800bc94:	2800      	cmp	r0, #0
 800bc96:	d038      	beq.n	800bd0a <_svfiprintf_r+0x1d6>
 800bc98:	4b22      	ldr	r3, [pc, #136]	; (800bd24 <_svfiprintf_r+0x1f0>)
 800bc9a:	bb1b      	cbnz	r3, 800bce4 <_svfiprintf_r+0x1b0>
 800bc9c:	9b03      	ldr	r3, [sp, #12]
 800bc9e:	3307      	adds	r3, #7
 800bca0:	f023 0307 	bic.w	r3, r3, #7
 800bca4:	3308      	adds	r3, #8
 800bca6:	9303      	str	r3, [sp, #12]
 800bca8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcaa:	4433      	add	r3, r6
 800bcac:	9309      	str	r3, [sp, #36]	; 0x24
 800bcae:	e768      	b.n	800bb82 <_svfiprintf_r+0x4e>
 800bcb0:	fb0c 3202 	mla	r2, ip, r2, r3
 800bcb4:	460c      	mov	r4, r1
 800bcb6:	2001      	movs	r0, #1
 800bcb8:	e7a6      	b.n	800bc08 <_svfiprintf_r+0xd4>
 800bcba:	2300      	movs	r3, #0
 800bcbc:	3401      	adds	r4, #1
 800bcbe:	9305      	str	r3, [sp, #20]
 800bcc0:	4619      	mov	r1, r3
 800bcc2:	f04f 0c0a 	mov.w	ip, #10
 800bcc6:	4620      	mov	r0, r4
 800bcc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bccc:	3a30      	subs	r2, #48	; 0x30
 800bcce:	2a09      	cmp	r2, #9
 800bcd0:	d903      	bls.n	800bcda <_svfiprintf_r+0x1a6>
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d0c6      	beq.n	800bc64 <_svfiprintf_r+0x130>
 800bcd6:	9105      	str	r1, [sp, #20]
 800bcd8:	e7c4      	b.n	800bc64 <_svfiprintf_r+0x130>
 800bcda:	fb0c 2101 	mla	r1, ip, r1, r2
 800bcde:	4604      	mov	r4, r0
 800bce0:	2301      	movs	r3, #1
 800bce2:	e7f0      	b.n	800bcc6 <_svfiprintf_r+0x192>
 800bce4:	ab03      	add	r3, sp, #12
 800bce6:	9300      	str	r3, [sp, #0]
 800bce8:	462a      	mov	r2, r5
 800bcea:	4b0f      	ldr	r3, [pc, #60]	; (800bd28 <_svfiprintf_r+0x1f4>)
 800bcec:	a904      	add	r1, sp, #16
 800bcee:	4638      	mov	r0, r7
 800bcf0:	f3af 8000 	nop.w
 800bcf4:	1c42      	adds	r2, r0, #1
 800bcf6:	4606      	mov	r6, r0
 800bcf8:	d1d6      	bne.n	800bca8 <_svfiprintf_r+0x174>
 800bcfa:	89ab      	ldrh	r3, [r5, #12]
 800bcfc:	065b      	lsls	r3, r3, #25
 800bcfe:	f53f af2d 	bmi.w	800bb5c <_svfiprintf_r+0x28>
 800bd02:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bd04:	b01d      	add	sp, #116	; 0x74
 800bd06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd0a:	ab03      	add	r3, sp, #12
 800bd0c:	9300      	str	r3, [sp, #0]
 800bd0e:	462a      	mov	r2, r5
 800bd10:	4b05      	ldr	r3, [pc, #20]	; (800bd28 <_svfiprintf_r+0x1f4>)
 800bd12:	a904      	add	r1, sp, #16
 800bd14:	4638      	mov	r0, r7
 800bd16:	f000 f879 	bl	800be0c <_printf_i>
 800bd1a:	e7eb      	b.n	800bcf4 <_svfiprintf_r+0x1c0>
 800bd1c:	0800c714 	.word	0x0800c714
 800bd20:	0800c71e 	.word	0x0800c71e
 800bd24:	00000000 	.word	0x00000000
 800bd28:	0800ba81 	.word	0x0800ba81
 800bd2c:	0800c71a 	.word	0x0800c71a

0800bd30 <_printf_common>:
 800bd30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd34:	4616      	mov	r6, r2
 800bd36:	4699      	mov	r9, r3
 800bd38:	688a      	ldr	r2, [r1, #8]
 800bd3a:	690b      	ldr	r3, [r1, #16]
 800bd3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bd40:	4293      	cmp	r3, r2
 800bd42:	bfb8      	it	lt
 800bd44:	4613      	movlt	r3, r2
 800bd46:	6033      	str	r3, [r6, #0]
 800bd48:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bd4c:	4607      	mov	r7, r0
 800bd4e:	460c      	mov	r4, r1
 800bd50:	b10a      	cbz	r2, 800bd56 <_printf_common+0x26>
 800bd52:	3301      	adds	r3, #1
 800bd54:	6033      	str	r3, [r6, #0]
 800bd56:	6823      	ldr	r3, [r4, #0]
 800bd58:	0699      	lsls	r1, r3, #26
 800bd5a:	bf42      	ittt	mi
 800bd5c:	6833      	ldrmi	r3, [r6, #0]
 800bd5e:	3302      	addmi	r3, #2
 800bd60:	6033      	strmi	r3, [r6, #0]
 800bd62:	6825      	ldr	r5, [r4, #0]
 800bd64:	f015 0506 	ands.w	r5, r5, #6
 800bd68:	d106      	bne.n	800bd78 <_printf_common+0x48>
 800bd6a:	f104 0a19 	add.w	sl, r4, #25
 800bd6e:	68e3      	ldr	r3, [r4, #12]
 800bd70:	6832      	ldr	r2, [r6, #0]
 800bd72:	1a9b      	subs	r3, r3, r2
 800bd74:	42ab      	cmp	r3, r5
 800bd76:	dc26      	bgt.n	800bdc6 <_printf_common+0x96>
 800bd78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bd7c:	1e13      	subs	r3, r2, #0
 800bd7e:	6822      	ldr	r2, [r4, #0]
 800bd80:	bf18      	it	ne
 800bd82:	2301      	movne	r3, #1
 800bd84:	0692      	lsls	r2, r2, #26
 800bd86:	d42b      	bmi.n	800bde0 <_printf_common+0xb0>
 800bd88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bd8c:	4649      	mov	r1, r9
 800bd8e:	4638      	mov	r0, r7
 800bd90:	47c0      	blx	r8
 800bd92:	3001      	adds	r0, #1
 800bd94:	d01e      	beq.n	800bdd4 <_printf_common+0xa4>
 800bd96:	6823      	ldr	r3, [r4, #0]
 800bd98:	6922      	ldr	r2, [r4, #16]
 800bd9a:	f003 0306 	and.w	r3, r3, #6
 800bd9e:	2b04      	cmp	r3, #4
 800bda0:	bf02      	ittt	eq
 800bda2:	68e5      	ldreq	r5, [r4, #12]
 800bda4:	6833      	ldreq	r3, [r6, #0]
 800bda6:	1aed      	subeq	r5, r5, r3
 800bda8:	68a3      	ldr	r3, [r4, #8]
 800bdaa:	bf0c      	ite	eq
 800bdac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bdb0:	2500      	movne	r5, #0
 800bdb2:	4293      	cmp	r3, r2
 800bdb4:	bfc4      	itt	gt
 800bdb6:	1a9b      	subgt	r3, r3, r2
 800bdb8:	18ed      	addgt	r5, r5, r3
 800bdba:	2600      	movs	r6, #0
 800bdbc:	341a      	adds	r4, #26
 800bdbe:	42b5      	cmp	r5, r6
 800bdc0:	d11a      	bne.n	800bdf8 <_printf_common+0xc8>
 800bdc2:	2000      	movs	r0, #0
 800bdc4:	e008      	b.n	800bdd8 <_printf_common+0xa8>
 800bdc6:	2301      	movs	r3, #1
 800bdc8:	4652      	mov	r2, sl
 800bdca:	4649      	mov	r1, r9
 800bdcc:	4638      	mov	r0, r7
 800bdce:	47c0      	blx	r8
 800bdd0:	3001      	adds	r0, #1
 800bdd2:	d103      	bne.n	800bddc <_printf_common+0xac>
 800bdd4:	f04f 30ff 	mov.w	r0, #4294967295
 800bdd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bddc:	3501      	adds	r5, #1
 800bdde:	e7c6      	b.n	800bd6e <_printf_common+0x3e>
 800bde0:	18e1      	adds	r1, r4, r3
 800bde2:	1c5a      	adds	r2, r3, #1
 800bde4:	2030      	movs	r0, #48	; 0x30
 800bde6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bdea:	4422      	add	r2, r4
 800bdec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bdf0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bdf4:	3302      	adds	r3, #2
 800bdf6:	e7c7      	b.n	800bd88 <_printf_common+0x58>
 800bdf8:	2301      	movs	r3, #1
 800bdfa:	4622      	mov	r2, r4
 800bdfc:	4649      	mov	r1, r9
 800bdfe:	4638      	mov	r0, r7
 800be00:	47c0      	blx	r8
 800be02:	3001      	adds	r0, #1
 800be04:	d0e6      	beq.n	800bdd4 <_printf_common+0xa4>
 800be06:	3601      	adds	r6, #1
 800be08:	e7d9      	b.n	800bdbe <_printf_common+0x8e>
	...

0800be0c <_printf_i>:
 800be0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800be10:	7e0f      	ldrb	r7, [r1, #24]
 800be12:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800be14:	2f78      	cmp	r7, #120	; 0x78
 800be16:	4691      	mov	r9, r2
 800be18:	4680      	mov	r8, r0
 800be1a:	460c      	mov	r4, r1
 800be1c:	469a      	mov	sl, r3
 800be1e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800be22:	d807      	bhi.n	800be34 <_printf_i+0x28>
 800be24:	2f62      	cmp	r7, #98	; 0x62
 800be26:	d80a      	bhi.n	800be3e <_printf_i+0x32>
 800be28:	2f00      	cmp	r7, #0
 800be2a:	f000 80d4 	beq.w	800bfd6 <_printf_i+0x1ca>
 800be2e:	2f58      	cmp	r7, #88	; 0x58
 800be30:	f000 80c0 	beq.w	800bfb4 <_printf_i+0x1a8>
 800be34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800be38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800be3c:	e03a      	b.n	800beb4 <_printf_i+0xa8>
 800be3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800be42:	2b15      	cmp	r3, #21
 800be44:	d8f6      	bhi.n	800be34 <_printf_i+0x28>
 800be46:	a101      	add	r1, pc, #4	; (adr r1, 800be4c <_printf_i+0x40>)
 800be48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800be4c:	0800bea5 	.word	0x0800bea5
 800be50:	0800beb9 	.word	0x0800beb9
 800be54:	0800be35 	.word	0x0800be35
 800be58:	0800be35 	.word	0x0800be35
 800be5c:	0800be35 	.word	0x0800be35
 800be60:	0800be35 	.word	0x0800be35
 800be64:	0800beb9 	.word	0x0800beb9
 800be68:	0800be35 	.word	0x0800be35
 800be6c:	0800be35 	.word	0x0800be35
 800be70:	0800be35 	.word	0x0800be35
 800be74:	0800be35 	.word	0x0800be35
 800be78:	0800bfbd 	.word	0x0800bfbd
 800be7c:	0800bee5 	.word	0x0800bee5
 800be80:	0800bf77 	.word	0x0800bf77
 800be84:	0800be35 	.word	0x0800be35
 800be88:	0800be35 	.word	0x0800be35
 800be8c:	0800bfdf 	.word	0x0800bfdf
 800be90:	0800be35 	.word	0x0800be35
 800be94:	0800bee5 	.word	0x0800bee5
 800be98:	0800be35 	.word	0x0800be35
 800be9c:	0800be35 	.word	0x0800be35
 800bea0:	0800bf7f 	.word	0x0800bf7f
 800bea4:	682b      	ldr	r3, [r5, #0]
 800bea6:	1d1a      	adds	r2, r3, #4
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	602a      	str	r2, [r5, #0]
 800beac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800beb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800beb4:	2301      	movs	r3, #1
 800beb6:	e09f      	b.n	800bff8 <_printf_i+0x1ec>
 800beb8:	6820      	ldr	r0, [r4, #0]
 800beba:	682b      	ldr	r3, [r5, #0]
 800bebc:	0607      	lsls	r7, r0, #24
 800bebe:	f103 0104 	add.w	r1, r3, #4
 800bec2:	6029      	str	r1, [r5, #0]
 800bec4:	d501      	bpl.n	800beca <_printf_i+0xbe>
 800bec6:	681e      	ldr	r6, [r3, #0]
 800bec8:	e003      	b.n	800bed2 <_printf_i+0xc6>
 800beca:	0646      	lsls	r6, r0, #25
 800becc:	d5fb      	bpl.n	800bec6 <_printf_i+0xba>
 800bece:	f9b3 6000 	ldrsh.w	r6, [r3]
 800bed2:	2e00      	cmp	r6, #0
 800bed4:	da03      	bge.n	800bede <_printf_i+0xd2>
 800bed6:	232d      	movs	r3, #45	; 0x2d
 800bed8:	4276      	negs	r6, r6
 800beda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bede:	485a      	ldr	r0, [pc, #360]	; (800c048 <_printf_i+0x23c>)
 800bee0:	230a      	movs	r3, #10
 800bee2:	e012      	b.n	800bf0a <_printf_i+0xfe>
 800bee4:	682b      	ldr	r3, [r5, #0]
 800bee6:	6820      	ldr	r0, [r4, #0]
 800bee8:	1d19      	adds	r1, r3, #4
 800beea:	6029      	str	r1, [r5, #0]
 800beec:	0605      	lsls	r5, r0, #24
 800beee:	d501      	bpl.n	800bef4 <_printf_i+0xe8>
 800bef0:	681e      	ldr	r6, [r3, #0]
 800bef2:	e002      	b.n	800befa <_printf_i+0xee>
 800bef4:	0641      	lsls	r1, r0, #25
 800bef6:	d5fb      	bpl.n	800bef0 <_printf_i+0xe4>
 800bef8:	881e      	ldrh	r6, [r3, #0]
 800befa:	4853      	ldr	r0, [pc, #332]	; (800c048 <_printf_i+0x23c>)
 800befc:	2f6f      	cmp	r7, #111	; 0x6f
 800befe:	bf0c      	ite	eq
 800bf00:	2308      	moveq	r3, #8
 800bf02:	230a      	movne	r3, #10
 800bf04:	2100      	movs	r1, #0
 800bf06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bf0a:	6865      	ldr	r5, [r4, #4]
 800bf0c:	60a5      	str	r5, [r4, #8]
 800bf0e:	2d00      	cmp	r5, #0
 800bf10:	bfa2      	ittt	ge
 800bf12:	6821      	ldrge	r1, [r4, #0]
 800bf14:	f021 0104 	bicge.w	r1, r1, #4
 800bf18:	6021      	strge	r1, [r4, #0]
 800bf1a:	b90e      	cbnz	r6, 800bf20 <_printf_i+0x114>
 800bf1c:	2d00      	cmp	r5, #0
 800bf1e:	d04b      	beq.n	800bfb8 <_printf_i+0x1ac>
 800bf20:	4615      	mov	r5, r2
 800bf22:	fbb6 f1f3 	udiv	r1, r6, r3
 800bf26:	fb03 6711 	mls	r7, r3, r1, r6
 800bf2a:	5dc7      	ldrb	r7, [r0, r7]
 800bf2c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bf30:	4637      	mov	r7, r6
 800bf32:	42bb      	cmp	r3, r7
 800bf34:	460e      	mov	r6, r1
 800bf36:	d9f4      	bls.n	800bf22 <_printf_i+0x116>
 800bf38:	2b08      	cmp	r3, #8
 800bf3a:	d10b      	bne.n	800bf54 <_printf_i+0x148>
 800bf3c:	6823      	ldr	r3, [r4, #0]
 800bf3e:	07de      	lsls	r6, r3, #31
 800bf40:	d508      	bpl.n	800bf54 <_printf_i+0x148>
 800bf42:	6923      	ldr	r3, [r4, #16]
 800bf44:	6861      	ldr	r1, [r4, #4]
 800bf46:	4299      	cmp	r1, r3
 800bf48:	bfde      	ittt	le
 800bf4a:	2330      	movle	r3, #48	; 0x30
 800bf4c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bf50:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bf54:	1b52      	subs	r2, r2, r5
 800bf56:	6122      	str	r2, [r4, #16]
 800bf58:	f8cd a000 	str.w	sl, [sp]
 800bf5c:	464b      	mov	r3, r9
 800bf5e:	aa03      	add	r2, sp, #12
 800bf60:	4621      	mov	r1, r4
 800bf62:	4640      	mov	r0, r8
 800bf64:	f7ff fee4 	bl	800bd30 <_printf_common>
 800bf68:	3001      	adds	r0, #1
 800bf6a:	d14a      	bne.n	800c002 <_printf_i+0x1f6>
 800bf6c:	f04f 30ff 	mov.w	r0, #4294967295
 800bf70:	b004      	add	sp, #16
 800bf72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf76:	6823      	ldr	r3, [r4, #0]
 800bf78:	f043 0320 	orr.w	r3, r3, #32
 800bf7c:	6023      	str	r3, [r4, #0]
 800bf7e:	4833      	ldr	r0, [pc, #204]	; (800c04c <_printf_i+0x240>)
 800bf80:	2778      	movs	r7, #120	; 0x78
 800bf82:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bf86:	6823      	ldr	r3, [r4, #0]
 800bf88:	6829      	ldr	r1, [r5, #0]
 800bf8a:	061f      	lsls	r7, r3, #24
 800bf8c:	f851 6b04 	ldr.w	r6, [r1], #4
 800bf90:	d402      	bmi.n	800bf98 <_printf_i+0x18c>
 800bf92:	065f      	lsls	r7, r3, #25
 800bf94:	bf48      	it	mi
 800bf96:	b2b6      	uxthmi	r6, r6
 800bf98:	07df      	lsls	r7, r3, #31
 800bf9a:	bf48      	it	mi
 800bf9c:	f043 0320 	orrmi.w	r3, r3, #32
 800bfa0:	6029      	str	r1, [r5, #0]
 800bfa2:	bf48      	it	mi
 800bfa4:	6023      	strmi	r3, [r4, #0]
 800bfa6:	b91e      	cbnz	r6, 800bfb0 <_printf_i+0x1a4>
 800bfa8:	6823      	ldr	r3, [r4, #0]
 800bfaa:	f023 0320 	bic.w	r3, r3, #32
 800bfae:	6023      	str	r3, [r4, #0]
 800bfb0:	2310      	movs	r3, #16
 800bfb2:	e7a7      	b.n	800bf04 <_printf_i+0xf8>
 800bfb4:	4824      	ldr	r0, [pc, #144]	; (800c048 <_printf_i+0x23c>)
 800bfb6:	e7e4      	b.n	800bf82 <_printf_i+0x176>
 800bfb8:	4615      	mov	r5, r2
 800bfba:	e7bd      	b.n	800bf38 <_printf_i+0x12c>
 800bfbc:	682b      	ldr	r3, [r5, #0]
 800bfbe:	6826      	ldr	r6, [r4, #0]
 800bfc0:	6961      	ldr	r1, [r4, #20]
 800bfc2:	1d18      	adds	r0, r3, #4
 800bfc4:	6028      	str	r0, [r5, #0]
 800bfc6:	0635      	lsls	r5, r6, #24
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	d501      	bpl.n	800bfd0 <_printf_i+0x1c4>
 800bfcc:	6019      	str	r1, [r3, #0]
 800bfce:	e002      	b.n	800bfd6 <_printf_i+0x1ca>
 800bfd0:	0670      	lsls	r0, r6, #25
 800bfd2:	d5fb      	bpl.n	800bfcc <_printf_i+0x1c0>
 800bfd4:	8019      	strh	r1, [r3, #0]
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	6123      	str	r3, [r4, #16]
 800bfda:	4615      	mov	r5, r2
 800bfdc:	e7bc      	b.n	800bf58 <_printf_i+0x14c>
 800bfde:	682b      	ldr	r3, [r5, #0]
 800bfe0:	1d1a      	adds	r2, r3, #4
 800bfe2:	602a      	str	r2, [r5, #0]
 800bfe4:	681d      	ldr	r5, [r3, #0]
 800bfe6:	6862      	ldr	r2, [r4, #4]
 800bfe8:	2100      	movs	r1, #0
 800bfea:	4628      	mov	r0, r5
 800bfec:	f7f4 f8f8 	bl	80001e0 <memchr>
 800bff0:	b108      	cbz	r0, 800bff6 <_printf_i+0x1ea>
 800bff2:	1b40      	subs	r0, r0, r5
 800bff4:	6060      	str	r0, [r4, #4]
 800bff6:	6863      	ldr	r3, [r4, #4]
 800bff8:	6123      	str	r3, [r4, #16]
 800bffa:	2300      	movs	r3, #0
 800bffc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c000:	e7aa      	b.n	800bf58 <_printf_i+0x14c>
 800c002:	6923      	ldr	r3, [r4, #16]
 800c004:	462a      	mov	r2, r5
 800c006:	4649      	mov	r1, r9
 800c008:	4640      	mov	r0, r8
 800c00a:	47d0      	blx	sl
 800c00c:	3001      	adds	r0, #1
 800c00e:	d0ad      	beq.n	800bf6c <_printf_i+0x160>
 800c010:	6823      	ldr	r3, [r4, #0]
 800c012:	079b      	lsls	r3, r3, #30
 800c014:	d413      	bmi.n	800c03e <_printf_i+0x232>
 800c016:	68e0      	ldr	r0, [r4, #12]
 800c018:	9b03      	ldr	r3, [sp, #12]
 800c01a:	4298      	cmp	r0, r3
 800c01c:	bfb8      	it	lt
 800c01e:	4618      	movlt	r0, r3
 800c020:	e7a6      	b.n	800bf70 <_printf_i+0x164>
 800c022:	2301      	movs	r3, #1
 800c024:	4632      	mov	r2, r6
 800c026:	4649      	mov	r1, r9
 800c028:	4640      	mov	r0, r8
 800c02a:	47d0      	blx	sl
 800c02c:	3001      	adds	r0, #1
 800c02e:	d09d      	beq.n	800bf6c <_printf_i+0x160>
 800c030:	3501      	adds	r5, #1
 800c032:	68e3      	ldr	r3, [r4, #12]
 800c034:	9903      	ldr	r1, [sp, #12]
 800c036:	1a5b      	subs	r3, r3, r1
 800c038:	42ab      	cmp	r3, r5
 800c03a:	dcf2      	bgt.n	800c022 <_printf_i+0x216>
 800c03c:	e7eb      	b.n	800c016 <_printf_i+0x20a>
 800c03e:	2500      	movs	r5, #0
 800c040:	f104 0619 	add.w	r6, r4, #25
 800c044:	e7f5      	b.n	800c032 <_printf_i+0x226>
 800c046:	bf00      	nop
 800c048:	0800c725 	.word	0x0800c725
 800c04c:	0800c736 	.word	0x0800c736

0800c050 <memmove>:
 800c050:	4288      	cmp	r0, r1
 800c052:	b510      	push	{r4, lr}
 800c054:	eb01 0402 	add.w	r4, r1, r2
 800c058:	d902      	bls.n	800c060 <memmove+0x10>
 800c05a:	4284      	cmp	r4, r0
 800c05c:	4623      	mov	r3, r4
 800c05e:	d807      	bhi.n	800c070 <memmove+0x20>
 800c060:	1e43      	subs	r3, r0, #1
 800c062:	42a1      	cmp	r1, r4
 800c064:	d008      	beq.n	800c078 <memmove+0x28>
 800c066:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c06a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c06e:	e7f8      	b.n	800c062 <memmove+0x12>
 800c070:	4402      	add	r2, r0
 800c072:	4601      	mov	r1, r0
 800c074:	428a      	cmp	r2, r1
 800c076:	d100      	bne.n	800c07a <memmove+0x2a>
 800c078:	bd10      	pop	{r4, pc}
 800c07a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c07e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c082:	e7f7      	b.n	800c074 <memmove+0x24>

0800c084 <_realloc_r>:
 800c084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c088:	4680      	mov	r8, r0
 800c08a:	4614      	mov	r4, r2
 800c08c:	460e      	mov	r6, r1
 800c08e:	b921      	cbnz	r1, 800c09a <_realloc_r+0x16>
 800c090:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c094:	4611      	mov	r1, r2
 800c096:	f7ff bb53 	b.w	800b740 <_malloc_r>
 800c09a:	b92a      	cbnz	r2, 800c0a8 <_realloc_r+0x24>
 800c09c:	f7ff fca4 	bl	800b9e8 <_free_r>
 800c0a0:	4625      	mov	r5, r4
 800c0a2:	4628      	mov	r0, r5
 800c0a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0a8:	f000 f81b 	bl	800c0e2 <_malloc_usable_size_r>
 800c0ac:	4284      	cmp	r4, r0
 800c0ae:	4607      	mov	r7, r0
 800c0b0:	d802      	bhi.n	800c0b8 <_realloc_r+0x34>
 800c0b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c0b6:	d812      	bhi.n	800c0de <_realloc_r+0x5a>
 800c0b8:	4621      	mov	r1, r4
 800c0ba:	4640      	mov	r0, r8
 800c0bc:	f7ff fb40 	bl	800b740 <_malloc_r>
 800c0c0:	4605      	mov	r5, r0
 800c0c2:	2800      	cmp	r0, #0
 800c0c4:	d0ed      	beq.n	800c0a2 <_realloc_r+0x1e>
 800c0c6:	42bc      	cmp	r4, r7
 800c0c8:	4622      	mov	r2, r4
 800c0ca:	4631      	mov	r1, r6
 800c0cc:	bf28      	it	cs
 800c0ce:	463a      	movcs	r2, r7
 800c0d0:	f7ff fc7c 	bl	800b9cc <memcpy>
 800c0d4:	4631      	mov	r1, r6
 800c0d6:	4640      	mov	r0, r8
 800c0d8:	f7ff fc86 	bl	800b9e8 <_free_r>
 800c0dc:	e7e1      	b.n	800c0a2 <_realloc_r+0x1e>
 800c0de:	4635      	mov	r5, r6
 800c0e0:	e7df      	b.n	800c0a2 <_realloc_r+0x1e>

0800c0e2 <_malloc_usable_size_r>:
 800c0e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c0e6:	1f18      	subs	r0, r3, #4
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	bfbc      	itt	lt
 800c0ec:	580b      	ldrlt	r3, [r1, r0]
 800c0ee:	18c0      	addlt	r0, r0, r3
 800c0f0:	4770      	bx	lr
	...

0800c0f4 <_init>:
 800c0f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0f6:	bf00      	nop
 800c0f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0fa:	bc08      	pop	{r3}
 800c0fc:	469e      	mov	lr, r3
 800c0fe:	4770      	bx	lr

0800c100 <_fini>:
 800c100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c102:	bf00      	nop
 800c104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c106:	bc08      	pop	{r3}
 800c108:	469e      	mov	lr, r3
 800c10a:	4770      	bx	lr
